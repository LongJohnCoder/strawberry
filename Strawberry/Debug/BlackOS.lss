
BlackOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bd18  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000051c  20400000  0040bd18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002364  20400520  0040c238  0002051c  2**3
                  ALLOC
  3 .heap         00050004  20402884  0040e59c  0002051c  2**0
                  ALLOC
  4 .stack        00000400  20452888  0045e5a0  0002051c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020546  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002dc17  00000000  00000000  0002059f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005378  00000000  00000000  0004e1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00025aac  00000000  00000000  0005352e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff0  00000000  00000000  00078fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00006250  00000000  00000000  00079fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003f6c4  00000000  00000000  00080220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ba97  00000000  00000000  000bf8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0013c5a0  00000000  00000000  000db37b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003bb4  00000000  00000000  0021791c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 2c 45 20 ed 98 40 00 e9 98 40 00 0d 7e 40 00     .,E ..@...@..~@.
  400010:	d1 7c 40 00 35 7d 40 00 a5 7d 40 00 00 00 00 00     .|@.5}@..}@.....
	...
  40002c:	bd 7a 40 00 e9 98 40 00 00 00 00 00 51 7a 40 00     .z@...@.....Qz@.
  40003c:	39 86 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     9.@...@...@...@.
  40004c:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40005c:	e9 98 40 00 e9 98 40 00 00 00 00 00 31 02 40 00     ..@...@.....1.@.
  40006c:	e9 98 40 00 e9 98 40 00 71 7b 40 00 31 21 40 00     ..@...@.q{@.1!@.
  40007c:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40008c:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40009c:	7d 0d 40 00 19 19 40 00 e9 98 40 00 e9 98 40 00     }.@...@...@...@.
  4000ac:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  4000bc:	e9 98 40 00 e9 98 40 00 e9 98 40 00 c9 9a 40 00     ..@...@...@...@.
  4000cc:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  4000dc:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  4000ec:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  4000fc:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40010c:	e9 98 40 00 e9 98 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e9 98 40 00 e9 98 40 00 7d 26 40 00     ......@...@.}&@.
  40012c:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40013c:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40014c:	e9 98 40 00 e9 98 40 00 e9 98 40 00 e9 98 40 00     ..@...@...@...@.
  40015c:	e9 98 40 00 e9 98 40 00 e9 98 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400520 	.word	0x20400520
  400184:	00000000 	.word	0x00000000
  400188:	0040bd18 	.word	0x0040bd18

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040bd18 	.word	0x0040bd18
  4001c8:	20400524 	.word	0x20400524
  4001cc:	0040bd18 	.word	0x0040bd18
  4001d0:	00000000 	.word	0x00000000

004001d4 <board_button_config>:

//--------------------------------------------------------------------------------------------------//


void board_button_config(void)
{
  4001d4:	b510      	push	{r4, lr}
	clock_peripheral_clock_enable(ID_PIOA);
	
	gpio_set_pin_function(PIOA, 11, PERIPHERAL_FUNCTION_OFF);
  4001d6:	4c0e      	ldr	r4, [pc, #56]	; (400210 <board_button_config+0x3c>)
	clock_peripheral_clock_enable(ID_PIOA);
  4001d8:	200a      	movs	r0, #10
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <board_button_config+0x40>)
  4001dc:	4798      	blx	r3
	gpio_set_pin_function(PIOA, 11, PERIPHERAL_FUNCTION_OFF);
  4001de:	2204      	movs	r2, #4
  4001e0:	4620      	mov	r0, r4
  4001e2:	210b      	movs	r1, #11
  4001e4:	4b0c      	ldr	r3, [pc, #48]	; (400218 <board_button_config+0x44>)
  4001e6:	4798      	blx	r3
	gpio_set_pin_direction_input(PIOA, 11);
  4001e8:	4620      	mov	r0, r4
  4001ea:	210b      	movs	r1, #11
  4001ec:	4b0b      	ldr	r3, [pc, #44]	; (40021c <board_button_config+0x48>)
  4001ee:	4798      	blx	r3
	gpio_pullup_enable(PIOA, 11);
  4001f0:	4620      	mov	r0, r4
  4001f2:	210b      	movs	r1, #11
  4001f4:	4b0a      	ldr	r3, [pc, #40]	; (400220 <board_button_config+0x4c>)
  4001f6:	4798      	blx	r3
	gpio_debounce_filter_enable(PIOA, 11, 10);
  4001f8:	4620      	mov	r0, r4
  4001fa:	4a0a      	ldr	r2, [pc, #40]	; (400224 <board_button_config+0x50>)
  4001fc:	210b      	movs	r1, #11
  4001fe:	4b0a      	ldr	r3, [pc, #40]	; (400228 <board_button_config+0x54>)
  400200:	4798      	blx	r3
	
	gpio_set_interrupt_source(PIOA, 11, GPIO_FALLING_EDGE);
  400202:	4620      	mov	r0, r4
  400204:	2201      	movs	r2, #1
  400206:	210b      	movs	r1, #11
  400208:	4b08      	ldr	r3, [pc, #32]	; (40022c <board_button_config+0x58>)
	
	// Enable interrupt if user button reset should be enabled
	//gpio_interrupt_enable(PIOA, 11);
	//interrupt_enable_peripheral_interrupt(PIOA_IRQn, IRQ_LEVEL_3);
}
  40020a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_interrupt_source(PIOA, 11, GPIO_FALLING_EDGE);
  40020e:	4718      	bx	r3
  400210:	400e0e00 	.word	0x400e0e00
  400214:	00402405 	.word	0x00402405
  400218:	00402a1d 	.word	0x00402a1d
  40021c:	00402ac1 	.word	0x00402ac1
  400220:	00402bb9 	.word	0x00402bb9
  400224:	41200000 	.word	0x41200000
  400228:	00402b3d 	.word	0x00402b3d
  40022c:	00402be1 	.word	0x00402be1

00400230 <PIOA_Handler>:
//--------------------------------------------------------------------------------------------------//


void PIOA_Handler()
{
	gpio_get_pin_value_status_register(PIOA);
  400230:	4801      	ldr	r0, [pc, #4]	; (400238 <PIOA_Handler+0x8>)
  400232:	4b02      	ldr	r3, [pc, #8]	; (40023c <PIOA_Handler+0xc>)
  400234:	4718      	bx	r3
  400236:	bf00      	nop
  400238:	400e0e00 	.word	0x400e0e00
  40023c:	00402b39 	.word	0x00402b39

00400240 <blink_thread>:
	gpio_set_pin_function(PIOC, 8, PERIPHERAL_FUNCTION_OFF);
	gpio_set_pin_direction_output(PIOC, 8);
	
	while (1)
	{
		gpio_clear_pin_value(PIOC, 8);
  400240:	4c0c      	ldr	r4, [pc, #48]	; (400274 <blink_thread+0x34>)
	gpio_set_pin_function(PIOC, 8, PERIPHERAL_FUNCTION_OFF);
  400242:	2108      	movs	r1, #8
  400244:	480b      	ldr	r0, [pc, #44]	; (400274 <blink_thread+0x34>)
  400246:	2204      	movs	r2, #4
  400248:	4b0b      	ldr	r3, [pc, #44]	; (400278 <blink_thread+0x38>)
  40024a:	4d0c      	ldr	r5, [pc, #48]	; (40027c <blink_thread+0x3c>)
  40024c:	4e0c      	ldr	r6, [pc, #48]	; (400280 <blink_thread+0x40>)
{
  40024e:	b580      	push	{r7, lr}
	gpio_set_pin_function(PIOC, 8, PERIPHERAL_FUNCTION_OFF);
  400250:	4798      	blx	r3
	gpio_set_pin_direction_output(PIOC, 8);
  400252:	2108      	movs	r1, #8
  400254:	4620      	mov	r0, r4
  400256:	4b0b      	ldr	r3, [pc, #44]	; (400284 <blink_thread+0x44>)
  400258:	4f0b      	ldr	r7, [pc, #44]	; (400288 <blink_thread+0x48>)
  40025a:	4798      	blx	r3
		gpio_clear_pin_value(PIOC, 8);
  40025c:	2108      	movs	r1, #8
  40025e:	4620      	mov	r0, r4
  400260:	47b8      	blx	r7
		syscall_sleep(10);
  400262:	200a      	movs	r0, #10
  400264:	47a8      	blx	r5
		gpio_set_pin_value(PIOC, 8);
  400266:	4620      	mov	r0, r4
  400268:	2108      	movs	r1, #8
  40026a:	47b0      	blx	r6
		syscall_sleep(490);
  40026c:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
  400270:	47a8      	blx	r5
  400272:	e7f3      	b.n	40025c <blink_thread+0x1c>
  400274:	400e1200 	.word	0x400e1200
  400278:	00402a1d 	.word	0x00402a1d
  40027c:	00408935 	.word	0x00408935
  400280:	00402ae9 	.word	0x00402ae9
  400284:	00402a99 	.word	0x00402a99
  400288:	00402b11 	.word	0x00402b11

0040028c <board_sd_card_get_status>:

//--------------------------------------------------------------------------------------------------//


board_sd_status board_sd_card_get_status(void)
{
  40028c:	b508      	push	{r3, lr}
	uint32_t tmp = gpio_get_pin_value_status_register(PIOC);
  40028e:	4804      	ldr	r0, [pc, #16]	; (4002a0 <board_sd_card_get_status+0x14>)
  400290:	4b04      	ldr	r3, [pc, #16]	; (4002a4 <board_sd_card_get_status+0x18>)
  400292:	4798      	blx	r3

	if (tmp & (1 << 16))
  400294:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
	{
		return SD_DISCONNECTED;
	}
	return SD_CONNECTED;
}
  400298:	f3c0 4000 	ubfx	r0, r0, #16, #1
  40029c:	bd08      	pop	{r3, pc}
  40029e:	bf00      	nop
  4002a0:	400e1200 	.word	0x400e1200
  4002a4:	00402b39 	.word	0x00402b39

004002a8 <board_sd_card_config>:

//--------------------------------------------------------------------------------------------------//


void board_sd_card_config(void)
{
  4002a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_pin_function(PIOA, 25, PERIPHERAL_FUNCTION_D);
  4002ac:	4d17      	ldr	r5, [pc, #92]	; (40030c <board_sd_card_config+0x64>)
	clock_peripheral_clock_enable(ID_HSMCI);
  4002ae:	2012      	movs	r0, #18
  4002b0:	4f17      	ldr	r7, [pc, #92]	; (400310 <board_sd_card_config+0x68>)
	gpio_set_pin_function(PIOA, 25, PERIPHERAL_FUNCTION_D);
  4002b2:	4c18      	ldr	r4, [pc, #96]	; (400314 <board_sd_card_config+0x6c>)
	clock_peripheral_clock_enable(ID_HSMCI);
  4002b4:	47b8      	blx	r7
	gpio_set_pin_function(PIOA, 25, PERIPHERAL_FUNCTION_D);
  4002b6:	4628      	mov	r0, r5
  4002b8:	2203      	movs	r2, #3
  4002ba:	2119      	movs	r1, #25
	gpio_set_pin_function(PIOC, 16, PERIPHERAL_FUNCTION_OFF);
  4002bc:	4e16      	ldr	r6, [pc, #88]	; (400318 <board_sd_card_config+0x70>)
	gpio_set_pin_function(PIOA, 25, PERIPHERAL_FUNCTION_D);
  4002be:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 28, PERIPHERAL_FUNCTION_C);
  4002c0:	4628      	mov	r0, r5
  4002c2:	2202      	movs	r2, #2
  4002c4:	211c      	movs	r1, #28
  4002c6:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 30, PERIPHERAL_FUNCTION_C);
  4002c8:	4628      	mov	r0, r5
  4002ca:	2202      	movs	r2, #2
  4002cc:	211e      	movs	r1, #30
  4002ce:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 31, PERIPHERAL_FUNCTION_C);
  4002d0:	4628      	mov	r0, r5
  4002d2:	2202      	movs	r2, #2
  4002d4:	211f      	movs	r1, #31
  4002d6:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 26, PERIPHERAL_FUNCTION_C);
  4002d8:	4628      	mov	r0, r5
  4002da:	2202      	movs	r2, #2
  4002dc:	211a      	movs	r1, #26
  4002de:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 27, PERIPHERAL_FUNCTION_C);
  4002e0:	4628      	mov	r0, r5
  4002e2:	2202      	movs	r2, #2
  4002e4:	211b      	movs	r1, #27
  4002e6:	47a0      	blx	r4
	clock_peripheral_clock_enable(ID_PIOC);
  4002e8:	200c      	movs	r0, #12
  4002ea:	47b8      	blx	r7
	gpio_set_pin_function(PIOC, 16, PERIPHERAL_FUNCTION_OFF);
  4002ec:	4630      	mov	r0, r6
  4002ee:	2204      	movs	r2, #4
  4002f0:	2110      	movs	r1, #16
  4002f2:	47a0      	blx	r4
	gpio_set_pin_direction_input(PIOC, 16);
  4002f4:	4630      	mov	r0, r6
  4002f6:	2110      	movs	r1, #16
  4002f8:	4b08      	ldr	r3, [pc, #32]	; (40031c <board_sd_card_config+0x74>)
  4002fa:	4798      	blx	r3
	gpio_debounce_filter_enable(PIOC, 16, 5);
  4002fc:	4630      	mov	r0, r6
  4002fe:	4a08      	ldr	r2, [pc, #32]	; (400320 <board_sd_card_config+0x78>)
  400300:	2110      	movs	r1, #16
  400302:	4b08      	ldr	r3, [pc, #32]	; (400324 <board_sd_card_config+0x7c>)
	board_sd_card_clock_config();
	board_sd_card_port_config();
}
  400304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_debounce_filter_enable(PIOC, 16, 5);
  400308:	4718      	bx	r3
  40030a:	bf00      	nop
  40030c:	400e0e00 	.word	0x400e0e00
  400310:	00402405 	.word	0x00402405
  400314:	00402a1d 	.word	0x00402a1d
  400318:	400e1200 	.word	0x400e1200
  40031c:	00402ac1 	.word	0x00402ac1
  400320:	40a00000 	.word	0x40a00000
  400324:	00402b3d 	.word	0x00402b3d

00400328 <board_serial_dma_callback>:
// This function gets called when a DMA serial transaction has completed. The dma_buffer pointer
// points to data that is successfully transmitted. 

void board_serial_dma_callback(uint8_t channel)
{
	dma_buffer->dma_active = 0;
  400328:	4b09      	ldr	r3, [pc, #36]	; (400350 <board_serial_dma_callback+0x28>)
  40032a:	2200      	movs	r2, #0
	dma_buffer->position = 0;
	
	list_node_s* tmp = serial_queue.last;
  40032c:	4809      	ldr	r0, [pc, #36]	; (400354 <board_serial_dma_callback+0x2c>)
	dma_buffer->dma_active = 0;
  40032e:	681b      	ldr	r3, [r3, #0]
{
  400330:	b510      	push	{r4, lr}
	list_node_s* tmp = serial_queue.last;
  400332:	6844      	ldr	r4, [r0, #4]
	dma_buffer->dma_active = 0;
  400334:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	dma_buffer->position = 0;
  400338:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	if (tmp != NULL)
  40033c:	b13c      	cbz	r4, 40034e <board_serial_dma_callback+0x26>
	{
		list_remove_last(&serial_queue);
  40033e:	4b06      	ldr	r3, [pc, #24]	; (400358 <board_serial_dma_callback+0x30>)
  400340:	4798      	blx	r3
		list_insert_first(tmp, &running_queue);
  400342:	4620      	mov	r0, r4
  400344:	4905      	ldr	r1, [pc, #20]	; (40035c <board_serial_dma_callback+0x34>)
  400346:	4b06      	ldr	r3, [pc, #24]	; (400360 <board_serial_dma_callback+0x38>)
	}
}
  400348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		list_insert_first(tmp, &running_queue);
  40034c:	4718      	bx	r3
  40034e:	bd10      	pop	{r4, pc}
  400350:	2040053c 	.word	0x2040053c
  400354:	204027ec 	.word	0x204027ec
  400358:	00408201 	.word	0x00408201
  40035c:	20402848 	.word	0x20402848
  400360:	00407fb1 	.word	0x00407fb1

00400364 <board_serial_config>:
	gpio_set_pin_function(BOARD_SERIAL_TX_PORT, BOARD_SERIAL_TX_PIN, PERIPHERAL_FUNCTION_A);
  400364:	2200      	movs	r2, #0
  400366:	2115      	movs	r1, #21
  400368:	4828      	ldr	r0, [pc, #160]	; (40040c <board_serial_config+0xa8>)
{
  40036a:	b5f0      	push	{r4, r5, r6, r7, lr}
	gpio_set_pin_function(BOARD_SERIAL_TX_PORT, BOARD_SERIAL_TX_PIN, PERIPHERAL_FUNCTION_A);
  40036c:	4d28      	ldr	r5, [pc, #160]	; (400410 <board_serial_config+0xac>)
{
  40036e:	b087      	sub	sp, #28
{
	// Configure the timer interface (timer 0 channel 0) to overflow after 10 ms
	clock_peripheral_clock_enable(ID_TC0_CHANNEL0);
	
	timer_write_protection_disable(TC0);
	timer_capture_mode_config(TC0, TIMER_CHANNEL_0, TIMER_NONE, TIMER_NONE, TIMER_CAPTURE_MODE, 1, 0, 0, TIMER_INCREMENT_RISING_EDGE, TIMER_CLOCK_MCK_DIV_128);
  400370:	4614      	mov	r4, r2
	gpio_set_pin_function(BOARD_SERIAL_TX_PORT, BOARD_SERIAL_TX_PIN, PERIPHERAL_FUNCTION_A);
  400372:	47a8      	blx	r5
	gpio_set_pin_function(BOARD_SERIAL_RX_PORT, BOARD_SERIAL_RX_PIN, PERIPHERAL_FUNCTION_D);
  400374:	2203      	movs	r2, #3
  400376:	2104      	movs	r1, #4
  400378:	4826      	ldr	r0, [pc, #152]	; (400414 <board_serial_config+0xb0>)
  40037a:	47a8      	blx	r5
	clock_peripheral_clock_enable(ID_USART1);
  40037c:	4f26      	ldr	r7, [pc, #152]	; (400418 <board_serial_config+0xb4>)
  40037e:	200e      	movs	r0, #14
	usart_mode_config(USART1, USART_STOP_BIT_1, USART_PARITY_NO, USART_MODE_ASYNCHRONOUS, BOARD_SERIAL_CD_VALUE);
  400380:	4d26      	ldr	r5, [pc, #152]	; (40041c <board_serial_config+0xb8>)
	clock_peripheral_clock_enable(ID_USART1);
  400382:	47b8      	blx	r7
	usart_mode_config(USART1, USART_STOP_BIT_1, USART_PARITY_NO, USART_MODE_ASYNCHRONOUS, BOARD_SERIAL_CD_VALUE);
  400384:	2228      	movs	r2, #40	; 0x28
  400386:	4623      	mov	r3, r4
  400388:	4628      	mov	r0, r5
  40038a:	9200      	str	r2, [sp, #0]
  40038c:	4621      	mov	r1, r4
  40038e:	2204      	movs	r2, #4
  400390:	4e23      	ldr	r6, [pc, #140]	; (400420 <board_serial_config+0xbc>)
  400392:	47b0      	blx	r6
	usart_interrupt_enable(USART1, USART_IRQ_RX_READY);
  400394:	4b23      	ldr	r3, [pc, #140]	; (400424 <board_serial_config+0xc0>)
  400396:	4628      	mov	r0, r5
  400398:	2101      	movs	r1, #1
  40039a:	4798      	blx	r3
	timer_write_protection_disable(TC0);
  40039c:	f5a5 35e0 	sub.w	r5, r5, #114688	; 0x1c000
	interrupt_enable_peripheral_interrupt(USART1_IRQn, IRQ_LEVEL_6);
  4003a0:	2106      	movs	r1, #6
  4003a2:	4e21      	ldr	r6, [pc, #132]	; (400428 <board_serial_config+0xc4>)
  4003a4:	200e      	movs	r0, #14
  4003a6:	47b0      	blx	r6
	clock_peripheral_clock_enable(ID_TC0_CHANNEL0);
  4003a8:	2017      	movs	r0, #23
  4003aa:	47b8      	blx	r7
	timer_write_protection_disable(TC0);
  4003ac:	4628      	mov	r0, r5
  4003ae:	4b1f      	ldr	r3, [pc, #124]	; (40042c <board_serial_config+0xc8>)
	timer_capture_mode_config(TC0, TIMER_CHANNEL_0, TIMER_NONE, TIMER_NONE, TIMER_CAPTURE_MODE, 1, 0, 0, TIMER_INCREMENT_RISING_EDGE, TIMER_CLOCK_MCK_DIV_128);
  4003b0:	2701      	movs	r7, #1
	timer_write_protection_disable(TC0);
  4003b2:	4798      	blx	r3
	timer_capture_mode_config(TC0, TIMER_CHANNEL_0, TIMER_NONE, TIMER_NONE, TIMER_CAPTURE_MODE, 1, 0, 0, TIMER_INCREMENT_RISING_EDGE, TIMER_CLOCK_MCK_DIV_128);
  4003b4:	2303      	movs	r3, #3
  4003b6:	4628      	mov	r0, r5
  4003b8:	4622      	mov	r2, r4
  4003ba:	9305      	str	r3, [sp, #20]
  4003bc:	4621      	mov	r1, r4
  4003be:	4623      	mov	r3, r4
  4003c0:	9404      	str	r4, [sp, #16]
  4003c2:	9403      	str	r4, [sp, #12]
  4003c4:	9402      	str	r4, [sp, #8]
  4003c6:	e88d 0090 	stmia.w	sp, {r4, r7}
  4003ca:	4f19      	ldr	r7, [pc, #100]	; (400430 <board_serial_config+0xcc>)
  4003cc:	47b8      	blx	r7
	timer_set_compare_c(TC0, TIMER_CHANNEL_0, 58595);
  4003ce:	4621      	mov	r1, r4
  4003d0:	4628      	mov	r0, r5
  4003d2:	f24e 42e3 	movw	r2, #58595	; 0xe4e3
  4003d6:	4b17      	ldr	r3, [pc, #92]	; (400434 <board_serial_config+0xd0>)
  4003d8:	4798      	blx	r3
	timer_interrupt_enable(TC0, TIMER_CHANNEL_0, TIMER_INTERRUPT_C_COMPARE);
  4003da:	4628      	mov	r0, r5
  4003dc:	4621      	mov	r1, r4
  4003de:	2210      	movs	r2, #16
  4003e0:	4b15      	ldr	r3, [pc, #84]	; (400438 <board_serial_config+0xd4>)
  4003e2:	4798      	blx	r3
	
	interrupt_enable_peripheral_interrupt(TC0_IRQn, IRQ_LEVEL_6);
  4003e4:	2106      	movs	r1, #6
  4003e6:	2017      	movs	r0, #23
  4003e8:	47b0      	blx	r6
	
	dma_buffer = &buffer_b;
  4003ea:	4b14      	ldr	r3, [pc, #80]	; (40043c <board_serial_config+0xd8>)
  4003ec:	1d19      	adds	r1, r3, #4
	current_buffer = &buffer_a;
  4003ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
	
	current_buffer->dma_active = 0;
  4003f2:	f883 480e 	strb.w	r4, [r3, #2062]	; 0x80e
	dma_buffer = &buffer_b;
  4003f6:	6019      	str	r1, [r3, #0]
	dma_buffer->dma_active = 0;
  4003f8:	f883 4406 	strb.w	r4, [r3, #1030]	; 0x406
	current_buffer = &buffer_a;
  4003fc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	
	current_buffer->position = 0;
  400400:	f8a3 480c 	strh.w	r4, [r3, #2060]	; 0x80c
	dma_buffer->position = 0;
  400404:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
}
  400408:	b007      	add	sp, #28
  40040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40040c:	400e0e00 	.word	0x400e0e00
  400410:	00402a1d 	.word	0x00402a1d
  400414:	400e1000 	.word	0x400e1000
  400418:	00402405 	.word	0x00402405
  40041c:	40028000 	.word	0x40028000
  400420:	00403489 	.word	0x00403489
  400424:	00403531 	.word	0x00403531
  400428:	00403145 	.word	0x00403145
  40042c:	004033ad 	.word	0x004033ad
  400430:	0040342d 	.word	0x0040342d
  400434:	004033d5 	.word	0x004033d5
  400438:	00403405 	.word	0x00403405
  40043c:	2040053c 	.word	0x2040053c

00400440 <board_serial_write>:
	usart_write(USART1, data);
  400440:	4601      	mov	r1, r0
  400442:	4b01      	ldr	r3, [pc, #4]	; (400448 <board_serial_write+0x8>)
  400444:	4801      	ldr	r0, [pc, #4]	; (40044c <board_serial_write+0xc>)
  400446:	4718      	bx	r3
  400448:	00403555 	.word	0x00403555
  40044c:	40028000 	.word	0x40028000

00400450 <board_serial_dma_flush_buffer>:
{	
  400450:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_desc.channel = BOARD_SERIAL_DMA_CHANNEL;
  400452:	2305      	movs	r3, #5
{	
  400454:	b089      	sub	sp, #36	; 0x24
	dma_desc.peripheral_id = XDMAC_CC_PERID_USART1_TX_Val;
  400456:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
  40045a:	4f2c      	ldr	r7, [pc, #176]	; (40050c <board_serial_dma_flush_buffer+0xbc>)
  40045c:	2600      	movs	r6, #0
{	
  40045e:	4605      	mov	r5, r0
  400460:	460c      	mov	r4, r1
	dma_desc.destination_pointer = (uint32_t *)&(((Usart *)(USART1))->US_THR);
  400462:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 400528 <board_serial_dma_flush_buffer+0xd8>
	dma_channel_set_callback(BOARD_SERIAL_DMA_CHANNEL, board_serial_dma_callback);
  400466:	4618      	mov	r0, r3
	dma_desc.size = size;
  400468:	9103      	str	r1, [sp, #12]
	dma_desc.channel = BOARD_SERIAL_DMA_CHANNEL;
  40046a:	f88d 3010 	strb.w	r3, [sp, #16]
	dma_channel_set_callback(BOARD_SERIAL_DMA_CHANNEL, board_serial_dma_callback);
  40046e:	4928      	ldr	r1, [pc, #160]	; (400510 <board_serial_dma_flush_buffer+0xc0>)
  400470:	4b28      	ldr	r3, [pc, #160]	; (400514 <board_serial_dma_flush_buffer+0xc4>)
	dma_desc.peripheral_id = XDMAC_CC_PERID_USART1_TX_Val;
  400472:	f8cd 7011 	str.w	r7, [sp, #17]
  400476:	f8cd 6015 	str.w	r6, [sp, #21]
  40047a:	f8cd 2019 	str.w	r2, [sp, #25]
	dma_desc.source_pointer = (uint32_t *)source_buffer;
  40047e:	9501      	str	r5, [sp, #4]
	dma_desc.destination_pointer = (uint32_t *)&(((Usart *)(USART1))->US_THR);
  400480:	f8cd e008 	str.w	lr, [sp, #8]
	dma_channel_set_callback(BOARD_SERIAL_DMA_CHANNEL, board_serial_dma_callback);
  400484:	4798      	blx	r3
	SCB_CleanDCache_by_Addr(cache_addr, size + 32);
  400486:	f104 0320 	add.w	r3, r4, #32
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40048a:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
  40048e:	42b3      	cmp	r3, r6
  400490:	dd08      	ble.n	4004a4 <board_serial_dma_flush_buffer+0x54>
  400492:	f025 0520 	bic.w	r5, r5, #32
      SCB->DCCMVAC = op_addr;
  400496:	4920      	ldr	r1, [pc, #128]	; (400518 <board_serial_dma_flush_buffer+0xc8>)
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
  400498:	3b20      	subs	r3, #32
      SCB->DCCMVAC = op_addr;
  40049a:	f8c1 5268 	str.w	r5, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  40049e:	3520      	adds	r5, #32
    while (op_size > 0) {
  4004a0:	2b00      	cmp	r3, #0
  4004a2:	dcf9      	bgt.n	400498 <board_serial_dma_flush_buffer+0x48>
  4004a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4004a8:	f3bf 8f6f 	isb	sy
     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4004ac:	4c1a      	ldr	r4, [pc, #104]	; (400518 <board_serial_dma_flush_buffer+0xc8>)
  4004ae:	2300      	movs	r3, #0
  4004b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4004b4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  4004b8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  4004bc:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  4004c0:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4004c4:	f3c3 334e 	ubfx	r3, r3, #13, #15
  4004c8:	07b7      	lsls	r7, r6, #30
  4004ca:	015d      	lsls	r5, r3, #5
  4004cc:	ea05 000e 	and.w	r0, r5, lr
{	
  4004d0:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4004d2:	4632      	mov	r2, r6
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  4004d4:	ea41 0300 	orr.w	r3, r1, r0
      } while (ways-- != 0U);
  4004d8:	3a01      	subs	r2, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  4004da:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  4004de:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
      } while (ways-- != 0U);
  4004e2:	1c53      	adds	r3, r2, #1
  4004e4:	d1f6      	bne.n	4004d4 <board_serial_dma_flush_buffer+0x84>
  4004e6:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  4004e8:	f115 0f20 	cmn.w	r5, #32
  4004ec:	d1ee      	bne.n	4004cc <board_serial_dma_flush_buffer+0x7c>
  4004ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4004f2:	f3bf 8f6f 	isb	sy
	dma_buffer->dma_active = 1;
  4004f6:	4b09      	ldr	r3, [pc, #36]	; (40051c <board_serial_dma_flush_buffer+0xcc>)
  4004f8:	2401      	movs	r4, #1
	dma_setup_transaction(XDMAC, &dma_desc);
  4004fa:	a901      	add	r1, sp, #4
  4004fc:	4808      	ldr	r0, [pc, #32]	; (400520 <board_serial_dma_flush_buffer+0xd0>)
	dma_buffer->dma_active = 1;
  4004fe:	681a      	ldr	r2, [r3, #0]
	dma_setup_transaction(XDMAC, &dma_desc);
  400500:	4b08      	ldr	r3, [pc, #32]	; (400524 <board_serial_dma_flush_buffer+0xd4>)
	dma_buffer->dma_active = 1;
  400502:	f882 4402 	strb.w	r4, [r2, #1026]	; 0x402
	dma_setup_transaction(XDMAC, &dma_desc);
  400506:	4798      	blx	r3
}
  400508:	b009      	add	sp, #36	; 0x24
  40050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40050c:	01010009 	.word	0x01010009
  400510:	00400329 	.word	0x00400329
  400514:	00402671 	.word	0x00402671
  400518:	e000ed00 	.word	0xe000ed00
  40051c:	2040053c 	.word	0x2040053c
  400520:	40078000 	.word	0x40078000
  400524:	0040250d 	.word	0x0040250d
  400528:	4002801c 	.word	0x4002801c

0040052c <board_serial_print>:
{
  40052c:	b40f      	push	{r0, r1, r2, r3}
  40052e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400532:	b085      	sub	sp, #20
	char* s = serial_print_buffer;
  400534:	4a9d      	ldr	r2, [pc, #628]	; (4007ac <board_serial_print+0x280>)
		*s = '0';
  400536:	2430      	movs	r4, #48	; 0x30
{
  400538:	ab0e      	add	r3, sp, #56	; 0x38
  40053a:	f853 1b04 	ldr.w	r1, [r3], #4
	va_start(ap, data);
  40053e:	9300      	str	r3, [sp, #0]
	while (*data) {
  400540:	780b      	ldrb	r3, [r1, #0]
  400542:	b13b      	cbz	r3, 400554 <board_serial_print+0x28>
		if (*data != '%') {
  400544:	2b25      	cmp	r3, #37	; 0x25
  400546:	d056      	beq.n	4005f6 <board_serial_print+0xca>
			data++;
  400548:	3101      	adds	r1, #1
			*s = *data;
  40054a:	f802 3b01 	strb.w	r3, [r2], #1
	while (*data) {
  40054e:	780b      	ldrb	r3, [r1, #0]
  400550:	2b00      	cmp	r3, #0
  400552:	d1f7      	bne.n	400544 <board_serial_print+0x18>
  400554:	4c95      	ldr	r4, [pc, #596]	; (4007ac <board_serial_print+0x280>)
//--------------------------------------------------------------------------------------------------//


void board_serial_timer_stop(void)
{
	timer_clock_disable(TC0, TIMER_CHANNEL_0);
  400556:	4e96      	ldr	r6, [pc, #600]	; (4007b0 <board_serial_print+0x284>)

void board_serial_dma_print(char* data)
{
	while (*data)
	{
		current_buffer->data[current_buffer->position] = *data;
  400558:	f5a4 6701 	sub.w	r7, r4, #2064	; 0x810
	timer_clock_disable(TC0, TIMER_CHANNEL_0);
  40055c:	4d95      	ldr	r5, [pc, #596]	; (4007b4 <board_serial_print+0x288>)
	*s = 0;
  40055e:	7013      	strb	r3, [r2, #0]
	while (*data)
  400560:	f814 8b01 	ldrb.w	r8, [r4], #1
  400564:	f1b8 0f00 	cmp.w	r8, #0
  400568:	d038      	beq.n	4005dc <board_serial_print+0xb0>
		current_buffer->data[current_buffer->position] = *data;
  40056a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
  40056e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
  400572:	b292      	uxth	r2, r2
  400574:	f803 8002 	strb.w	r8, [r3, r2]
		
		current_buffer->position++;
  400578:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
  40057c:	3201      	adds	r2, #1
  40057e:	b292      	uxth	r2, r2
  400580:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		data++;
		
		if (current_buffer->position == SERIAL_DMA_BUFFER_SIZE)
  400584:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  400588:	b29b      	uxth	r3, r3
  40058a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  40058e:	d1e7      	bne.n	400560 <board_serial_print+0x34>
	timer_clock_disable(TC0, TIMER_CHANNEL_0);
  400590:	2100      	movs	r1, #0
  400592:	4630      	mov	r0, r6
  400594:	47a8      	blx	r5
	while (dma_buffer->dma_active)
  400596:	683b      	ldr	r3, [r7, #0]
  400598:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
  40059c:	b16a      	cbz	r2, 4005ba <board_serial_print+0x8e>
  40059e:	f8df a224 	ldr.w	sl, [pc, #548]	; 4007c4 <board_serial_print+0x298>
  4005a2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 4007c8 <board_serial_print+0x29c>
		scheduler_current_thread_to_queue(&serial_queue);
  4005a6:	f8df 8224 	ldr.w	r8, [pc, #548]	; 4007cc <board_serial_print+0x2a0>
  4005aa:	4640      	mov	r0, r8
  4005ac:	47d0      	blx	sl
		reschedule();
  4005ae:	47c8      	blx	r9
	while (dma_buffer->dma_active)
  4005b0:	683b      	ldr	r3, [r7, #0]
  4005b2:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
  4005b6:	2a00      	cmp	r2, #0
  4005b8:	d1f7      	bne.n	4005aa <board_serial_print+0x7e>
	dma_buffer = current_buffer;
  4005ba:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
			
			// The buffer is filled up
			board_serial_dma_switch_buffers();
			
			// Start flushing the DMA buffer
			board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  4005be:	f8df 8210 	ldr.w	r8, [pc, #528]	; 4007d0 <board_serial_print+0x2a4>
  4005c2:	f8b2 1400 	ldrh.w	r1, [r2, #1024]	; 0x400
  4005c6:	4610      	mov	r0, r2
	dma_buffer = current_buffer;
  4005c8:	603a      	str	r2, [r7, #0]
			board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  4005ca:	b289      	uxth	r1, r1
	current_buffer = tmp;
  4005cc:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
			board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  4005d0:	47c0      	blx	r8
	while (*data)
  4005d2:	f814 8b01 	ldrb.w	r8, [r4], #1
  4005d6:	f1b8 0f00 	cmp.w	r8, #0
  4005da:	d1c6      	bne.n	40056a <board_serial_print+0x3e>
	timer_clock_enable(TC0, TIMER_CHANNEL_0);
  4005dc:	4641      	mov	r1, r8
  4005de:	4874      	ldr	r0, [pc, #464]	; (4007b0 <board_serial_print+0x284>)
  4005e0:	4b75      	ldr	r3, [pc, #468]	; (4007b8 <board_serial_print+0x28c>)
  4005e2:	4798      	blx	r3
	timer_software_trigger(TC0, TIMER_CHANNEL_0);
  4005e4:	4641      	mov	r1, r8
  4005e6:	4872      	ldr	r0, [pc, #456]	; (4007b0 <board_serial_print+0x284>)
  4005e8:	4b74      	ldr	r3, [pc, #464]	; (4007bc <board_serial_print+0x290>)
  4005ea:	4798      	blx	r3
}
  4005ec:	b005      	add	sp, #20
  4005ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f2:	b004      	add	sp, #16
  4005f4:	4770      	bx	lr
			switch (*data) {
  4005f6:	7848      	ldrb	r0, [r1, #1]
  4005f8:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
  4005fc:	2b12      	cmp	r3, #18
  4005fe:	f200 809d 	bhi.w	40073c <board_serial_print+0x210>
  400602:	e8df f003 	tbb	[pc, r3]
  400606:	2493      	.short	0x2493
  400608:	9b9b9b9b 	.word	0x9b9b9b9b
  40060c:	9b9b9b9b 	.word	0x9b9b9b9b
  400610:	9b9b9b9b 	.word	0x9b9b9b9b
  400614:	9b169b9b 	.word	0x9b169b9b
  400618:	0a          	.byte	0x0a
  400619:	00          	.byte	0x00
					unsigned valu = va_arg(ap, unsigned);
  40061a:	9b00      	ldr	r3, [sp, #0]
  40061c:	1d18      	adds	r0, r3, #4
  40061e:	681b      	ldr	r3, [r3, #0]
  400620:	9000      	str	r0, [sp, #0]
	if (u == 0) {
  400622:	2b00      	cmp	r3, #0
  400624:	f040 808e 	bne.w	400744 <board_serial_print+0x218>
		*s = '0';
  400628:	2301      	movs	r3, #1
  40062a:	7014      	strb	r4, [r2, #0]
					s += nc;
  40062c:	441a      	add	r2, r3
					data++;
  40062e:	3102      	adds	r1, #2
					break;
  400630:	e786      	b.n	400540 <board_serial_print+0x14>
					char *vals = va_arg(ap, char *);
  400632:	9d00      	ldr	r5, [sp, #0]
  400634:	6828      	ldr	r0, [r5, #0]
  400636:	3504      	adds	r5, #4
					while (*vals) {
  400638:	7803      	ldrb	r3, [r0, #0]
					char *vals = va_arg(ap, char *);
  40063a:	9500      	str	r5, [sp, #0]
					while (*vals) {
  40063c:	b12b      	cbz	r3, 40064a <board_serial_print+0x11e>
						*s = *vals;
  40063e:	f802 3b01 	strb.w	r3, [r2], #1
					while (*vals) {
  400642:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  400646:	2b00      	cmp	r3, #0
  400648:	d1f9      	bne.n	40063e <board_serial_print+0x112>
					data++;
  40064a:	3102      	adds	r1, #2
					break;
  40064c:	e778      	b.n	400540 <board_serial_print+0x14>
					int vali = va_arg(ap, int);
  40064e:	9b00      	ldr	r3, [sp, #0]
  400650:	1d18      	adds	r0, r3, #4
  400652:	681b      	ldr	r3, [r3, #0]
					if (vali < 0) {
  400654:	2b00      	cmp	r3, #0
					int vali = va_arg(ap, int);
  400656:	9000      	str	r0, [sp, #0]
					if (vali < 0) {
  400658:	f2c0 80bc 	blt.w	4007d4 <board_serial_print+0x2a8>
	if (u == 0) {
  40065c:	d0e4      	beq.n	400628 <board_serial_print+0xfc>
  40065e:	4d58      	ldr	r5, [pc, #352]	; (4007c0 <board_serial_print+0x294>)
  400660:	ae01      	add	r6, sp, #4
  400662:	f105 0728 	add.w	r7, r5, #40	; 0x28
			if (u >= s_value[i]) {
  400666:	f855 0b04 	ldr.w	r0, [r5], #4
  40066a:	4283      	cmp	r3, r0
  40066c:	f0c0 8124 	bcc.w	4008b8 <board_serial_print+0x38c>
				u -= s_value[i];
  400670:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400672:	4298      	cmp	r0, r3
  400674:	f200 8126 	bhi.w	4008c4 <board_serial_print+0x398>
				u -= s_value[i];
  400678:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40067a:	4298      	cmp	r0, r3
  40067c:	f200 8124 	bhi.w	4008c8 <board_serial_print+0x39c>
				u -= s_value[i];
  400680:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400682:	4298      	cmp	r0, r3
  400684:	f200 8122 	bhi.w	4008cc <board_serial_print+0x3a0>
				u -= s_value[i];
  400688:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40068a:	4298      	cmp	r0, r3
  40068c:	f200 8120 	bhi.w	4008d0 <board_serial_print+0x3a4>
				u -= s_value[i];
  400690:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400692:	4298      	cmp	r0, r3
  400694:	f200 811e 	bhi.w	4008d4 <board_serial_print+0x3a8>
				u -= s_value[i];
  400698:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40069a:	4298      	cmp	r0, r3
  40069c:	f200 811c 	bhi.w	4008d8 <board_serial_print+0x3ac>
				u -= s_value[i];
  4006a0:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4006a2:	4298      	cmp	r0, r3
  4006a4:	f200 811a 	bhi.w	4008dc <board_serial_print+0x3b0>
				u -= s_value[i];
  4006a8:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4006aa:	4298      	cmp	r0, r3
  4006ac:	f200 8118 	bhi.w	4008e0 <board_serial_print+0x3b4>
				u -= s_value[i];
  4006b0:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4006b2:	4298      	cmp	r0, r3
  4006b4:	f200 8116 	bhi.w	4008e4 <board_serial_print+0x3b8>
				u -= s_value[i];
  4006b8:	1a1b      	subs	r3, r3, r0
  4006ba:	203a      	movs	r0, #58	; 0x3a
	for (i = 0; i < 10; i++) {
  4006bc:	42af      	cmp	r7, r5
		tmp_buf[i] = m + '0';
  4006be:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < 10; i++) {
  4006c2:	d1d0      	bne.n	400666 <board_serial_print+0x13a>
		if (tmp_buf[i] != '0') {
  4006c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4006c8:	2b30      	cmp	r3, #48	; 0x30
  4006ca:	f040 811f 	bne.w	40090c <board_serial_print+0x3e0>
  4006ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4006d2:	2b30      	cmp	r3, #48	; 0x30
  4006d4:	f040 8178 	bne.w	4009c8 <board_serial_print+0x49c>
  4006d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
  4006dc:	2b30      	cmp	r3, #48	; 0x30
  4006de:	f040 8182 	bne.w	4009e6 <board_serial_print+0x4ba>
  4006e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4006e6:	2b30      	cmp	r3, #48	; 0x30
  4006e8:	f040 819b 	bne.w	400a22 <board_serial_print+0x4f6>
  4006ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4006f0:	2b30      	cmp	r3, #48	; 0x30
  4006f2:	f040 8187 	bne.w	400a04 <board_serial_print+0x4d8>
  4006f6:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4006fa:	2b30      	cmp	r3, #48	; 0x30
  4006fc:	f040 81be 	bne.w	400a7c <board_serial_print+0x550>
  400700:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400704:	2b30      	cmp	r3, #48	; 0x30
  400706:	f040 81aa 	bne.w	400a5e <board_serial_print+0x532>
  40070a:	f89d 300b 	ldrb.w	r3, [sp, #11]
  40070e:	2b30      	cmp	r3, #48	; 0x30
  400710:	f040 8196 	bne.w	400a40 <board_serial_print+0x514>
  400714:	f89d 000c 	ldrb.w	r0, [sp, #12]
  400718:	2830      	cmp	r0, #48	; 0x30
  40071a:	f040 81be 	bne.w	400a9a <board_serial_print+0x56e>
  40071e:	f89d 300d 	ldrb.w	r3, [sp, #13]
  400722:	2b30      	cmp	r3, #48	; 0x30
  400724:	f040 81bf 	bne.w	400aa6 <board_serial_print+0x57a>
  400728:	2300      	movs	r3, #0
  40072a:	e77f      	b.n	40062c <board_serial_print+0x100>
					char valch = va_arg(ap, int);
  40072c:	9b00      	ldr	r3, [sp, #0]
					data++;
  40072e:	3102      	adds	r1, #2
					char valch = va_arg(ap, int);
  400730:	1d18      	adds	r0, r3, #4
  400732:	681b      	ldr	r3, [r3, #0]
  400734:	9000      	str	r0, [sp, #0]
  400736:	f802 3b01 	strb.w	r3, [r2], #1
					break;
  40073a:	e701      	b.n	400540 <board_serial_print+0x14>
				data++;
  40073c:	3102      	adds	r1, #2
				*s = *data;
  40073e:	f802 0b01 	strb.w	r0, [r2], #1
  400742:	e6fd      	b.n	400540 <board_serial_print+0x14>
  400744:	4d1e      	ldr	r5, [pc, #120]	; (4007c0 <board_serial_print+0x294>)
  400746:	ae01      	add	r6, sp, #4
  400748:	f105 0728 	add.w	r7, r5, #40	; 0x28
			if (u >= s_value[i]) {
  40074c:	f855 0b04 	ldr.w	r0, [r5], #4
  400750:	4283      	cmp	r3, r0
  400752:	f0c0 80a1 	bcc.w	400898 <board_serial_print+0x36c>
				u -= s_value[i];
  400756:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400758:	4298      	cmp	r0, r3
  40075a:	f200 809f 	bhi.w	40089c <board_serial_print+0x370>
				u -= s_value[i];
  40075e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400760:	4298      	cmp	r0, r3
  400762:	f200 809d 	bhi.w	4008a0 <board_serial_print+0x374>
				u -= s_value[i];
  400766:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400768:	4298      	cmp	r0, r3
  40076a:	f200 809b 	bhi.w	4008a4 <board_serial_print+0x378>
				u -= s_value[i];
  40076e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400770:	4298      	cmp	r0, r3
  400772:	f200 8099 	bhi.w	4008a8 <board_serial_print+0x37c>
				u -= s_value[i];
  400776:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400778:	4298      	cmp	r0, r3
  40077a:	f200 8097 	bhi.w	4008ac <board_serial_print+0x380>
				u -= s_value[i];
  40077e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400780:	4298      	cmp	r0, r3
  400782:	f200 8095 	bhi.w	4008b0 <board_serial_print+0x384>
				u -= s_value[i];
  400786:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400788:	4298      	cmp	r0, r3
  40078a:	f200 8093 	bhi.w	4008b4 <board_serial_print+0x388>
				u -= s_value[i];
  40078e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400790:	4298      	cmp	r0, r3
  400792:	f200 8093 	bhi.w	4008bc <board_serial_print+0x390>
				u -= s_value[i];
  400796:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400798:	4298      	cmp	r0, r3
  40079a:	f200 8091 	bhi.w	4008c0 <board_serial_print+0x394>
				u -= s_value[i];
  40079e:	1a1b      	subs	r3, r3, r0
  4007a0:	203a      	movs	r0, #58	; 0x3a
	for (i = 0; i < 10; i++) {
  4007a2:	42af      	cmp	r7, r5
		tmp_buf[i] = m + '0';
  4007a4:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < 10; i++) {
  4007a8:	d1d0      	bne.n	40074c <board_serial_print+0x220>
  4007aa:	e78b      	b.n	4006c4 <board_serial_print+0x198>
  4007ac:	20400d4c 	.word	0x20400d4c
  4007b0:	4000c000 	.word	0x4000c000
  4007b4:	0040335d 	.word	0x0040335d
  4007b8:	00403335 	.word	0x00403335
  4007bc:	00403385 	.word	0x00403385
  4007c0:	0040ad44 	.word	0x0040ad44
  4007c4:	00408721 	.word	0x00408721
  4007c8:	00408389 	.word	0x00408389
  4007cc:	204027ec 	.word	0x204027ec
  4007d0:	00400451 	.word	0x00400451
  4007d4:	4dba      	ldr	r5, [pc, #744]	; (400ac0 <board_serial_print+0x594>)
						*s++ = '-';
  4007d6:	202d      	movs	r0, #45	; 0x2d
						nc = printu_override(s, -vali);
  4007d8:	425b      	negs	r3, r3
  4007da:	ae01      	add	r6, sp, #4
  4007dc:	f105 0728 	add.w	r7, r5, #40	; 0x28
						*s++ = '-';
  4007e0:	7010      	strb	r0, [r2, #0]
			if (u >= s_value[i]) {
  4007e2:	f855 0b04 	ldr.w	r0, [r5], #4
  4007e6:	4298      	cmp	r0, r3
  4007e8:	d87e      	bhi.n	4008e8 <board_serial_print+0x3bc>
				u -= s_value[i];
  4007ea:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4007ec:	4298      	cmp	r0, r3
  4007ee:	d87f      	bhi.n	4008f0 <board_serial_print+0x3c4>
				u -= s_value[i];
  4007f0:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4007f2:	4298      	cmp	r0, r3
  4007f4:	d87a      	bhi.n	4008ec <board_serial_print+0x3c0>
				u -= s_value[i];
  4007f6:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4007f8:	4298      	cmp	r0, r3
  4007fa:	d87f      	bhi.n	4008fc <board_serial_print+0x3d0>
				u -= s_value[i];
  4007fc:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4007fe:	4298      	cmp	r0, r3
  400800:	d87a      	bhi.n	4008f8 <board_serial_print+0x3cc>
				u -= s_value[i];
  400802:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400804:	4298      	cmp	r0, r3
  400806:	d875      	bhi.n	4008f4 <board_serial_print+0x3c8>
				u -= s_value[i];
  400808:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40080a:	4298      	cmp	r0, r3
  40080c:	d878      	bhi.n	400900 <board_serial_print+0x3d4>
				u -= s_value[i];
  40080e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400810:	4298      	cmp	r0, r3
  400812:	d877      	bhi.n	400904 <board_serial_print+0x3d8>
				u -= s_value[i];
  400814:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  400816:	4298      	cmp	r0, r3
  400818:	f200 80d4 	bhi.w	4009c4 <board_serial_print+0x498>
				u -= s_value[i];
  40081c:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40081e:	4298      	cmp	r0, r3
  400820:	d872      	bhi.n	400908 <board_serial_print+0x3dc>
				u -= s_value[i];
  400822:	1a1b      	subs	r3, r3, r0
  400824:	203a      	movs	r0, #58	; 0x3a
	for (i = 0; i < 10; i++) {
  400826:	42bd      	cmp	r5, r7
		tmp_buf[i] = m + '0';
  400828:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < 10; i++) {
  40082c:	d1d9      	bne.n	4007e2 <board_serial_print+0x2b6>
		if (tmp_buf[i] != '0') {
  40082e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400832:	2b30      	cmp	r3, #48	; 0x30
  400834:	f040 81fc 	bne.w	400c30 <board_serial_print+0x704>
  400838:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40083c:	2b30      	cmp	r3, #48	; 0x30
  40083e:	f040 81e8 	bne.w	400c12 <board_serial_print+0x6e6>
  400842:	f89d 3006 	ldrb.w	r3, [sp, #6]
  400846:	2b30      	cmp	r3, #48	; 0x30
  400848:	f040 81d4 	bne.w	400bf4 <board_serial_print+0x6c8>
  40084c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400850:	2b30      	cmp	r3, #48	; 0x30
  400852:	f040 81c0 	bne.w	400bd6 <board_serial_print+0x6aa>
  400856:	f89d 3008 	ldrb.w	r3, [sp, #8]
  40085a:	2b30      	cmp	r3, #48	; 0x30
  40085c:	f040 81ac 	bne.w	400bb8 <board_serial_print+0x68c>
  400860:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400864:	2b30      	cmp	r3, #48	; 0x30
  400866:	f040 8198 	bne.w	400b9a <board_serial_print+0x66e>
  40086a:	f89d 300a 	ldrb.w	r3, [sp, #10]
  40086e:	2b30      	cmp	r3, #48	; 0x30
  400870:	f040 8184 	bne.w	400b7c <board_serial_print+0x650>
  400874:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400878:	2b30      	cmp	r3, #48	; 0x30
  40087a:	f040 8123 	bne.w	400ac4 <board_serial_print+0x598>
  40087e:	f89d 000c 	ldrb.w	r0, [sp, #12]
  400882:	2830      	cmp	r0, #48	; 0x30
  400884:	f040 8115 	bne.w	400ab2 <board_serial_print+0x586>
  400888:	f89d 300d 	ldrb.w	r3, [sp, #13]
  40088c:	2b30      	cmp	r3, #48	; 0x30
  40088e:	f040 810d 	bne.w	400aac <board_serial_print+0x580>
  400892:	2300      	movs	r3, #0
						*s++ = '-';
  400894:	3201      	adds	r2, #1
  400896:	e6c9      	b.n	40062c <board_serial_print+0x100>
			if (u >= s_value[i]) {
  400898:	2030      	movs	r0, #48	; 0x30
  40089a:	e782      	b.n	4007a2 <board_serial_print+0x276>
  40089c:	2031      	movs	r0, #49	; 0x31
  40089e:	e780      	b.n	4007a2 <board_serial_print+0x276>
  4008a0:	2032      	movs	r0, #50	; 0x32
  4008a2:	e77e      	b.n	4007a2 <board_serial_print+0x276>
  4008a4:	2033      	movs	r0, #51	; 0x33
  4008a6:	e77c      	b.n	4007a2 <board_serial_print+0x276>
  4008a8:	2034      	movs	r0, #52	; 0x34
  4008aa:	e77a      	b.n	4007a2 <board_serial_print+0x276>
  4008ac:	2035      	movs	r0, #53	; 0x35
  4008ae:	e778      	b.n	4007a2 <board_serial_print+0x276>
  4008b0:	2036      	movs	r0, #54	; 0x36
  4008b2:	e776      	b.n	4007a2 <board_serial_print+0x276>
  4008b4:	2037      	movs	r0, #55	; 0x37
  4008b6:	e774      	b.n	4007a2 <board_serial_print+0x276>
  4008b8:	2030      	movs	r0, #48	; 0x30
  4008ba:	e6ff      	b.n	4006bc <board_serial_print+0x190>
  4008bc:	2038      	movs	r0, #56	; 0x38
  4008be:	e770      	b.n	4007a2 <board_serial_print+0x276>
  4008c0:	2039      	movs	r0, #57	; 0x39
  4008c2:	e76e      	b.n	4007a2 <board_serial_print+0x276>
  4008c4:	2031      	movs	r0, #49	; 0x31
  4008c6:	e6f9      	b.n	4006bc <board_serial_print+0x190>
  4008c8:	2032      	movs	r0, #50	; 0x32
  4008ca:	e6f7      	b.n	4006bc <board_serial_print+0x190>
  4008cc:	2033      	movs	r0, #51	; 0x33
  4008ce:	e6f5      	b.n	4006bc <board_serial_print+0x190>
  4008d0:	2034      	movs	r0, #52	; 0x34
  4008d2:	e6f3      	b.n	4006bc <board_serial_print+0x190>
  4008d4:	2035      	movs	r0, #53	; 0x35
  4008d6:	e6f1      	b.n	4006bc <board_serial_print+0x190>
  4008d8:	2036      	movs	r0, #54	; 0x36
  4008da:	e6ef      	b.n	4006bc <board_serial_print+0x190>
  4008dc:	2037      	movs	r0, #55	; 0x37
  4008de:	e6ed      	b.n	4006bc <board_serial_print+0x190>
  4008e0:	2038      	movs	r0, #56	; 0x38
  4008e2:	e6eb      	b.n	4006bc <board_serial_print+0x190>
  4008e4:	2039      	movs	r0, #57	; 0x39
  4008e6:	e6e9      	b.n	4006bc <board_serial_print+0x190>
  4008e8:	2030      	movs	r0, #48	; 0x30
  4008ea:	e79c      	b.n	400826 <board_serial_print+0x2fa>
  4008ec:	2032      	movs	r0, #50	; 0x32
  4008ee:	e79a      	b.n	400826 <board_serial_print+0x2fa>
  4008f0:	2031      	movs	r0, #49	; 0x31
  4008f2:	e798      	b.n	400826 <board_serial_print+0x2fa>
  4008f4:	2035      	movs	r0, #53	; 0x35
  4008f6:	e796      	b.n	400826 <board_serial_print+0x2fa>
  4008f8:	2034      	movs	r0, #52	; 0x34
  4008fa:	e794      	b.n	400826 <board_serial_print+0x2fa>
  4008fc:	2033      	movs	r0, #51	; 0x33
  4008fe:	e792      	b.n	400826 <board_serial_print+0x2fa>
  400900:	2036      	movs	r0, #54	; 0x36
  400902:	e790      	b.n	400826 <board_serial_print+0x2fa>
  400904:	2037      	movs	r0, #55	; 0x37
  400906:	e78e      	b.n	400826 <board_serial_print+0x2fa>
  400908:	2039      	movs	r0, #57	; 0x39
  40090a:	e78c      	b.n	400826 <board_serial_print+0x2fa>
		if (tmp_buf[i] != '0') {
  40090c:	f04f 0c08 	mov.w	ip, #8
  400910:	f04f 0e07 	mov.w	lr, #7
  400914:	2706      	movs	r7, #6
  400916:	2605      	movs	r6, #5
  400918:	2504      	movs	r5, #4
  40091a:	2003      	movs	r0, #3
  40091c:	f04f 0802 	mov.w	r8, #2
  400920:	f04f 0901 	mov.w	r9, #1
  400924:	f04f 0a00 	mov.w	sl, #0
		*s++ = tmp_buf[i];
  400928:	f10d 0b10 	add.w	fp, sp, #16
  40092c:	7013      	strb	r3, [r2, #0]
	for (; i < 10; i++) {
  40092e:	280a      	cmp	r0, #10
		*s++ = tmp_buf[i];
  400930:	44d9      	add	r9, fp
  400932:	44d8      	add	r8, fp
  400934:	f819 9c0c 	ldrb.w	r9, [r9, #-12]
  400938:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
  40093c:	f882 9001 	strb.w	r9, [r2, #1]
  400940:	7093      	strb	r3, [r2, #2]
	for (; i < 10; i++) {
  400942:	d031      	beq.n	4009a8 <board_serial_print+0x47c>
		*s++ = tmp_buf[i];
  400944:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400946:	2d09      	cmp	r5, #9
		*s++ = tmp_buf[i];
  400948:	4418      	add	r0, r3
  40094a:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
  40094e:	70d3      	strb	r3, [r2, #3]
	for (; i < 10; i++) {
  400950:	dc36      	bgt.n	4009c0 <board_serial_print+0x494>
		*s++ = tmp_buf[i];
  400952:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400954:	2e09      	cmp	r6, #9
		*s++ = tmp_buf[i];
  400956:	441d      	add	r5, r3
  400958:	f815 3c0c 	ldrb.w	r3, [r5, #-12]
  40095c:	7113      	strb	r3, [r2, #4]
	for (; i < 10; i++) {
  40095e:	dc2d      	bgt.n	4009bc <board_serial_print+0x490>
		*s++ = tmp_buf[i];
  400960:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400962:	2f09      	cmp	r7, #9
		*s++ = tmp_buf[i];
  400964:	441e      	add	r6, r3
  400966:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
  40096a:	7153      	strb	r3, [r2, #5]
	for (; i < 10; i++) {
  40096c:	dc24      	bgt.n	4009b8 <board_serial_print+0x48c>
		*s++ = tmp_buf[i];
  40096e:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400970:	f1be 0f09 	cmp.w	lr, #9
		*s++ = tmp_buf[i];
  400974:	441f      	add	r7, r3
  400976:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
  40097a:	7193      	strb	r3, [r2, #6]
	for (; i < 10; i++) {
  40097c:	dc1a      	bgt.n	4009b4 <board_serial_print+0x488>
		*s++ = tmp_buf[i];
  40097e:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400980:	f1bc 0f09 	cmp.w	ip, #9
		*s++ = tmp_buf[i];
  400984:	449e      	add	lr, r3
  400986:	f81e 3c0c 	ldrb.w	r3, [lr, #-12]
  40098a:	71d3      	strb	r3, [r2, #7]
	for (; i < 10; i++) {
  40098c:	dc10      	bgt.n	4009b0 <board_serial_print+0x484>
		*s++ = tmp_buf[i];
  40098e:	ab04      	add	r3, sp, #16
  400990:	449c      	add	ip, r3
  400992:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
  400996:	7213      	strb	r3, [r2, #8]
	for (; i < 10; i++) {
  400998:	f1ba 0f00 	cmp.w	sl, #0
  40099c:	d106      	bne.n	4009ac <board_serial_print+0x480>
		*s++ = tmp_buf[i];
  40099e:	f89d 000d 	ldrb.w	r0, [sp, #13]
  4009a2:	230a      	movs	r3, #10
  4009a4:	7250      	strb	r0, [r2, #9]
  4009a6:	e641      	b.n	40062c <board_serial_print+0x100>
	for (; i < 10; i++) {
  4009a8:	2303      	movs	r3, #3
  4009aa:	e63f      	b.n	40062c <board_serial_print+0x100>
  4009ac:	2309      	movs	r3, #9
  4009ae:	e63d      	b.n	40062c <board_serial_print+0x100>
  4009b0:	2308      	movs	r3, #8
  4009b2:	e63b      	b.n	40062c <board_serial_print+0x100>
  4009b4:	2307      	movs	r3, #7
  4009b6:	e639      	b.n	40062c <board_serial_print+0x100>
  4009b8:	2306      	movs	r3, #6
  4009ba:	e637      	b.n	40062c <board_serial_print+0x100>
  4009bc:	2305      	movs	r3, #5
  4009be:	e635      	b.n	40062c <board_serial_print+0x100>
  4009c0:	2304      	movs	r3, #4
  4009c2:	e633      	b.n	40062c <board_serial_print+0x100>
			if (u >= s_value[i]) {
  4009c4:	2038      	movs	r0, #56	; 0x38
  4009c6:	e72e      	b.n	400826 <board_serial_print+0x2fa>
		if (tmp_buf[i] != '0') {
  4009c8:	f04f 0c09 	mov.w	ip, #9
  4009cc:	f04f 0e08 	mov.w	lr, #8
  4009d0:	2707      	movs	r7, #7
  4009d2:	2606      	movs	r6, #6
  4009d4:	2505      	movs	r5, #5
  4009d6:	2004      	movs	r0, #4
  4009d8:	f04f 0803 	mov.w	r8, #3
  4009dc:	f04f 0902 	mov.w	r9, #2
	for (i = 0; i < 10; i++) {
  4009e0:	f04f 0a01 	mov.w	sl, #1
  4009e4:	e7a0      	b.n	400928 <board_serial_print+0x3fc>
		if (tmp_buf[i] != '0') {
  4009e6:	f04f 0c0a 	mov.w	ip, #10
  4009ea:	f04f 0e09 	mov.w	lr, #9
  4009ee:	2708      	movs	r7, #8
  4009f0:	2607      	movs	r6, #7
  4009f2:	2506      	movs	r5, #6
  4009f4:	2005      	movs	r0, #5
  4009f6:	f04f 0804 	mov.w	r8, #4
  4009fa:	f04f 0903 	mov.w	r9, #3
	for (i = 0; i < 10; i++) {
  4009fe:	f04f 0a02 	mov.w	sl, #2
  400a02:	e791      	b.n	400928 <board_serial_print+0x3fc>
		if (tmp_buf[i] != '0') {
  400a04:	f04f 0c0c 	mov.w	ip, #12
  400a08:	f04f 0e0b 	mov.w	lr, #11
  400a0c:	270a      	movs	r7, #10
  400a0e:	2609      	movs	r6, #9
  400a10:	2508      	movs	r5, #8
  400a12:	2007      	movs	r0, #7
  400a14:	f04f 0806 	mov.w	r8, #6
  400a18:	f04f 0905 	mov.w	r9, #5
	for (i = 0; i < 10; i++) {
  400a1c:	f04f 0a04 	mov.w	sl, #4
  400a20:	e782      	b.n	400928 <board_serial_print+0x3fc>
		if (tmp_buf[i] != '0') {
  400a22:	f04f 0c0b 	mov.w	ip, #11
  400a26:	f04f 0e0a 	mov.w	lr, #10
  400a2a:	2709      	movs	r7, #9
  400a2c:	2608      	movs	r6, #8
  400a2e:	2507      	movs	r5, #7
  400a30:	2006      	movs	r0, #6
  400a32:	f04f 0805 	mov.w	r8, #5
  400a36:	f04f 0904 	mov.w	r9, #4
	for (i = 0; i < 10; i++) {
  400a3a:	f04f 0a03 	mov.w	sl, #3
  400a3e:	e773      	b.n	400928 <board_serial_print+0x3fc>
		if (tmp_buf[i] != '0') {
  400a40:	f04f 0c0f 	mov.w	ip, #15
  400a44:	f04f 0e0e 	mov.w	lr, #14
  400a48:	270d      	movs	r7, #13
  400a4a:	260c      	movs	r6, #12
  400a4c:	250b      	movs	r5, #11
  400a4e:	200a      	movs	r0, #10
  400a50:	f04f 0809 	mov.w	r8, #9
  400a54:	f04f 0908 	mov.w	r9, #8
	for (i = 0; i < 10; i++) {
  400a58:	f04f 0a07 	mov.w	sl, #7
  400a5c:	e764      	b.n	400928 <board_serial_print+0x3fc>
		if (tmp_buf[i] != '0') {
  400a5e:	f04f 0c0e 	mov.w	ip, #14
  400a62:	f04f 0e0d 	mov.w	lr, #13
  400a66:	270c      	movs	r7, #12
  400a68:	260b      	movs	r6, #11
  400a6a:	250a      	movs	r5, #10
  400a6c:	2009      	movs	r0, #9
  400a6e:	f04f 0808 	mov.w	r8, #8
  400a72:	f04f 0907 	mov.w	r9, #7
	for (i = 0; i < 10; i++) {
  400a76:	f04f 0a06 	mov.w	sl, #6
  400a7a:	e755      	b.n	400928 <board_serial_print+0x3fc>
		if (tmp_buf[i] != '0') {
  400a7c:	f04f 0c0d 	mov.w	ip, #13
  400a80:	f04f 0e0c 	mov.w	lr, #12
  400a84:	270b      	movs	r7, #11
  400a86:	260a      	movs	r6, #10
  400a88:	2509      	movs	r5, #9
  400a8a:	2008      	movs	r0, #8
  400a8c:	f04f 0807 	mov.w	r8, #7
  400a90:	f04f 0906 	mov.w	r9, #6
	for (i = 0; i < 10; i++) {
  400a94:	f04f 0a05 	mov.w	sl, #5
  400a98:	e746      	b.n	400928 <board_serial_print+0x3fc>
		*s++ = tmp_buf[i];
  400a9a:	f89d 500d 	ldrb.w	r5, [sp, #13]
  400a9e:	2302      	movs	r3, #2
  400aa0:	7010      	strb	r0, [r2, #0]
  400aa2:	7055      	strb	r5, [r2, #1]
  400aa4:	e5c2      	b.n	40062c <board_serial_print+0x100>
  400aa6:	7013      	strb	r3, [r2, #0]
  400aa8:	2301      	movs	r3, #1
  400aaa:	e5bf      	b.n	40062c <board_serial_print+0x100>
  400aac:	7053      	strb	r3, [r2, #1]
  400aae:	2301      	movs	r3, #1
  400ab0:	e6f0      	b.n	400894 <board_serial_print+0x368>
  400ab2:	f89d 500d 	ldrb.w	r5, [sp, #13]
  400ab6:	2302      	movs	r3, #2
  400ab8:	7050      	strb	r0, [r2, #1]
  400aba:	7095      	strb	r5, [r2, #2]
  400abc:	e6ea      	b.n	400894 <board_serial_print+0x368>
  400abe:	bf00      	nop
  400ac0:	0040ad44 	.word	0x0040ad44
		if (tmp_buf[i] != '0') {
  400ac4:	250f      	movs	r5, #15
  400ac6:	f04f 0e0e 	mov.w	lr, #14
  400aca:	270d      	movs	r7, #13
  400acc:	260c      	movs	r6, #12
  400ace:	f04f 0c0b 	mov.w	ip, #11
  400ad2:	200a      	movs	r0, #10
  400ad4:	f04f 0809 	mov.w	r8, #9
  400ad8:	f04f 0908 	mov.w	r9, #8
	for (i = 0; i < 10; i++) {
  400adc:	f04f 0a07 	mov.w	sl, #7
		*s++ = tmp_buf[i];
  400ae0:	f10d 0b10 	add.w	fp, sp, #16
  400ae4:	7053      	strb	r3, [r2, #1]
	for (; i < 10; i++) {
  400ae6:	280a      	cmp	r0, #10
		*s++ = tmp_buf[i];
  400ae8:	44d9      	add	r9, fp
  400aea:	44d8      	add	r8, fp
  400aec:	f819 9c0c 	ldrb.w	r9, [r9, #-12]
  400af0:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
  400af4:	f882 9002 	strb.w	r9, [r2, #2]
  400af8:	70d3      	strb	r3, [r2, #3]
	for (; i < 10; i++) {
  400afa:	d031      	beq.n	400b60 <board_serial_print+0x634>
		*s++ = tmp_buf[i];
  400afc:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400afe:	f1bc 0f09 	cmp.w	ip, #9
		*s++ = tmp_buf[i];
  400b02:	4418      	add	r0, r3
  400b04:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
  400b08:	7113      	strb	r3, [r2, #4]
	for (; i < 10; i++) {
  400b0a:	dc35      	bgt.n	400b78 <board_serial_print+0x64c>
		*s++ = tmp_buf[i];
  400b0c:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400b0e:	2e09      	cmp	r6, #9
		*s++ = tmp_buf[i];
  400b10:	449c      	add	ip, r3
  400b12:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
  400b16:	7153      	strb	r3, [r2, #5]
	for (; i < 10; i++) {
  400b18:	dc2c      	bgt.n	400b74 <board_serial_print+0x648>
		*s++ = tmp_buf[i];
  400b1a:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400b1c:	2f09      	cmp	r7, #9
		*s++ = tmp_buf[i];
  400b1e:	441e      	add	r6, r3
  400b20:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
  400b24:	7193      	strb	r3, [r2, #6]
	for (; i < 10; i++) {
  400b26:	dc23      	bgt.n	400b70 <board_serial_print+0x644>
		*s++ = tmp_buf[i];
  400b28:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400b2a:	f1be 0f09 	cmp.w	lr, #9
		*s++ = tmp_buf[i];
  400b2e:	441f      	add	r7, r3
  400b30:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
  400b34:	71d3      	strb	r3, [r2, #7]
	for (; i < 10; i++) {
  400b36:	dc19      	bgt.n	400b6c <board_serial_print+0x640>
		*s++ = tmp_buf[i];
  400b38:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  400b3a:	2d09      	cmp	r5, #9
		*s++ = tmp_buf[i];
  400b3c:	449e      	add	lr, r3
  400b3e:	f81e 3c0c 	ldrb.w	r3, [lr, #-12]
  400b42:	7213      	strb	r3, [r2, #8]
	for (; i < 10; i++) {
  400b44:	dc10      	bgt.n	400b68 <board_serial_print+0x63c>
		*s++ = tmp_buf[i];
  400b46:	ab04      	add	r3, sp, #16
  400b48:	441d      	add	r5, r3
  400b4a:	f815 3c0c 	ldrb.w	r3, [r5, #-12]
  400b4e:	7253      	strb	r3, [r2, #9]
	for (; i < 10; i++) {
  400b50:	f1ba 0f00 	cmp.w	sl, #0
  400b54:	d106      	bne.n	400b64 <board_serial_print+0x638>
		*s++ = tmp_buf[i];
  400b56:	f89d 000d 	ldrb.w	r0, [sp, #13]
  400b5a:	230a      	movs	r3, #10
  400b5c:	7290      	strb	r0, [r2, #10]
  400b5e:	e699      	b.n	400894 <board_serial_print+0x368>
	for (; i < 10; i++) {
  400b60:	2303      	movs	r3, #3
  400b62:	e697      	b.n	400894 <board_serial_print+0x368>
  400b64:	2309      	movs	r3, #9
  400b66:	e695      	b.n	400894 <board_serial_print+0x368>
  400b68:	2308      	movs	r3, #8
  400b6a:	e693      	b.n	400894 <board_serial_print+0x368>
  400b6c:	2307      	movs	r3, #7
  400b6e:	e691      	b.n	400894 <board_serial_print+0x368>
  400b70:	2306      	movs	r3, #6
  400b72:	e68f      	b.n	400894 <board_serial_print+0x368>
  400b74:	2305      	movs	r3, #5
  400b76:	e68d      	b.n	400894 <board_serial_print+0x368>
  400b78:	2304      	movs	r3, #4
  400b7a:	e68b      	b.n	400894 <board_serial_print+0x368>
		if (tmp_buf[i] != '0') {
  400b7c:	250e      	movs	r5, #14
  400b7e:	f04f 0e0d 	mov.w	lr, #13
  400b82:	270c      	movs	r7, #12
  400b84:	260b      	movs	r6, #11
  400b86:	f04f 0c0a 	mov.w	ip, #10
  400b8a:	2009      	movs	r0, #9
  400b8c:	f04f 0808 	mov.w	r8, #8
  400b90:	f04f 0907 	mov.w	r9, #7
	for (i = 0; i < 10; i++) {
  400b94:	f04f 0a06 	mov.w	sl, #6
  400b98:	e7a2      	b.n	400ae0 <board_serial_print+0x5b4>
		if (tmp_buf[i] != '0') {
  400b9a:	250d      	movs	r5, #13
  400b9c:	f04f 0e0c 	mov.w	lr, #12
  400ba0:	270b      	movs	r7, #11
  400ba2:	260a      	movs	r6, #10
  400ba4:	f04f 0c09 	mov.w	ip, #9
  400ba8:	2008      	movs	r0, #8
  400baa:	f04f 0807 	mov.w	r8, #7
  400bae:	f04f 0906 	mov.w	r9, #6
	for (i = 0; i < 10; i++) {
  400bb2:	f04f 0a05 	mov.w	sl, #5
  400bb6:	e793      	b.n	400ae0 <board_serial_print+0x5b4>
		if (tmp_buf[i] != '0') {
  400bb8:	250c      	movs	r5, #12
  400bba:	f04f 0e0b 	mov.w	lr, #11
  400bbe:	270a      	movs	r7, #10
  400bc0:	2609      	movs	r6, #9
  400bc2:	f04f 0c08 	mov.w	ip, #8
  400bc6:	2007      	movs	r0, #7
  400bc8:	f04f 0806 	mov.w	r8, #6
  400bcc:	f04f 0905 	mov.w	r9, #5
	for (i = 0; i < 10; i++) {
  400bd0:	f04f 0a04 	mov.w	sl, #4
  400bd4:	e784      	b.n	400ae0 <board_serial_print+0x5b4>
		if (tmp_buf[i] != '0') {
  400bd6:	250b      	movs	r5, #11
  400bd8:	f04f 0e0a 	mov.w	lr, #10
  400bdc:	2709      	movs	r7, #9
  400bde:	2608      	movs	r6, #8
  400be0:	f04f 0c07 	mov.w	ip, #7
  400be4:	2006      	movs	r0, #6
  400be6:	f04f 0805 	mov.w	r8, #5
  400bea:	f04f 0904 	mov.w	r9, #4
	for (i = 0; i < 10; i++) {
  400bee:	f04f 0a03 	mov.w	sl, #3
  400bf2:	e775      	b.n	400ae0 <board_serial_print+0x5b4>
		if (tmp_buf[i] != '0') {
  400bf4:	250a      	movs	r5, #10
  400bf6:	f04f 0e09 	mov.w	lr, #9
  400bfa:	2708      	movs	r7, #8
  400bfc:	2607      	movs	r6, #7
  400bfe:	f04f 0c06 	mov.w	ip, #6
  400c02:	2005      	movs	r0, #5
  400c04:	f04f 0804 	mov.w	r8, #4
  400c08:	f04f 0903 	mov.w	r9, #3
	for (i = 0; i < 10; i++) {
  400c0c:	f04f 0a02 	mov.w	sl, #2
  400c10:	e766      	b.n	400ae0 <board_serial_print+0x5b4>
		if (tmp_buf[i] != '0') {
  400c12:	2509      	movs	r5, #9
  400c14:	f04f 0e08 	mov.w	lr, #8
  400c18:	2707      	movs	r7, #7
  400c1a:	2606      	movs	r6, #6
  400c1c:	f04f 0c05 	mov.w	ip, #5
  400c20:	2004      	movs	r0, #4
  400c22:	f04f 0803 	mov.w	r8, #3
  400c26:	f04f 0902 	mov.w	r9, #2
	for (i = 0; i < 10; i++) {
  400c2a:	f04f 0a01 	mov.w	sl, #1
  400c2e:	e757      	b.n	400ae0 <board_serial_print+0x5b4>
		if (tmp_buf[i] != '0') {
  400c30:	2508      	movs	r5, #8
  400c32:	f04f 0e07 	mov.w	lr, #7
  400c36:	2706      	movs	r7, #6
  400c38:	2605      	movs	r6, #5
  400c3a:	f04f 0c04 	mov.w	ip, #4
  400c3e:	2003      	movs	r0, #3
  400c40:	f04f 0802 	mov.w	r8, #2
  400c44:	f04f 0901 	mov.w	r9, #1
  400c48:	f04f 0a00 	mov.w	sl, #0
  400c4c:	e748      	b.n	400ae0 <board_serial_print+0x5b4>
  400c4e:	bf00      	nop

00400c50 <board_serial_print_register>:
{
  400c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	board_serial_print("%s: ", data);
  400c54:	f04f 091f 	mov.w	r9, #31
	for (uint8_t i = 0; i < 32; i++)
  400c58:	2400      	movs	r4, #0
  400c5a:	4e12      	ldr	r6, [pc, #72]	; (400ca4 <board_serial_print_register+0x54>)
		if (reg & (1 << (31 - i)))
  400c5c:	2701      	movs	r7, #1
	usart_write(USART1, data);
  400c5e:	4d12      	ldr	r5, [pc, #72]	; (400ca8 <board_serial_print_register+0x58>)
{
  400c60:	4688      	mov	r8, r1
	board_serial_print("%s: ", data);
  400c62:	4b12      	ldr	r3, [pc, #72]	; (400cac <board_serial_print_register+0x5c>)
  400c64:	4601      	mov	r1, r0
  400c66:	4812      	ldr	r0, [pc, #72]	; (400cb0 <board_serial_print_register+0x60>)
  400c68:	4798      	blx	r3
		if (reg & (1 << (31 - i)))
  400c6a:	fa07 f309 	lsl.w	r3, r7, r9
	usart_write(USART1, data);
  400c6e:	2131      	movs	r1, #49	; 0x31
  400c70:	4628      	mov	r0, r5
		if (reg & (1 << (31 - i)))
  400c72:	ea13 0f08 	tst.w	r3, r8
  400c76:	d101      	bne.n	400c7c <board_serial_print_register+0x2c>
	usart_write(USART1, data);
  400c78:	2130      	movs	r1, #48	; 0x30
  400c7a:	4628      	mov	r0, r5
	for (uint8_t i = 0; i < 32; i++)
  400c7c:	3401      	adds	r4, #1
	usart_write(USART1, data);
  400c7e:	47b0      	blx	r6
  400c80:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 0; i < 32; i++)
  400c84:	b2e4      	uxtb	r4, r4
  400c86:	2c20      	cmp	r4, #32
  400c88:	d005      	beq.n	400c96 <board_serial_print_register+0x46>
		if ((i != 0) && (i % 8 == 0))
  400c8a:	0763      	lsls	r3, r4, #29
  400c8c:	d1ed      	bne.n	400c6a <board_serial_print_register+0x1a>
	usart_write(USART1, data);
  400c8e:	2120      	movs	r1, #32
  400c90:	4628      	mov	r0, r5
  400c92:	47b0      	blx	r6
  400c94:	e7e9      	b.n	400c6a <board_serial_print_register+0x1a>
  400c96:	4633      	mov	r3, r6
  400c98:	210a      	movs	r1, #10
  400c9a:	4803      	ldr	r0, [pc, #12]	; (400ca8 <board_serial_print_register+0x58>)
}
  400c9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	usart_write(USART1, data);
  400ca0:	4718      	bx	r3
  400ca2:	bf00      	nop
  400ca4:	00403555 	.word	0x00403555
  400ca8:	40028000 	.word	0x40028000
  400cac:	0040052d 	.word	0x0040052d
  400cb0:	0040ad74 	.word	0x0040ad74

00400cb4 <board_serial_dma_print_size>:

//--------------------------------------------------------------------------------------------------//


void board_serial_dma_print_size(char* data, uint32_t size)
{
  400cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cb8:	b081      	sub	sp, #4
	while (size)
  400cba:	2900      	cmp	r1, #0
  400cbc:	d041      	beq.n	400d42 <board_serial_dma_print_size+0x8e>
  400cbe:	4604      	mov	r4, r0
  400cc0:	1847      	adds	r7, r0, r1
  400cc2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 400d70 <board_serial_dma_print_size+0xbc>
	timer_clock_disable(TC0, TIMER_CHANNEL_0);
  400cc6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 400d64 <board_serial_dma_print_size+0xb0>
  400cca:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 400d74 <board_serial_dma_print_size+0xc0>
  400cce:	e001      	b.n	400cd4 <board_serial_dma_print_size+0x20>
	while (size)
  400cd0:	42bc      	cmp	r4, r7
  400cd2:	d036      	beq.n	400d42 <board_serial_dma_print_size+0x8e>
	{
		current_buffer->data[current_buffer->position] = *data;
  400cd4:	f8d8 3408 	ldr.w	r3, [r8, #1032]	; 0x408
  400cd8:	f814 0b01 	ldrb.w	r0, [r4], #1
  400cdc:	f8b3 1400 	ldrh.w	r1, [r3, #1024]	; 0x400
  400ce0:	b289      	uxth	r1, r1
  400ce2:	5458      	strb	r0, [r3, r1]
		
		current_buffer->position++;
  400ce4:	f8b3 1400 	ldrh.w	r1, [r3, #1024]	; 0x400
  400ce8:	3101      	adds	r1, #1
  400cea:	b289      	uxth	r1, r1
  400cec:	f8a3 1400 	strh.w	r1, [r3, #1024]	; 0x400
		data++;
		size--;
		
		if (current_buffer->position == SERIAL_DMA_BUFFER_SIZE)
  400cf0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  400cf4:	b29b      	uxth	r3, r3
  400cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  400cfa:	d1e9      	bne.n	400cd0 <board_serial_dma_print_size+0x1c>
	timer_clock_disable(TC0, TIMER_CHANNEL_0);
  400cfc:	2100      	movs	r1, #0
  400cfe:	4650      	mov	r0, sl
  400d00:	47c8      	blx	r9
	while (dma_buffer->dma_active)
  400d02:	f8d8 3000 	ldr.w	r3, [r8]
  400d06:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
  400d0a:	b161      	cbz	r1, 400d26 <board_serial_dma_print_size+0x72>
  400d0c:	f8df b068 	ldr.w	fp, [pc, #104]	; 400d78 <board_serial_dma_print_size+0xc4>
  400d10:	4e11      	ldr	r6, [pc, #68]	; (400d58 <board_serial_dma_print_size+0xa4>)
		scheduler_current_thread_to_queue(&serial_queue);
  400d12:	4d12      	ldr	r5, [pc, #72]	; (400d5c <board_serial_dma_print_size+0xa8>)
  400d14:	4628      	mov	r0, r5
  400d16:	47d8      	blx	fp
		reschedule();
  400d18:	47b0      	blx	r6
	while (dma_buffer->dma_active)
  400d1a:	f8d8 3000 	ldr.w	r3, [r8]
  400d1e:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
  400d22:	2900      	cmp	r1, #0
  400d24:	d1f6      	bne.n	400d14 <board_serial_dma_print_size+0x60>
	dma_buffer = current_buffer;
  400d26:	f8d8 5408 	ldr.w	r5, [r8, #1032]	; 0x408
	current_buffer = tmp;
  400d2a:	f8c8 3408 	str.w	r3, [r8, #1032]	; 0x408
			
			// The buffer is filled up
			board_serial_dma_switch_buffers();
			
			// Start flushing the DMA buffer
			board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  400d2e:	f8b5 1400 	ldrh.w	r1, [r5, #1024]	; 0x400
  400d32:	4628      	mov	r0, r5
  400d34:	4b0a      	ldr	r3, [pc, #40]	; (400d60 <board_serial_dma_print_size+0xac>)
  400d36:	b289      	uxth	r1, r1
	dma_buffer = current_buffer;
  400d38:	f8c8 5000 	str.w	r5, [r8]
			board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  400d3c:	4798      	blx	r3
	while (size)
  400d3e:	42bc      	cmp	r4, r7
  400d40:	d1c8      	bne.n	400cd4 <board_serial_dma_print_size+0x20>
	timer_clock_enable(TC0, TIMER_CHANNEL_0);
  400d42:	2100      	movs	r1, #0
  400d44:	4807      	ldr	r0, [pc, #28]	; (400d64 <board_serial_dma_print_size+0xb0>)
  400d46:	4b08      	ldr	r3, [pc, #32]	; (400d68 <board_serial_dma_print_size+0xb4>)
  400d48:	4798      	blx	r3
	timer_software_trigger(TC0, TIMER_CHANNEL_0);
  400d4a:	2100      	movs	r1, #0
  400d4c:	4805      	ldr	r0, [pc, #20]	; (400d64 <board_serial_dma_print_size+0xb0>)
  400d4e:	4b07      	ldr	r3, [pc, #28]	; (400d6c <board_serial_dma_print_size+0xb8>)
	// Start flushing the DMA buffer
	board_serial_dma_flush_buffer(dma_buffer->data, dma_buffer->position);
	*/
	
	board_serial_timer_start();
}
  400d50:	b001      	add	sp, #4
  400d52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	timer_software_trigger(TC0, TIMER_CHANNEL_0);
  400d56:	4718      	bx	r3
  400d58:	00408389 	.word	0x00408389
  400d5c:	204027ec 	.word	0x204027ec
  400d60:	00400451 	.word	0x00400451
  400d64:	4000c000 	.word	0x4000c000
  400d68:	00403335 	.word	0x00403335
  400d6c:	00403385 	.word	0x00403385
  400d70:	2040053c 	.word	0x2040053c
  400d74:	0040335d 	.word	0x0040335d
  400d78:	00408721 	.word	0x00408721

00400d7c <TC0_Handler>:

//--------------------------------------------------------------------------------------------------//


void TC0_Handler()
{
  400d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	timer_read_interrupt_status(TC0, TIMER_CHANNEL_0);
  400d80:	2100      	movs	r1, #0
  400d82:	4b12      	ldr	r3, [pc, #72]	; (400dcc <TC0_Handler+0x50>)
  400d84:	4812      	ldr	r0, [pc, #72]	; (400dd0 <TC0_Handler+0x54>)
	while (dma_buffer->dma_active)
  400d86:	4c13      	ldr	r4, [pc, #76]	; (400dd4 <TC0_Handler+0x58>)
	timer_read_interrupt_status(TC0, TIMER_CHANNEL_0);
  400d88:	4798      	blx	r3
	timer_clock_disable(TC0, TIMER_CHANNEL_0);
  400d8a:	4b13      	ldr	r3, [pc, #76]	; (400dd8 <TC0_Handler+0x5c>)
  400d8c:	2100      	movs	r1, #0
  400d8e:	4810      	ldr	r0, [pc, #64]	; (400dd0 <TC0_Handler+0x54>)
  400d90:	4798      	blx	r3
	while (dma_buffer->dma_active)
  400d92:	6823      	ldr	r3, [r4, #0]
  400d94:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
  400d98:	b152      	cbz	r2, 400db0 <TC0_Handler+0x34>
  400d9a:	4f10      	ldr	r7, [pc, #64]	; (400ddc <TC0_Handler+0x60>)
  400d9c:	4e10      	ldr	r6, [pc, #64]	; (400de0 <TC0_Handler+0x64>)
		scheduler_current_thread_to_queue(&serial_queue);
  400d9e:	4d11      	ldr	r5, [pc, #68]	; (400de4 <TC0_Handler+0x68>)
  400da0:	4628      	mov	r0, r5
  400da2:	47b8      	blx	r7
		reschedule();
  400da4:	47b0      	blx	r6
	while (dma_buffer->dma_active)
  400da6:	6823      	ldr	r3, [r4, #0]
  400da8:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
  400dac:	2a00      	cmp	r2, #0
  400dae:	d1f7      	bne.n	400da0 <TC0_Handler+0x24>
	dma_buffer = current_buffer;
  400db0:	f8d4 2408 	ldr.w	r2, [r4, #1032]	; 0x408
	
	// The buffer is filled up
	board_serial_dma_switch_buffers();
	
	// Start flushing the DMA buffer
	board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  400db4:	4d0c      	ldr	r5, [pc, #48]	; (400de8 <TC0_Handler+0x6c>)
  400db6:	f8b2 1400 	ldrh.w	r1, [r2, #1024]	; 0x400
  400dba:	4610      	mov	r0, r2
	current_buffer = tmp;
  400dbc:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
	board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  400dc0:	462b      	mov	r3, r5
	dma_buffer = current_buffer;
  400dc2:	6022      	str	r2, [r4, #0]
	board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  400dc4:	b289      	uxth	r1, r1
}
  400dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	board_serial_dma_flush_buffer((char *)(dma_buffer->data), dma_buffer->position);
  400dca:	4718      	bx	r3
  400dcc:	004033fd 	.word	0x004033fd
  400dd0:	4000c000 	.word	0x4000c000
  400dd4:	2040053c 	.word	0x2040053c
  400dd8:	0040335d 	.word	0x0040335d
  400ddc:	00408721 	.word	0x00408721
  400de0:	00408389 	.word	0x00408389
  400de4:	204027ec 	.word	0x204027ec
  400de8:	00400451 	.word	0x00400451

00400dec <board_serial_programming_dma_callback>:
// This function gets called when a DMA serial transaction has completed. The dma_buffer pointer
// points to data that is successfully transmitted. 

void board_serial_programming_dma_callback(uint8_t channel)
{
	prog_dma_buffer->dma_active = 0;
  400dec:	4b03      	ldr	r3, [pc, #12]	; (400dfc <board_serial_programming_dma_callback+0x10>)
  400dee:	2200      	movs	r2, #0
  400df0:	681b      	ldr	r3, [r3, #0]
  400df2:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	prog_dma_buffer->position = 0;
  400df6:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  400dfa:	4770      	bx	lr
  400dfc:	20400f4c 	.word	0x20400f4c

00400e00 <board_serial_programming_config>:
{
  400e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_pin_function(BOARD_SERIAL_PROGRAMMING_TX_PORT, BOARD_SERIAL_PROGRAMMING_TX_PIN, PERIPHERAL_FUNCTION_C);
  400e04:	4d2b      	ldr	r5, [pc, #172]	; (400eb4 <board_serial_programming_config+0xb4>)
{
  400e06:	b086      	sub	sp, #24
	gpio_set_pin_function(BOARD_SERIAL_PROGRAMMING_TX_PORT, BOARD_SERIAL_PROGRAMMING_TX_PIN, PERIPHERAL_FUNCTION_C);
  400e08:	4c2b      	ldr	r4, [pc, #172]	; (400eb8 <board_serial_programming_config+0xb8>)
  400e0a:	2202      	movs	r2, #2
  400e0c:	4628      	mov	r0, r5
  400e0e:	2101      	movs	r1, #1
  400e10:	47a0      	blx	r4
	gpio_set_pin_function(BOARD_SERIAL_PROGRAMMING_RX_PORT, BOARD_SERIAL_PROGRAMMING_RX_PIN, PERIPHERAL_FUNCTION_C);
  400e12:	4628      	mov	r0, r5
  400e14:	2202      	movs	r2, #2
  400e16:	2100      	movs	r1, #0
  400e18:	47a0      	blx	r4
	clock_peripheral_clock_enable(ID_USART0);
  400e1a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 400ed8 <board_serial_programming_config+0xd8>
  400e1e:	200d      	movs	r0, #13
	usart_mode_config(USART0, USART_STOP_BIT_1, USART_PARITY_NO, USART_MODE_ASYNCHRONOUS, BOARD_SERIAL_PROGRAMMING_CD_VALUE);
  400e20:	f5a5 253d 	sub.w	r5, r5, #774144	; 0xbd000
	clock_peripheral_clock_enable(ID_USART0);
  400e24:	47c0      	blx	r8
	usart_mode_config(USART0, USART_STOP_BIT_1, USART_PARITY_NO, USART_MODE_ASYNCHRONOUS, BOARD_SERIAL_PROGRAMMING_CD_VALUE);
  400e26:	2300      	movs	r3, #0
  400e28:	2128      	movs	r1, #40	; 0x28
  400e2a:	2204      	movs	r2, #4
  400e2c:	4628      	mov	r0, r5
  400e2e:	4e23      	ldr	r6, [pc, #140]	; (400ebc <board_serial_programming_config+0xbc>)
  400e30:	9100      	str	r1, [sp, #0]
  400e32:	4619      	mov	r1, r3
{
	// Configure the timer interface (timer 0 channel 0) to overflow after 10 ms
	clock_peripheral_clock_enable(ID_TC0_CHANNEL1);
	
	timer_write_protection_disable(TC0);
	timer_capture_mode_config(TC0, TIMER_CHANNEL_1, TIMER_NONE, TIMER_NONE, TIMER_CAPTURE_MODE, 1, 0, 0, TIMER_INCREMENT_RISING_EDGE, TIMER_CLOCK_MCK_DIV_128);
  400e34:	461c      	mov	r4, r3
	usart_mode_config(USART0, USART_STOP_BIT_1, USART_PARITY_NO, USART_MODE_ASYNCHRONOUS, BOARD_SERIAL_PROGRAMMING_CD_VALUE);
  400e36:	47b0      	blx	r6
	usart_interrupt_enable(USART0, USART_IRQ_RX_READY);
  400e38:	4b21      	ldr	r3, [pc, #132]	; (400ec0 <board_serial_programming_config+0xc0>)
  400e3a:	4628      	mov	r0, r5
  400e3c:	2101      	movs	r1, #1
	timer_write_protection_disable(TC0);
  400e3e:	f5a5 35c0 	sub.w	r5, r5, #98304	; 0x18000
	usart_interrupt_enable(USART0, USART_IRQ_RX_READY);
  400e42:	4798      	blx	r3
	interrupt_enable_peripheral_interrupt(USART0_IRQn, IRQ_LEVEL_1);
  400e44:	4f1f      	ldr	r7, [pc, #124]	; (400ec4 <board_serial_programming_config+0xc4>)
  400e46:	2101      	movs	r1, #1
  400e48:	200d      	movs	r0, #13
  400e4a:	47b8      	blx	r7
	clock_peripheral_clock_enable(ID_TC0_CHANNEL1);
  400e4c:	2018      	movs	r0, #24
  400e4e:	47c0      	blx	r8
	timer_write_protection_disable(TC0);
  400e50:	4628      	mov	r0, r5
  400e52:	4b1d      	ldr	r3, [pc, #116]	; (400ec8 <board_serial_programming_config+0xc8>)
	timer_capture_mode_config(TC0, TIMER_CHANNEL_1, TIMER_NONE, TIMER_NONE, TIMER_CAPTURE_MODE, 1, 0, 0, TIMER_INCREMENT_RISING_EDGE, TIMER_CLOCK_MCK_DIV_128);
  400e54:	2601      	movs	r6, #1
	timer_write_protection_disable(TC0);
  400e56:	4798      	blx	r3
	timer_capture_mode_config(TC0, TIMER_CHANNEL_1, TIMER_NONE, TIMER_NONE, TIMER_CAPTURE_MODE, 1, 0, 0, TIMER_INCREMENT_RISING_EDGE, TIMER_CLOCK_MCK_DIV_128);
  400e58:	2303      	movs	r3, #3
  400e5a:	4628      	mov	r0, r5
  400e5c:	4622      	mov	r2, r4
  400e5e:	9305      	str	r3, [sp, #20]
  400e60:	4631      	mov	r1, r6
  400e62:	4623      	mov	r3, r4
  400e64:	9404      	str	r4, [sp, #16]
  400e66:	9403      	str	r4, [sp, #12]
  400e68:	9402      	str	r4, [sp, #8]
  400e6a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 400edc <board_serial_programming_config+0xdc>
  400e6e:	e88d 0050 	stmia.w	sp, {r4, r6}
  400e72:	47c0      	blx	r8
	timer_set_compare_c(TC0, TIMER_CHANNEL_1, 58595);
  400e74:	4631      	mov	r1, r6
  400e76:	4628      	mov	r0, r5
  400e78:	f24e 42e3 	movw	r2, #58595	; 0xe4e3
  400e7c:	4b13      	ldr	r3, [pc, #76]	; (400ecc <board_serial_programming_config+0xcc>)
  400e7e:	4798      	blx	r3
	timer_interrupt_enable(TC0, TIMER_CHANNEL_1, TIMER_INTERRUPT_C_COMPARE);
  400e80:	4631      	mov	r1, r6
  400e82:	4628      	mov	r0, r5
  400e84:	2210      	movs	r2, #16
  400e86:	4b12      	ldr	r3, [pc, #72]	; (400ed0 <board_serial_programming_config+0xd0>)
  400e88:	4798      	blx	r3
	
	interrupt_enable_peripheral_interrupt(TC1_IRQn, IRQ_LEVEL_6);
  400e8a:	2106      	movs	r1, #6
  400e8c:	2018      	movs	r0, #24
  400e8e:	47b8      	blx	r7
	
	prog_dma_buffer = &prog_buffer_b;
  400e90:	4b10      	ldr	r3, [pc, #64]	; (400ed4 <board_serial_programming_config+0xd4>)
  400e92:	1d19      	adds	r1, r3, #4
	prog_current_buffer = &prog_buffer_a;
  400e94:	f203 420c 	addw	r2, r3, #1036	; 0x40c
	
	prog_current_buffer->dma_active = 0;
  400e98:	f883 480e 	strb.w	r4, [r3, #2062]	; 0x80e
	prog_dma_buffer = &prog_buffer_b;
  400e9c:	6019      	str	r1, [r3, #0]
	prog_dma_buffer->dma_active = 0;
  400e9e:	f883 4406 	strb.w	r4, [r3, #1030]	; 0x406
	prog_current_buffer = &prog_buffer_a;
  400ea2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	
	prog_current_buffer->position = 0;
  400ea6:	f8a3 480c 	strh.w	r4, [r3, #2060]	; 0x80c
	prog_dma_buffer->position = 0;
  400eaa:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
}
  400eae:	b006      	add	sp, #24
  400eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400eb4:	400e1000 	.word	0x400e1000
  400eb8:	00402a1d 	.word	0x00402a1d
  400ebc:	00403489 	.word	0x00403489
  400ec0:	00403531 	.word	0x00403531
  400ec4:	00403145 	.word	0x00403145
  400ec8:	004033ad 	.word	0x004033ad
  400ecc:	004033d5 	.word	0x004033d5
  400ed0:	00403405 	.word	0x00403405
  400ed4:	20400f4c 	.word	0x20400f4c
  400ed8:	00402405 	.word	0x00402405
  400edc:	0040342d 	.word	0x0040342d

00400ee0 <board_serial_programming_dma_flush_buffer>:
{	
  400ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_desc.channel = BOARD_SERIAL_PROGRAMMING_DMA_CHANNEL;
  400ee2:	2306      	movs	r3, #6
{	
  400ee4:	b089      	sub	sp, #36	; 0x24
	dma_desc.peripheral_id = XDMAC_CC_PERID_USART0_TX_Val;
  400ee6:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
  400eea:	4f2c      	ldr	r7, [pc, #176]	; (400f9c <board_serial_programming_dma_flush_buffer+0xbc>)
  400eec:	2600      	movs	r6, #0
{	
  400eee:	4605      	mov	r5, r0
  400ef0:	460c      	mov	r4, r1
	dma_desc.destination_pointer = (uint32_t *)&(((Usart *)(USART0))->US_THR);
  400ef2:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 400fb8 <board_serial_programming_dma_flush_buffer+0xd8>
	dma_channel_set_callback(BOARD_SERIAL_PROGRAMMING_DMA_CHANNEL, board_serial_programming_dma_callback);
  400ef6:	4618      	mov	r0, r3
	dma_desc.size = size;
  400ef8:	9103      	str	r1, [sp, #12]
	dma_desc.channel = BOARD_SERIAL_PROGRAMMING_DMA_CHANNEL;
  400efa:	f88d 3010 	strb.w	r3, [sp, #16]
	dma_channel_set_callback(BOARD_SERIAL_PROGRAMMING_DMA_CHANNEL, board_serial_programming_dma_callback);
  400efe:	4928      	ldr	r1, [pc, #160]	; (400fa0 <board_serial_programming_dma_flush_buffer+0xc0>)
  400f00:	4b28      	ldr	r3, [pc, #160]	; (400fa4 <board_serial_programming_dma_flush_buffer+0xc4>)
	dma_desc.peripheral_id = XDMAC_CC_PERID_USART0_TX_Val;
  400f02:	f8cd 7011 	str.w	r7, [sp, #17]
  400f06:	f8cd 6015 	str.w	r6, [sp, #21]
  400f0a:	f8cd 2019 	str.w	r2, [sp, #25]
	dma_desc.source_pointer = (uint32_t *)source_buffer;
  400f0e:	9501      	str	r5, [sp, #4]
	dma_desc.destination_pointer = (uint32_t *)&(((Usart *)(USART0))->US_THR);
  400f10:	f8cd e008 	str.w	lr, [sp, #8]
	dma_channel_set_callback(BOARD_SERIAL_PROGRAMMING_DMA_CHANNEL, board_serial_programming_dma_callback);
  400f14:	4798      	blx	r3
	SCB_CleanDCache_by_Addr(cache_addr, size + 32);
  400f16:	f104 0320 	add.w	r3, r4, #32
  __ASM volatile ("dsb 0xF":::"memory");
  400f1a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
  400f1e:	42b3      	cmp	r3, r6
  400f20:	dd08      	ble.n	400f34 <board_serial_programming_dma_flush_buffer+0x54>
  400f22:	f025 0520 	bic.w	r5, r5, #32
      SCB->DCCMVAC = op_addr;
  400f26:	4920      	ldr	r1, [pc, #128]	; (400fa8 <board_serial_programming_dma_flush_buffer+0xc8>)
      op_size -=           linesize;
  400f28:	3b20      	subs	r3, #32
      SCB->DCCMVAC = op_addr;
  400f2a:	f8c1 5268 	str.w	r5, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  400f2e:	3520      	adds	r5, #32
    while (op_size > 0) {
  400f30:	2b00      	cmp	r3, #0
  400f32:	dcf9      	bgt.n	400f28 <board_serial_programming_dma_flush_buffer+0x48>
  400f34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f38:	f3bf 8f6f 	isb	sy
     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400f3c:	4c1a      	ldr	r4, [pc, #104]	; (400fa8 <board_serial_programming_dma_flush_buffer+0xc8>)
  400f3e:	2300      	movs	r3, #0
  400f40:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400f44:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  400f48:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  400f4c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400f50:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400f54:	f3c3 334e 	ubfx	r3, r3, #13, #15
  400f58:	07b7      	lsls	r7, r6, #30
  400f5a:	015d      	lsls	r5, r3, #5
  400f5c:	ea05 000e 	and.w	r0, r5, lr
{	
  400f60:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400f62:	4632      	mov	r2, r6
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  400f64:	ea41 0300 	orr.w	r3, r1, r0
      } while (ways-- != 0U);
  400f68:	3a01      	subs	r2, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  400f6a:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  400f6e:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
      } while (ways-- != 0U);
  400f72:	1c53      	adds	r3, r2, #1
  400f74:	d1f6      	bne.n	400f64 <board_serial_programming_dma_flush_buffer+0x84>
  400f76:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  400f78:	f115 0f20 	cmn.w	r5, #32
  400f7c:	d1ee      	bne.n	400f5c <board_serial_programming_dma_flush_buffer+0x7c>
  400f7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f82:	f3bf 8f6f 	isb	sy
	prog_dma_buffer->dma_active = 1;
  400f86:	4b09      	ldr	r3, [pc, #36]	; (400fac <board_serial_programming_dma_flush_buffer+0xcc>)
  400f88:	2401      	movs	r4, #1
	dma_setup_transaction(XDMAC, &dma_desc);
  400f8a:	a901      	add	r1, sp, #4
  400f8c:	4808      	ldr	r0, [pc, #32]	; (400fb0 <board_serial_programming_dma_flush_buffer+0xd0>)
	prog_dma_buffer->dma_active = 1;
  400f8e:	681a      	ldr	r2, [r3, #0]
	dma_setup_transaction(XDMAC, &dma_desc);
  400f90:	4b08      	ldr	r3, [pc, #32]	; (400fb4 <board_serial_programming_dma_flush_buffer+0xd4>)
	prog_dma_buffer->dma_active = 1;
  400f92:	f882 4402 	strb.w	r4, [r2, #1026]	; 0x402
	dma_setup_transaction(XDMAC, &dma_desc);
  400f96:	4798      	blx	r3
}
  400f98:	b009      	add	sp, #36	; 0x24
  400f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f9c:	01010007 	.word	0x01010007
  400fa0:	00400ded 	.word	0x00400ded
  400fa4:	00402671 	.word	0x00402671
  400fa8:	e000ed00 	.word	0xe000ed00
  400fac:	20400f4c 	.word	0x20400f4c
  400fb0:	40078000 	.word	0x40078000
  400fb4:	0040250d 	.word	0x0040250d
  400fb8:	4002401c 	.word	0x4002401c

00400fbc <board_serial_programming_print>:
{
  400fbc:	b40f      	push	{r0, r1, r2, r3}
  400fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400fc2:	b085      	sub	sp, #20
	char* s = serial_print_buffer;
  400fc4:	4a9f      	ldr	r2, [pc, #636]	; (401244 <board_serial_programming_print+0x288>)
		*s = '0';
  400fc6:	2430      	movs	r4, #48	; 0x30
{
  400fc8:	ab0e      	add	r3, sp, #56	; 0x38
  400fca:	f853 1b04 	ldr.w	r1, [r3], #4
	va_start(ap, data);
  400fce:	9300      	str	r3, [sp, #0]
	while (*data) {
  400fd0:	780b      	ldrb	r3, [r1, #0]
  400fd2:	b13b      	cbz	r3, 400fe4 <board_serial_programming_print+0x28>
		if (*data != '%') {
  400fd4:	2b25      	cmp	r3, #37	; 0x25
  400fd6:	d045      	beq.n	401064 <board_serial_programming_print+0xa8>
			data++;
  400fd8:	3101      	adds	r1, #1
			*s = *data;
  400fda:	f802 3b01 	strb.w	r3, [r2], #1
	while (*data) {
  400fde:	780b      	ldrb	r3, [r1, #0]
  400fe0:	2b00      	cmp	r3, #0
  400fe2:	d1f7      	bne.n	400fd4 <board_serial_programming_print+0x18>
  400fe4:	4e97      	ldr	r6, [pc, #604]	; (401244 <board_serial_programming_print+0x288>)
//--------------------------------------------------------------------------------------------------//


void board_serial_programming_timer_stop(void)
{
	timer_clock_disable(TC0, TIMER_CHANNEL_1);
  400fe6:	4d98      	ldr	r5, [pc, #608]	; (401248 <board_serial_programming_print+0x28c>)

void board_serial_programming_dma_print(char* data)
{
	while (*data)
	{
		prog_current_buffer->data[prog_current_buffer->position] = *data;
  400fe8:	f5a6 6701 	sub.w	r7, r6, #2064	; 0x810
	timer_clock_disable(TC0, TIMER_CHANNEL_1);
  400fec:	4c97      	ldr	r4, [pc, #604]	; (40124c <board_serial_programming_print+0x290>)
	*s = 0;
  400fee:	7013      	strb	r3, [r2, #0]
	while (*data)
  400ff0:	f816 1b01 	ldrb.w	r1, [r6], #1
  400ff4:	b349      	cbz	r1, 40104a <board_serial_programming_print+0x8e>
		prog_current_buffer->data[prog_current_buffer->position] = *data;
  400ff6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
  400ffa:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
  400ffe:	b292      	uxth	r2, r2
  401000:	5499      	strb	r1, [r3, r2]
		
		prog_current_buffer->position++;
  401002:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
  401006:	3201      	adds	r2, #1
  401008:	b292      	uxth	r2, r2
  40100a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		data++;
		
		if (prog_current_buffer->position == SERIAL_DMA_BUFFER_SIZE)
  40100e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  401012:	b29b      	uxth	r3, r3
  401014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  401018:	d1ea      	bne.n	400ff0 <board_serial_programming_print+0x34>
	timer_clock_disable(TC0, TIMER_CHANNEL_1);
  40101a:	2101      	movs	r1, #1
  40101c:	4628      	mov	r0, r5
  40101e:	47a0      	blx	r4
  401020:	683a      	ldr	r2, [r7, #0]
	while (prog_dma_buffer->dma_active)
  401022:	f892 3402 	ldrb.w	r3, [r2, #1026]	; 0x402
  401026:	2b00      	cmp	r3, #0
  401028:	d1fb      	bne.n	401022 <board_serial_programming_print+0x66>
	prog_dma_buffer = prog_current_buffer;
  40102a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
			
			// The buffer is filled up
			board_serial_programming_dma_switch_buffers();
			
			// Start flushing the DMA buffer
			board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  40102e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40125c <board_serial_programming_print+0x2a0>
  401032:	f8b3 1400 	ldrh.w	r1, [r3, #1024]	; 0x400
  401036:	4618      	mov	r0, r3
	prog_dma_buffer = prog_current_buffer;
  401038:	603b      	str	r3, [r7, #0]
			board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  40103a:	b289      	uxth	r1, r1
	prog_current_buffer = tmp;
  40103c:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
			board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  401040:	47c0      	blx	r8
	while (*data)
  401042:	f816 1b01 	ldrb.w	r1, [r6], #1
  401046:	2900      	cmp	r1, #0
  401048:	d1d5      	bne.n	400ff6 <board_serial_programming_print+0x3a>
	timer_clock_enable(TC0, TIMER_CHANNEL_1);
  40104a:	2101      	movs	r1, #1
  40104c:	487e      	ldr	r0, [pc, #504]	; (401248 <board_serial_programming_print+0x28c>)
  40104e:	4b80      	ldr	r3, [pc, #512]	; (401250 <board_serial_programming_print+0x294>)
  401050:	4798      	blx	r3
	timer_software_trigger(TC0, TIMER_CHANNEL_1);
  401052:	2101      	movs	r1, #1
  401054:	487c      	ldr	r0, [pc, #496]	; (401248 <board_serial_programming_print+0x28c>)
  401056:	4b7f      	ldr	r3, [pc, #508]	; (401254 <board_serial_programming_print+0x298>)
  401058:	4798      	blx	r3
}
  40105a:	b005      	add	sp, #20
  40105c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401060:	b004      	add	sp, #16
  401062:	4770      	bx	lr
			switch (*data) {
  401064:	7848      	ldrb	r0, [r1, #1]
  401066:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
  40106a:	2b12      	cmp	r3, #18
  40106c:	f200 80e6 	bhi.w	40123c <board_serial_programming_print+0x280>
  401070:	e8df f003 	tbb	[pc, r3]
  401074:	e4e424dc 	.word	0xe4e424dc
  401078:	e4e4e4e4 	.word	0xe4e4e4e4
  40107c:	e4e4e4e4 	.word	0xe4e4e4e4
  401080:	e4e4e4e4 	.word	0xe4e4e4e4
  401084:	e416      	.short	0xe416
  401086:	0a          	.byte	0x0a
  401087:	00          	.byte	0x00
					unsigned valu = va_arg(ap, unsigned);
  401088:	9b00      	ldr	r3, [sp, #0]
  40108a:	1d18      	adds	r0, r3, #4
  40108c:	681b      	ldr	r3, [r3, #0]
  40108e:	9000      	str	r0, [sp, #0]
	if (u == 0) {
  401090:	2b00      	cmp	r3, #0
  401092:	f040 80e5 	bne.w	401260 <board_serial_programming_print+0x2a4>
		*s = '0';
  401096:	2301      	movs	r3, #1
  401098:	7014      	strb	r4, [r2, #0]
					s += nc;
  40109a:	441a      	add	r2, r3
					data++;
  40109c:	3102      	adds	r1, #2
					break;
  40109e:	e797      	b.n	400fd0 <board_serial_programming_print+0x14>
					char *vals = va_arg(ap, char *);
  4010a0:	9d00      	ldr	r5, [sp, #0]
  4010a2:	6828      	ldr	r0, [r5, #0]
  4010a4:	3504      	adds	r5, #4
					while (*vals) {
  4010a6:	7803      	ldrb	r3, [r0, #0]
					char *vals = va_arg(ap, char *);
  4010a8:	9500      	str	r5, [sp, #0]
					while (*vals) {
  4010aa:	b12b      	cbz	r3, 4010b8 <board_serial_programming_print+0xfc>
						*s = *vals;
  4010ac:	f802 3b01 	strb.w	r3, [r2], #1
					while (*vals) {
  4010b0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d1f9      	bne.n	4010ac <board_serial_programming_print+0xf0>
					data++;
  4010b8:	3102      	adds	r1, #2
					break;
  4010ba:	e789      	b.n	400fd0 <board_serial_programming_print+0x14>
					int vali = va_arg(ap, int);
  4010bc:	9b00      	ldr	r3, [sp, #0]
  4010be:	1d18      	adds	r0, r3, #4
  4010c0:	681b      	ldr	r3, [r3, #0]
					if (vali < 0) {
  4010c2:	2b00      	cmp	r3, #0
					int vali = va_arg(ap, int);
  4010c4:	9000      	str	r0, [sp, #0]
					if (vali < 0) {
  4010c6:	f2c0 8132 	blt.w	40132e <board_serial_programming_print+0x372>
	if (u == 0) {
  4010ca:	d0e4      	beq.n	401096 <board_serial_programming_print+0xda>
  4010cc:	4d62      	ldr	r5, [pc, #392]	; (401258 <board_serial_programming_print+0x29c>)
  4010ce:	ae01      	add	r6, sp, #4
  4010d0:	f105 0728 	add.w	r7, r5, #40	; 0x28
			if (u >= s_value[i]) {
  4010d4:	f855 0b04 	ldr.w	r0, [r5], #4
  4010d8:	4283      	cmp	r3, r0
  4010da:	f0c0 81a3 	bcc.w	401424 <board_serial_programming_print+0x468>
				u -= s_value[i];
  4010de:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4010e0:	4298      	cmp	r0, r3
  4010e2:	f200 81a5 	bhi.w	401430 <board_serial_programming_print+0x474>
				u -= s_value[i];
  4010e6:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4010e8:	4298      	cmp	r0, r3
  4010ea:	f200 81a3 	bhi.w	401434 <board_serial_programming_print+0x478>
				u -= s_value[i];
  4010ee:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4010f0:	4298      	cmp	r0, r3
  4010f2:	f200 81a1 	bhi.w	401438 <board_serial_programming_print+0x47c>
				u -= s_value[i];
  4010f6:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4010f8:	4298      	cmp	r0, r3
  4010fa:	f200 819f 	bhi.w	40143c <board_serial_programming_print+0x480>
				u -= s_value[i];
  4010fe:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401100:	4298      	cmp	r0, r3
  401102:	f200 819d 	bhi.w	401440 <board_serial_programming_print+0x484>
				u -= s_value[i];
  401106:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401108:	4298      	cmp	r0, r3
  40110a:	f200 819b 	bhi.w	401444 <board_serial_programming_print+0x488>
				u -= s_value[i];
  40110e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401110:	4298      	cmp	r0, r3
  401112:	f200 8199 	bhi.w	401448 <board_serial_programming_print+0x48c>
				u -= s_value[i];
  401116:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401118:	4298      	cmp	r0, r3
  40111a:	f200 8197 	bhi.w	40144c <board_serial_programming_print+0x490>
				u -= s_value[i];
  40111e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401120:	4298      	cmp	r0, r3
  401122:	f200 8195 	bhi.w	401450 <board_serial_programming_print+0x494>
				u -= s_value[i];
  401126:	1a1b      	subs	r3, r3, r0
  401128:	203a      	movs	r0, #58	; 0x3a
	for (i = 0; i < 10; i++) {
  40112a:	42af      	cmp	r7, r5
		tmp_buf[i] = m + '0';
  40112c:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < 10; i++) {
  401130:	d1d0      	bne.n	4010d4 <board_serial_programming_print+0x118>
		if (tmp_buf[i] != '0') {
  401132:	f89d 3004 	ldrb.w	r3, [sp, #4]
  401136:	2b30      	cmp	r3, #48	; 0x30
  401138:	f040 823d 	bne.w	4015b6 <board_serial_programming_print+0x5fa>
  40113c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  401140:	2b30      	cmp	r3, #48	; 0x30
  401142:	f040 82a3 	bne.w	40168c <board_serial_programming_print+0x6d0>
  401146:	f89d 3006 	ldrb.w	r3, [sp, #6]
  40114a:	2b30      	cmp	r3, #48	; 0x30
  40114c:	f040 828f 	bne.w	40166e <board_serial_programming_print+0x6b2>
  401150:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401154:	2b30      	cmp	r3, #48	; 0x30
  401156:	f040 827b 	bne.w	401650 <board_serial_programming_print+0x694>
  40115a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  40115e:	2b30      	cmp	r3, #48	; 0x30
  401160:	f040 8267 	bne.w	401632 <board_serial_programming_print+0x676>
  401164:	f89d 3009 	ldrb.w	r3, [sp, #9]
  401168:	2b30      	cmp	r3, #48	; 0x30
  40116a:	f040 82ad 	bne.w	4016c8 <board_serial_programming_print+0x70c>
  40116e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401172:	2b30      	cmp	r3, #48	; 0x30
  401174:	f040 8299 	bne.w	4016aa <board_serial_programming_print+0x6ee>
  401178:	f89d 300b 	ldrb.w	r3, [sp, #11]
  40117c:	2b30      	cmp	r3, #48	; 0x30
  40117e:	f000 80ca 	beq.w	401316 <board_serial_programming_print+0x35a>
  401182:	f04f 0e0f 	mov.w	lr, #15
  401186:	270e      	movs	r7, #14
  401188:	260d      	movs	r6, #13
  40118a:	250c      	movs	r5, #12
  40118c:	f04f 0c0b 	mov.w	ip, #11
  401190:	200a      	movs	r0, #10
  401192:	f04f 0809 	mov.w	r8, #9
  401196:	f04f 0908 	mov.w	r9, #8
	for (i = 0; i < 10; i++) {
  40119a:	f04f 0a07 	mov.w	sl, #7
		*s++ = tmp_buf[i];
  40119e:	f10d 0b10 	add.w	fp, sp, #16
  4011a2:	7013      	strb	r3, [r2, #0]
	for (; i < 10; i++) {
  4011a4:	280a      	cmp	r0, #10
		*s++ = tmp_buf[i];
  4011a6:	44d9      	add	r9, fp
  4011a8:	44d8      	add	r8, fp
  4011aa:	f819 9c0c 	ldrb.w	r9, [r9, #-12]
  4011ae:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
  4011b2:	f882 9001 	strb.w	r9, [r2, #1]
  4011b6:	7093      	strb	r3, [r2, #2]
	for (; i < 10; i++) {
  4011b8:	f000 8152 	beq.w	401460 <board_serial_programming_print+0x4a4>
		*s++ = tmp_buf[i];
  4011bc:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4011be:	f1bc 0f09 	cmp.w	ip, #9
		*s++ = tmp_buf[i];
  4011c2:	4418      	add	r0, r3
  4011c4:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
  4011c8:	70d3      	strb	r3, [r2, #3]
	for (; i < 10; i++) {
  4011ca:	f300 8147 	bgt.w	40145c <board_serial_programming_print+0x4a0>
		*s++ = tmp_buf[i];
  4011ce:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4011d0:	2d09      	cmp	r5, #9
		*s++ = tmp_buf[i];
  4011d2:	449c      	add	ip, r3
  4011d4:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
  4011d8:	7113      	strb	r3, [r2, #4]
	for (; i < 10; i++) {
  4011da:	f300 813d 	bgt.w	401458 <board_serial_programming_print+0x49c>
		*s++ = tmp_buf[i];
  4011de:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4011e0:	2e09      	cmp	r6, #9
		*s++ = tmp_buf[i];
  4011e2:	441d      	add	r5, r3
  4011e4:	f815 3c0c 	ldrb.w	r3, [r5, #-12]
  4011e8:	7153      	strb	r3, [r2, #5]
	for (; i < 10; i++) {
  4011ea:	f300 8133 	bgt.w	401454 <board_serial_programming_print+0x498>
		*s++ = tmp_buf[i];
  4011ee:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4011f0:	2f09      	cmp	r7, #9
		*s++ = tmp_buf[i];
  4011f2:	441e      	add	r6, r3
  4011f4:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
  4011f8:	7193      	strb	r3, [r2, #6]
	for (; i < 10; i++) {
  4011fa:	f300 8181 	bgt.w	401500 <board_serial_programming_print+0x544>
		*s++ = tmp_buf[i];
  4011fe:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  401200:	f1be 0f09 	cmp.w	lr, #9
		*s++ = tmp_buf[i];
  401204:	441f      	add	r7, r3
  401206:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
  40120a:	71d3      	strb	r3, [r2, #7]
	for (; i < 10; i++) {
  40120c:	f300 8176 	bgt.w	4014fc <board_serial_programming_print+0x540>
		*s++ = tmp_buf[i];
  401210:	ab04      	add	r3, sp, #16
  401212:	449e      	add	lr, r3
  401214:	f81e 3c0c 	ldrb.w	r3, [lr, #-12]
  401218:	7213      	strb	r3, [r2, #8]
	for (; i < 10; i++) {
  40121a:	f1ba 0f00 	cmp.w	sl, #0
  40121e:	f040 816b 	bne.w	4014f8 <board_serial_programming_print+0x53c>
		*s++ = tmp_buf[i];
  401222:	f89d 000d 	ldrb.w	r0, [sp, #13]
  401226:	230a      	movs	r3, #10
  401228:	7250      	strb	r0, [r2, #9]
  40122a:	e736      	b.n	40109a <board_serial_programming_print+0xde>
					char valch = va_arg(ap, int);
  40122c:	9b00      	ldr	r3, [sp, #0]
					data++;
  40122e:	3102      	adds	r1, #2
					char valch = va_arg(ap, int);
  401230:	1d18      	adds	r0, r3, #4
  401232:	681b      	ldr	r3, [r3, #0]
  401234:	9000      	str	r0, [sp, #0]
  401236:	f802 3b01 	strb.w	r3, [r2], #1
					break;
  40123a:	e6c9      	b.n	400fd0 <board_serial_programming_print+0x14>
				data++;
  40123c:	3102      	adds	r1, #2
				*s = *data;
  40123e:	f802 0b01 	strb.w	r0, [r2], #1
  401242:	e6c5      	b.n	400fd0 <board_serial_programming_print+0x14>
  401244:	2040175c 	.word	0x2040175c
  401248:	4000c000 	.word	0x4000c000
  40124c:	0040335d 	.word	0x0040335d
  401250:	00403335 	.word	0x00403335
  401254:	00403385 	.word	0x00403385
  401258:	0040ad7c 	.word	0x0040ad7c
  40125c:	00400ee1 	.word	0x00400ee1
  401260:	4ddc      	ldr	r5, [pc, #880]	; (4015d4 <board_serial_programming_print+0x618>)
  401262:	ae01      	add	r6, sp, #4
  401264:	f105 0728 	add.w	r7, r5, #40	; 0x28
			if (u >= s_value[i]) {
  401268:	f855 0b04 	ldr.w	r0, [r5], #4
  40126c:	4283      	cmp	r3, r0
  40126e:	f0c0 80c9 	bcc.w	401404 <board_serial_programming_print+0x448>
				u -= s_value[i];
  401272:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401274:	4298      	cmp	r0, r3
  401276:	f200 80c7 	bhi.w	401408 <board_serial_programming_print+0x44c>
				u -= s_value[i];
  40127a:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40127c:	4298      	cmp	r0, r3
  40127e:	f200 80c5 	bhi.w	40140c <board_serial_programming_print+0x450>
				u -= s_value[i];
  401282:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401284:	4298      	cmp	r0, r3
  401286:	f200 80c3 	bhi.w	401410 <board_serial_programming_print+0x454>
				u -= s_value[i];
  40128a:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40128c:	4298      	cmp	r0, r3
  40128e:	f200 80c1 	bhi.w	401414 <board_serial_programming_print+0x458>
				u -= s_value[i];
  401292:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401294:	4298      	cmp	r0, r3
  401296:	f200 80bf 	bhi.w	401418 <board_serial_programming_print+0x45c>
				u -= s_value[i];
  40129a:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  40129c:	4298      	cmp	r0, r3
  40129e:	f200 80bd 	bhi.w	40141c <board_serial_programming_print+0x460>
				u -= s_value[i];
  4012a2:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4012a4:	4298      	cmp	r0, r3
  4012a6:	f200 80bb 	bhi.w	401420 <board_serial_programming_print+0x464>
				u -= s_value[i];
  4012aa:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4012ac:	4298      	cmp	r0, r3
  4012ae:	f200 80bb 	bhi.w	401428 <board_serial_programming_print+0x46c>
				u -= s_value[i];
  4012b2:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  4012b4:	4298      	cmp	r0, r3
  4012b6:	f200 80b9 	bhi.w	40142c <board_serial_programming_print+0x470>
				u -= s_value[i];
  4012ba:	1a1b      	subs	r3, r3, r0
  4012bc:	203a      	movs	r0, #58	; 0x3a
	for (i = 0; i < 10; i++) {
  4012be:	42af      	cmp	r7, r5
		tmp_buf[i] = m + '0';
  4012c0:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < 10; i++) {
  4012c4:	d1d0      	bne.n	401268 <board_serial_programming_print+0x2ac>
		if (tmp_buf[i] != '0') {
  4012c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4012ca:	2b30      	cmp	r3, #48	; 0x30
  4012cc:	f040 80ca 	bne.w	401464 <board_serial_programming_print+0x4a8>
  4012d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4012d4:	2b30      	cmp	r3, #48	; 0x30
  4012d6:	f040 8132 	bne.w	40153e <board_serial_programming_print+0x582>
  4012da:	f89d 3006 	ldrb.w	r3, [sp, #6]
  4012de:	2b30      	cmp	r3, #48	; 0x30
  4012e0:	f040 813c 	bne.w	40155c <board_serial_programming_print+0x5a0>
  4012e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4012e8:	2b30      	cmp	r3, #48	; 0x30
  4012ea:	f040 8155 	bne.w	401598 <board_serial_programming_print+0x5dc>
  4012ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4012f2:	2b30      	cmp	r3, #48	; 0x30
  4012f4:	f040 8141 	bne.w	40157a <board_serial_programming_print+0x5be>
  4012f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4012fc:	2b30      	cmp	r3, #48	; 0x30
  4012fe:	f040 8189 	bne.w	401614 <board_serial_programming_print+0x658>
  401302:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401306:	2b30      	cmp	r3, #48	; 0x30
  401308:	f040 8175 	bne.w	4015f6 <board_serial_programming_print+0x63a>
  40130c:	f89d 300b 	ldrb.w	r3, [sp, #11]
  401310:	2b30      	cmp	r3, #48	; 0x30
  401312:	f040 8161 	bne.w	4015d8 <board_serial_programming_print+0x61c>
  401316:	f89d 000c 	ldrb.w	r0, [sp, #12]
  40131a:	2830      	cmp	r0, #48	; 0x30
  40131c:	f040 8106 	bne.w	40152c <board_serial_programming_print+0x570>
  401320:	f89d 300d 	ldrb.w	r3, [sp, #13]
  401324:	2b30      	cmp	r3, #48	; 0x30
  401326:	f040 8107 	bne.w	401538 <board_serial_programming_print+0x57c>
  40132a:	2300      	movs	r3, #0
  40132c:	e6b5      	b.n	40109a <board_serial_programming_print+0xde>
  40132e:	4da9      	ldr	r5, [pc, #676]	; (4015d4 <board_serial_programming_print+0x618>)
						*s++ = '-';
  401330:	202d      	movs	r0, #45	; 0x2d
						nc = printu_override(s, -vali);
  401332:	425b      	negs	r3, r3
  401334:	ae01      	add	r6, sp, #4
  401336:	f105 0728 	add.w	r7, r5, #40	; 0x28
						*s++ = '-';
  40133a:	7010      	strb	r0, [r2, #0]
			if (u >= s_value[i]) {
  40133c:	f855 0b04 	ldr.w	r0, [r5], #4
  401340:	4298      	cmp	r0, r3
  401342:	f200 80df 	bhi.w	401504 <board_serial_programming_print+0x548>
				u -= s_value[i];
  401346:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401348:	4298      	cmp	r0, r3
  40134a:	f200 80df 	bhi.w	40150c <board_serial_programming_print+0x550>
				u -= s_value[i];
  40134e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401350:	4298      	cmp	r0, r3
  401352:	f200 80d9 	bhi.w	401508 <board_serial_programming_print+0x54c>
				u -= s_value[i];
  401356:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401358:	4298      	cmp	r0, r3
  40135a:	f200 80dd 	bhi.w	401518 <board_serial_programming_print+0x55c>
				u -= s_value[i];
  40135e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401360:	4298      	cmp	r0, r3
  401362:	f200 80d7 	bhi.w	401514 <board_serial_programming_print+0x558>
				u -= s_value[i];
  401366:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401368:	4298      	cmp	r0, r3
  40136a:	f200 80d1 	bhi.w	401510 <board_serial_programming_print+0x554>
				u -= s_value[i];
  40136e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401370:	4298      	cmp	r0, r3
  401372:	f200 80d3 	bhi.w	40151c <board_serial_programming_print+0x560>
				u -= s_value[i];
  401376:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401378:	4298      	cmp	r0, r3
  40137a:	f200 80d1 	bhi.w	401520 <board_serial_programming_print+0x564>
				u -= s_value[i];
  40137e:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401380:	4298      	cmp	r0, r3
  401382:	f200 80cf 	bhi.w	401524 <board_serial_programming_print+0x568>
				u -= s_value[i];
  401386:	1a1b      	subs	r3, r3, r0
			if (u >= s_value[i]) {
  401388:	4298      	cmp	r0, r3
  40138a:	f200 80cd 	bhi.w	401528 <board_serial_programming_print+0x56c>
				u -= s_value[i];
  40138e:	1a1b      	subs	r3, r3, r0
  401390:	203a      	movs	r0, #58	; 0x3a
	for (i = 0; i < 10; i++) {
  401392:	42bd      	cmp	r5, r7
		tmp_buf[i] = m + '0';
  401394:	f806 0b01 	strb.w	r0, [r6], #1
	for (i = 0; i < 10; i++) {
  401398:	d1d0      	bne.n	40133c <board_serial_programming_print+0x380>
		if (tmp_buf[i] != '0') {
  40139a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40139e:	2b30      	cmp	r3, #48	; 0x30
  4013a0:	f040 8260 	bne.w	401864 <board_serial_programming_print+0x8a8>
  4013a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4013a8:	2b30      	cmp	r3, #48	; 0x30
  4013aa:	f040 824c 	bne.w	401846 <board_serial_programming_print+0x88a>
  4013ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
  4013b2:	2b30      	cmp	r3, #48	; 0x30
  4013b4:	f040 8238 	bne.w	401828 <board_serial_programming_print+0x86c>
  4013b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4013bc:	2b30      	cmp	r3, #48	; 0x30
  4013be:	f040 8224 	bne.w	40180a <board_serial_programming_print+0x84e>
  4013c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4013c6:	2b30      	cmp	r3, #48	; 0x30
  4013c8:	f040 8210 	bne.w	4017ec <board_serial_programming_print+0x830>
  4013cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
  4013d0:	2b30      	cmp	r3, #48	; 0x30
  4013d2:	f040 81fc 	bne.w	4017ce <board_serial_programming_print+0x812>
  4013d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4013da:	2b30      	cmp	r3, #48	; 0x30
  4013dc:	f040 81e8 	bne.w	4017b0 <board_serial_programming_print+0x7f4>
  4013e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4013e4:	2b30      	cmp	r3, #48	; 0x30
  4013e6:	f040 8187 	bne.w	4016f8 <board_serial_programming_print+0x73c>
  4013ea:	f89d 000c 	ldrb.w	r0, [sp, #12]
  4013ee:	2830      	cmp	r0, #48	; 0x30
  4013f0:	f040 817c 	bne.w	4016ec <board_serial_programming_print+0x730>
  4013f4:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4013f8:	2b30      	cmp	r3, #48	; 0x30
  4013fa:	f040 8174 	bne.w	4016e6 <board_serial_programming_print+0x72a>
  4013fe:	2300      	movs	r3, #0
						*s++ = '-';
  401400:	3201      	adds	r2, #1
  401402:	e64a      	b.n	40109a <board_serial_programming_print+0xde>
			if (u >= s_value[i]) {
  401404:	2030      	movs	r0, #48	; 0x30
  401406:	e75a      	b.n	4012be <board_serial_programming_print+0x302>
  401408:	2031      	movs	r0, #49	; 0x31
  40140a:	e758      	b.n	4012be <board_serial_programming_print+0x302>
  40140c:	2032      	movs	r0, #50	; 0x32
  40140e:	e756      	b.n	4012be <board_serial_programming_print+0x302>
  401410:	2033      	movs	r0, #51	; 0x33
  401412:	e754      	b.n	4012be <board_serial_programming_print+0x302>
  401414:	2034      	movs	r0, #52	; 0x34
  401416:	e752      	b.n	4012be <board_serial_programming_print+0x302>
  401418:	2035      	movs	r0, #53	; 0x35
  40141a:	e750      	b.n	4012be <board_serial_programming_print+0x302>
  40141c:	2036      	movs	r0, #54	; 0x36
  40141e:	e74e      	b.n	4012be <board_serial_programming_print+0x302>
  401420:	2037      	movs	r0, #55	; 0x37
  401422:	e74c      	b.n	4012be <board_serial_programming_print+0x302>
  401424:	2030      	movs	r0, #48	; 0x30
  401426:	e680      	b.n	40112a <board_serial_programming_print+0x16e>
  401428:	2038      	movs	r0, #56	; 0x38
  40142a:	e748      	b.n	4012be <board_serial_programming_print+0x302>
  40142c:	2039      	movs	r0, #57	; 0x39
  40142e:	e746      	b.n	4012be <board_serial_programming_print+0x302>
  401430:	2031      	movs	r0, #49	; 0x31
  401432:	e67a      	b.n	40112a <board_serial_programming_print+0x16e>
  401434:	2032      	movs	r0, #50	; 0x32
  401436:	e678      	b.n	40112a <board_serial_programming_print+0x16e>
  401438:	2033      	movs	r0, #51	; 0x33
  40143a:	e676      	b.n	40112a <board_serial_programming_print+0x16e>
  40143c:	2034      	movs	r0, #52	; 0x34
  40143e:	e674      	b.n	40112a <board_serial_programming_print+0x16e>
  401440:	2035      	movs	r0, #53	; 0x35
  401442:	e672      	b.n	40112a <board_serial_programming_print+0x16e>
  401444:	2036      	movs	r0, #54	; 0x36
  401446:	e670      	b.n	40112a <board_serial_programming_print+0x16e>
  401448:	2037      	movs	r0, #55	; 0x37
  40144a:	e66e      	b.n	40112a <board_serial_programming_print+0x16e>
  40144c:	2038      	movs	r0, #56	; 0x38
  40144e:	e66c      	b.n	40112a <board_serial_programming_print+0x16e>
  401450:	2039      	movs	r0, #57	; 0x39
  401452:	e66a      	b.n	40112a <board_serial_programming_print+0x16e>
	for (; i < 10; i++) {
  401454:	2306      	movs	r3, #6
  401456:	e620      	b.n	40109a <board_serial_programming_print+0xde>
  401458:	2305      	movs	r3, #5
  40145a:	e61e      	b.n	40109a <board_serial_programming_print+0xde>
  40145c:	2304      	movs	r3, #4
  40145e:	e61c      	b.n	40109a <board_serial_programming_print+0xde>
  401460:	2303      	movs	r3, #3
  401462:	e61a      	b.n	40109a <board_serial_programming_print+0xde>
		if (tmp_buf[i] != '0') {
  401464:	f04f 0c08 	mov.w	ip, #8
  401468:	2707      	movs	r7, #7
  40146a:	2606      	movs	r6, #6
  40146c:	2505      	movs	r5, #5
  40146e:	f04f 0e04 	mov.w	lr, #4
  401472:	2003      	movs	r0, #3
  401474:	f04f 0802 	mov.w	r8, #2
  401478:	f04f 0901 	mov.w	r9, #1
  40147c:	f04f 0a00 	mov.w	sl, #0
		*s++ = tmp_buf[i];
  401480:	f10d 0b10 	add.w	fp, sp, #16
  401484:	7013      	strb	r3, [r2, #0]
	for (; i < 10; i++) {
  401486:	280a      	cmp	r0, #10
		*s++ = tmp_buf[i];
  401488:	44d9      	add	r9, fp
  40148a:	44d8      	add	r8, fp
  40148c:	f819 9c0c 	ldrb.w	r9, [r9, #-12]
  401490:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
  401494:	f882 9001 	strb.w	r9, [r2, #1]
  401498:	7093      	strb	r3, [r2, #2]
	for (; i < 10; i++) {
  40149a:	d0e1      	beq.n	401460 <board_serial_programming_print+0x4a4>
		*s++ = tmp_buf[i];
  40149c:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  40149e:	f1be 0f09 	cmp.w	lr, #9
		*s++ = tmp_buf[i];
  4014a2:	4418      	add	r0, r3
  4014a4:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
  4014a8:	70d3      	strb	r3, [r2, #3]
	for (; i < 10; i++) {
  4014aa:	dcd7      	bgt.n	40145c <board_serial_programming_print+0x4a0>
		*s++ = tmp_buf[i];
  4014ac:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4014ae:	2d09      	cmp	r5, #9
		*s++ = tmp_buf[i];
  4014b0:	449e      	add	lr, r3
  4014b2:	f81e 3c0c 	ldrb.w	r3, [lr, #-12]
  4014b6:	7113      	strb	r3, [r2, #4]
	for (; i < 10; i++) {
  4014b8:	dcce      	bgt.n	401458 <board_serial_programming_print+0x49c>
		*s++ = tmp_buf[i];
  4014ba:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4014bc:	2e09      	cmp	r6, #9
		*s++ = tmp_buf[i];
  4014be:	441d      	add	r5, r3
  4014c0:	f815 3c0c 	ldrb.w	r3, [r5, #-12]
  4014c4:	7153      	strb	r3, [r2, #5]
	for (; i < 10; i++) {
  4014c6:	dcc5      	bgt.n	401454 <board_serial_programming_print+0x498>
		*s++ = tmp_buf[i];
  4014c8:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4014ca:	2f09      	cmp	r7, #9
		*s++ = tmp_buf[i];
  4014cc:	441e      	add	r6, r3
  4014ce:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
  4014d2:	7193      	strb	r3, [r2, #6]
	for (; i < 10; i++) {
  4014d4:	dc14      	bgt.n	401500 <board_serial_programming_print+0x544>
		*s++ = tmp_buf[i];
  4014d6:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  4014d8:	f1bc 0f09 	cmp.w	ip, #9
		*s++ = tmp_buf[i];
  4014dc:	441f      	add	r7, r3
  4014de:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
  4014e2:	71d3      	strb	r3, [r2, #7]
	for (; i < 10; i++) {
  4014e4:	dc0a      	bgt.n	4014fc <board_serial_programming_print+0x540>
		*s++ = tmp_buf[i];
  4014e6:	ab04      	add	r3, sp, #16
  4014e8:	449c      	add	ip, r3
  4014ea:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
  4014ee:	7213      	strb	r3, [r2, #8]
	for (; i < 10; i++) {
  4014f0:	f1ba 0f00 	cmp.w	sl, #0
  4014f4:	f43f ae95 	beq.w	401222 <board_serial_programming_print+0x266>
  4014f8:	2309      	movs	r3, #9
  4014fa:	e5ce      	b.n	40109a <board_serial_programming_print+0xde>
  4014fc:	2308      	movs	r3, #8
  4014fe:	e5cc      	b.n	40109a <board_serial_programming_print+0xde>
  401500:	2307      	movs	r3, #7
  401502:	e5ca      	b.n	40109a <board_serial_programming_print+0xde>
			if (u >= s_value[i]) {
  401504:	2030      	movs	r0, #48	; 0x30
  401506:	e744      	b.n	401392 <board_serial_programming_print+0x3d6>
  401508:	2032      	movs	r0, #50	; 0x32
  40150a:	e742      	b.n	401392 <board_serial_programming_print+0x3d6>
  40150c:	2031      	movs	r0, #49	; 0x31
  40150e:	e740      	b.n	401392 <board_serial_programming_print+0x3d6>
  401510:	2035      	movs	r0, #53	; 0x35
  401512:	e73e      	b.n	401392 <board_serial_programming_print+0x3d6>
  401514:	2034      	movs	r0, #52	; 0x34
  401516:	e73c      	b.n	401392 <board_serial_programming_print+0x3d6>
  401518:	2033      	movs	r0, #51	; 0x33
  40151a:	e73a      	b.n	401392 <board_serial_programming_print+0x3d6>
  40151c:	2036      	movs	r0, #54	; 0x36
  40151e:	e738      	b.n	401392 <board_serial_programming_print+0x3d6>
  401520:	2037      	movs	r0, #55	; 0x37
  401522:	e736      	b.n	401392 <board_serial_programming_print+0x3d6>
  401524:	2038      	movs	r0, #56	; 0x38
  401526:	e734      	b.n	401392 <board_serial_programming_print+0x3d6>
  401528:	2039      	movs	r0, #57	; 0x39
  40152a:	e732      	b.n	401392 <board_serial_programming_print+0x3d6>
		*s++ = tmp_buf[i];
  40152c:	f89d 500d 	ldrb.w	r5, [sp, #13]
  401530:	2302      	movs	r3, #2
  401532:	7010      	strb	r0, [r2, #0]
  401534:	7055      	strb	r5, [r2, #1]
  401536:	e5b0      	b.n	40109a <board_serial_programming_print+0xde>
  401538:	7013      	strb	r3, [r2, #0]
  40153a:	2301      	movs	r3, #1
  40153c:	e5ad      	b.n	40109a <board_serial_programming_print+0xde>
		if (tmp_buf[i] != '0') {
  40153e:	f04f 0c09 	mov.w	ip, #9
  401542:	2708      	movs	r7, #8
  401544:	2607      	movs	r6, #7
  401546:	2506      	movs	r5, #6
  401548:	f04f 0e05 	mov.w	lr, #5
  40154c:	2004      	movs	r0, #4
  40154e:	f04f 0803 	mov.w	r8, #3
  401552:	f04f 0902 	mov.w	r9, #2
	for (i = 0; i < 10; i++) {
  401556:	f04f 0a01 	mov.w	sl, #1
  40155a:	e791      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  40155c:	f04f 0c0a 	mov.w	ip, #10
  401560:	2709      	movs	r7, #9
  401562:	2608      	movs	r6, #8
  401564:	2507      	movs	r5, #7
  401566:	f04f 0e06 	mov.w	lr, #6
  40156a:	2005      	movs	r0, #5
  40156c:	f04f 0804 	mov.w	r8, #4
  401570:	f04f 0903 	mov.w	r9, #3
	for (i = 0; i < 10; i++) {
  401574:	f04f 0a02 	mov.w	sl, #2
  401578:	e782      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  40157a:	f04f 0c0c 	mov.w	ip, #12
  40157e:	270b      	movs	r7, #11
  401580:	260a      	movs	r6, #10
  401582:	2509      	movs	r5, #9
  401584:	f04f 0e08 	mov.w	lr, #8
  401588:	2007      	movs	r0, #7
  40158a:	f04f 0806 	mov.w	r8, #6
  40158e:	f04f 0905 	mov.w	r9, #5
	for (i = 0; i < 10; i++) {
  401592:	f04f 0a04 	mov.w	sl, #4
  401596:	e773      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  401598:	f04f 0c0b 	mov.w	ip, #11
  40159c:	270a      	movs	r7, #10
  40159e:	2609      	movs	r6, #9
  4015a0:	2508      	movs	r5, #8
  4015a2:	f04f 0e07 	mov.w	lr, #7
  4015a6:	2006      	movs	r0, #6
  4015a8:	f04f 0805 	mov.w	r8, #5
  4015ac:	f04f 0904 	mov.w	r9, #4
	for (i = 0; i < 10; i++) {
  4015b0:	f04f 0a03 	mov.w	sl, #3
  4015b4:	e764      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  4015b6:	f04f 0e08 	mov.w	lr, #8
  4015ba:	2707      	movs	r7, #7
  4015bc:	2606      	movs	r6, #6
  4015be:	2505      	movs	r5, #5
  4015c0:	f04f 0c04 	mov.w	ip, #4
  4015c4:	2003      	movs	r0, #3
  4015c6:	f04f 0802 	mov.w	r8, #2
  4015ca:	f04f 0901 	mov.w	r9, #1
  4015ce:	f04f 0a00 	mov.w	sl, #0
  4015d2:	e5e4      	b.n	40119e <board_serial_programming_print+0x1e2>
  4015d4:	0040ad7c 	.word	0x0040ad7c
  4015d8:	f04f 0c0f 	mov.w	ip, #15
  4015dc:	270e      	movs	r7, #14
  4015de:	260d      	movs	r6, #13
  4015e0:	250c      	movs	r5, #12
  4015e2:	f04f 0e0b 	mov.w	lr, #11
  4015e6:	200a      	movs	r0, #10
  4015e8:	f04f 0809 	mov.w	r8, #9
  4015ec:	f04f 0908 	mov.w	r9, #8
	for (i = 0; i < 10; i++) {
  4015f0:	f04f 0a07 	mov.w	sl, #7
  4015f4:	e744      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  4015f6:	f04f 0c0e 	mov.w	ip, #14
  4015fa:	270d      	movs	r7, #13
  4015fc:	260c      	movs	r6, #12
  4015fe:	250b      	movs	r5, #11
  401600:	f04f 0e0a 	mov.w	lr, #10
  401604:	2009      	movs	r0, #9
  401606:	f04f 0808 	mov.w	r8, #8
  40160a:	f04f 0907 	mov.w	r9, #7
	for (i = 0; i < 10; i++) {
  40160e:	f04f 0a06 	mov.w	sl, #6
  401612:	e735      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  401614:	f04f 0c0d 	mov.w	ip, #13
  401618:	270c      	movs	r7, #12
  40161a:	260b      	movs	r6, #11
  40161c:	250a      	movs	r5, #10
  40161e:	f04f 0e09 	mov.w	lr, #9
  401622:	2008      	movs	r0, #8
  401624:	f04f 0807 	mov.w	r8, #7
  401628:	f04f 0906 	mov.w	r9, #6
	for (i = 0; i < 10; i++) {
  40162c:	f04f 0a05 	mov.w	sl, #5
  401630:	e726      	b.n	401480 <board_serial_programming_print+0x4c4>
		if (tmp_buf[i] != '0') {
  401632:	f04f 0e0c 	mov.w	lr, #12
  401636:	270b      	movs	r7, #11
  401638:	260a      	movs	r6, #10
  40163a:	2509      	movs	r5, #9
  40163c:	f04f 0c08 	mov.w	ip, #8
  401640:	2007      	movs	r0, #7
  401642:	f04f 0806 	mov.w	r8, #6
  401646:	f04f 0905 	mov.w	r9, #5
	for (i = 0; i < 10; i++) {
  40164a:	f04f 0a04 	mov.w	sl, #4
  40164e:	e5a6      	b.n	40119e <board_serial_programming_print+0x1e2>
		if (tmp_buf[i] != '0') {
  401650:	f04f 0e0b 	mov.w	lr, #11
  401654:	270a      	movs	r7, #10
  401656:	2609      	movs	r6, #9
  401658:	2508      	movs	r5, #8
  40165a:	f04f 0c07 	mov.w	ip, #7
  40165e:	2006      	movs	r0, #6
  401660:	f04f 0805 	mov.w	r8, #5
  401664:	f04f 0904 	mov.w	r9, #4
	for (i = 0; i < 10; i++) {
  401668:	f04f 0a03 	mov.w	sl, #3
  40166c:	e597      	b.n	40119e <board_serial_programming_print+0x1e2>
		if (tmp_buf[i] != '0') {
  40166e:	f04f 0e0a 	mov.w	lr, #10
  401672:	2709      	movs	r7, #9
  401674:	2608      	movs	r6, #8
  401676:	2507      	movs	r5, #7
  401678:	f04f 0c06 	mov.w	ip, #6
  40167c:	2005      	movs	r0, #5
  40167e:	f04f 0804 	mov.w	r8, #4
  401682:	f04f 0903 	mov.w	r9, #3
	for (i = 0; i < 10; i++) {
  401686:	f04f 0a02 	mov.w	sl, #2
  40168a:	e588      	b.n	40119e <board_serial_programming_print+0x1e2>
		if (tmp_buf[i] != '0') {
  40168c:	f04f 0e09 	mov.w	lr, #9
  401690:	2708      	movs	r7, #8
  401692:	2607      	movs	r6, #7
  401694:	2506      	movs	r5, #6
  401696:	f04f 0c05 	mov.w	ip, #5
  40169a:	2004      	movs	r0, #4
  40169c:	f04f 0803 	mov.w	r8, #3
  4016a0:	f04f 0902 	mov.w	r9, #2
	for (i = 0; i < 10; i++) {
  4016a4:	f04f 0a01 	mov.w	sl, #1
  4016a8:	e579      	b.n	40119e <board_serial_programming_print+0x1e2>
		if (tmp_buf[i] != '0') {
  4016aa:	f04f 0e0e 	mov.w	lr, #14
  4016ae:	270d      	movs	r7, #13
  4016b0:	260c      	movs	r6, #12
  4016b2:	250b      	movs	r5, #11
  4016b4:	f04f 0c0a 	mov.w	ip, #10
  4016b8:	2009      	movs	r0, #9
  4016ba:	f04f 0808 	mov.w	r8, #8
  4016be:	f04f 0907 	mov.w	r9, #7
	for (i = 0; i < 10; i++) {
  4016c2:	f04f 0a06 	mov.w	sl, #6
  4016c6:	e56a      	b.n	40119e <board_serial_programming_print+0x1e2>
		if (tmp_buf[i] != '0') {
  4016c8:	f04f 0e0d 	mov.w	lr, #13
  4016cc:	270c      	movs	r7, #12
  4016ce:	260b      	movs	r6, #11
  4016d0:	250a      	movs	r5, #10
  4016d2:	f04f 0c09 	mov.w	ip, #9
  4016d6:	2008      	movs	r0, #8
  4016d8:	f04f 0807 	mov.w	r8, #7
  4016dc:	f04f 0906 	mov.w	r9, #6
	for (i = 0; i < 10; i++) {
  4016e0:	f04f 0a05 	mov.w	sl, #5
  4016e4:	e55b      	b.n	40119e <board_serial_programming_print+0x1e2>
		*s++ = tmp_buf[i];
  4016e6:	7053      	strb	r3, [r2, #1]
  4016e8:	2301      	movs	r3, #1
  4016ea:	e689      	b.n	401400 <board_serial_programming_print+0x444>
  4016ec:	f89d 500d 	ldrb.w	r5, [sp, #13]
  4016f0:	2302      	movs	r3, #2
  4016f2:	7050      	strb	r0, [r2, #1]
  4016f4:	7095      	strb	r5, [r2, #2]
  4016f6:	e683      	b.n	401400 <board_serial_programming_print+0x444>
		if (tmp_buf[i] != '0') {
  4016f8:	f04f 0e0f 	mov.w	lr, #15
  4016fc:	270e      	movs	r7, #14
  4016fe:	250d      	movs	r5, #13
  401700:	260c      	movs	r6, #12
  401702:	f04f 0c0b 	mov.w	ip, #11
  401706:	200a      	movs	r0, #10
  401708:	f04f 0908 	mov.w	r9, #8
  40170c:	f04f 0809 	mov.w	r8, #9
	for (i = 0; i < 10; i++) {
  401710:	f04f 0a07 	mov.w	sl, #7
		*s++ = tmp_buf[i];
  401714:	f10d 0b10 	add.w	fp, sp, #16
  401718:	7053      	strb	r3, [r2, #1]
	for (; i < 10; i++) {
  40171a:	280a      	cmp	r0, #10
		*s++ = tmp_buf[i];
  40171c:	44d9      	add	r9, fp
  40171e:	44d8      	add	r8, fp
  401720:	f819 9c0c 	ldrb.w	r9, [r9, #-12]
  401724:	f818 3c0c 	ldrb.w	r3, [r8, #-12]
  401728:	f882 9002 	strb.w	r9, [r2, #2]
  40172c:	70d3      	strb	r3, [r2, #3]
	for (; i < 10; i++) {
  40172e:	d031      	beq.n	401794 <board_serial_programming_print+0x7d8>
		*s++ = tmp_buf[i];
  401730:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  401732:	f1bc 0f09 	cmp.w	ip, #9
		*s++ = tmp_buf[i];
  401736:	4418      	add	r0, r3
  401738:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
  40173c:	7113      	strb	r3, [r2, #4]
	for (; i < 10; i++) {
  40173e:	dc35      	bgt.n	4017ac <board_serial_programming_print+0x7f0>
		*s++ = tmp_buf[i];
  401740:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  401742:	2e09      	cmp	r6, #9
		*s++ = tmp_buf[i];
  401744:	449c      	add	ip, r3
  401746:	f81c 3c0c 	ldrb.w	r3, [ip, #-12]
  40174a:	7153      	strb	r3, [r2, #5]
	for (; i < 10; i++) {
  40174c:	dc2c      	bgt.n	4017a8 <board_serial_programming_print+0x7ec>
		*s++ = tmp_buf[i];
  40174e:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  401750:	2d09      	cmp	r5, #9
		*s++ = tmp_buf[i];
  401752:	441e      	add	r6, r3
  401754:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
  401758:	7193      	strb	r3, [r2, #6]
	for (; i < 10; i++) {
  40175a:	dc23      	bgt.n	4017a4 <board_serial_programming_print+0x7e8>
		*s++ = tmp_buf[i];
  40175c:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  40175e:	2f09      	cmp	r7, #9
		*s++ = tmp_buf[i];
  401760:	441d      	add	r5, r3
  401762:	f815 3c0c 	ldrb.w	r3, [r5, #-12]
  401766:	71d3      	strb	r3, [r2, #7]
	for (; i < 10; i++) {
  401768:	dc1a      	bgt.n	4017a0 <board_serial_programming_print+0x7e4>
		*s++ = tmp_buf[i];
  40176a:	ab04      	add	r3, sp, #16
	for (; i < 10; i++) {
  40176c:	f1be 0f09 	cmp.w	lr, #9
		*s++ = tmp_buf[i];
  401770:	441f      	add	r7, r3
  401772:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
  401776:	7213      	strb	r3, [r2, #8]
	for (; i < 10; i++) {
  401778:	dc10      	bgt.n	40179c <board_serial_programming_print+0x7e0>
		*s++ = tmp_buf[i];
  40177a:	ab04      	add	r3, sp, #16
  40177c:	449e      	add	lr, r3
  40177e:	f81e 3c0c 	ldrb.w	r3, [lr, #-12]
  401782:	7253      	strb	r3, [r2, #9]
	for (; i < 10; i++) {
  401784:	f1ba 0f00 	cmp.w	sl, #0
  401788:	d106      	bne.n	401798 <board_serial_programming_print+0x7dc>
		*s++ = tmp_buf[i];
  40178a:	f89d 000d 	ldrb.w	r0, [sp, #13]
  40178e:	230a      	movs	r3, #10
  401790:	7290      	strb	r0, [r2, #10]
  401792:	e635      	b.n	401400 <board_serial_programming_print+0x444>
	for (; i < 10; i++) {
  401794:	2303      	movs	r3, #3
  401796:	e633      	b.n	401400 <board_serial_programming_print+0x444>
  401798:	2309      	movs	r3, #9
  40179a:	e631      	b.n	401400 <board_serial_programming_print+0x444>
  40179c:	2308      	movs	r3, #8
  40179e:	e62f      	b.n	401400 <board_serial_programming_print+0x444>
  4017a0:	2307      	movs	r3, #7
  4017a2:	e62d      	b.n	401400 <board_serial_programming_print+0x444>
  4017a4:	2306      	movs	r3, #6
  4017a6:	e62b      	b.n	401400 <board_serial_programming_print+0x444>
  4017a8:	2305      	movs	r3, #5
  4017aa:	e629      	b.n	401400 <board_serial_programming_print+0x444>
  4017ac:	2304      	movs	r3, #4
  4017ae:	e627      	b.n	401400 <board_serial_programming_print+0x444>
		if (tmp_buf[i] != '0') {
  4017b0:	f04f 0e0e 	mov.w	lr, #14
  4017b4:	270d      	movs	r7, #13
  4017b6:	250c      	movs	r5, #12
  4017b8:	260b      	movs	r6, #11
  4017ba:	f04f 0c0a 	mov.w	ip, #10
  4017be:	2009      	movs	r0, #9
  4017c0:	f04f 0907 	mov.w	r9, #7
  4017c4:	f04f 0808 	mov.w	r8, #8
	for (i = 0; i < 10; i++) {
  4017c8:	f04f 0a06 	mov.w	sl, #6
  4017cc:	e7a2      	b.n	401714 <board_serial_programming_print+0x758>
		if (tmp_buf[i] != '0') {
  4017ce:	f04f 0e0d 	mov.w	lr, #13
  4017d2:	270c      	movs	r7, #12
  4017d4:	250b      	movs	r5, #11
  4017d6:	260a      	movs	r6, #10
  4017d8:	f04f 0c09 	mov.w	ip, #9
  4017dc:	2008      	movs	r0, #8
  4017de:	f04f 0906 	mov.w	r9, #6
  4017e2:	f04f 0807 	mov.w	r8, #7
	for (i = 0; i < 10; i++) {
  4017e6:	f04f 0a05 	mov.w	sl, #5
  4017ea:	e793      	b.n	401714 <board_serial_programming_print+0x758>
		if (tmp_buf[i] != '0') {
  4017ec:	f04f 0e0c 	mov.w	lr, #12
  4017f0:	270b      	movs	r7, #11
  4017f2:	250a      	movs	r5, #10
  4017f4:	2609      	movs	r6, #9
  4017f6:	f04f 0c08 	mov.w	ip, #8
  4017fa:	2007      	movs	r0, #7
  4017fc:	f04f 0905 	mov.w	r9, #5
  401800:	f04f 0806 	mov.w	r8, #6
	for (i = 0; i < 10; i++) {
  401804:	f04f 0a04 	mov.w	sl, #4
  401808:	e784      	b.n	401714 <board_serial_programming_print+0x758>
		if (tmp_buf[i] != '0') {
  40180a:	f04f 0e0b 	mov.w	lr, #11
  40180e:	270a      	movs	r7, #10
  401810:	2509      	movs	r5, #9
  401812:	2608      	movs	r6, #8
  401814:	f04f 0c07 	mov.w	ip, #7
  401818:	2006      	movs	r0, #6
  40181a:	f04f 0904 	mov.w	r9, #4
  40181e:	f04f 0805 	mov.w	r8, #5
	for (i = 0; i < 10; i++) {
  401822:	f04f 0a03 	mov.w	sl, #3
  401826:	e775      	b.n	401714 <board_serial_programming_print+0x758>
		if (tmp_buf[i] != '0') {
  401828:	f04f 0e0a 	mov.w	lr, #10
  40182c:	2709      	movs	r7, #9
  40182e:	2508      	movs	r5, #8
  401830:	2607      	movs	r6, #7
  401832:	f04f 0c06 	mov.w	ip, #6
  401836:	2005      	movs	r0, #5
  401838:	f04f 0903 	mov.w	r9, #3
  40183c:	f04f 0804 	mov.w	r8, #4
	for (i = 0; i < 10; i++) {
  401840:	f04f 0a02 	mov.w	sl, #2
  401844:	e766      	b.n	401714 <board_serial_programming_print+0x758>
		if (tmp_buf[i] != '0') {
  401846:	f04f 0e09 	mov.w	lr, #9
  40184a:	2708      	movs	r7, #8
  40184c:	2507      	movs	r5, #7
  40184e:	2606      	movs	r6, #6
  401850:	f04f 0c05 	mov.w	ip, #5
  401854:	2004      	movs	r0, #4
  401856:	f04f 0902 	mov.w	r9, #2
  40185a:	f04f 0803 	mov.w	r8, #3
	for (i = 0; i < 10; i++) {
  40185e:	f04f 0a01 	mov.w	sl, #1
  401862:	e757      	b.n	401714 <board_serial_programming_print+0x758>
		if (tmp_buf[i] != '0') {
  401864:	f04f 0e08 	mov.w	lr, #8
  401868:	2707      	movs	r7, #7
  40186a:	2506      	movs	r5, #6
  40186c:	2605      	movs	r6, #5
  40186e:	f04f 0c04 	mov.w	ip, #4
  401872:	2003      	movs	r0, #3
  401874:	f04f 0901 	mov.w	r9, #1
  401878:	f04f 0802 	mov.w	r8, #2
  40187c:	f04f 0a00 	mov.w	sl, #0
  401880:	e748      	b.n	401714 <board_serial_programming_print+0x758>
  401882:	bf00      	nop

00401884 <board_serial_programming_write_percent>:
{
  401884:	b570      	push	{r4, r5, r6, lr}
		prog_current_buffer->data[prog_current_buffer->position] = *data;
  401886:	4c1c      	ldr	r4, [pc, #112]	; (4018f8 <board_serial_programming_write_percent+0x74>)
	board_serial_programming_print("%d.%d", first, second);
  401888:	460a      	mov	r2, r1
  40188a:	4b1c      	ldr	r3, [pc, #112]	; (4018fc <board_serial_programming_write_percent+0x78>)
  40188c:	4601      	mov	r1, r0
  40188e:	481c      	ldr	r0, [pc, #112]	; (401900 <board_serial_programming_write_percent+0x7c>)
  401890:	4798      	blx	r3
		prog_current_buffer->data[prog_current_buffer->position] = *data;
  401892:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  401896:	2125      	movs	r1, #37	; 0x25
  401898:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
  40189c:	b292      	uxth	r2, r2
  40189e:	5499      	strb	r1, [r3, r2]
		prog_current_buffer->position++;
  4018a0:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
  4018a4:	3201      	adds	r2, #1
  4018a6:	b292      	uxth	r2, r2
  4018a8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		if (prog_current_buffer->position == SERIAL_DMA_BUFFER_SIZE)
  4018ac:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
  4018b0:	b29b      	uxth	r3, r3
  4018b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4018b6:	d009      	beq.n	4018cc <board_serial_programming_write_percent+0x48>
	timer_clock_enable(TC0, TIMER_CHANNEL_1);
  4018b8:	2101      	movs	r1, #1
  4018ba:	4812      	ldr	r0, [pc, #72]	; (401904 <board_serial_programming_write_percent+0x80>)
  4018bc:	4b12      	ldr	r3, [pc, #72]	; (401908 <board_serial_programming_write_percent+0x84>)
  4018be:	4798      	blx	r3
	timer_software_trigger(TC0, TIMER_CHANNEL_1);
  4018c0:	2101      	movs	r1, #1
  4018c2:	4810      	ldr	r0, [pc, #64]	; (401904 <board_serial_programming_write_percent+0x80>)
  4018c4:	4b11      	ldr	r3, [pc, #68]	; (40190c <board_serial_programming_write_percent+0x88>)
}
  4018c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	timer_software_trigger(TC0, TIMER_CHANNEL_1);
  4018ca:	4718      	bx	r3
	timer_clock_disable(TC0, TIMER_CHANNEL_1);
  4018cc:	2101      	movs	r1, #1
  4018ce:	480d      	ldr	r0, [pc, #52]	; (401904 <board_serial_programming_write_percent+0x80>)
  4018d0:	4b0f      	ldr	r3, [pc, #60]	; (401910 <board_serial_programming_write_percent+0x8c>)
  4018d2:	4798      	blx	r3
  4018d4:	6822      	ldr	r2, [r4, #0]
	while (prog_dma_buffer->dma_active)
  4018d6:	f892 3402 	ldrb.w	r3, [r2, #1026]	; 0x402
  4018da:	2b00      	cmp	r3, #0
  4018dc:	d1fb      	bne.n	4018d6 <board_serial_programming_write_percent+0x52>
	prog_dma_buffer = prog_current_buffer;
  4018de:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
			board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  4018e2:	4d0c      	ldr	r5, [pc, #48]	; (401914 <board_serial_programming_write_percent+0x90>)
  4018e4:	f8b3 1400 	ldrh.w	r1, [r3, #1024]	; 0x400
  4018e8:	4618      	mov	r0, r3
	prog_dma_buffer = prog_current_buffer;
  4018ea:	6023      	str	r3, [r4, #0]
			board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  4018ec:	b289      	uxth	r1, r1
	prog_current_buffer = tmp;
  4018ee:	f8c4 2408 	str.w	r2, [r4, #1032]	; 0x408
			board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  4018f2:	47a8      	blx	r5
  4018f4:	e7e0      	b.n	4018b8 <board_serial_programming_write_percent+0x34>
  4018f6:	bf00      	nop
  4018f8:	20400f4c 	.word	0x20400f4c
  4018fc:	00400fbd 	.word	0x00400fbd
  401900:	0040ada4 	.word	0x0040ada4
  401904:	4000c000 	.word	0x4000c000
  401908:	00403335 	.word	0x00403335
  40190c:	00403385 	.word	0x00403385
  401910:	0040335d 	.word	0x0040335d
  401914:	00400ee1 	.word	0x00400ee1

00401918 <TC1_Handler>:

//--------------------------------------------------------------------------------------------------//


void TC1_Handler()
{
  401918:	b570      	push	{r4, r5, r6, lr}
	timer_read_interrupt_status(TC0, TIMER_CHANNEL_1);
  40191a:	2101      	movs	r1, #1
  40191c:	4b0d      	ldr	r3, [pc, #52]	; (401954 <TC1_Handler+0x3c>)
  40191e:	480e      	ldr	r0, [pc, #56]	; (401958 <TC1_Handler+0x40>)
  401920:	4c0e      	ldr	r4, [pc, #56]	; (40195c <TC1_Handler+0x44>)
  401922:	4798      	blx	r3
	timer_clock_disable(TC0, TIMER_CHANNEL_1);
  401924:	2101      	movs	r1, #1
  401926:	480c      	ldr	r0, [pc, #48]	; (401958 <TC1_Handler+0x40>)
  401928:	4b0d      	ldr	r3, [pc, #52]	; (401960 <TC1_Handler+0x48>)
  40192a:	4798      	blx	r3
  40192c:	6822      	ldr	r2, [r4, #0]
	while (prog_dma_buffer->dma_active)
  40192e:	f892 3402 	ldrb.w	r3, [r2, #1026]	; 0x402
  401932:	2b00      	cmp	r3, #0
  401934:	d1fb      	bne.n	40192e <TC1_Handler+0x16>
	prog_dma_buffer = prog_current_buffer;
  401936:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
	
	// The buffer is filled up
	board_serial_programming_dma_switch_buffers();
	
	// Start flushing the DMA buffer
	board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  40193a:	4d0a      	ldr	r5, [pc, #40]	; (401964 <TC1_Handler+0x4c>)
  40193c:	f8b3 1400 	ldrh.w	r1, [r3, #1024]	; 0x400
  401940:	4618      	mov	r0, r3
	prog_dma_buffer = prog_current_buffer;
  401942:	6023      	str	r3, [r4, #0]
	board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  401944:	462b      	mov	r3, r5
	prog_current_buffer = tmp;
  401946:	f8c4 2408 	str.w	r2, [r4, #1032]	; 0x408
	board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  40194a:	b289      	uxth	r1, r1
}
  40194c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	board_serial_programming_dma_flush_buffer((char *)(prog_dma_buffer->data), prog_dma_buffer->position);
  401950:	4718      	bx	r3
  401952:	bf00      	nop
  401954:	004033fd 	.word	0x004033fd
  401958:	4000c000 	.word	0x4000c000
  40195c:	20400f4c 	.word	0x20400f4c
  401960:	0040335d 	.word	0x0040335d
  401964:	00400ee1 	.word	0x00400ee1

00401968 <file_system_command_line_config>:

//--------------------------------------------------------------------------------------------------//


void file_system_command_line_config(void)
{
  401968:	b570      	push	{r4, r5, r6, lr}
	strcpy(file_system_path, "/");
	
	file_thread = thread_new("file", file_system_command_line_thread, NULL, THREAD_PRIORITY_NORMAL, 500);
  40196a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
{
  40196e:	b082      	sub	sp, #8
	strcpy(file_system_path, "/");
  401970:	4d06      	ldr	r5, [pc, #24]	; (40198c <file_system_command_line_config+0x24>)
  401972:	262f      	movs	r6, #47	; 0x2f
	file_thread = thread_new("file", file_system_command_line_thread, NULL, THREAD_PRIORITY_NORMAL, 500);
  401974:	9200      	str	r2, [sp, #0]
  401976:	2302      	movs	r3, #2
  401978:	2200      	movs	r2, #0
  40197a:	4905      	ldr	r1, [pc, #20]	; (401990 <file_system_command_line_config+0x28>)
  40197c:	4c05      	ldr	r4, [pc, #20]	; (401994 <file_system_command_line_config+0x2c>)
  40197e:	4806      	ldr	r0, [pc, #24]	; (401998 <file_system_command_line_config+0x30>)
	strcpy(file_system_path, "/");
  401980:	802e      	strh	r6, [r5, #0]
	file_thread = thread_new("file", file_system_command_line_thread, NULL, THREAD_PRIORITY_NORMAL, 500);
  401982:	47a0      	blx	r4
  401984:	4b05      	ldr	r3, [pc, #20]	; (40199c <file_system_command_line_config+0x34>)
  401986:	6018      	str	r0, [r3, #0]
}
  401988:	b002      	add	sp, #8
  40198a:	bd70      	pop	{r4, r5, r6, pc}
  40198c:	2040185c 	.word	0x2040185c
  401990:	0040201d 	.word	0x0040201d
  401994:	00408985 	.word	0x00408985
  401998:	0040adac 	.word	0x0040adac
  40199c:	20402770 	.word	0x20402770

004019a0 <file_system_command_line_ls>:

//--------------------------------------------------------------------------------------------------//


file_result_t file_system_command_line_ls(void)
{
  4019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	file_result_t result;

	uint16_t file_count = 0;

	result = file_opendir(&directory, file_system_path);
  4019a4:	492d      	ldr	r1, [pc, #180]	; (401a5c <file_system_command_line_ls+0xbc>)
{
  4019a6:	b083      	sub	sp, #12
	result = file_opendir(&directory, file_system_path);
  4019a8:	482d      	ldr	r0, [pc, #180]	; (401a60 <file_system_command_line_ls+0xc0>)
  4019aa:	4b2e      	ldr	r3, [pc, #184]	; (401a64 <file_system_command_line_ls+0xc4>)
  4019ac:	4798      	blx	r3

	// Return if not successful
	if (result != FR_OK)
  4019ae:	4607      	mov	r7, r0
  4019b0:	b118      	cbz	r0, 4019ba <file_system_command_line_ls+0x1a>
	} while ((file_info.fname[0]) && (file_count < 100));

	board_serial_print("\n");

	return FR_OK;
}
  4019b2:	4638      	mov	r0, r7
  4019b4:	b003      	add	sp, #12
  4019b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019ba:	4d2b      	ldr	r5, [pc, #172]	; (401a68 <file_system_command_line_ls+0xc8>)
	board_serial_print("\n");
  4019bc:	2620      	movs	r6, #32
  4019be:	482b      	ldr	r0, [pc, #172]	; (401a6c <file_system_command_line_ls+0xcc>)
  4019c0:	4c2b      	ldr	r4, [pc, #172]	; (401a70 <file_system_command_line_ls+0xd0>)
		result = file_readdir(&directory, &file_info);
  4019c2:	46a8      	mov	r8, r5
  4019c4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 401a90 <file_system_command_line_ls+0xf0>
			board_serial_print("%d\tkB\t", file_info.fsize / 1000);
  4019c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 401a94 <file_system_command_line_ls+0xf4>
			board_serial_print("%d\tMB\t", file_info.fsize / 1000000);
  4019cc:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 401a98 <file_system_command_line_ls+0xf8>
	board_serial_print("\n");
  4019d0:	47a0      	blx	r4
  4019d2:	e029      	b.n	401a28 <file_system_command_line_ls+0x88>
		else if (file_info.fsize > 1000)
  4019d4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
			board_serial_print("%d\tkB\t", file_info.fsize / 1000);
  4019d8:	fbaa 2301 	umull	r2, r3, sl, r1
  4019dc:	4825      	ldr	r0, [pc, #148]	; (401a74 <file_system_command_line_ls+0xd4>)
			board_serial_print("%d\tkB\t", 1);
  4019de:	f04f 0101 	mov.w	r1, #1
  4019e2:	bf94      	ite	ls
  4019e4:	4823      	ldrls	r0, [pc, #140]	; (401a74 <file_system_command_line_ls+0xd4>)
			board_serial_print("%d\tkB\t", file_info.fsize / 1000);
  4019e6:	0999      	lsrhi	r1, r3, #6
			board_serial_print("%d\tkB\t", 1);
  4019e8:	47a0      	blx	r4
		board_serial_print("%d.%d.%d\t%d:%d\t", (file_info.fdate & 0b11111), (file_info.fdate >> 4) & 0b1111, 1980 + ((file_info.fdate >> 9) & 0b1111111), (file_info.ftime >> 11) & 0b11111, (file_info.ftime >> 5) & 0b111111);
  4019ea:	88a9      	ldrh	r1, [r5, #4]
  4019ec:	88e8      	ldrh	r0, [r5, #6]
  4019ee:	0a4b      	lsrs	r3, r1, #9
  4019f0:	f3c1 1203 	ubfx	r2, r1, #4, #4
  4019f4:	f3c0 1e45 	ubfx	lr, r0, #5, #6
  4019f8:	0ac0      	lsrs	r0, r0, #11
  4019fa:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
  4019fe:	f001 011f 	and.w	r1, r1, #31
  401a02:	e88d 4001 	stmia.w	sp, {r0, lr}
  401a06:	481c      	ldr	r0, [pc, #112]	; (401a78 <file_system_command_line_ls+0xd8>)
  401a08:	47a0      	blx	r4
		if (file_info.fattrib == AM_DIR)
  401a0a:	7a2b      	ldrb	r3, [r5, #8]
  401a0c:	2b10      	cmp	r3, #16
  401a0e:	d01b      	beq.n	401a48 <file_system_command_line_ls+0xa8>
  401a10:	3e01      	subs	r6, #1
		board_serial_print("\t\t");
  401a12:	481a      	ldr	r0, [pc, #104]	; (401a7c <file_system_command_line_ls+0xdc>)
  401a14:	47a0      	blx	r4
		board_serial_print(file_info.fname);
  401a16:	481a      	ldr	r0, [pc, #104]	; (401a80 <file_system_command_line_ls+0xe0>)
  401a18:	b2b6      	uxth	r6, r6
  401a1a:	47a0      	blx	r4
		board_serial_print("\n");
  401a1c:	4813      	ldr	r0, [pc, #76]	; (401a6c <file_system_command_line_ls+0xcc>)
  401a1e:	47a0      	blx	r4
		if (file_count > FILE_SYSTEM_MAX_LIST_LENGTH)
  401a20:	2e00      	cmp	r6, #0
  401a22:	d0c6      	beq.n	4019b2 <file_system_command_line_ls+0x12>
	} while ((file_info.fname[0]) && (file_count < 100));
  401a24:	7dab      	ldrb	r3, [r5, #22]
  401a26:	b193      	cbz	r3, 401a4e <file_system_command_line_ls+0xae>
		result = file_readdir(&directory, &file_info);
  401a28:	4641      	mov	r1, r8
  401a2a:	480d      	ldr	r0, [pc, #52]	; (401a60 <file_system_command_line_ls+0xc0>)
  401a2c:	47c8      	blx	r9
		if (file_info.fsize > 1000000)
  401a2e:	4b15      	ldr	r3, [pc, #84]	; (401a84 <file_system_command_line_ls+0xe4>)
		if (result != FR_OK)
  401a30:	4607      	mov	r7, r0
  401a32:	2800      	cmp	r0, #0
  401a34:	d1bd      	bne.n	4019b2 <file_system_command_line_ls+0x12>
		if (file_info.fsize > 1000000)
  401a36:	6829      	ldr	r1, [r5, #0]
  401a38:	4299      	cmp	r1, r3
  401a3a:	d9cb      	bls.n	4019d4 <file_system_command_line_ls+0x34>
			board_serial_print("%d\tMB\t", file_info.fsize / 1000000);
  401a3c:	fbab 3101 	umull	r3, r1, fp, r1
  401a40:	4811      	ldr	r0, [pc, #68]	; (401a88 <file_system_command_line_ls+0xe8>)
  401a42:	0c89      	lsrs	r1, r1, #18
  401a44:	47a0      	blx	r4
  401a46:	e7d0      	b.n	4019ea <file_system_command_line_ls+0x4a>
			board_serial_print("<DIR>");
  401a48:	4810      	ldr	r0, [pc, #64]	; (401a8c <file_system_command_line_ls+0xec>)
  401a4a:	47a0      	blx	r4
  401a4c:	e7e0      	b.n	401a10 <file_system_command_line_ls+0x70>
	board_serial_print("\n");
  401a4e:	4807      	ldr	r0, [pc, #28]	; (401a6c <file_system_command_line_ls+0xcc>)
  401a50:	47a0      	blx	r4
}
  401a52:	4638      	mov	r0, r7
  401a54:	b003      	add	sp, #12
  401a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a5a:	bf00      	nop
  401a5c:	2040185c 	.word	0x2040185c
  401a60:	204023f4 	.word	0x204023f4
  401a64:	00406e0d 	.word	0x00406e0d
  401a68:	20402658 	.word	0x20402658
  401a6c:	0040b4cc 	.word	0x0040b4cc
  401a70:	0040052d 	.word	0x0040052d
  401a74:	0040adbc 	.word	0x0040adbc
  401a78:	0040adc4 	.word	0x0040adc4
  401a7c:	0040addc 	.word	0x0040addc
  401a80:	2040266e 	.word	0x2040266e
  401a84:	000f4240 	.word	0x000f4240
  401a88:	0040adb4 	.word	0x0040adb4
  401a8c:	0040add4 	.word	0x0040add4
  401a90:	00407219 	.word	0x00407219
  401a94:	10624dd3 	.word	0x10624dd3
  401a98:	431bde83 	.word	0x431bde83

00401a9c <file_system_command_line_touch>:
	if (strlen(file_system_path) + strlen(arg) + 2 > sizeof(file_system_tmp_path))
	{

	}

	strcpy(file_system_tmp_path, file_system_path);
  401a9c:	4912      	ldr	r1, [pc, #72]	; (401ae8 <file_system_command_line_touch+0x4c>)
  401a9e:	4b13      	ldr	r3, [pc, #76]	; (401aec <file_system_command_line_touch+0x50>)
{
  401aa0:	b570      	push	{r4, r5, r6, lr}

	if (strcmp(file_system_tmp_path, "/"))
  401aa2:	4c13      	ldr	r4, [pc, #76]	; (401af0 <file_system_command_line_touch+0x54>)
{
  401aa4:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
  401aa8:	4605      	mov	r5, r0
	strcpy(file_system_tmp_path, file_system_path);
  401aaa:	f501 707a 	add.w	r0, r1, #1000	; 0x3e8
  401aae:	4798      	blx	r3
	if (strcmp(file_system_tmp_path, "/"))
  401ab0:	4621      	mov	r1, r4
	strcpy(file_system_tmp_path, file_system_path);
  401ab2:	4606      	mov	r6, r0
	if (strcmp(file_system_tmp_path, "/"))
  401ab4:	4b0f      	ldr	r3, [pc, #60]	; (401af4 <file_system_command_line_touch+0x58>)
  401ab6:	4810      	ldr	r0, [pc, #64]	; (401af8 <file_system_command_line_touch+0x5c>)
  401ab8:	4798      	blx	r3
  401aba:	b988      	cbnz	r0, 401ae0 <file_system_command_line_touch+0x44>
	{
		strcat(file_system_tmp_path, "/");
	}

	strcat(file_system_tmp_path, arg);
  401abc:	4629      	mov	r1, r5
  401abe:	4b0f      	ldr	r3, [pc, #60]	; (401afc <file_system_command_line_touch+0x60>)
  401ac0:	480d      	ldr	r0, [pc, #52]	; (401af8 <file_system_command_line_touch+0x5c>)
  401ac2:	4798      	blx	r3

	res = file_open(&file, file_system_tmp_path, FA_WRITE | FA_OPEN_ALWAYS);
  401ac4:	4668      	mov	r0, sp
  401ac6:	2212      	movs	r2, #18
  401ac8:	490b      	ldr	r1, [pc, #44]	; (401af8 <file_system_command_line_touch+0x5c>)
  401aca:	4b0d      	ldr	r3, [pc, #52]	; (401b00 <file_system_command_line_touch+0x64>)
  401acc:	4798      	blx	r3
	
	if (res == FR_OK)
  401ace:	4604      	mov	r4, r0
  401ad0:	b910      	cbnz	r0, 401ad8 <file_system_command_line_touch+0x3c>
	{
		file_close(&file);
  401ad2:	4668      	mov	r0, sp
  401ad4:	4b0b      	ldr	r3, [pc, #44]	; (401b04 <file_system_command_line_touch+0x68>)
  401ad6:	4798      	blx	r3
		return FR_OK;
	}
	return res;
}
  401ad8:	4620      	mov	r0, r4
  401ada:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
  401ade:	bd70      	pop	{r4, r5, r6, pc}
		strcat(file_system_tmp_path, "/");
  401ae0:	8823      	ldrh	r3, [r4, #0]
  401ae2:	8033      	strh	r3, [r6, #0]
  401ae4:	e7ea      	b.n	401abc <file_system_command_line_touch+0x20>
  401ae6:	bf00      	nop
  401ae8:	2040185c 	.word	0x2040185c
  401aec:	0040a5f1 	.word	0x0040a5f1
  401af0:	0040ade0 	.word	0x0040ade0
  401af4:	0040a6a9 	.word	0x0040a6a9
  401af8:	20401c44 	.word	0x20401c44
  401afc:	0040a64d 	.word	0x0040a64d
  401b00:	004066d9 	.word	0x004066d9
  401b04:	00406cbd 	.word	0x00406cbd

00401b08 <file_system_command_line_cat>:
	if (strlen(file_system_path) + strlen(arg) + 2 > sizeof(file_system_tmp_path))
	{

	}

	strcpy(file_system_tmp_path, file_system_path);
  401b08:	4927      	ldr	r1, [pc, #156]	; (401ba8 <file_system_command_line_cat+0xa0>)
	uint32_t bytes_read = 0;
  401b0a:	2200      	movs	r2, #0
	strcpy(file_system_tmp_path, file_system_path);
  401b0c:	4b27      	ldr	r3, [pc, #156]	; (401bac <file_system_command_line_cat+0xa4>)
{
  401b0e:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (strcmp(file_system_tmp_path, "/"))
  401b10:	4c27      	ldr	r4, [pc, #156]	; (401bb0 <file_system_command_line_cat+0xa8>)
{
  401b12:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  401b16:	4605      	mov	r5, r0
	strcpy(file_system_tmp_path, file_system_path);
  401b18:	f501 707a 	add.w	r0, r1, #1000	; 0x3e8
	uint32_t bytes_read = 0;
  401b1c:	9201      	str	r2, [sp, #4]
	strcpy(file_system_tmp_path, file_system_path);
  401b1e:	4798      	blx	r3
	if (strcmp(file_system_tmp_path, "/"))
  401b20:	4621      	mov	r1, r4
	strcpy(file_system_tmp_path, file_system_path);
  401b22:	4606      	mov	r6, r0
	if (strcmp(file_system_tmp_path, "/"))
  401b24:	4b23      	ldr	r3, [pc, #140]	; (401bb4 <file_system_command_line_cat+0xac>)
  401b26:	4824      	ldr	r0, [pc, #144]	; (401bb8 <file_system_command_line_cat+0xb0>)
  401b28:	4798      	blx	r3
  401b2a:	2800      	cmp	r0, #0
  401b2c:	d12e      	bne.n	401b8c <file_system_command_line_cat+0x84>
	{
		strcat(file_system_tmp_path, "/");
	}

	strcat(file_system_tmp_path, arg);
  401b2e:	4629      	mov	r1, r5
  401b30:	4b22      	ldr	r3, [pc, #136]	; (401bbc <file_system_command_line_cat+0xb4>)
  401b32:	4821      	ldr	r0, [pc, #132]	; (401bb8 <file_system_command_line_cat+0xb0>)
  401b34:	4798      	blx	r3

	res = file_open(&file, file_system_tmp_path, FA_READ);
  401b36:	a802      	add	r0, sp, #8
  401b38:	2201      	movs	r2, #1
  401b3a:	491f      	ldr	r1, [pc, #124]	; (401bb8 <file_system_command_line_cat+0xb0>)
  401b3c:	4b20      	ldr	r3, [pc, #128]	; (401bc0 <file_system_command_line_cat+0xb8>)
  401b3e:	4798      	blx	r3
	if (res != FR_OK)
  401b40:	4604      	mov	r4, r0
  401b42:	b118      	cbz	r0, 401b4c <file_system_command_line_cat+0x44>
	{
		return res;
	}

	return FR_OK;
}
  401b44:	4620      	mov	r0, r4
  401b46:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  401b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char* file_system_buffer = (char *)dynamic_memory_new(DRAM_BANK_1, 1024);
  401b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401b50:	2002      	movs	r0, #2
  401b52:	4b1c      	ldr	r3, [pc, #112]	; (401bc4 <file_system_command_line_cat+0xbc>)
  401b54:	4798      	blx	r3
  401b56:	4e1c      	ldr	r6, [pc, #112]	; (401bc8 <file_system_command_line_cat+0xc0>)
  401b58:	4605      	mov	r5, r0
		board_serial_dma_print_size(file_system_buffer, bytes_read);
  401b5a:	4f1c      	ldr	r7, [pc, #112]	; (401bcc <file_system_command_line_cat+0xc4>)
  401b5c:	e006      	b.n	401b6c <file_system_command_line_cat+0x64>
  401b5e:	9901      	ldr	r1, [sp, #4]
  401b60:	4628      	mov	r0, r5
  401b62:	47b8      	blx	r7
	} while (bytes_read == 1024);
  401b64:	9b01      	ldr	r3, [sp, #4]
  401b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  401b6a:	d112      	bne.n	401b92 <file_system_command_line_cat+0x8a>
		res = file_read(&file, file_system_buffer, 1024, &bytes_read);
  401b6c:	ab01      	add	r3, sp, #4
  401b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b72:	4629      	mov	r1, r5
  401b74:	a802      	add	r0, sp, #8
  401b76:	47b0      	blx	r6
		if (res != FR_OK)
  401b78:	4604      	mov	r4, r0
  401b7a:	2800      	cmp	r0, #0
  401b7c:	d0ef      	beq.n	401b5e <file_system_command_line_cat+0x56>
			dynamic_memory_free(file_system_buffer);
  401b7e:	4628      	mov	r0, r5
  401b80:	4b13      	ldr	r3, [pc, #76]	; (401bd0 <file_system_command_line_cat+0xc8>)
  401b82:	4798      	blx	r3
}
  401b84:	4620      	mov	r0, r4
  401b86:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  401b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(file_system_tmp_path, "/");
  401b8c:	8823      	ldrh	r3, [r4, #0]
  401b8e:	8033      	strh	r3, [r6, #0]
  401b90:	e7cd      	b.n	401b2e <file_system_command_line_cat+0x26>
	dynamic_memory_free(file_system_buffer);
  401b92:	4628      	mov	r0, r5
  401b94:	4b0e      	ldr	r3, [pc, #56]	; (401bd0 <file_system_command_line_cat+0xc8>)
  401b96:	4798      	blx	r3
	res = file_close(&file);
  401b98:	a802      	add	r0, sp, #8
  401b9a:	4b0e      	ldr	r3, [pc, #56]	; (401bd4 <file_system_command_line_cat+0xcc>)
  401b9c:	4798      	blx	r3
  401b9e:	4604      	mov	r4, r0
}
  401ba0:	4620      	mov	r0, r4
  401ba2:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  401ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401ba8:	2040185c 	.word	0x2040185c
  401bac:	0040a5f1 	.word	0x0040a5f1
  401bb0:	0040ade0 	.word	0x0040ade0
  401bb4:	0040a6a9 	.word	0x0040a6a9
  401bb8:	20401c44 	.word	0x20401c44
  401bbc:	0040a64d 	.word	0x0040a64d
  401bc0:	004066d9 	.word	0x004066d9
  401bc4:	00408bfd 	.word	0x00408bfd
  401bc8:	00406929 	.word	0x00406929
  401bcc:	00400cb5 	.word	0x00400cb5
  401bd0:	00408ce9 	.word	0x00408ce9
  401bd4:	00406cbd 	.word	0x00406cbd

00401bd8 <file_system_command_line_hex>:
	if (strlen(file_system_path) + strlen(arg) + 2 > sizeof(file_system_tmp_path))
	{

	}

	strcpy(file_system_tmp_path, file_system_path);
  401bd8:	4941      	ldr	r1, [pc, #260]	; (401ce0 <file_system_command_line_hex+0x108>)
	uint32_t bytes_read = 0;
  401bda:	2200      	movs	r2, #0
	strcpy(file_system_tmp_path, file_system_path);
  401bdc:	4b41      	ldr	r3, [pc, #260]	; (401ce4 <file_system_command_line_hex+0x10c>)
{
  401bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if (strcmp(file_system_tmp_path, "/"))
  401be2:	4c41      	ldr	r4, [pc, #260]	; (401ce8 <file_system_command_line_hex+0x110>)
{
  401be4:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  401be8:	4605      	mov	r5, r0
	strcpy(file_system_tmp_path, file_system_path);
  401bea:	f501 707a 	add.w	r0, r1, #1000	; 0x3e8
	uint32_t bytes_read = 0;
  401bee:	9201      	str	r2, [sp, #4]
	strcpy(file_system_tmp_path, file_system_path);
  401bf0:	4798      	blx	r3
	if (strcmp(file_system_tmp_path, "/"))
  401bf2:	4621      	mov	r1, r4
	strcpy(file_system_tmp_path, file_system_path);
  401bf4:	4606      	mov	r6, r0
	if (strcmp(file_system_tmp_path, "/"))
  401bf6:	4b3d      	ldr	r3, [pc, #244]	; (401cec <file_system_command_line_hex+0x114>)
  401bf8:	483d      	ldr	r0, [pc, #244]	; (401cf0 <file_system_command_line_hex+0x118>)
  401bfa:	4798      	blx	r3
  401bfc:	2800      	cmp	r0, #0
  401bfe:	d163      	bne.n	401cc8 <file_system_command_line_hex+0xf0>
	{
		strcat(file_system_tmp_path, "/");
	}

	strcat(file_system_tmp_path, arg);
  401c00:	4629      	mov	r1, r5
  401c02:	4b3c      	ldr	r3, [pc, #240]	; (401cf4 <file_system_command_line_hex+0x11c>)
  401c04:	483a      	ldr	r0, [pc, #232]	; (401cf0 <file_system_command_line_hex+0x118>)
  401c06:	4798      	blx	r3

	res = file_open(&file, file_system_tmp_path, FA_READ);
  401c08:	a802      	add	r0, sp, #8
  401c0a:	2201      	movs	r2, #1
  401c0c:	4938      	ldr	r1, [pc, #224]	; (401cf0 <file_system_command_line_hex+0x118>)
  401c0e:	4b3a      	ldr	r3, [pc, #232]	; (401cf8 <file_system_command_line_hex+0x120>)
  401c10:	4798      	blx	r3
	if (res != FR_OK)
  401c12:	4605      	mov	r5, r0
  401c14:	b120      	cbz	r0, 401c20 <file_system_command_line_hex+0x48>
	{
		return res;
	}

	return FR_OK;
}
  401c16:	4628      	mov	r0, r5
  401c18:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  401c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char* file_system_buffer = (char *)dynamic_memory_new(DRAM_BANK_1, 1024);
  401c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401c24:	2002      	movs	r0, #2
  401c26:	4b35      	ldr	r3, [pc, #212]	; (401cfc <file_system_command_line_hex+0x124>)
  401c28:	4798      	blx	r3
  401c2a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 401d10 <file_system_command_line_hex+0x138>
  401c2e:	4680      	mov	r8, r0
  401c30:	4f33      	ldr	r7, [pc, #204]	; (401d00 <file_system_command_line_hex+0x128>)
		res = file_read(&file, file_system_buffer, 1024, &bytes_read);
  401c32:	ab01      	add	r3, sp, #4
  401c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401c38:	4641      	mov	r1, r8
  401c3a:	a802      	add	r0, sp, #8
  401c3c:	47d8      	blx	fp
		if (res != FR_OK)
  401c3e:	4605      	mov	r5, r0
  401c40:	2800      	cmp	r0, #0
  401c42:	d144      	bne.n	401cce <file_system_command_line_hex+0xf6>
		for (uint16_t i = 0; i < bytes_read; i++)
  401c44:	9b01      	ldr	r3, [sp, #4]
  401c46:	b31b      	cbz	r3, 401c90 <file_system_command_line_hex+0xb8>
  401c48:	4e2e      	ldr	r6, [pc, #184]	; (401d04 <file_system_command_line_hex+0x12c>)
  401c4a:	4604      	mov	r4, r0
				board_serial_print("\n");
  401c4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 401d14 <file_system_command_line_hex+0x13c>
			board_serial_print("\t");
  401c50:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 401d18 <file_system_command_line_hex+0x140>
			if ((i % 4) == 0)
  401c54:	07a3      	lsls	r3, r4, #30
  401c56:	d034      	beq.n	401cc2 <file_system_command_line_hex+0xea>
			file_system_command_line_print_hex(file_system_buffer[i]);
  401c58:	f818 5005 	ldrb.w	r5, [r8, r5]
//--------------------------------------------------------------------------------------------------//


void file_system_command_line_print_hex(uint8_t tmp)
{
	uint8_t ch_1 = (tmp >> 4);
  401c5c:	092b      	lsrs	r3, r5, #4
	uint8_t ch_2 = (0xf & tmp);
  401c5e:	f005 050f 	and.w	r5, r5, #15
	
	if (ch_1 < 10)
  401c62:	2b09      	cmp	r3, #9
		board_serial_write('0' + ch_1);
	}
	else 
	{
		ch_1 -= 10;
		board_serial_write('A' + ch_1);
  401c64:	f103 0037 	add.w	r0, r3, #55	; 0x37
		board_serial_write('0' + ch_1);
  401c68:	bf98      	it	ls
  401c6a:	f103 0030 	addls.w	r0, r3, #48	; 0x30
		board_serial_write('A' + ch_1);
  401c6e:	47b0      	blx	r6
	}
	if (ch_2 < 10)
  401c70:	2d09      	cmp	r5, #9
		board_serial_write('0' + ch_2);
	}
	else
	{
		ch_2 -= 10;
		board_serial_write('A' + ch_2);
  401c72:	f105 0037 	add.w	r0, r5, #55	; 0x37
	if (ch_2 < 10)
  401c76:	d917      	bls.n	401ca8 <file_system_command_line_hex+0xd0>
		for (uint16_t i = 0; i < bytes_read; i++)
  401c78:	3401      	adds	r4, #1
		board_serial_write('A' + ch_2);
  401c7a:	47b0      	blx	r6
			board_serial_print("\t");
  401c7c:	4648      	mov	r0, r9
  401c7e:	47b8      	blx	r7
		for (uint16_t i = 0; i < bytes_read; i++)
  401c80:	9b01      	ldr	r3, [sp, #4]
  401c82:	b2a4      	uxth	r4, r4
  401c84:	42a3      	cmp	r3, r4
  401c86:	4625      	mov	r5, r4
  401c88:	d8e4      	bhi.n	401c54 <file_system_command_line_hex+0x7c>
	} while (bytes_read == 1024);
  401c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  401c8e:	d0d0      	beq.n	401c32 <file_system_command_line_hex+0x5a>
	dynamic_memory_free(file_system_buffer);
  401c90:	4640      	mov	r0, r8
  401c92:	4b1d      	ldr	r3, [pc, #116]	; (401d08 <file_system_command_line_hex+0x130>)
  401c94:	4798      	blx	r3
	res = file_close(&file);
  401c96:	a802      	add	r0, sp, #8
  401c98:	4b1c      	ldr	r3, [pc, #112]	; (401d0c <file_system_command_line_hex+0x134>)
  401c9a:	4798      	blx	r3
  401c9c:	4605      	mov	r5, r0
}
  401c9e:	4628      	mov	r0, r5
  401ca0:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  401ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		board_serial_write('0' + ch_2);
  401ca8:	f105 0030 	add.w	r0, r5, #48	; 0x30
		for (uint16_t i = 0; i < bytes_read; i++)
  401cac:	3401      	adds	r4, #1
		board_serial_write('0' + ch_2);
  401cae:	47b0      	blx	r6
			board_serial_print("\t");
  401cb0:	4648      	mov	r0, r9
  401cb2:	47b8      	blx	r7
		for (uint16_t i = 0; i < bytes_read; i++)
  401cb4:	9b01      	ldr	r3, [sp, #4]
  401cb6:	b2a4      	uxth	r4, r4
  401cb8:	429c      	cmp	r4, r3
  401cba:	4625      	mov	r5, r4
  401cbc:	d2e5      	bcs.n	401c8a <file_system_command_line_hex+0xb2>
			if ((i % 4) == 0)
  401cbe:	07a3      	lsls	r3, r4, #30
  401cc0:	d1ca      	bne.n	401c58 <file_system_command_line_hex+0x80>
				board_serial_print("\n");
  401cc2:	4650      	mov	r0, sl
  401cc4:	47b8      	blx	r7
  401cc6:	e7c7      	b.n	401c58 <file_system_command_line_hex+0x80>
		strcat(file_system_tmp_path, "/");
  401cc8:	8823      	ldrh	r3, [r4, #0]
  401cca:	8033      	strh	r3, [r6, #0]
  401ccc:	e798      	b.n	401c00 <file_system_command_line_hex+0x28>
			dynamic_memory_free(file_system_buffer);
  401cce:	4640      	mov	r0, r8
  401cd0:	4b0d      	ldr	r3, [pc, #52]	; (401d08 <file_system_command_line_hex+0x130>)
  401cd2:	4798      	blx	r3
}
  401cd4:	4628      	mov	r0, r5
  401cd6:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  401cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cde:	bf00      	nop
  401ce0:	2040185c 	.word	0x2040185c
  401ce4:	0040a5f1 	.word	0x0040a5f1
  401ce8:	0040ade0 	.word	0x0040ade0
  401cec:	0040a6a9 	.word	0x0040a6a9
  401cf0:	20401c44 	.word	0x20401c44
  401cf4:	0040a64d 	.word	0x0040a64d
  401cf8:	004066d9 	.word	0x004066d9
  401cfc:	00408bfd 	.word	0x00408bfd
  401d00:	0040052d 	.word	0x0040052d
  401d04:	00400441 	.word	0x00400441
  401d08:	00408ce9 	.word	0x00408ce9
  401d0c:	00406cbd 	.word	0x00406cbd
  401d10:	00406929 	.word	0x00406929
  401d14:	0040b4cc 	.word	0x0040b4cc
  401d18:	0040ade8 	.word	0x0040ade8

00401d1c <file_system_command_line_run>:
	if (strlen(file_system_path) + strlen(arg) + 2 > sizeof(file_system_tmp_path))
	{

	}

	strcpy(file_system_tmp_path, file_system_path);
  401d1c:	4930      	ldr	r1, [pc, #192]	; (401de0 <file_system_command_line_run+0xc4>)
	uint32_t bytes_read = 0;
  401d1e:	2200      	movs	r2, #0
	strcpy(file_system_tmp_path, file_system_path);
  401d20:	4b30      	ldr	r3, [pc, #192]	; (401de4 <file_system_command_line_run+0xc8>)
{
  401d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if (strcmp(file_system_tmp_path, "/"))
  401d26:	4c30      	ldr	r4, [pc, #192]	; (401de8 <file_system_command_line_run+0xcc>)
{
  401d28:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  401d2c:	4605      	mov	r5, r0
	strcpy(file_system_tmp_path, file_system_path);
  401d2e:	f501 707a 	add.w	r0, r1, #1000	; 0x3e8
	uint32_t bytes_read = 0;
  401d32:	9201      	str	r2, [sp, #4]
	strcpy(file_system_tmp_path, file_system_path);
  401d34:	4798      	blx	r3
	if (strcmp(file_system_tmp_path, "/"))
  401d36:	4621      	mov	r1, r4
	strcpy(file_system_tmp_path, file_system_path);
  401d38:	4606      	mov	r6, r0
	if (strcmp(file_system_tmp_path, "/"))
  401d3a:	4b2c      	ldr	r3, [pc, #176]	; (401dec <file_system_command_line_run+0xd0>)
  401d3c:	482c      	ldr	r0, [pc, #176]	; (401df0 <file_system_command_line_run+0xd4>)
  401d3e:	4798      	blx	r3
  401d40:	2800      	cmp	r0, #0
  401d42:	d141      	bne.n	401dc8 <file_system_command_line_run+0xac>
	{
		strcat(file_system_tmp_path, "/");
	}

	strcat(file_system_tmp_path, arg);
  401d44:	4629      	mov	r1, r5
  401d46:	4b2b      	ldr	r3, [pc, #172]	; (401df4 <file_system_command_line_run+0xd8>)
  401d48:	4829      	ldr	r0, [pc, #164]	; (401df0 <file_system_command_line_run+0xd4>)
  401d4a:	4798      	blx	r3

	res = file_open(&file, file_system_tmp_path, FA_READ);
  401d4c:	a802      	add	r0, sp, #8
  401d4e:	2201      	movs	r2, #1
  401d50:	4927      	ldr	r1, [pc, #156]	; (401df0 <file_system_command_line_run+0xd4>)
  401d52:	4b29      	ldr	r3, [pc, #164]	; (401df8 <file_system_command_line_run+0xdc>)
  401d54:	4798      	blx	r3
	if (res != FR_OK)
  401d56:	4604      	mov	r4, r0
  401d58:	b120      	cbz	r0, 401d64 <file_system_command_line_run+0x48>
	}
	
	dynamic_loader_run((uint32_t *)application, bytes_read);

	return FR_OK;
}
  401d5a:	4620      	mov	r0, r4
  401d5c:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
  401d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t* application = (uint8_t *)dynamic_memory_new(SRAM, 2000);
  401d64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  401d68:	4c24      	ldr	r4, [pc, #144]	; (401dfc <file_system_command_line_run+0xe0>)
  401d6a:	47a0      	blx	r4
  401d6c:	4680      	mov	r8, r0
	char* file_system_buffer = (char *)dynamic_memory_new(DRAM_BANK_1, 1024);
  401d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401d72:	2002      	movs	r0, #2
  401d74:	47a0      	blx	r4
	uint8_t* application_iterator = application;
  401d76:	4645      	mov	r5, r8
	char* file_system_buffer = (char *)dynamic_memory_new(DRAM_BANK_1, 1024);
  401d78:	4606      	mov	r6, r0
  401d7a:	4f21      	ldr	r7, [pc, #132]	; (401e00 <file_system_command_line_run+0xe4>)
		res = file_read(&file, file_system_buffer, 1024, &bytes_read);
  401d7c:	ab01      	add	r3, sp, #4
  401d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401d82:	4631      	mov	r1, r6
  401d84:	a802      	add	r0, sp, #8
  401d86:	47b8      	blx	r7
		if (res != FR_OK)
  401d88:	4604      	mov	r4, r0
  401d8a:	bb00      	cbnz	r0, 401dce <file_system_command_line_run+0xb2>
		for (uint16_t i = 0; i < bytes_read; i++)
  401d8c:	9b01      	ldr	r3, [sp, #4]
  401d8e:	b16b      	cbz	r3, 401dac <file_system_command_line_run+0x90>
  401d90:	462b      	mov	r3, r5
			*application_iterator++ = file_system_buffer[i];
  401d92:	5c32      	ldrb	r2, [r6, r0]
  401d94:	f803 2b01 	strb.w	r2, [r3], #1
		for (uint16_t i = 0; i < bytes_read; i++)
  401d98:	1b58      	subs	r0, r3, r5
  401d9a:	9a01      	ldr	r2, [sp, #4]
  401d9c:	b280      	uxth	r0, r0
  401d9e:	4290      	cmp	r0, r2
  401da0:	d3f7      	bcc.n	401d92 <file_system_command_line_run+0x76>
	} while (bytes_read == 1024);
  401da2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  401da6:	d101      	bne.n	401dac <file_system_command_line_run+0x90>
			*application_iterator++ = file_system_buffer[i];
  401da8:	461d      	mov	r5, r3
  401daa:	e7e7      	b.n	401d7c <file_system_command_line_run+0x60>
	dynamic_memory_free(file_system_buffer);
  401dac:	4630      	mov	r0, r6
  401dae:	4b15      	ldr	r3, [pc, #84]	; (401e04 <file_system_command_line_run+0xe8>)
  401db0:	4798      	blx	r3
	res = file_close(&file);
  401db2:	a802      	add	r0, sp, #8
  401db4:	4b14      	ldr	r3, [pc, #80]	; (401e08 <file_system_command_line_run+0xec>)
  401db6:	4798      	blx	r3
	if (res != FR_OK)
  401db8:	4604      	mov	r4, r0
  401dba:	2800      	cmp	r0, #0
  401dbc:	d1cd      	bne.n	401d5a <file_system_command_line_run+0x3e>
	dynamic_loader_run((uint32_t *)application, bytes_read);
  401dbe:	9901      	ldr	r1, [sp, #4]
  401dc0:	4640      	mov	r0, r8
  401dc2:	4b12      	ldr	r3, [pc, #72]	; (401e0c <file_system_command_line_run+0xf0>)
  401dc4:	4798      	blx	r3
	return FR_OK;
  401dc6:	e7c8      	b.n	401d5a <file_system_command_line_run+0x3e>
		strcat(file_system_tmp_path, "/");
  401dc8:	8823      	ldrh	r3, [r4, #0]
  401dca:	8033      	strh	r3, [r6, #0]
  401dcc:	e7ba      	b.n	401d44 <file_system_command_line_run+0x28>
			dynamic_memory_free(file_system_buffer);
  401dce:	4630      	mov	r0, r6
  401dd0:	4b0c      	ldr	r3, [pc, #48]	; (401e04 <file_system_command_line_run+0xe8>)
  401dd2:	4798      	blx	r3
}
  401dd4:	4620      	mov	r0, r4
  401dd6:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
  401dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401dde:	bf00      	nop
  401de0:	2040185c 	.word	0x2040185c
  401de4:	0040a5f1 	.word	0x0040a5f1
  401de8:	0040ade0 	.word	0x0040ade0
  401dec:	0040a6a9 	.word	0x0040a6a9
  401df0:	20401c44 	.word	0x20401c44
  401df4:	0040a64d 	.word	0x0040a64d
  401df8:	004066d9 	.word	0x004066d9
  401dfc:	00408bfd 	.word	0x00408bfd
  401e00:	00406929 	.word	0x00406929
  401e04:	00408ce9 	.word	0x00408ce9
  401e08:	00406cbd 	.word	0x00406cbd
  401e0c:	00407ae1 	.word	0x00407ae1

00401e10 <file_system_command_line_handler>:

//--------------------------------------------------------------------------------------------------//


void file_system_command_line_handler(void)
{
  401e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	file_result_t result = FR_OK;
	
	if (!strncmp(command_line_argument[0], "ls", 2))
  401e14:	4c65      	ldr	r4, [pc, #404]	; (401fac <file_system_command_line_handler+0x19c>)
  401e16:	2202      	movs	r2, #2
  401e18:	4965      	ldr	r1, [pc, #404]	; (401fb0 <file_system_command_line_handler+0x1a0>)
  401e1a:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e1e:	4d65      	ldr	r5, [pc, #404]	; (401fb4 <file_system_command_line_handler+0x1a4>)
  401e20:	47a8      	blx	r5
  401e22:	2800      	cmp	r0, #0
  401e24:	d02d      	beq.n	401e82 <file_system_command_line_handler+0x72>
	{
		result = file_system_command_line_ls();
	}
	else if (!strncmp(command_line_argument[0], "touch", 5))
  401e26:	2205      	movs	r2, #5
  401e28:	4963      	ldr	r1, [pc, #396]	; (401fb8 <file_system_command_line_handler+0x1a8>)
  401e2a:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e2e:	47a8      	blx	r5
  401e30:	2800      	cmp	r0, #0
  401e32:	d032      	beq.n	401e9a <file_system_command_line_handler+0x8a>
	{
		result = file_system_command_line_touch(command_line_argument[1]);
	}
	else if (!strncmp(command_line_argument[0], "rm", 2))
  401e34:	2202      	movs	r2, #2
  401e36:	4961      	ldr	r1, [pc, #388]	; (401fbc <file_system_command_line_handler+0x1ac>)
  401e38:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e3c:	47a8      	blx	r5
  401e3e:	2800      	cmp	r0, #0
  401e40:	d056      	beq.n	401ef0 <file_system_command_line_handler+0xe0>
	{
		result = file_system_command_line_rm(command_line_argument[1]);
	}
	else if (!strncmp(command_line_argument[0], "cd", 2))
  401e42:	2202      	movs	r2, #2
  401e44:	495e      	ldr	r1, [pc, #376]	; (401fc0 <file_system_command_line_handler+0x1b0>)
  401e46:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e4a:	47a8      	blx	r5
  401e4c:	b350      	cbz	r0, 401ea4 <file_system_command_line_handler+0x94>
	{
		result = file_system_command_line_cd(command_line_argument[1]);
	}
	else if (!strncmp(command_line_argument[0], "cat", 3))
  401e4e:	2203      	movs	r2, #3
  401e50:	495c      	ldr	r1, [pc, #368]	; (401fc4 <file_system_command_line_handler+0x1b4>)
  401e52:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e56:	47a8      	blx	r5
  401e58:	2800      	cmp	r0, #0
  401e5a:	d061      	beq.n	401f20 <file_system_command_line_handler+0x110>
	{
		result = file_system_command_line_cat(command_line_argument[1]);
	}
	else if (!strncmp(command_line_argument[0], "run", 3))
  401e5c:	2203      	movs	r2, #3
  401e5e:	495a      	ldr	r1, [pc, #360]	; (401fc8 <file_system_command_line_handler+0x1b8>)
  401e60:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e64:	47a8      	blx	r5
  401e66:	2800      	cmp	r0, #0
  401e68:	d07c      	beq.n	401f64 <file_system_command_line_handler+0x154>
	{
		result = file_system_command_line_run(command_line_argument[1]);
	}
	else if (!strncmp(command_line_argument[0], "hex", 3))
  401e6a:	2203      	movs	r2, #3
  401e6c:	4957      	ldr	r1, [pc, #348]	; (401fcc <file_system_command_line_handler+0x1bc>)
  401e6e:	f504 60fa 	add.w	r0, r4, #2000	; 0x7d0
  401e72:	47a8      	blx	r5
  401e74:	2800      	cmp	r0, #0
  401e76:	d07a      	beq.n	401f6e <file_system_command_line_handler+0x15e>
	{
		result = file_system_command_line_hex(command_line_argument[1]);
	}
	file_system_command_ready = 0;
  401e78:	2300      	movs	r3, #0
  401e7a:	f884 38fc 	strb.w	r3, [r4, #2300]	; 0x8fc
  401e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		result = file_system_command_line_ls();
  401e82:	4b53      	ldr	r3, [pc, #332]	; (401fd0 <file_system_command_line_handler+0x1c0>)
  401e84:	4798      	blx	r3
	file_system_command_ready = 0;
  401e86:	2300      	movs	r3, #0
  401e88:	f884 38fc 	strb.w	r3, [r4, #2300]	; 0x8fc
	
	if (result != FR_OK)
  401e8c:	2800      	cmp	r0, #0
  401e8e:	d0f6      	beq.n	401e7e <file_system_command_line_handler+0x6e>
	{
		board_serial_print("Error occured\n");
  401e90:	4850      	ldr	r0, [pc, #320]	; (401fd4 <file_system_command_line_handler+0x1c4>)
  401e92:	4b51      	ldr	r3, [pc, #324]	; (401fd8 <file_system_command_line_handler+0x1c8>)
	}
}
  401e94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		board_serial_print("Error occured\n");
  401e98:	4718      	bx	r3
		result = file_system_command_line_touch(command_line_argument[1]);
  401e9a:	f604 0002 	addw	r0, r4, #2050	; 0x802
  401e9e:	4b4f      	ldr	r3, [pc, #316]	; (401fdc <file_system_command_line_handler+0x1cc>)
  401ea0:	4798      	blx	r3
  401ea2:	e7f0      	b.n	401e86 <file_system_command_line_handler+0x76>
	if (strcmp(arg, ""))
  401ea4:	f894 6802 	ldrb.w	r6, [r4, #2050]	; 0x802
  401ea8:	2e00      	cmp	r6, #0
  401eaa:	d0e5      	beq.n	401e78 <file_system_command_line_handler+0x68>
		strcpy(file_system_tmp_path, file_system_path);
  401eac:	f504 777a 	add.w	r7, r4, #1000	; 0x3e8
  401eb0:	4621      	mov	r1, r4
  401eb2:	4b4b      	ldr	r3, [pc, #300]	; (401fe0 <file_system_command_line_handler+0x1d0>)
  401eb4:	4638      	mov	r0, r7
  401eb6:	4798      	blx	r3
		if (arg[0] == '/')
  401eb8:	2e2f      	cmp	r6, #47	; 0x2f
		strcpy(file_system_tmp_path, file_system_path);
  401eba:	4605      	mov	r5, r0
		if (arg[0] == '/')
  401ebc:	d035      	beq.n	401f2a <file_system_command_line_handler+0x11a>
		else if (!strcmp(arg, ".."))
  401ebe:	f604 0602 	addw	r6, r4, #2050	; 0x802
  401ec2:	4948      	ldr	r1, [pc, #288]	; (401fe4 <file_system_command_line_handler+0x1d4>)
  401ec4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 401fec <file_system_command_line_handler+0x1dc>
  401ec8:	4630      	mov	r0, r6
  401eca:	47c0      	blx	r8
  401ecc:	2800      	cmp	r0, #0
  401ece:	d153      	bne.n	401f78 <file_system_command_line_handler+0x168>
		strcpy(file_system_tmp_path, file_system_path);
  401ed0:	1beb      	subs	r3, r5, r7
  401ed2:	e001      	b.n	401ed8 <file_system_command_line_handler+0xc8>
			while ((file_system_tmp_path[back_counter] != '/') && (back_counter > 1))
  401ed4:	2b01      	cmp	r3, #1
  401ed6:	d906      	bls.n	401ee6 <file_system_command_line_handler+0xd6>
				back_counter--;
  401ed8:	3b01      	subs	r3, #1
  401eda:	b29b      	uxth	r3, r3
			while ((file_system_tmp_path[back_counter] != '/') && (back_counter > 1))
  401edc:	18e2      	adds	r2, r4, r3
  401ede:	f892 23e8 	ldrb.w	r2, [r2, #1000]	; 0x3e8
  401ee2:	2a2f      	cmp	r2, #47	; 0x2f
  401ee4:	d1f6      	bne.n	401ed4 <file_system_command_line_handler+0xc4>
			file_system_tmp_path[back_counter] = 0;
  401ee6:	4423      	add	r3, r4
  401ee8:	2200      	movs	r2, #0
  401eea:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  401eee:	e02b      	b.n	401f48 <file_system_command_line_handler+0x138>
	if (strcmp(file_system_tmp_path, "/"))
  401ef0:	4d3d      	ldr	r5, [pc, #244]	; (401fe8 <file_system_command_line_handler+0x1d8>)
	strcpy(file_system_tmp_path, file_system_path);
  401ef2:	4621      	mov	r1, r4
  401ef4:	4b3a      	ldr	r3, [pc, #232]	; (401fe0 <file_system_command_line_handler+0x1d0>)
  401ef6:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
  401efa:	4798      	blx	r3
	if (strcmp(file_system_tmp_path, "/"))
  401efc:	4629      	mov	r1, r5
	strcpy(file_system_tmp_path, file_system_path);
  401efe:	4606      	mov	r6, r0
	if (strcmp(file_system_tmp_path, "/"))
  401f00:	4b3a      	ldr	r3, [pc, #232]	; (401fec <file_system_command_line_handler+0x1dc>)
  401f02:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
  401f06:	4798      	blx	r3
  401f08:	b108      	cbz	r0, 401f0e <file_system_command_line_handler+0xfe>
		strcat(file_system_tmp_path, "/");
  401f0a:	882b      	ldrh	r3, [r5, #0]
  401f0c:	8033      	strh	r3, [r6, #0]
	strcat(file_system_tmp_path, arg);
  401f0e:	4938      	ldr	r1, [pc, #224]	; (401ff0 <file_system_command_line_handler+0x1e0>)
  401f10:	4b38      	ldr	r3, [pc, #224]	; (401ff4 <file_system_command_line_handler+0x1e4>)
  401f12:	f2a1 401a 	subw	r0, r1, #1050	; 0x41a
  401f16:	4798      	blx	r3
	res = file_unlink(file_system_tmp_path);
  401f18:	4b37      	ldr	r3, [pc, #220]	; (401ff8 <file_system_command_line_handler+0x1e8>)
  401f1a:	4838      	ldr	r0, [pc, #224]	; (401ffc <file_system_command_line_handler+0x1ec>)
  401f1c:	4798      	blx	r3
  401f1e:	e7b2      	b.n	401e86 <file_system_command_line_handler+0x76>
		result = file_system_command_line_cat(command_line_argument[1]);
  401f20:	f604 0002 	addw	r0, r4, #2050	; 0x802
  401f24:	4b36      	ldr	r3, [pc, #216]	; (402000 <file_system_command_line_handler+0x1f0>)
  401f26:	4798      	blx	r3
  401f28:	e7ad      	b.n	401e86 <file_system_command_line_handler+0x76>
			if (strlen(arg) + 1 > sizeof(file_system_path))
  401f2a:	f604 0502 	addw	r5, r4, #2050	; 0x802
  401f2e:	4b35      	ldr	r3, [pc, #212]	; (402004 <file_system_command_line_handler+0x1f4>)
  401f30:	4628      	mov	r0, r5
  401f32:	4798      	blx	r3
  401f34:	3001      	adds	r0, #1
  401f36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  401f3a:	d89d      	bhi.n	401e78 <file_system_command_line_handler+0x68>
				strncpy(file_system_tmp_path, arg, sizeof(file_system_tmp_path));
  401f3c:	4629      	mov	r1, r5
  401f3e:	4638      	mov	r0, r7
  401f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401f44:	4b30      	ldr	r3, [pc, #192]	; (402008 <file_system_command_line_handler+0x1f8>)
  401f46:	4798      	blx	r3
		file_result_t res = file_opendir(&directory, file_system_tmp_path);
  401f48:	492c      	ldr	r1, [pc, #176]	; (401ffc <file_system_command_line_handler+0x1ec>)
  401f4a:	4830      	ldr	r0, [pc, #192]	; (40200c <file_system_command_line_handler+0x1fc>)
  401f4c:	4b30      	ldr	r3, [pc, #192]	; (402010 <file_system_command_line_handler+0x200>)
  401f4e:	4798      	blx	r3
		if (res == FR_OK)
  401f50:	2800      	cmp	r0, #0
  401f52:	d191      	bne.n	401e78 <file_system_command_line_handler+0x68>
			strncpy(file_system_path, file_system_tmp_path, sizeof(file_system_path));
  401f54:	4929      	ldr	r1, [pc, #164]	; (401ffc <file_system_command_line_handler+0x1ec>)
  401f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  401f5a:	4b2b      	ldr	r3, [pc, #172]	; (402008 <file_system_command_line_handler+0x1f8>)
  401f5c:	f5a1 707a 	sub.w	r0, r1, #1000	; 0x3e8
  401f60:	4798      	blx	r3
  401f62:	e789      	b.n	401e78 <file_system_command_line_handler+0x68>
		result = file_system_command_line_run(command_line_argument[1]);
  401f64:	f604 0002 	addw	r0, r4, #2050	; 0x802
  401f68:	4b2a      	ldr	r3, [pc, #168]	; (402014 <file_system_command_line_handler+0x204>)
  401f6a:	4798      	blx	r3
  401f6c:	e78b      	b.n	401e86 <file_system_command_line_handler+0x76>
		result = file_system_command_line_hex(command_line_argument[1]);
  401f6e:	f604 0002 	addw	r0, r4, #2050	; 0x802
  401f72:	4b29      	ldr	r3, [pc, #164]	; (402018 <file_system_command_line_handler+0x208>)
  401f74:	4798      	blx	r3
  401f76:	e786      	b.n	401e86 <file_system_command_line_handler+0x76>
			if (strlen(file_system_tmp_path) + strlen(arg) + 2 > sizeof(file_system_path))
  401f78:	4b22      	ldr	r3, [pc, #136]	; (402004 <file_system_command_line_handler+0x1f4>)
  401f7a:	4630      	mov	r0, r6
  401f7c:	4798      	blx	r3
		strcpy(file_system_tmp_path, file_system_path);
  401f7e:	1beb      	subs	r3, r5, r7
			if (strlen(file_system_tmp_path) + strlen(arg) + 2 > sizeof(file_system_path))
  401f80:	4403      	add	r3, r0
  401f82:	3302      	adds	r3, #2
  401f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401f88:	f63f af76 	bhi.w	401e78 <file_system_command_line_handler+0x68>
				if (strcmp(file_system_tmp_path, "/"))
  401f8c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 401fe8 <file_system_command_line_handler+0x1d8>
  401f90:	4638      	mov	r0, r7
  401f92:	4649      	mov	r1, r9
  401f94:	47c0      	blx	r8
  401f96:	b920      	cbnz	r0, 401fa2 <file_system_command_line_handler+0x192>
				strcat(file_system_tmp_path, arg);
  401f98:	4631      	mov	r1, r6
  401f9a:	4b16      	ldr	r3, [pc, #88]	; (401ff4 <file_system_command_line_handler+0x1e4>)
  401f9c:	4817      	ldr	r0, [pc, #92]	; (401ffc <file_system_command_line_handler+0x1ec>)
  401f9e:	4798      	blx	r3
  401fa0:	e7d2      	b.n	401f48 <file_system_command_line_handler+0x138>
					strcat(file_system_tmp_path, "/");
  401fa2:	f8b9 3000 	ldrh.w	r3, [r9]
  401fa6:	802b      	strh	r3, [r5, #0]
  401fa8:	e7f6      	b.n	401f98 <file_system_command_line_handler+0x188>
  401faa:	bf00      	nop
  401fac:	2040185c 	.word	0x2040185c
  401fb0:	0040ae0c 	.word	0x0040ae0c
  401fb4:	0040ab1d 	.word	0x0040ab1d
  401fb8:	0040ae10 	.word	0x0040ae10
  401fbc:	0040ae18 	.word	0x0040ae18
  401fc0:	0040ae1c 	.word	0x0040ae1c
  401fc4:	0040ae20 	.word	0x0040ae20
  401fc8:	0040ae24 	.word	0x0040ae24
  401fcc:	0040ae28 	.word	0x0040ae28
  401fd0:	004019a1 	.word	0x004019a1
  401fd4:	0040ae2c 	.word	0x0040ae2c
  401fd8:	0040052d 	.word	0x0040052d
  401fdc:	00401a9d 	.word	0x00401a9d
  401fe0:	0040a5f1 	.word	0x0040a5f1
  401fe4:	0040ade4 	.word	0x0040ade4
  401fe8:	0040ade0 	.word	0x0040ade0
  401fec:	0040a6a9 	.word	0x0040a6a9
  401ff0:	2040205e 	.word	0x2040205e
  401ff4:	0040a64d 	.word	0x0040a64d
  401ff8:	00407305 	.word	0x00407305
  401ffc:	20401c44 	.word	0x20401c44
  402000:	00401b09 	.word	0x00401b09
  402004:	0040aa41 	.word	0x0040aa41
  402008:	0040abc1 	.word	0x0040abc1
  40200c:	204023f4 	.word	0x204023f4
  402010:	00406e0d 	.word	0x00406e0d
  402014:	00401d1d 	.word	0x00401d1d
  402018:	00401bd9 	.word	0x00401bd9

0040201c <file_system_command_line_thread>:
{	
  40201c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402020:	4d34      	ldr	r5, [pc, #208]	; (4020f4 <file_system_command_line_thread+0xd8>)
  402022:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 402120 <file_system_command_line_thread+0x104>
  402026:	4e34      	ldr	r6, [pc, #208]	; (4020f8 <file_system_command_line_thread+0xdc>)
  402028:	4f34      	ldr	r7, [pc, #208]	; (4020fc <file_system_command_line_thread+0xe0>)
			board_serial_print("ERROOROROROROROROR\n");
  40202a:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 402124 <file_system_command_line_thread+0x108>
	board_sd_card_config();
  40202e:	4b34      	ldr	r3, [pc, #208]	; (402100 <file_system_command_line_thread+0xe4>)
  402030:	4798      	blx	r3
		while (board_sd_card_get_status() == SD_DISCONNECTED)
  402032:	47c0      	blx	r8
  402034:	2800      	cmp	r0, #0
  402036:	d041      	beq.n	4020bc <file_system_command_line_thread+0xa0>
		board_serial_print("Card connected\n");
  402038:	4832      	ldr	r0, [pc, #200]	; (402104 <file_system_command_line_thread+0xe8>)
		while (retry_count++ < 5)
  40203a:	2401      	movs	r4, #1
		board_serial_print("Card connected\n");
  40203c:	47b0      	blx	r6
		syscall_sleep(200);
  40203e:	20c8      	movs	r0, #200	; 0xc8
			if (file_mount(&cortex_file_system, "", 1) == FR_OK)
  402040:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 402128 <file_system_command_line_thread+0x10c>
  402044:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 40212c <file_system_command_line_thread+0x110>
		syscall_sleep(200);
  402048:	47a8      	blx	r5
			if (file_mount(&cortex_file_system, "", 1) == FR_OK)
  40204a:	2201      	movs	r2, #1
  40204c:	4651      	mov	r1, sl
  40204e:	4648      	mov	r0, r9
  402050:	4b2d      	ldr	r3, [pc, #180]	; (402108 <file_system_command_line_thread+0xec>)
  402052:	4798      	blx	r3
  402054:	2800      	cmp	r0, #0
  402056:	d034      	beq.n	4020c2 <file_system_command_line_thread+0xa6>
		while (retry_count++ < 5)
  402058:	3401      	adds	r4, #1
			syscall_sleep(200);
  40205a:	20c8      	movs	r0, #200	; 0xc8
  40205c:	47a8      	blx	r5
		while (retry_count++ < 5)
  40205e:	b2e4      	uxtb	r4, r4
  402060:	2c06      	cmp	r4, #6
  402062:	d1f2      	bne.n	40204a <file_system_command_line_thread+0x2e>
			board_serial_print("Mount error\n");
  402064:	4829      	ldr	r0, [pc, #164]	; (40210c <file_system_command_line_thread+0xf0>)
  402066:	47b0      	blx	r6
	board_serial_print("Cortex:");
  402068:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 40211c <file_system_command_line_thread+0x100>
	board_serial_print(file_system_path);
  40206c:	4c23      	ldr	r4, [pc, #140]	; (4020fc <file_system_command_line_thread+0xe0>)
  40206e:	e001      	b.n	402074 <file_system_command_line_thread+0x58>
			syscall_sleep(100);
  402070:	2064      	movs	r0, #100	; 0x64
  402072:	47a8      	blx	r5
			if (board_sd_card_get_status() == SD_DISCONNECTED)
  402074:	47c0      	blx	r8
  402076:	b1e0      	cbz	r0, 4020b2 <file_system_command_line_thread+0x96>
			if (file_system_command_ready)
  402078:	f897 38fc 	ldrb.w	r3, [r7, #2300]	; 0x8fc
  40207c:	2b00      	cmp	r3, #0
  40207e:	d0f7      	beq.n	402070 <file_system_command_line_thread+0x54>
				file_system_command_line_handler();
  402080:	4b23      	ldr	r3, [pc, #140]	; (402110 <file_system_command_line_thread+0xf4>)
  402082:	4798      	blx	r3
	board_serial_print("Cortex:");
  402084:	4648      	mov	r0, r9
  402086:	47b0      	blx	r6
	board_serial_print(file_system_path);
  402088:	4620      	mov	r0, r4
  40208a:	47b0      	blx	r6
	while (*tmp != '\0')
  40208c:	783b      	ldrb	r3, [r7, #0]
  40208e:	b16b      	cbz	r3, 4020ac <file_system_command_line_thread+0x90>
  402090:	f8df a068 	ldr.w	sl, [pc, #104]	; 4020fc <file_system_command_line_thread+0xe0>
  402094:	e002      	b.n	40209c <file_system_command_line_thread+0x80>
  402096:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
  40209a:	b13b      	cbz	r3, 4020ac <file_system_command_line_thread+0x90>
		if (*tmp == '\n')
  40209c:	2b0a      	cmp	r3, #10
  40209e:	d1fa      	bne.n	402096 <file_system_command_line_thread+0x7a>
			board_serial_print("ERROOROROROROROROR\n");
  4020a0:	4658      	mov	r0, fp
  4020a2:	47b0      	blx	r6
	while (*tmp != '\0')
  4020a4:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
  4020a8:	2b00      	cmp	r3, #0
  4020aa:	d1f7      	bne.n	40209c <file_system_command_line_thread+0x80>
	board_serial_print(" >");
  4020ac:	4819      	ldr	r0, [pc, #100]	; (402114 <file_system_command_line_thread+0xf8>)
  4020ae:	47b0      	blx	r6
  4020b0:	e7de      	b.n	402070 <file_system_command_line_thread+0x54>
				board_serial_print("Card disconnected\n");
  4020b2:	4819      	ldr	r0, [pc, #100]	; (402118 <file_system_command_line_thread+0xfc>)
  4020b4:	47b0      	blx	r6
		while (board_sd_card_get_status() == SD_DISCONNECTED)
  4020b6:	47c0      	blx	r8
  4020b8:	2800      	cmp	r0, #0
  4020ba:	d1bd      	bne.n	402038 <file_system_command_line_thread+0x1c>
			syscall_sleep(100);
  4020bc:	2064      	movs	r0, #100	; 0x64
  4020be:	47a8      	blx	r5
  4020c0:	e7b7      	b.n	402032 <file_system_command_line_thread+0x16>
	board_serial_print("Cortex:");
  4020c2:	4816      	ldr	r0, [pc, #88]	; (40211c <file_system_command_line_thread+0x100>)
  4020c4:	47b0      	blx	r6
	board_serial_print(file_system_path);
  4020c6:	480d      	ldr	r0, [pc, #52]	; (4020fc <file_system_command_line_thread+0xe0>)
  4020c8:	47b0      	blx	r6
	while (*tmp != '\0')
  4020ca:	783b      	ldrb	r3, [r7, #0]
  4020cc:	b16b      	cbz	r3, 4020ea <file_system_command_line_thread+0xce>
  4020ce:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4020fc <file_system_command_line_thread+0xe0>
  4020d2:	e002      	b.n	4020da <file_system_command_line_thread+0xbe>
  4020d4:	f819 3f01 	ldrb.w	r3, [r9, #1]!
  4020d8:	b13b      	cbz	r3, 4020ea <file_system_command_line_thread+0xce>
		if (*tmp == '\n')
  4020da:	2b0a      	cmp	r3, #10
  4020dc:	d1fa      	bne.n	4020d4 <file_system_command_line_thread+0xb8>
			board_serial_print("ERROOROROROROROROR\n");
  4020de:	4658      	mov	r0, fp
  4020e0:	47b0      	blx	r6
	while (*tmp != '\0')
  4020e2:	f819 3f01 	ldrb.w	r3, [r9, #1]!
  4020e6:	2b00      	cmp	r3, #0
  4020e8:	d1f7      	bne.n	4020da <file_system_command_line_thread+0xbe>
	board_serial_print(" >");
  4020ea:	480a      	ldr	r0, [pc, #40]	; (402114 <file_system_command_line_thread+0xf8>)
  4020ec:	47b0      	blx	r6
		if (retry_count >= 5)
  4020ee:	2c05      	cmp	r4, #5
  4020f0:	d1ba      	bne.n	402068 <file_system_command_line_thread+0x4c>
  4020f2:	e7b7      	b.n	402064 <file_system_command_line_thread+0x48>
  4020f4:	00408935 	.word	0x00408935
  4020f8:	0040052d 	.word	0x0040052d
  4020fc:	2040185c 	.word	0x2040185c
  402100:	004002a9 	.word	0x004002a9
  402104:	0040ae3c 	.word	0x0040ae3c
  402108:	00406671 	.word	0x00406671
  40210c:	0040ae4c 	.word	0x0040ae4c
  402110:	00401e11 	.word	0x00401e11
  402114:	0040adf4 	.word	0x0040adf4
  402118:	0040ae5c 	.word	0x0040ae5c
  40211c:	0040adec 	.word	0x0040adec
  402120:	0040028d 	.word	0x0040028d
  402124:	0040adf8 	.word	0x0040adf8
  402128:	0040b66c 	.word	0x0040b66c
  40212c:	20402424 	.word	0x20402424

00402130 <USART1_Handler>:

//--------------------------------------------------------------------------------------------------//


void USART1_Handler()
{
  402130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// The RXRDY flag is cleared upon read of RHR
	char data = (char)usart_read(USART1);
  402134:	4835      	ldr	r0, [pc, #212]	; (40220c <USART1_Handler+0xdc>)
  402136:	4b36      	ldr	r3, [pc, #216]	; (402210 <USART1_Handler+0xe0>)
  402138:	4798      	blx	r3

	// Local echo to the serial interface
	//board_serial_write(data);

	if (data == '\r')
  40213a:	280d      	cmp	r0, #13
  40213c:	d00d      	beq.n	40215a <USART1_Handler+0x2a>
	{
		command_line_buffer_index = 0;
	}

	if (data != '\n')
  40213e:	280a      	cmp	r0, #10
  402140:	4d34      	ldr	r5, [pc, #208]	; (402214 <USART1_Handler+0xe4>)
  402142:	d014      	beq.n	40216e <USART1_Handler+0x3e>
  402144:	f8b5 3964 	ldrh.w	r3, [r5, #2404]	; 0x964
  402148:	1c5a      	adds	r2, r3, #1
	{
		command_line_buffer[command_line_buffer_index++] = data;
  40214a:	442b      	add	r3, r5
  40214c:	b292      	uxth	r2, r2
  40214e:	f883 0900 	strb.w	r0, [r3, #2304]	; 0x900
  402152:	f8a5 2964 	strh.w	r2, [r5, #2404]	; 0x964
  402156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40215a:	4d2e      	ldr	r5, [pc, #184]	; (402214 <USART1_Handler+0xe4>)
  40215c:	2300      	movs	r3, #0
  40215e:	2201      	movs	r2, #1
  402160:	442b      	add	r3, r5
  402162:	f8a5 2964 	strh.w	r2, [r5, #2404]	; 0x964
  402166:	f883 0900 	strb.w	r0, [r3, #2304]	; 0x900
  40216a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	{
		command_line_buffer[command_line_buffer_index] = '\0';
  40216e:	f8b5 3964 	ldrh.w	r3, [r5, #2404]	; 0x964
  402172:	2000      	movs	r0, #0
		command_line_buffer_index = 0;

		// Set a flag here
		file_system_command_ready = 1;
  402174:	2201      	movs	r2, #1
		command_line_buffer[command_line_buffer_index] = '\0';
  402176:	442b      	add	r3, r5
		command_line_buffer_index = 0;
  402178:	f8a5 0964 	strh.w	r0, [r5, #2404]	; 0x964
		file_system_command_ready = 1;
  40217c:	f885 28fc 	strb.w	r2, [r5, #2300]	; 0x8fc
		command_line_buffer[command_line_buffer_index] = '\0';
  402180:	f883 0900 	strb.w	r0, [r3, #2304]	; 0x900
	while (*data != '\0')
  402184:	f895 2900 	ldrb.w	r2, [r5, #2304]	; 0x900
  402188:	b36a      	cbz	r2, 4021e6 <USART1_Handler+0xb6>
  40218a:	f505 6610 	add.w	r6, r5, #2304	; 0x900
				command_line_argument[argument_index][char_index] = '\0';
  40218e:	f04f 0c32 	mov.w	ip, #50	; 0x32
	while (*data != '\0')
  402192:	4603      	mov	r3, r0
				command_line_argument[argument_index][char_index] = '\0';
  402194:	4680      	mov	r8, r0
  402196:	e00d      	b.n	4021b4 <USART1_Handler+0x84>
		if (*data == ' ')
  402198:	b2cb      	uxtb	r3, r1
		command_line_argument[argument_index][char_index++] = *data;
  40219a:	fb0c 5100 	mla	r1, ip, r0, r5
  40219e:	4686      	mov	lr, r0
		data++;
  4021a0:	1c66      	adds	r6, r4, #1
		command_line_argument[argument_index][char_index++] = *data;
  4021a2:	4439      	add	r1, r7
  4021a4:	f881 27d0 	strb.w	r2, [r1, #2000]	; 0x7d0
	while (*data != '\0')
  4021a8:	7862      	ldrb	r2, [r4, #1]
  4021aa:	b352      	cbz	r2, 402202 <USART1_Handler+0xd2>
		if ((char_index >= LENGTH_ARGUMENT)  || (argument_index >= MAX_ARGUEMTNS))
  4021ac:	2805      	cmp	r0, #5
  4021ae:	bf98      	it	ls
  4021b0:	2b31      	cmpls	r3, #49	; 0x31
  4021b2:	d829      	bhi.n	402208 <USART1_Handler+0xd8>
		if (*data == ' ')
  4021b4:	2a20      	cmp	r2, #32
  4021b6:	f103 0101 	add.w	r1, r3, #1
  4021ba:	461f      	mov	r7, r3
  4021bc:	4634      	mov	r4, r6
  4021be:	d1eb      	bne.n	402198 <USART1_Handler+0x68>
				command_line_argument[argument_index][char_index] = '\0';
  4021c0:	fb0c 5200 	mla	r2, ip, r0, r5
			if (char_index < LENGTH_ARGUMENT - 1)
  4021c4:	2b31      	cmp	r3, #49	; 0x31
				argument_index++;
  4021c6:	f100 0001 	add.w	r0, r0, #1
				data++;
  4021ca:	f106 0401 	add.w	r4, r6, #1
				command_line_argument[argument_index][char_index] = '\0';
  4021ce:	eb02 0103 	add.w	r1, r2, r3
				data++;
  4021d2:	f04f 0700 	mov.w	r7, #0
				argument_index++;
  4021d6:	b2c0      	uxtb	r0, r0
				data++;
  4021d8:	f04f 0301 	mov.w	r3, #1
			if (char_index < LENGTH_ARGUMENT - 1)
  4021dc:	d00f      	beq.n	4021fe <USART1_Handler+0xce>
  4021de:	7872      	ldrb	r2, [r6, #1]
				command_line_argument[argument_index][char_index] = '\0';
  4021e0:	f881 87d0 	strb.w	r8, [r1, #2000]	; 0x7d0
  4021e4:	e7d9      	b.n	40219a <USART1_Handler+0x6a>
	while (*data != '\0')
  4021e6:	4613      	mov	r3, r2
  4021e8:	4696      	mov	lr, r2
		command_line_argument[argument_index][char_index] = '\0';
  4021ea:	2132      	movs	r1, #50	; 0x32
  4021ec:	2200      	movs	r2, #0
  4021ee:	fb01 5e0e 	mla	lr, r1, lr, r5
  4021f2:	4473      	add	r3, lr
  4021f4:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
	file_system_command_ready = 1;
  4021f8:	2301      	movs	r3, #1
  4021fa:	f885 38fc 	strb.w	r3, [r5, #2300]	; 0x8fc
  4021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (char_index < LENGTH_ARGUMENT - 1)
  402202:	2b30      	cmp	r3, #48	; 0x30
  402204:	d8f8      	bhi.n	4021f8 <USART1_Handler+0xc8>
  402206:	e7f0      	b.n	4021ea <USART1_Handler+0xba>
  402208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40220c:	40028000 	.word	0x40028000
  402210:	00403561 	.word	0x00403561
  402214:	2040185c 	.word	0x2040185c

00402218 <check_handler>:
//--------------------------------------------------------------------------------------------------//


void check_handler(uint8_t condition, const char* filename, uint32_t line_number)
{
	if (!condition)
  402218:	b100      	cbz	r0, 40221c <check_handler+0x4>
  40221a:	4770      	bx	lr
{
  40221c:	b508      	push	{r3, lr}
	{
		// Print debug information
		#if CHECK_ENABLE_PRINT_HANDLER
		check_print_handler("Check failure\nFile:\t%s\nLine:\t%d\n", filename, line_number);
  40221e:	4b03      	ldr	r3, [pc, #12]	; (40222c <check_handler+0x14>)
  402220:	4803      	ldr	r0, [pc, #12]	; (402230 <check_handler+0x18>)
  402222:	681b      	ldr	r3, [r3, #0]
  402224:	4798      	blx	r3
		#endif
		
		// Trigger a breakpoint		
		#if CHECK_ENABLE_BREAKPOINT
		asm volatile("BKPT #0");
  402226:	be00      	bkpt	0x0000
  402228:	bd08      	pop	{r3, pc}
  40222a:	bf00      	nop
  40222c:	20400000 	.word	0x20400000
  402230:	0040ae70 	.word	0x0040ae70

00402234 <clock_sources_config>:

//--------------------------------------------------------------------------------------------------//


void clock_sources_config(clock_source_e clock_oscillator, uint8_t startup_time)
{
  402234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402238:	b084      	sub	sp, #16
	uint32_t data;
	
	if (clock_oscillator == CLOCK_SOURCE_CRYSTAL)
  40223a:	b120      	cbz	r0, 402246 <clock_sources_config+0x12>
		while (!(PMC->PMC_SR & (1 << PMC_SR_MOSCXTS_Pos)))
		{
			
		}
	}
	else if (clock_oscillator == CLOCK_SOURCE_RC)
  40223c:	2801      	cmp	r0, #1
  40223e:	d018      	beq.n	402272 <clock_sources_config+0x3e>
		while (!(PMC->PMC_SR & (1 << PMC_SR_MOSCRCS_Pos)))
		{
			
		}
	}
}
  402240:	b004      	add	sp, #16
  402242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data = PMC->CKGR_MOR & ~(CKGR_MOR_MOSCXTBY_Msk | CKGR_MOR_MOSCXTST_Msk);
  402246:	4c1b      	ldr	r4, [pc, #108]	; (4022b4 <clock_sources_config+0x80>)
		CRITICAL_SECTION_ENTER()
  402248:	a801      	add	r0, sp, #4
		data = PMC->CKGR_MOR & ~(CKGR_MOR_MOSCXTBY_Msk | CKGR_MOR_MOSCXTST_Msk);
  40224a:	4a1b      	ldr	r2, [pc, #108]	; (4022b8 <clock_sources_config+0x84>)
  40224c:	6a25      	ldr	r5, [r4, #32]
  40224e:	4b1b      	ldr	r3, [pc, #108]	; (4022bc <clock_sources_config+0x88>)
  402250:	402a      	ands	r2, r5
		CRITICAL_SECTION_ENTER()
  402252:	4e1b      	ldr	r6, [pc, #108]	; (4022c0 <clock_sources_config+0x8c>)
  402254:	4313      	orrs	r3, r2
		data |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCXTEN_Pos) | (CKGR_MOR_MOSCXTST_Msk & (startup_time << CKGR_MOR_MOSCXTST_Pos));
  402256:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
		CRITICAL_SECTION_ENTER()
  40225a:	47b0      	blx	r6
		CRITICAL_SECTION_LEAVE()
  40225c:	a801      	add	r0, sp, #4
		PMC->CKGR_MOR = data;
  40225e:	6225      	str	r5, [r4, #32]
		CRITICAL_SECTION_LEAVE()
  402260:	4b18      	ldr	r3, [pc, #96]	; (4022c4 <clock_sources_config+0x90>)
  402262:	4798      	blx	r3
		while (!(PMC->PMC_SR & (1 << PMC_SR_MOSCXTS_Pos)))
  402264:	4622      	mov	r2, r4
  402266:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402268:	07d9      	lsls	r1, r3, #31
  40226a:	d5fc      	bpl.n	402266 <clock_sources_config+0x32>
}
  40226c:	b004      	add	sp, #16
  40226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data = PMC->CKGR_MOR;
  402272:	4d10      	ldr	r5, [pc, #64]	; (4022b4 <clock_sources_config+0x80>)
		CRITICAL_SECTION_ENTER()
  402274:	a802      	add	r0, sp, #8
		data |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCRCEN_Pos);
  402276:	4e14      	ldr	r6, [pc, #80]	; (4022c8 <clock_sources_config+0x94>)
		data = PMC->CKGR_MOR;
  402278:	6a2b      	ldr	r3, [r5, #32]
		while (!(PMC->PMC_SR & (1 << PMC_SR_MOSCRCS_Pos)))
  40227a:	462c      	mov	r4, r5
		CRITICAL_SECTION_ENTER()
  40227c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4022c0 <clock_sources_config+0x8c>
		data |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCRCEN_Pos);
  402280:	431e      	orrs	r6, r3
		CRITICAL_SECTION_LEAVE()
  402282:	4f10      	ldr	r7, [pc, #64]	; (4022c4 <clock_sources_config+0x90>)
		CRITICAL_SECTION_ENTER()
  402284:	47c0      	blx	r8
		CRITICAL_SECTION_LEAVE()
  402286:	a802      	add	r0, sp, #8
		PMC->CKGR_MOR = data;
  402288:	622e      	str	r6, [r5, #32]
		CRITICAL_SECTION_LEAVE()
  40228a:	47b8      	blx	r7
		while (!(PMC->PMC_SR & (1 << PMC_SR_MOSCRCS_Pos)))
  40228c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  40228e:	039a      	lsls	r2, r3, #14
  402290:	d5fc      	bpl.n	40228c <clock_sources_config+0x58>
		data = PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk;
  402292:	6a23      	ldr	r3, [r4, #32]
		CRITICAL_SECTION_ENTER()
  402294:	a803      	add	r0, sp, #12
		data |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (2 << CKGR_MOR_MOSCRCF_Pos);
  402296:	4d0d      	ldr	r5, [pc, #52]	; (4022cc <clock_sources_config+0x98>)
		data = PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk;
  402298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		data |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (2 << CKGR_MOR_MOSCRCF_Pos);
  40229c:	431d      	orrs	r5, r3
		CRITICAL_SECTION_ENTER()
  40229e:	47c0      	blx	r8
		CRITICAL_SECTION_LEAVE()
  4022a0:	a803      	add	r0, sp, #12
		PMC->CKGR_MOR = data;
  4022a2:	6225      	str	r5, [r4, #32]
		CRITICAL_SECTION_LEAVE()
  4022a4:	47b8      	blx	r7
		while (!(PMC->PMC_SR & (1 << PMC_SR_MOSCRCS_Pos)))
  4022a6:	4a03      	ldr	r2, [pc, #12]	; (4022b4 <clock_sources_config+0x80>)
  4022a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022aa:	039b      	lsls	r3, r3, #14
  4022ac:	d5fc      	bpl.n	4022a8 <clock_sources_config+0x74>
}
  4022ae:	b004      	add	sp, #16
  4022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022b4:	400e0600 	.word	0x400e0600
  4022b8:	ffff00fd 	.word	0xffff00fd
  4022bc:	00370001 	.word	0x00370001
  4022c0:	00402485 	.word	0x00402485
  4022c4:	00402495 	.word	0x00402495
  4022c8:	00370008 	.word	0x00370008
  4022cc:	00370020 	.word	0x00370020

004022d0 <clock_main_clock_config>:

//--------------------------------------------------------------------------------------------------//


void clock_main_clock_config(clock_source_e clock_oscillator)
{
  4022d0:	b530      	push	{r4, r5, lr}
  4022d2:	b083      	sub	sp, #12
	if (clock_oscillator == CLOCK_SOURCE_CRYSTAL)
  4022d4:	b118      	cbz	r0, 4022de <clock_main_clock_config+0xe>
		// Use crystal as source for main clock
		CRITICAL_SECTION_ENTER()
		PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCSEL_Pos);
		CRITICAL_SECTION_LEAVE()
	}
	else if (clock_oscillator == CLOCK_SOURCE_RC)
  4022d6:	2801      	cmp	r0, #1
  4022d8:	d00e      	beq.n	4022f8 <clock_main_clock_config+0x28>
		
		CRITICAL_SECTION_ENTER()
		PMC->CKGR_MOR = data;
		CRITICAL_SECTION_LEAVE()
	}
}
  4022da:	b003      	add	sp, #12
  4022dc:	bd30      	pop	{r4, r5, pc}
		CRITICAL_SECTION_ENTER()
  4022de:	4668      	mov	r0, sp
  4022e0:	4b0d      	ldr	r3, [pc, #52]	; (402318 <clock_main_clock_config+0x48>)
  4022e2:	4798      	blx	r3
		PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCSEL_Pos);
  4022e4:	4a0d      	ldr	r2, [pc, #52]	; (40231c <clock_main_clock_config+0x4c>)
  4022e6:	4b0e      	ldr	r3, [pc, #56]	; (402320 <clock_main_clock_config+0x50>)
		CRITICAL_SECTION_LEAVE()
  4022e8:	4668      	mov	r0, sp
		PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCSEL_Pos);
  4022ea:	6a14      	ldr	r4, [r2, #32]
		CRITICAL_SECTION_LEAVE()
  4022ec:	490d      	ldr	r1, [pc, #52]	; (402324 <clock_main_clock_config+0x54>)
		PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos) | (1 << CKGR_MOR_MOSCSEL_Pos);
  4022ee:	4323      	orrs	r3, r4
  4022f0:	6213      	str	r3, [r2, #32]
		CRITICAL_SECTION_LEAVE()
  4022f2:	4788      	blx	r1
}
  4022f4:	b003      	add	sp, #12
  4022f6:	bd30      	pop	{r4, r5, pc}
		uint32_t data = (PMC->CKGR_MOR & ~(1 << CKGR_MOR_MOSCSEL_Pos));
  4022f8:	4d08      	ldr	r5, [pc, #32]	; (40231c <clock_main_clock_config+0x4c>)
		CRITICAL_SECTION_ENTER()
  4022fa:	a801      	add	r0, sp, #4
  4022fc:	4b06      	ldr	r3, [pc, #24]	; (402318 <clock_main_clock_config+0x48>)
		uint32_t data = (PMC->CKGR_MOR & ~(1 << CKGR_MOR_MOSCSEL_Pos));
  4022fe:	6a2c      	ldr	r4, [r5, #32]
		CRITICAL_SECTION_ENTER()
  402300:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  402302:	a801      	add	r0, sp, #4
  402304:	4b07      	ldr	r3, [pc, #28]	; (402324 <clock_main_clock_config+0x54>)
		uint32_t data = (PMC->CKGR_MOR & ~(1 << CKGR_MOR_MOSCSEL_Pos));
  402306:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
		data |= (CKGR_MOR_KEY_PASSWD_Val << CKGR_MOR_KEY_Pos);
  40230a:	f444 145c 	orr.w	r4, r4, #3604480	; 0x370000
		PMC->CKGR_MOR = data;
  40230e:	622c      	str	r4, [r5, #32]
		CRITICAL_SECTION_LEAVE()
  402310:	4798      	blx	r3
}
  402312:	b003      	add	sp, #12
  402314:	bd30      	pop	{r4, r5, pc}
  402316:	bf00      	nop
  402318:	00402485 	.word	0x00402485
  40231c:	400e0600 	.word	0x400e0600
  402320:	01370000 	.word	0x01370000
  402324:	00402495 	.word	0x00402495

00402328 <clock_pll_config>:

//--------------------------------------------------------------------------------------------------//


void clock_pll_config(uint16_t multiplication_factor, uint8_t division_factor, uint8_t startup_time)
{
  402328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t data = (CKGR_PLLAR_MULA_Msk & ((multiplication_factor - 1) << CKGR_PLLAR_MULA_Pos)) |
	(CKGR_PLLAR_DIVA_Msk & (division_factor << CKGR_PLLAR_DIVA_Pos)) |
	(CKGR_PLLAR_PLLACOUNT_Msk & (startup_time << CKGR_PLLAR_PLLACOUNT_Pos));
	
	// Stop PLL first
	uint32_t tmp = PMC->CKGR_PLLAR;
  40232c:	4c12      	ldr	r4, [pc, #72]	; (402378 <clock_pll_config+0x50>)
	(CKGR_PLLAR_PLLACOUNT_Msk & (startup_time << CKGR_PLLAR_PLLACOUNT_Pos));
  40232e:	0215      	lsls	r5, r2, #8
	
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402330:	4f12      	ldr	r7, [pc, #72]	; (40237c <clock_pll_config+0x54>)
{
  402332:	b082      	sub	sp, #8
	uint32_t tmp = PMC->CKGR_PLLAR;
  402334:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  402336:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
	(CKGR_PLLAR_PLLACOUNT_Msk & (startup_time << CKGR_PLLAR_PLLACOUNT_Pos));
  40233a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
{
  40233e:	4606      	mov	r6, r0
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402340:	401f      	ands	r7, r3
	
	CRITICAL_SECTION_ENTER()
  402342:	4668      	mov	r0, sp
  402344:	f8df 8040 	ldr.w	r8, [pc, #64]	; 402388 <clock_pll_config+0x60>
  402348:	430d      	orrs	r5, r1
  40234a:	47c0      	blx	r8
	PMC->CKGR_PLLAR = tmp;
  40234c:	62a7      	str	r7, [r4, #40]	; 0x28
	CRITICAL_SECTION_LEAVE()
  40234e:	4668      	mov	r0, sp
  402350:	4f0b      	ldr	r7, [pc, #44]	; (402380 <clock_pll_config+0x58>)
  402352:	47b8      	blx	r7
	
	// Write register
	CRITICAL_SECTION_ENTER()
  402354:	a801      	add	r0, sp, #4
  402356:	47c0      	blx	r8
	uint32_t data = (CKGR_PLLAR_MULA_Msk & ((multiplication_factor - 1) << CKGR_PLLAR_MULA_Pos)) |
  402358:	3e01      	subs	r6, #1
  40235a:	490a      	ldr	r1, [pc, #40]	; (402384 <clock_pll_config+0x5c>)
	PMC->CKGR_PLLAR = ((1 << CKGR_PLLAR_ONE_Pos) | data);
	CRITICAL_SECTION_LEAVE()
  40235c:	a801      	add	r0, sp, #4
	uint32_t data = (CKGR_PLLAR_MULA_Msk & ((multiplication_factor - 1) << CKGR_PLLAR_MULA_Pos)) |
  40235e:	ea01 4106 	and.w	r1, r1, r6, lsl #16
	PMC->CKGR_PLLAR = ((1 << CKGR_PLLAR_ONE_Pos) | data);
  402362:	4329      	orrs	r1, r5
  402364:	62a1      	str	r1, [r4, #40]	; 0x28
	CRITICAL_SECTION_LEAVE()
  402366:	47b8      	blx	r7
	
	// Wait for PLLA to lock loop
	while (!(PMC->PMC_SR & (1 << PMC_SR_LOCKA_Pos)))
  402368:	4622      	mov	r2, r4
  40236a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40236c:	079b      	lsls	r3, r3, #30
  40236e:	d5fc      	bpl.n	40236a <clock_pll_config+0x42>
	{
		
	}
}
  402370:	b002      	add	sp, #8
  402372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402376:	bf00      	nop
  402378:	400e0600 	.word	0x400e0600
  40237c:	f800ffff 	.word	0xf800ffff
  402380:	00402495 	.word	0x00402495
  402384:	07ff0000 	.word	0x07ff0000
  402388:	00402485 	.word	0x00402485

0040238c <clock_master_clock_config>:

//--------------------------------------------------------------------------------------------------//


void clock_master_clock_config(clock_master_clock_source_e source, clock_master_clock_prescaler_e prescaler, clock_master_clock_division_e division)
{
  40238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Set processor clock prescaler
	uint32_t tmp = PMC->PMC_MCKR;
  402390:	4e19      	ldr	r6, [pc, #100]	; (4023f8 <clock_master_clock_config+0x6c>)
{
  402392:	b084      	sub	sp, #16
  402394:	4680      	mov	r8, r0
	
	tmp &= ~(PMC_MCKR_PRES_Msk);
	tmp |= (prescaler << PMC_MCKR_PRES_Pos);
	
	CRITICAL_SECTION_ENTER()
  402396:	f8df 9068 	ldr.w	r9, [pc, #104]	; 402400 <clock_master_clock_config+0x74>
	uint32_t tmp = PMC->PMC_MCKR;
  40239a:	6b34      	ldr	r4, [r6, #48]	; 0x30
	CRITICAL_SECTION_ENTER()
  40239c:	a801      	add	r0, sp, #4
{
  40239e:	4692      	mov	sl, r2
	PMC->PMC_MCKR = tmp;
	CRITICAL_SECTION_LEAVE()
  4023a0:	4f16      	ldr	r7, [pc, #88]	; (4023fc <clock_master_clock_config+0x70>)
	tmp &= ~(PMC_MCKR_PRES_Msk);
  4023a2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
	
	// Wait until master clock is ready
	while (!(PMC->PMC_SR & (1 << PMC_SR_MCKRDY_Pos)))
  4023a6:	4635      	mov	r5, r6
	tmp |= (prescaler << PMC_MCKR_PRES_Pos);
  4023a8:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
	CRITICAL_SECTION_ENTER()
  4023ac:	47c8      	blx	r9
	CRITICAL_SECTION_LEAVE()
  4023ae:	a801      	add	r0, sp, #4
	PMC->PMC_MCKR = tmp;
  4023b0:	6334      	str	r4, [r6, #48]	; 0x30
	CRITICAL_SECTION_LEAVE()
  4023b2:	47b8      	blx	r7
	while (!(PMC->PMC_SR & (1 << PMC_SR_MCKRDY_Pos)))
  4023b4:	6eab      	ldr	r3, [r5, #104]	; 0x68
  4023b6:	0719      	lsls	r1, r3, #28
  4023b8:	d5fc      	bpl.n	4023b4 <clock_master_clock_config+0x28>
	{
		
	}
	
	// Set master clock division
	tmp = PMC->PMC_MCKR;
  4023ba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
	
	tmp &= ~(PMC_MCKR_MDIV_Msk);
	tmp |= (division << PMC_MCKR_MDIV_Pos);
	
	CRITICAL_SECTION_ENTER()
  4023bc:	a802      	add	r0, sp, #8
  4023be:	47c8      	blx	r9
	PMC->PMC_MCKR = tmp;
	CRITICAL_SECTION_LEAVE()
  4023c0:	a802      	add	r0, sp, #8
	tmp &= ~(PMC_MCKR_MDIV_Msk);
  4023c2:	f426 7640 	bic.w	r6, r6, #768	; 0x300
	
	// Wait until master clock is ready
	while (!(PMC->PMC_SR & (1 << PMC_SR_MCKRDY_Pos)))
  4023c6:	4c0c      	ldr	r4, [pc, #48]	; (4023f8 <clock_master_clock_config+0x6c>)
	tmp |= (division << PMC_MCKR_MDIV_Pos);
  4023c8:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
	PMC->PMC_MCKR = tmp;
  4023cc:	632e      	str	r6, [r5, #48]	; 0x30
	CRITICAL_SECTION_LEAVE()
  4023ce:	47b8      	blx	r7
	while (!(PMC->PMC_SR & (1 << PMC_SR_MCKRDY_Pos)))
  4023d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4023d2:	071a      	lsls	r2, r3, #28
  4023d4:	d5fc      	bpl.n	4023d0 <clock_master_clock_config+0x44>
	{
		
	}

	// Selecting master clock source to PLLA
	tmp = PMC->PMC_MCKR;
  4023d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
	
	tmp &= ~(PMC_MCKR_CSS_Msk);
	tmp |= (source << PMC_MCKR_CSS_Pos);
	
	CRITICAL_SECTION_ENTER()
  4023d8:	a803      	add	r0, sp, #12
  4023da:	47c8      	blx	r9
	PMC->PMC_MCKR = tmp;
	CRITICAL_SECTION_LEAVE()
  4023dc:	a803      	add	r0, sp, #12
	tmp &= ~(PMC_MCKR_CSS_Msk);
  4023de:	f025 0503 	bic.w	r5, r5, #3
	tmp |= (source << PMC_MCKR_CSS_Pos);
  4023e2:	ea48 0505 	orr.w	r5, r8, r5
	PMC->PMC_MCKR = tmp;
  4023e6:	6325      	str	r5, [r4, #48]	; 0x30
	CRITICAL_SECTION_LEAVE()
  4023e8:	47b8      	blx	r7

	// Wait until master clock is ready
	while (!(PMC->PMC_SR & (1 << PMC_SR_MCKRDY_Pos)))
  4023ea:	4a03      	ldr	r2, [pc, #12]	; (4023f8 <clock_master_clock_config+0x6c>)
  4023ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023ee:	071b      	lsls	r3, r3, #28
  4023f0:	d5fc      	bpl.n	4023ec <clock_master_clock_config+0x60>
	{
		
	}
}
  4023f2:	b004      	add	sp, #16
  4023f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023f8:	400e0600 	.word	0x400e0600
  4023fc:	00402495 	.word	0x00402495
  402400:	00402485 	.word	0x00402485

00402404 <clock_peripheral_clock_enable>:
//--------------------------------------------------------------------------------------------------//


void clock_peripheral_clock_enable(uint8_t id_peripheral)
{
	if (id_peripheral < 32)
  402404:	281f      	cmp	r0, #31
  402406:	d80a      	bhi.n	40241e <clock_peripheral_clock_enable+0x1a>
	{
		if (!(PMC->PMC_PCSR0 & (1 << id_peripheral)))
  402408:	4a1b      	ldr	r2, [pc, #108]	; (402478 <clock_peripheral_clock_enable+0x74>)
  40240a:	2301      	movs	r3, #1
  40240c:	6991      	ldr	r1, [r2, #24]
  40240e:	fa03 f000 	lsl.w	r0, r3, r0
  402412:	4201      	tst	r1, r0
  402414:	d10f      	bne.n	402436 <clock_peripheral_clock_enable+0x32>
		{
			PMC->PMC_PCER0 |= (1 << id_peripheral);
  402416:	6913      	ldr	r3, [r2, #16]
  402418:	4318      	orrs	r0, r3
  40241a:	6110      	str	r0, [r2, #16]
  40241c:	4770      	bx	lr
		}
	}
	else if (id_peripheral < 64)
  40241e:	283f      	cmp	r0, #63	; 0x3f
  402420:	d810      	bhi.n	402444 <clock_peripheral_clock_enable+0x40>
	{
		id_peripheral -= 32;
  402422:	3820      	subs	r0, #32
		if (!(PMC->PMC_PCSR1 & (1 << id_peripheral)))
  402424:	2301      	movs	r3, #1
  402426:	4a14      	ldr	r2, [pc, #80]	; (402478 <clock_peripheral_clock_enable+0x74>)
  402428:	b2c0      	uxtb	r0, r0
  40242a:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
  40242e:	fa03 f000 	lsl.w	r0, r3, r0
  402432:	4201      	tst	r1, r0
  402434:	d000      	beq.n	402438 <clock_peripheral_clock_enable+0x34>
  402436:	4770      	bx	lr
		{
			PMC->PMC_PCER1 |= (1 << id_peripheral);
  402438:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
  40243c:	4318      	orrs	r0, r3
  40243e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  402442:	4770      	bx	lr
{
  402444:	b5f0      	push	{r4, r5, r6, r7, lr}
  402446:	4604      	mov	r4, r0
  402448:	b083      	sub	sp, #12
	else
	{
		uint32_t tmp;
		//Write peripheral ID
		CRITICAL_SECTION_ENTER()
		PMC->PMC_PCR = (PMC_PCR_PID_Msk & (id_peripheral << PMC_PCR_PID_Pos));
  40244a:	4d0b      	ldr	r5, [pc, #44]	; (402478 <clock_peripheral_clock_enable+0x74>)
  40244c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
		CRITICAL_SECTION_ENTER()
  402450:	4f0a      	ldr	r7, [pc, #40]	; (40247c <clock_peripheral_clock_enable+0x78>)
  402452:	4668      	mov	r0, sp
		CRITICAL_SECTION_LEAVE()
  402454:	4e0a      	ldr	r6, [pc, #40]	; (402480 <clock_peripheral_clock_enable+0x7c>)
		CRITICAL_SECTION_ENTER()
  402456:	47b8      	blx	r7
		CRITICAL_SECTION_LEAVE()
  402458:	4668      	mov	r0, sp
		PMC->PMC_PCR = (PMC_PCR_PID_Msk & (id_peripheral << PMC_PCR_PID_Pos));
  40245a:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
		CRITICAL_SECTION_LEAVE()
  40245e:	47b0      	blx	r6
		
		//Read register
		tmp = PMC->PMC_PCR;
  402460:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
		
		//Enable peripheral clock and command write
		tmp |= (1 << PMC_PCR_EN_Pos) | (1 << PMC_PCR_CMD_Pos);
		
		//Write register
		CRITICAL_SECTION_ENTER()
  402464:	a801      	add	r0, sp, #4
		tmp |= (1 << PMC_PCR_EN_Pos) | (1 << PMC_PCR_CMD_Pos);
  402466:	f044 2410 	orr.w	r4, r4, #268439552	; 0x10001000
		CRITICAL_SECTION_ENTER()
  40246a:	47b8      	blx	r7
		PMC->PMC_PCR = tmp;
		CRITICAL_SECTION_LEAVE()
  40246c:	a801      	add	r0, sp, #4
		PMC->PMC_PCR = tmp;
  40246e:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
		CRITICAL_SECTION_LEAVE()
  402472:	47b0      	blx	r6
	}
}
  402474:	b003      	add	sp, #12
  402476:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402478:	400e0600 	.word	0x400e0600
  40247c:	00402485 	.word	0x00402485
  402480:	00402495 	.word	0x00402495

00402484 <core_enter_critical_section>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402484:	f3ef 8310 	mrs	r3, PRIMASK
//--------------------------------------------------------------------------------------------------//


void core_enter_critical_section(uint32_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  402488:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40248a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40248c:	f3bf 8f5f 	dmb	sy
  402490:	4770      	bx	lr
  402492:	bf00      	nop

00402494 <core_leave_critical_section>:
  402494:	f3bf 8f5f 	dmb	sy


void core_leave_critical_section(uint32_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  402498:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40249a:	f383 8810 	msr	PRIMASK, r3
  40249e:	4770      	bx	lr

004024a0 <dma_config>:

//--------------------------------------------------------------------------------------------------//


void dma_config(void)
{
  4024a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clock_peripheral_clock_enable(ID_XDMAC);
  4024a4:	4b14      	ldr	r3, [pc, #80]	; (4024f8 <dma_config+0x58>)
{
  4024a6:	b082      	sub	sp, #8
	clock_peripheral_clock_enable(ID_XDMAC);
  4024a8:	203a      	movs	r0, #58	; 0x3a
  4024aa:	4798      	blx	r3
  4024ac:	2300      	movs	r3, #0
//--------------------------------------------------------------------------------------------------//


uint32_t dma_read_channel_interrupt_status_register(Xdmac* hardware, uint8_t channel_number)
{
	uint32_t tmp = hardware->XdmacChid[channel_number].XDMAC_CIS;
  4024ae:	4913      	ldr	r1, [pc, #76]	; (4024fc <dma_config+0x5c>)
  4024b0:	eb01 1283 	add.w	r2, r1, r3, lsl #6
  4024b4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < DMA_NUMBER_OF_CHANNELS; i++)
  4024b6:	2b18      	cmp	r3, #24
	uint32_t tmp = hardware->XdmacChid[channel_number].XDMAC_CIS;
  4024b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
	for (uint8_t i = 0; i < DMA_NUMBER_OF_CHANNELS; i++)
  4024ba:	d1f9      	bne.n	4024b0 <dma_config+0x10>
  4024bc:	2500      	movs	r5, #0
  4024be:	f8df 8048 	ldr.w	r8, [pc, #72]	; 402508 <dma_config+0x68>
  4024c2:	4f0f      	ldr	r7, [pc, #60]	; (402500 <dma_config+0x60>)
		hardware->XdmacChid[i].XDMAC_CNDC = 0x0;
  4024c4:	462c      	mov	r4, r5
  4024c6:	4e0d      	ldr	r6, [pc, #52]	; (4024fc <dma_config+0x5c>)
		CRITICAL_SECTION_ENTER()
  4024c8:	a801      	add	r0, sp, #4
  4024ca:	47c0      	blx	r8
		CRITICAL_SECTION_LEAVE()
  4024cc:	a801      	add	r0, sp, #4
		hardware->XdmacChid[i].XDMAC_CNDC = 0x0;
  4024ce:	eb06 1385 	add.w	r3, r6, r5, lsl #6
  4024d2:	3501      	adds	r5, #1
  4024d4:	66dc      	str	r4, [r3, #108]	; 0x6c
		hardware->XdmacChid[i].XDMAC_CBC = 0x0;
  4024d6:	675c      	str	r4, [r3, #116]	; 0x74
		hardware->XdmacChid[i].XDMAC_CDS_MSP = 0x0;
  4024d8:	67dc      	str	r4, [r3, #124]	; 0x7c
		hardware->XdmacChid[i].XDMAC_CSUS = 0x0;
  4024da:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hardware->XdmacChid[i].XDMAC_CDUS = 0x0;
  4024de:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		CRITICAL_SECTION_LEAVE()
  4024e2:	47b8      	blx	r7
	for (uint8_t i = 0; i < DMA_NUMBER_OF_CHANNELS; i++)
  4024e4:	2d18      	cmp	r5, #24
  4024e6:	d1ef      	bne.n	4024c8 <dma_config+0x28>
	interrupt_enable_peripheral_interrupt(XDMAC_IRQn, DMA_INTERRUPT_PRIORITY);
  4024e8:	2103      	movs	r1, #3
  4024ea:	203a      	movs	r0, #58	; 0x3a
  4024ec:	4b05      	ldr	r3, [pc, #20]	; (402504 <dma_config+0x64>)
  4024ee:	4798      	blx	r3
}
  4024f0:	b002      	add	sp, #8
  4024f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024f6:	bf00      	nop
  4024f8:	00402405 	.word	0x00402405
  4024fc:	40078000 	.word	0x40078000
  402500:	00402495 	.word	0x00402495
  402504:	00403145 	.word	0x00403145
  402508:	00402485 	.word	0x00402485

0040250c <dma_setup_transaction>:

//--------------------------------------------------------------------------------------------------//


void dma_setup_transaction(Xdmac* hardware, dma_microblock_transaction_descriptor* dma_descriptor)
{	
  40250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402510:	4680      	mov	r8, r0
	
	uint32_t channel_status = dma_read_channel_status_register(hardware);
	
	int8_t current_channel = -1;
	
	if (dma_descriptor->channel < 0)
  402512:	f991 000c 	ldrsb.w	r0, [r1, #12]
{	
  402516:	b08a      	sub	sp, #40	; 0x28
  402518:	460d      	mov	r5, r1
	if (dma_descriptor->channel < 0)
  40251a:	2800      	cmp	r0, #0
	uint32_t tmp_reg = hardware->XDMAC_GS;
  40251c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
	if (dma_descriptor->channel < 0)
  402520:	f2c0 8086 	blt.w	402630 <dma_setup_transaction+0x124>
			}
		}
	}
	else
	{
		if (channel_status & (1 << dma_descriptor->channel))
  402524:	2701      	movs	r7, #1
  402526:	4606      	mov	r6, r0
  402528:	4087      	lsls	r7, r0
  40252a:	4217      	tst	r7, r2
  40252c:	d178      	bne.n	402620 <dma_setup_transaction+0x114>

void dma_channel_configure(Xdmac* hardware, dma_microblock_transaction_descriptor* dma_descriptor)
{
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
									(dma_descriptor->destination_adressing_mode << XDMAC_CC_DAM_Pos) |
									(dma_descriptor->source_addressing_mode << XDMAC_CC_SAM_Pos) |
  40252e:	7bec      	ldrb	r4, [r5, #15]
									(dma_descriptor->trigger << XDMAC_CC_SWREQ_Pos) |
									(dma_descriptor->synchronization << XDMAC_CC_DSYNC_Pos) |
									(dma_descriptor->burst_size << XDMAC_CC_MBSIZE_Pos) |
									(dma_descriptor->transfer_type << XDMAC_CC_TYPE_Pos);

	check(dma_descriptor->channel >= 0);
  402530:	43c0      	mvns	r0, r0
									(dma_descriptor->destination_adressing_mode << XDMAC_CC_DAM_Pos) |
  402532:	7bab      	ldrb	r3, [r5, #14]
	check(dma_descriptor->channel >= 0);
  402534:	f44f 7202 	mov.w	r2, #520	; 0x208
									(dma_descriptor->source_addressing_mode << XDMAC_CC_SAM_Pos) |
  402538:	0424      	lsls	r4, r4, #16
									(dma_descriptor->transfer_type << XDMAC_CC_TYPE_Pos);
  40253a:	7e29      	ldrb	r1, [r5, #24]
									(dma_descriptor->destination_bus_interface << XDMAC_CC_DIF_Pos) |
  40253c:	f895 e010 	ldrb.w	lr, [r5, #16]
	check(dma_descriptor->channel >= 0);
  402540:	0fc0      	lsrs	r0, r0, #31
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402542:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
									(dma_descriptor->source_bus_inteface << XDMAC_CC_SIF_Pos) |
  402546:	7c6b      	ldrb	r3, [r5, #17]
	check(dma_descriptor->channel >= 0);
  402548:	f8df 9118 	ldr.w	r9, [pc, #280]	; 402664 <dma_setup_transaction+0x158>
	hardware->XdmacChid[channel_number].XDMAC_CID = interrupt_mask;
  40254c:	eb08 1686 	add.w	r6, r8, r6, lsl #6
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402550:	430c      	orrs	r4, r1
									(dma_descriptor->data_width << XDMAC_CC_DWIDTH_Pos) |
  402552:	7ca9      	ldrb	r1, [r5, #18]
	
	CRITICAL_SECTION_ENTER()
  402554:	f8df a110 	ldr.w	sl, [pc, #272]	; 402668 <dma_setup_transaction+0x15c>
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402558:	ea44 348e 	orr.w	r4, r4, lr, lsl #14
									(dma_descriptor->chunk_size << XDMAC_CC_CSIZE_Pos) |
  40255c:	f895 e013 	ldrb.w	lr, [r5, #19]
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402560:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
									(dma_descriptor->memory_fill << XDMAC_CC_MEMSET_Pos) |
  402564:	7d2b      	ldrb	r3, [r5, #20]
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402566:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
									(dma_descriptor->trigger << XDMAC_CC_SWREQ_Pos) |
  40256a:	7d69      	ldrb	r1, [r5, #21]
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  40256c:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
									(dma_descriptor->synchronization << XDMAC_CC_DSYNC_Pos) |
  402570:	f895 e016 	ldrb.w	lr, [r5, #22]
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402574:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
  402578:	7b6b      	ldrb	r3, [r5, #13]
  40257a:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
									(dma_descriptor->burst_size << XDMAC_CC_MBSIZE_Pos) |
  40257e:	7de9      	ldrb	r1, [r5, #23]
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402580:	061b      	lsls	r3, r3, #24
  402582:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  402586:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  40258a:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
	check(dma_descriptor->channel >= 0);
  40258e:	4931      	ldr	r1, [pc, #196]	; (402654 <dma_setup_transaction+0x148>)
	uint32_t dma_config_register =	(XDMAC_CC_PERID_Msk & (dma_descriptor->peripheral_id << XDMAC_CC_PERID_Pos)) |
  402590:	431c      	orrs	r4, r3
	check(dma_descriptor->channel >= 0);
  402592:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER()
  402594:	a809      	add	r0, sp, #36	; 0x24
	hardware->XdmacChid[dma_descriptor->channel].XDMAC_CC = dma_config_register;
	CRITICAL_SECTION_LEAVE()
  402596:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 40266c <dma_setup_transaction+0x160>
	CRITICAL_SECTION_ENTER()
  40259a:	47d0      	blx	sl
	hardware->XdmacChid[dma_descriptor->channel].XDMAC_CC = dma_config_register;
  40259c:	f995 300c 	ldrsb.w	r3, [r5, #12]
	CRITICAL_SECTION_LEAVE()
  4025a0:	a809      	add	r0, sp, #36	; 0x24
	hardware->XdmacChid[dma_descriptor->channel].XDMAC_CC = dma_config_register;
  4025a2:	eb08 1383 	add.w	r3, r8, r3, lsl #6
  4025a6:	679c      	str	r4, [r3, #120]	; 0x78
	CRITICAL_SECTION_LEAVE()
  4025a8:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER()
  4025aa:	a808      	add	r0, sp, #32
  4025ac:	47d0      	blx	sl
	hardware->XdmacChid[channel_number].XDMAC_CID = interrupt_mask;
  4025ae:	237f      	movs	r3, #127	; 0x7f
	CRITICAL_SECTION_LEAVE()
  4025b0:	a808      	add	r0, sp, #32
	hardware->XdmacChid[channel_number].XDMAC_CID = interrupt_mask;
  4025b2:	6573      	str	r3, [r6, #84]	; 0x54
	CRITICAL_SECTION_LEAVE()
  4025b4:	47c8      	blx	r9
	dma_channel_set_source_address(hardware, current_channel, dma_descriptor->source_pointer);
  4025b6:	682c      	ldr	r4, [r5, #0]
	CRITICAL_SECTION_ENTER()
  4025b8:	a807      	add	r0, sp, #28
  4025ba:	47d0      	blx	sl
	hardware->XdmacChid[channel_number].XDMAC_CSA = (uint32_t)source_address;
  4025bc:	6634      	str	r4, [r6, #96]	; 0x60
	CRITICAL_SECTION_LEAVE()
  4025be:	a807      	add	r0, sp, #28
  4025c0:	47c8      	blx	r9
	dma_channel_set_destination_address(hardware, current_channel, dma_descriptor->destination_pointer);
  4025c2:	686c      	ldr	r4, [r5, #4]
	CRITICAL_SECTION_ENTER()
  4025c4:	a806      	add	r0, sp, #24
  4025c6:	47d0      	blx	sl
	hardware->XdmacChid[channel_number].XDMAC_CDA = (uint32_t)destination_address;
  4025c8:	6674      	str	r4, [r6, #100]	; 0x64
	CRITICAL_SECTION_LEAVE()
  4025ca:	a806      	add	r0, sp, #24
  4025cc:	47c8      	blx	r9
	dma_channel_set_microblock_length(hardware, current_channel, dma_descriptor->size);
  4025ce:	68ac      	ldr	r4, [r5, #8]
	CRITICAL_SECTION_ENTER()
  4025d0:	a805      	add	r0, sp, #20
	hardware->XdmacChid[channel_number].XDMAC_CUBC = (XDMAC_CUBC_UBLEN_Msk & length);
  4025d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	CRITICAL_SECTION_ENTER()
  4025d6:	47d0      	blx	sl
	CRITICAL_SECTION_LEAVE()
  4025d8:	a805      	add	r0, sp, #20
	hardware->XdmacChid[channel_number].XDMAC_CUBC = (XDMAC_CUBC_UBLEN_Msk & length);
  4025da:	6734      	str	r4, [r6, #112]	; 0x70
	CRITICAL_SECTION_LEAVE()
  4025dc:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER()
  4025de:	a804      	add	r0, sp, #16
  4025e0:	47d0      	blx	sl
	hardware->XdmacChid[channel_number].XDMAC_CNDC = 0x0;
  4025e2:	2300      	movs	r3, #0
	CRITICAL_SECTION_LEAVE()
  4025e4:	a804      	add	r0, sp, #16
	hardware->XdmacChid[channel_number].XDMAC_CNDC = 0x0;
  4025e6:	66f3      	str	r3, [r6, #108]	; 0x6c
	hardware->XdmacChid[channel_number].XDMAC_CBC = 0x0;
  4025e8:	6773      	str	r3, [r6, #116]	; 0x74
	hardware->XdmacChid[channel_number].XDMAC_CDS_MSP = 0x0;
  4025ea:	67f3      	str	r3, [r6, #124]	; 0x7c
	hardware->XdmacChid[channel_number].XDMAC_CSUS = 0x0;
  4025ec:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
	hardware->XdmacChid[channel_number].XDMAC_CDUS = 0x0;
  4025f0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
	CRITICAL_SECTION_LEAVE()
  4025f4:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER()
  4025f6:	a803      	add	r0, sp, #12
  4025f8:	47d0      	blx	sl
	CRITICAL_SECTION_LEAVE()
  4025fa:	a803      	add	r0, sp, #12
	hardware->XDMAC_GIE = (1 << channel_number);
  4025fc:	f8c8 700c 	str.w	r7, [r8, #12]
	CRITICAL_SECTION_LEAVE()
  402600:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER()
  402602:	a802      	add	r0, sp, #8
  402604:	47d0      	blx	sl
	hardware->XdmacChid[channel_number].XDMAC_CIE = interrupt_mask;
  402606:	2301      	movs	r3, #1
	CRITICAL_SECTION_LEAVE()
  402608:	a802      	add	r0, sp, #8
	hardware->XdmacChid[channel_number].XDMAC_CIE = interrupt_mask;
  40260a:	6533      	str	r3, [r6, #80]	; 0x50
	CRITICAL_SECTION_LEAVE()
  40260c:	47c8      	blx	r9
	CRITICAL_SECTION_ENTER()
  40260e:	a801      	add	r0, sp, #4
  402610:	47d0      	blx	sl
	CRITICAL_SECTION_LEAVE()
  402612:	a801      	add	r0, sp, #4
	hardware->XDMAC_GE = (1 << channel_number);
  402614:	f8c8 701c 	str.w	r7, [r8, #28]
	CRITICAL_SECTION_LEAVE()
  402618:	47c8      	blx	r9
}
  40261a:	b00a      	add	sp, #40	; 0x28
  40261c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		board_serial_print("No channel available");
  402620:	480d      	ldr	r0, [pc, #52]	; (402658 <dma_setup_transaction+0x14c>)
  402622:	4b0e      	ldr	r3, [pc, #56]	; (40265c <dma_setup_transaction+0x150>)
  402624:	4798      	blx	r3
		dma_descriptor->channel = -1;
  402626:	23ff      	movs	r3, #255	; 0xff
  402628:	732b      	strb	r3, [r5, #12]
}
  40262a:	b00a      	add	sp, #40	; 0x28
  40262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402630:	2100      	movs	r1, #0
			if ((channel_status & (1 << i)) == 0)
  402632:	2701      	movs	r7, #1
  402634:	e002      	b.n	40263c <dma_setup_transaction+0x130>
  402636:	3101      	adds	r1, #1
		for (uint8_t i = 0; i < DMA_NUMBER_OF_CHANNELS; i++)
  402638:	2918      	cmp	r1, #24
  40263a:	d0f1      	beq.n	402620 <dma_setup_transaction+0x114>
			if ((channel_status & (1 << i)) == 0)
  40263c:	fa07 f301 	lsl.w	r3, r7, r1
  402640:	4213      	tst	r3, r2
  402642:	d1f8      	bne.n	402636 <dma_setup_transaction+0x12a>
  402644:	b2ce      	uxtb	r6, r1
				board_serial_print("Channel #%d\n", i);
  402646:	4806      	ldr	r0, [pc, #24]	; (402660 <dma_setup_transaction+0x154>)
  402648:	4b04      	ldr	r3, [pc, #16]	; (40265c <dma_setup_transaction+0x150>)
  40264a:	4798      	blx	r3
  40264c:	40b7      	lsls	r7, r6
  40264e:	f995 000c 	ldrsb.w	r0, [r5, #12]
				break;
  402652:	e76c      	b.n	40252e <dma_setup_transaction+0x22>
  402654:	0040aebc 	.word	0x0040aebc
  402658:	0040aea4 	.word	0x0040aea4
  40265c:	0040052d 	.word	0x0040052d
  402660:	0040ae94 	.word	0x0040ae94
  402664:	00402219 	.word	0x00402219
  402668:	00402485 	.word	0x00402485
  40266c:	00402495 	.word	0x00402495

00402670 <dma_channel_set_callback>:

// This functions set a custom callback for the DMA channels

void dma_channel_set_callback(uint8_t dma_channel, dma_callback callback)
{
	dma_handlers[dma_channel] = callback;
  402670:	4b01      	ldr	r3, [pc, #4]	; (402678 <dma_channel_set_callback+0x8>)
  402672:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  402676:	4770      	bx	lr
  402678:	204021c4 	.word	0x204021c4

0040267c <XDMAC_Handler>:
	uint32_t tmp = hardware->XDMAC_GIS;
  40267c:	4a13      	ldr	r2, [pc, #76]	; (4026cc <XDMAC_Handler+0x50>)
  40267e:	2300      	movs	r3, #0

//--------------------------------------------------------------------------------------------------//


void XDMAC_Handler()
{
  402680:	b510      	push	{r4, lr}
	uint32_t tmp = hardware->XDMAC_GIS;
  402682:	6990      	ldr	r0, [r2, #24]
	uint32_t global_status = dma_read_global_interrupt_status_register(XDMAC);
	
	// Iterate through all the channels
	for (uint8_t i = 0; i < DMA_NUMBER_OF_CHANNELS; i++)
	{
		if (global_status & (1 << i))
  402684:	2401      	movs	r4, #1
  402686:	e001      	b.n	40268c <XDMAC_Handler+0x10>
	for (uint8_t i = 0; i < DMA_NUMBER_OF_CHANNELS; i++)
  402688:	2b18      	cmp	r3, #24
  40268a:	d015      	beq.n	4026b8 <XDMAC_Handler+0x3c>
		if (global_status & (1 << i))
  40268c:	fa04 f203 	lsl.w	r2, r4, r3
  402690:	b2d9      	uxtb	r1, r3
  402692:	3301      	adds	r3, #1
  402694:	4202      	tst	r2, r0
  402696:	d0f7      	beq.n	402688 <XDMAC_Handler+0xc>
	uint32_t tmp = hardware->XdmacChid[channel_number].XDMAC_CIS;
  402698:	018a      	lsls	r2, r1, #6
  40269a:	4b0d      	ldr	r3, [pc, #52]	; (4026d0 <XDMAC_Handler+0x54>)
  40269c:	589c      	ldr	r4, [r3, r2]
		return;
	}
	
	uint32_t channel_status = dma_read_channel_interrupt_status_register(XDMAC, source_channel);
	
	if (channel_status & (XDMAC_CIS_ROIS_Msk | XDMAC_CIS_WBEIS_Msk | XDMAC_CIS_RBEIS_Msk))
  40269e:	f014 0f70 	tst.w	r4, #112	; 0x70
  4026a2:	d10a      	bne.n	4026ba <XDMAC_Handler+0x3e>
	{
		// An error has occurred
		board_serial_print("DMA Error on channel %d\n", source_channel);
		board_serial_print_register("Status code: ", channel_status);
	}
	else if (channel_status & XDMAC_CIS_BIS_Msk)
  4026a4:	07e3      	lsls	r3, r4, #31
  4026a6:	d400      	bmi.n	4026aa <XDMAC_Handler+0x2e>
  4026a8:	bd10      	pop	{r4, pc}
	{
		// End of micro block
		// We call the appropriate handler
		dma_handlers[source_channel](source_channel);
  4026aa:	4b0a      	ldr	r3, [pc, #40]	; (4026d4 <XDMAC_Handler+0x58>)
  4026ac:	4608      	mov	r0, r1
  4026ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	}
}
  4026b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dma_handlers[source_channel](source_channel);
  4026b6:	4718      	bx	r3
  4026b8:	bd10      	pop	{r4, pc}
		board_serial_print("DMA Error on channel %d\n", source_channel);
  4026ba:	4807      	ldr	r0, [pc, #28]	; (4026d8 <XDMAC_Handler+0x5c>)
  4026bc:	4b07      	ldr	r3, [pc, #28]	; (4026dc <XDMAC_Handler+0x60>)
  4026be:	4798      	blx	r3
		board_serial_print_register("Status code: ", channel_status);
  4026c0:	4621      	mov	r1, r4
  4026c2:	4807      	ldr	r0, [pc, #28]	; (4026e0 <XDMAC_Handler+0x64>)
  4026c4:	4b07      	ldr	r3, [pc, #28]	; (4026e4 <XDMAC_Handler+0x68>)
}
  4026c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		board_serial_print_register("Status code: ", channel_status);
  4026ca:	4718      	bx	r3
  4026cc:	40078000 	.word	0x40078000
  4026d0:	4007805c 	.word	0x4007805c
  4026d4:	204021c4 	.word	0x204021c4
  4026d8:	0040aed4 	.word	0x0040aed4
  4026dc:	0040052d 	.word	0x0040052d
  4026e0:	0040aef0 	.word	0x0040aef0
  4026e4:	00400c51 	.word	0x00400c51

004026e8 <dram_config>:

//--------------------------------------------------------------------------------------------------//


void dram_config(void)
{
  4026e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	clock_peripheral_clock_enable(ID_SDRAMC);
  4026ec:	4ba1      	ldr	r3, [pc, #644]	; (402974 <dram_config+0x28c>)
{
  4026ee:	b093      	sub	sp, #76	; 0x4c
	clock_peripheral_clock_enable(ID_SDRAMC);
  4026f0:	203e      	movs	r0, #62	; 0x3e
	gpio_set_pin_function(PIOC, 20, PERIPHERAL_FUNCTION_A);
  4026f2:	4ca1      	ldr	r4, [pc, #644]	; (402978 <dram_config+0x290>)
	clock_peripheral_clock_enable(ID_SDRAMC);
  4026f4:	4798      	blx	r3
	gpio_set_pin_function(PIOC, 20, PERIPHERAL_FUNCTION_A);
  4026f6:	2200      	movs	r2, #0
  4026f8:	2114      	movs	r1, #20
  4026fa:	48a0      	ldr	r0, [pc, #640]	; (40297c <dram_config+0x294>)
	volatile uint32_t i;
	
	//start of initialization process. Refer to data sheet
	//set chip select 1 to SDRAM in the bus MATRIX
	matrix_write_protection_disable(MATRIX);
	matrix_write_flash_chip_select_configuration_register(MATRIX, MATRIX_CS_SDRAM, 0, 0, 0);
  4026fc:	4616      	mov	r6, r2
	gpio_set_pin_function(PIOC, 20, PERIPHERAL_FUNCTION_A);
  4026fe:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 21, PERIPHERAL_FUNCTION_A);
  402700:	2115      	movs	r1, #21
  402702:	489e      	ldr	r0, [pc, #632]	; (40297c <dram_config+0x294>)
  402704:	4632      	mov	r2, r6
						(number_of_banks << SDRAMC_CR_NB_Pos) |
						(row_bits << SDRAMC_CR_NR_Pos) |
						(col_bits << SDRAMC_CR_NC_Pos) |
						(1 << SDRAMC_CR_DBW_Pos);
	
	CRITICAL_SECTION_ENTER()
  402706:	4d9e      	ldr	r5, [pc, #632]	; (402980 <dram_config+0x298>)
	gpio_set_pin_function(PIOC, 21, PERIPHERAL_FUNCTION_A);
  402708:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 22, PERIPHERAL_FUNCTION_A);
  40270a:	4632      	mov	r2, r6
  40270c:	2116      	movs	r1, #22
  40270e:	489b      	ldr	r0, [pc, #620]	; (40297c <dram_config+0x294>)
  402710:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 23, PERIPHERAL_FUNCTION_A);
  402712:	4632      	mov	r2, r6
  402714:	2117      	movs	r1, #23
  402716:	4899      	ldr	r0, [pc, #612]	; (40297c <dram_config+0x294>)
  402718:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 24, PERIPHERAL_FUNCTION_A);
  40271a:	4632      	mov	r2, r6
  40271c:	2118      	movs	r1, #24
  40271e:	4897      	ldr	r0, [pc, #604]	; (40297c <dram_config+0x294>)
  402720:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 25, PERIPHERAL_FUNCTION_A);
  402722:	4632      	mov	r2, r6
  402724:	2119      	movs	r1, #25
  402726:	4895      	ldr	r0, [pc, #596]	; (40297c <dram_config+0x294>)
  402728:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 26, PERIPHERAL_FUNCTION_A);
  40272a:	4632      	mov	r2, r6
  40272c:	211a      	movs	r1, #26
  40272e:	4893      	ldr	r0, [pc, #588]	; (40297c <dram_config+0x294>)
  402730:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 27, PERIPHERAL_FUNCTION_A);
  402732:	4632      	mov	r2, r6
  402734:	211b      	movs	r1, #27
  402736:	4891      	ldr	r0, [pc, #580]	; (40297c <dram_config+0x294>)
  402738:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 28, PERIPHERAL_FUNCTION_A);
  40273a:	4632      	mov	r2, r6
  40273c:	211c      	movs	r1, #28
  40273e:	488f      	ldr	r0, [pc, #572]	; (40297c <dram_config+0x294>)
  402740:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 29, PERIPHERAL_FUNCTION_A);
  402742:	4632      	mov	r2, r6
  402744:	211d      	movs	r1, #29
  402746:	488d      	ldr	r0, [pc, #564]	; (40297c <dram_config+0x294>)
  402748:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 20, PERIPHERAL_FUNCTION_C);
  40274a:	2202      	movs	r2, #2
  40274c:	2114      	movs	r1, #20
  40274e:	488d      	ldr	r0, [pc, #564]	; (402984 <dram_config+0x29c>)
  402750:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 17, PERIPHERAL_FUNCTION_C);
  402752:	2202      	movs	r2, #2
  402754:	2111      	movs	r1, #17
  402756:	488c      	ldr	r0, [pc, #560]	; (402988 <dram_config+0x2a0>)
  402758:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 0, PERIPHERAL_FUNCTION_A);
  40275a:	4632      	mov	r2, r6
  40275c:	4887      	ldr	r0, [pc, #540]	; (40297c <dram_config+0x294>)
  40275e:	4631      	mov	r1, r6
  402760:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 1, PERIPHERAL_FUNCTION_A);
  402762:	4632      	mov	r2, r6
  402764:	2101      	movs	r1, #1
  402766:	4885      	ldr	r0, [pc, #532]	; (40297c <dram_config+0x294>)
  402768:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 2, PERIPHERAL_FUNCTION_A);
  40276a:	4632      	mov	r2, r6
  40276c:	2102      	movs	r1, #2
  40276e:	4883      	ldr	r0, [pc, #524]	; (40297c <dram_config+0x294>)
  402770:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 3, PERIPHERAL_FUNCTION_A);
  402772:	4632      	mov	r2, r6
  402774:	2103      	movs	r1, #3
  402776:	4881      	ldr	r0, [pc, #516]	; (40297c <dram_config+0x294>)
  402778:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 4, PERIPHERAL_FUNCTION_A);
  40277a:	4632      	mov	r2, r6
  40277c:	2104      	movs	r1, #4
  40277e:	487f      	ldr	r0, [pc, #508]	; (40297c <dram_config+0x294>)
  402780:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 5, PERIPHERAL_FUNCTION_A);
  402782:	4632      	mov	r2, r6
  402784:	2105      	movs	r1, #5
  402786:	487d      	ldr	r0, [pc, #500]	; (40297c <dram_config+0x294>)
  402788:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 6, PERIPHERAL_FUNCTION_A);
  40278a:	4632      	mov	r2, r6
  40278c:	2106      	movs	r1, #6
  40278e:	487b      	ldr	r0, [pc, #492]	; (40297c <dram_config+0x294>)
  402790:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 7, PERIPHERAL_FUNCTION_A);
  402792:	4632      	mov	r2, r6
  402794:	2107      	movs	r1, #7
  402796:	4879      	ldr	r0, [pc, #484]	; (40297c <dram_config+0x294>)
  402798:	47a0      	blx	r4
	gpio_set_pin_function(PIOE, 0, PERIPHERAL_FUNCTION_A);
  40279a:	4632      	mov	r2, r6
  40279c:	487b      	ldr	r0, [pc, #492]	; (40298c <dram_config+0x2a4>)
  40279e:	4631      	mov	r1, r6
  4027a0:	47a0      	blx	r4
	gpio_set_pin_function(PIOE, 1, PERIPHERAL_FUNCTION_A);
  4027a2:	4632      	mov	r2, r6
  4027a4:	2101      	movs	r1, #1
  4027a6:	4879      	ldr	r0, [pc, #484]	; (40298c <dram_config+0x2a4>)
  4027a8:	47a0      	blx	r4
	gpio_set_pin_function(PIOE, 2, PERIPHERAL_FUNCTION_A);
  4027aa:	4632      	mov	r2, r6
  4027ac:	2102      	movs	r1, #2
  4027ae:	4877      	ldr	r0, [pc, #476]	; (40298c <dram_config+0x2a4>)
  4027b0:	47a0      	blx	r4
	gpio_set_pin_function(PIOE, 3, PERIPHERAL_FUNCTION_A);
  4027b2:	4632      	mov	r2, r6
  4027b4:	2103      	movs	r1, #3
  4027b6:	4875      	ldr	r0, [pc, #468]	; (40298c <dram_config+0x2a4>)
  4027b8:	47a0      	blx	r4
	gpio_set_pin_function(PIOE, 4, PERIPHERAL_FUNCTION_A);
  4027ba:	4632      	mov	r2, r6
  4027bc:	2104      	movs	r1, #4
  4027be:	4873      	ldr	r0, [pc, #460]	; (40298c <dram_config+0x2a4>)
  4027c0:	47a0      	blx	r4
	gpio_set_pin_function(PIOE, 5, PERIPHERAL_FUNCTION_A);
  4027c2:	4632      	mov	r2, r6
  4027c4:	2105      	movs	r1, #5
  4027c6:	4871      	ldr	r0, [pc, #452]	; (40298c <dram_config+0x2a4>)
  4027c8:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 15, PERIPHERAL_FUNCTION_A);
  4027ca:	4632      	mov	r2, r6
  4027cc:	210f      	movs	r1, #15
  4027ce:	486d      	ldr	r0, [pc, #436]	; (402984 <dram_config+0x29c>)
  4027d0:	47a0      	blx	r4
	gpio_set_pin_function(PIOA, 16, PERIPHERAL_FUNCTION_A);
  4027d2:	4632      	mov	r2, r6
  4027d4:	2110      	movs	r1, #16
  4027d6:	486b      	ldr	r0, [pc, #428]	; (402984 <dram_config+0x29c>)
  4027d8:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 18, PERIPHERAL_FUNCTION_A);
  4027da:	4632      	mov	r2, r6
  4027dc:	2112      	movs	r1, #18
  4027de:	4867      	ldr	r0, [pc, #412]	; (40297c <dram_config+0x294>)
  4027e0:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 15, PERIPHERAL_FUNCTION_C);
  4027e2:	2202      	movs	r2, #2
  4027e4:	210f      	movs	r1, #15
  4027e6:	4868      	ldr	r0, [pc, #416]	; (402988 <dram_config+0x2a0>)
  4027e8:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 16, PERIPHERAL_FUNCTION_C);
  4027ea:	2202      	movs	r2, #2
  4027ec:	2110      	movs	r1, #16
  4027ee:	4866      	ldr	r0, [pc, #408]	; (402988 <dram_config+0x2a0>)
  4027f0:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 13, PERIPHERAL_FUNCTION_C);
  4027f2:	2202      	movs	r2, #2
  4027f4:	210d      	movs	r1, #13
  4027f6:	4864      	ldr	r0, [pc, #400]	; (402988 <dram_config+0x2a0>)
  4027f8:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 23, PERIPHERAL_FUNCTION_C);
  4027fa:	2202      	movs	r2, #2
  4027fc:	2117      	movs	r1, #23
  4027fe:	4862      	ldr	r0, [pc, #392]	; (402988 <dram_config+0x2a0>)
  402800:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 14, PERIPHERAL_FUNCTION_C);
  402802:	2202      	movs	r2, #2
  402804:	210e      	movs	r1, #14
  402806:	4860      	ldr	r0, [pc, #384]	; (402988 <dram_config+0x2a0>)
  402808:	47a0      	blx	r4
	gpio_set_pin_function(PIOC, 15, PERIPHERAL_FUNCTION_A);
  40280a:	4632      	mov	r2, r6
  40280c:	210f      	movs	r1, #15
  40280e:	485b      	ldr	r0, [pc, #364]	; (40297c <dram_config+0x294>)
  402810:	47a0      	blx	r4
	gpio_set_pin_function(PIOD, 29, PERIPHERAL_FUNCTION_C);
  402812:	2202      	movs	r2, #2
  402814:	211d      	movs	r1, #29
  402816:	485c      	ldr	r0, [pc, #368]	; (402988 <dram_config+0x2a0>)
  402818:	47a0      	blx	r4
	matrix_write_protection_disable(MATRIX);
  40281a:	485d      	ldr	r0, [pc, #372]	; (402990 <dram_config+0x2a8>)
  40281c:	4b5d      	ldr	r3, [pc, #372]	; (402994 <dram_config+0x2ac>)
  40281e:	4798      	blx	r3
	matrix_write_flash_chip_select_configuration_register(MATRIX, MATRIX_CS_SDRAM, 0, 0, 0);
  402820:	4c5d      	ldr	r4, [pc, #372]	; (402998 <dram_config+0x2b0>)
  402822:	4632      	mov	r2, r6
  402824:	4631      	mov	r1, r6
  402826:	4633      	mov	r3, r6
  402828:	4859      	ldr	r0, [pc, #356]	; (402990 <dram_config+0x2a8>)
  40282a:	9600      	str	r6, [sp, #0]
  40282c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER()
  40282e:	a805      	add	r0, sp, #20
  402830:	47a8      	blx	r5
	hardware->SDRAMC_CR = tmp_reg;
  402832:	4f5a      	ldr	r7, [pc, #360]	; (40299c <dram_config+0x2b4>)
  402834:	4b5a      	ldr	r3, [pc, #360]	; (4029a0 <dram_config+0x2b8>)
	CRITICAL_SECTION_LEAVE()
  402836:	a805      	add	r0, sp, #20
  402838:	4c5a      	ldr	r4, [pc, #360]	; (4029a4 <dram_config+0x2bc>)
	hardware->SDRAMC_CR = tmp_reg;
  40283a:	60bb      	str	r3, [r7, #8]
	CRITICAL_SECTION_LEAVE()
  40283c:	47a0      	blx	r4
											uint8_t load_mode_to_refresh_delay)
{
	uint32_t tmp_reg =	(support_unaligned << SDRAMC_CFR1_UNAL_Pos) |
						(SDRAMC_CFR1_TMRD_Msk & (load_mode_to_refresh_delay << SDRAMC_CFR1_TMRD_Pos));
	
	CRITICAL_SECTION_ENTER()
  40283e:	a804      	add	r0, sp, #16
  402840:	47a8      	blx	r5
	hardware->SDRAMC_CFR1 = tmp_reg;
  402842:	f44f 7381 	mov.w	r3, #258	; 0x102
	CRITICAL_SECTION_LEAVE()
  402846:	a804      	add	r0, sp, #16
	hardware->SDRAMC_CFR1 = tmp_reg;
  402848:	62bb      	str	r3, [r7, #40]	; 0x28
	CRITICAL_SECTION_LEAVE()
  40284a:	47a0      	blx	r4
//--------------------------------------------------------------------------------------------------//


void dram_set_memory_device(Sdramc* hardware, dram_memory_device_e device)
{
	CRITICAL_SECTION_ENTER()
  40284c:	a803      	add	r0, sp, #12
	SDRAMC->SDRAMC_LPR = 0x00;
  40284e:	613e      	str	r6, [r7, #16]
	CRITICAL_SECTION_ENTER()
  402850:	47a8      	blx	r5
	hardware->SDRAMC_MDR = device;
  402852:	627e      	str	r6, [r7, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
  402854:	a803      	add	r0, sp, #12
  402856:	47a0      	blx	r4
	for (i = 0; i < ((150000000 / 1000000) * 200 / 6); i++) {
  402858:	9602      	str	r6, [sp, #8]
  40285a:	9b02      	ldr	r3, [sp, #8]
  40285c:	f241 3287 	movw	r2, #4999	; 0x1387
  402860:	4293      	cmp	r3, r2
  402862:	d805      	bhi.n	402870 <dram_config+0x188>
  402864:	9b02      	ldr	r3, [sp, #8]
  402866:	3301      	adds	r3, #1
  402868:	9302      	str	r3, [sp, #8]
  40286a:	9b02      	ldr	r3, [sp, #8]
  40286c:	4293      	cmp	r3, r2
  40286e:	d9f9      	bls.n	402864 <dram_config+0x17c>
	CRITICAL_SECTION_ENTER()
  402870:	a807      	add	r0, sp, #28
	hardware->SDRAMC_MR = ram_mode;
  402872:	f8df 8128 	ldr.w	r8, [pc, #296]	; 40299c <dram_config+0x2b4>
	CRITICAL_SECTION_ENTER()
  402876:	47a8      	blx	r5
	hardware->SDRAMC_MR = ram_mode;
  402878:	2301      	movs	r3, #1
	*dram_base_address = 0x00;
  40287a:	2600      	movs	r6, #0
  40287c:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
	hardware->SDRAMC_MR = ram_mode;
  402880:	f8c8 3000 	str.w	r3, [r8]
	CRITICAL_SECTION_LEAVE()
  402884:	a807      	add	r0, sp, #28
  402886:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER()
  402888:	a806      	add	r0, sp, #24
	*dram_base_address = 0x00;
  40288a:	803e      	strh	r6, [r7, #0]
	CRITICAL_SECTION_ENTER()
  40288c:	47a8      	blx	r5
	hardware->SDRAMC_MR = ram_mode;
  40288e:	2302      	movs	r3, #2
	CRITICAL_SECTION_LEAVE()
  402890:	a806      	add	r0, sp, #24
	hardware->SDRAMC_MR = ram_mode;
  402892:	f8c8 3000 	str.w	r3, [r8]
	CRITICAL_SECTION_LEAVE()
  402896:	47a0      	blx	r4
	*dram_base_address = 0x00;
  402898:	803e      	strh	r6, [r7, #0]
	for (i = 0; i < ((150000000 / 1000000) * 200 / 6); i++) {
  40289a:	9602      	str	r6, [sp, #8]
  40289c:	f241 3287 	movw	r2, #4999	; 0x1387
  4028a0:	9b02      	ldr	r3, [sp, #8]
  4028a2:	4293      	cmp	r3, r2
  4028a4:	d805      	bhi.n	4028b2 <dram_config+0x1ca>
  4028a6:	9b02      	ldr	r3, [sp, #8]
  4028a8:	3301      	adds	r3, #1
  4028aa:	9302      	str	r3, [sp, #8]
  4028ac:	9b02      	ldr	r3, [sp, #8]
  4028ae:	4293      	cmp	r3, r2
  4028b0:	d9f9      	bls.n	4028a6 <dram_config+0x1be>
	hardware->SDRAMC_MR = ram_mode;
  4028b2:	4e3a      	ldr	r6, [pc, #232]	; (40299c <dram_config+0x2b4>)
  4028b4:	2704      	movs	r7, #4
	CRITICAL_SECTION_ENTER()
  4028b6:	a810      	add	r0, sp, #64	; 0x40
	*dram_base_address = 0x01;
  4028b8:	f04f 48e0 	mov.w	r8, #1879048192	; 0x70000000
	CRITICAL_SECTION_ENTER()
  4028bc:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  4028be:	a810      	add	r0, sp, #64	; 0x40
	hardware->SDRAMC_MR = ram_mode;
  4028c0:	6037      	str	r7, [r6, #0]
	*dram_base_address = 0x03;
  4028c2:	f04f 0903 	mov.w	r9, #3
	CRITICAL_SECTION_LEAVE()
  4028c6:	47a0      	blx	r4
	*dram_base_address = 0x01;
  4028c8:	2301      	movs	r3, #1
	CRITICAL_SECTION_ENTER()
  4028ca:	a80f      	add	r0, sp, #60	; 0x3c
	*dram_base_address = 0x01;
  4028cc:	f8a8 3000 	strh.w	r3, [r8]
	CRITICAL_SECTION_ENTER()
  4028d0:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  4028d2:	a80f      	add	r0, sp, #60	; 0x3c
	hardware->SDRAMC_MR = ram_mode;
  4028d4:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  4028d6:	47a0      	blx	r4
	*dram_base_address = 0x02;
  4028d8:	2302      	movs	r3, #2
	CRITICAL_SECTION_ENTER()
  4028da:	a80e      	add	r0, sp, #56	; 0x38
	*dram_base_address = 0x02;
  4028dc:	f8a8 3000 	strh.w	r3, [r8]
	CRITICAL_SECTION_ENTER()
  4028e0:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  4028e2:	a80e      	add	r0, sp, #56	; 0x38
	hardware->SDRAMC_MR = ram_mode;
  4028e4:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  4028e6:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER()
  4028e8:	a80d      	add	r0, sp, #52	; 0x34
	*dram_base_address = 0x03;
  4028ea:	f8a8 9000 	strh.w	r9, [r8]
	CRITICAL_SECTION_ENTER()
  4028ee:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  4028f0:	a80d      	add	r0, sp, #52	; 0x34
	hardware->SDRAMC_MR = ram_mode;
  4028f2:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  4028f4:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER()
  4028f6:	a80c      	add	r0, sp, #48	; 0x30
	*dram_base_address = 0x04;
  4028f8:	f8a8 7000 	strh.w	r7, [r8]
	CRITICAL_SECTION_ENTER()
  4028fc:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  4028fe:	a80c      	add	r0, sp, #48	; 0x30
	hardware->SDRAMC_MR = ram_mode;
  402900:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  402902:	47a0      	blx	r4
	*dram_base_address = 0x05;
  402904:	2305      	movs	r3, #5
	CRITICAL_SECTION_ENTER()
  402906:	a80b      	add	r0, sp, #44	; 0x2c
	*dram_base_address = 0x05;
  402908:	f8a8 3000 	strh.w	r3, [r8]
	CRITICAL_SECTION_ENTER()
  40290c:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  40290e:	a80b      	add	r0, sp, #44	; 0x2c
	hardware->SDRAMC_MR = ram_mode;
  402910:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  402912:	47a0      	blx	r4
	*dram_base_address = 0x06;
  402914:	2306      	movs	r3, #6
	CRITICAL_SECTION_ENTER()
  402916:	a80a      	add	r0, sp, #40	; 0x28
	*dram_base_address = 0x06;
  402918:	f8a8 3000 	strh.w	r3, [r8]
	CRITICAL_SECTION_ENTER()
  40291c:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  40291e:	a80a      	add	r0, sp, #40	; 0x28
	hardware->SDRAMC_MR = ram_mode;
  402920:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  402922:	47a0      	blx	r4
	*dram_base_address = 0x07;
  402924:	2307      	movs	r3, #7
	CRITICAL_SECTION_ENTER()
  402926:	a809      	add	r0, sp, #36	; 0x24
	*dram_base_address = 0x07;
  402928:	f8a8 3000 	strh.w	r3, [r8]
	CRITICAL_SECTION_ENTER()
  40292c:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  40292e:	a809      	add	r0, sp, #36	; 0x24
	hardware->SDRAMC_MR = ram_mode;
  402930:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  402932:	47a0      	blx	r4
	*dram_base_address = 0x08;
  402934:	2308      	movs	r3, #8
	CRITICAL_SECTION_ENTER()
  402936:	a808      	add	r0, sp, #32
	*dram_base_address = 0x08;
  402938:	f8a8 3000 	strh.w	r3, [r8]
	CRITICAL_SECTION_ENTER()
  40293c:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  40293e:	a808      	add	r0, sp, #32
	hardware->SDRAMC_MR = ram_mode;
  402940:	f8c6 9000 	str.w	r9, [r6]
	CRITICAL_SECTION_LEAVE()
  402944:	47a0      	blx	r4
	for (i = 0; i < ((150000000 / 1000000) * 200 / 6); i++) {
  402946:	2300      	movs	r3, #0
	*((uint16_t *)(dram_base_address + 0x30)) = 0xfefa;
  402948:	4917      	ldr	r1, [pc, #92]	; (4029a8 <dram_config+0x2c0>)
  40294a:	f64f 60fa 	movw	r0, #65274	; 0xfefa
	for (i = 0; i < ((150000000 / 1000000) * 200 / 6); i++) {
  40294e:	f241 3287 	movw	r2, #4999	; 0x1387
	*((uint16_t *)(dram_base_address + 0x30)) = 0xfefa;
  402952:	8008      	strh	r0, [r1, #0]
	for (i = 0; i < ((150000000 / 1000000) * 200 / 6); i++) {
  402954:	9302      	str	r3, [sp, #8]
  402956:	9b02      	ldr	r3, [sp, #8]
  402958:	4293      	cmp	r3, r2
  40295a:	d805      	bhi.n	402968 <dram_config+0x280>
  40295c:	9b02      	ldr	r3, [sp, #8]
  40295e:	3301      	adds	r3, #1
  402960:	9302      	str	r3, [sp, #8]
  402962:	9b02      	ldr	r3, [sp, #8]
  402964:	4293      	cmp	r3, r2
  402966:	d9f9      	bls.n	40295c <dram_config+0x274>
	hardware->SDRAMC_MR = ram_mode;
  402968:	4e0c      	ldr	r6, [pc, #48]	; (40299c <dram_config+0x2b4>)
  40296a:	2700      	movs	r7, #0
	CRITICAL_SECTION_ENTER()
  40296c:	a811      	add	r0, sp, #68	; 0x44
  40296e:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE()
  402970:	a811      	add	r0, sp, #68	; 0x44
  402972:	e01b      	b.n	4029ac <dram_config+0x2c4>
  402974:	00402405 	.word	0x00402405
  402978:	00402a1d 	.word	0x00402a1d
  40297c:	400e1200 	.word	0x400e1200
  402980:	00402485 	.word	0x00402485
  402984:	400e0e00 	.word	0x400e0e00
  402988:	400e1400 	.word	0x400e1400
  40298c:	400e1600 	.word	0x400e1600
  402990:	40088000 	.word	0x40088000
  402994:	004031b5 	.word	0x004031b5
  402998:	004031dd 	.word	0x004031dd
  40299c:	40084000 	.word	0x40084000
  4029a0:	f955d5e0 	.word	0xf955d5e0
  4029a4:	00402495 	.word	0x00402495
  4029a8:	70000060 	.word	0x70000060
	hardware->SDRAMC_MR = ram_mode;
  4029ac:	6037      	str	r7, [r6, #0]
	CRITICAL_SECTION_LEAVE()
  4029ae:	47a0      	blx	r4
	*dram_base_address = 0x00;
  4029b0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
	i = 150000000 / 1000u;
  4029b4:	4b0a      	ldr	r3, [pc, #40]	; (4029e0 <dram_config+0x2f8>)
	i *= 15625u;
  4029b6:	f643 5209 	movw	r2, #15625	; 0x3d09
	*dram_base_address = 0x00;
  4029ba:	800f      	strh	r7, [r1, #0]
	i = 150000000 / 1000u;
  4029bc:	9302      	str	r3, [sp, #8]
	i *= 15625u;
  4029be:	9b02      	ldr	r3, [sp, #8]
	i /= 1000000u;
  4029c0:	4908      	ldr	r1, [pc, #32]	; (4029e4 <dram_config+0x2fc>)
	i *= 15625u;
  4029c2:	fb02 f203 	mul.w	r2, r2, r3
  4029c6:	9202      	str	r2, [sp, #8]
	i /= 1000000u;
  4029c8:	9b02      	ldr	r3, [sp, #8]
  4029ca:	fba1 2303 	umull	r2, r3, r1, r3
  4029ce:	0c9b      	lsrs	r3, r3, #18
  4029d0:	9302      	str	r3, [sp, #8]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  4029d2:	9b02      	ldr	r3, [sp, #8]
  4029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4029d8:	6073      	str	r3, [r6, #4]
}
  4029da:	b013      	add	sp, #76	; 0x4c
  4029dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4029e0:	000249f0 	.word	0x000249f0
  4029e4:	431bde83 	.word	0x431bde83

004029e8 <flash_set_wait_states>:

//--------------------------------------------------------------------------------------------------//


void flash_set_wait_states(uint8_t wait_states)
{
  4029e8:	b530      	push	{r4, r5, lr}
	uint32_t tmp = EFC->EEFC_FMR;
  4029ea:	4d09      	ldr	r5, [pc, #36]	; (402a10 <flash_set_wait_states+0x28>)
	
	// Write the number of wait states
	tmp &= ~EEFC_FMR_FWS_Msk;
	tmp |= ((wait_states << EEFC_FMR_FWS_Pos) & EEFC_FMR_FWS_Msk);
  4029ec:	0204      	lsls	r4, r0, #8
{
  4029ee:	b083      	sub	sp, #12
	
	// Write register
	CRITICAL_SECTION_ENTER()
  4029f0:	4a08      	ldr	r2, [pc, #32]	; (402a14 <flash_set_wait_states+0x2c>)
	uint32_t tmp = EFC->EEFC_FMR;
  4029f2:	682b      	ldr	r3, [r5, #0]
	tmp |= ((wait_states << EEFC_FMR_FWS_Pos) & EEFC_FMR_FWS_Msk);
  4029f4:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
	CRITICAL_SECTION_ENTER()
  4029f8:	a801      	add	r0, sp, #4
	tmp &= ~EEFC_FMR_FWS_Msk;
  4029fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= ((wait_states << EEFC_FMR_FWS_Pos) & EEFC_FMR_FWS_Msk);
  4029fe:	431c      	orrs	r4, r3
	CRITICAL_SECTION_ENTER()
  402a00:	4790      	blx	r2
	EFC->EEFC_FMR = tmp;
	CRITICAL_SECTION_LEAVE()
  402a02:	a801      	add	r0, sp, #4
  402a04:	4b04      	ldr	r3, [pc, #16]	; (402a18 <flash_set_wait_states+0x30>)
	EFC->EEFC_FMR = tmp;
  402a06:	602c      	str	r4, [r5, #0]
	CRITICAL_SECTION_LEAVE()
  402a08:	4798      	blx	r3
}
  402a0a:	b003      	add	sp, #12
  402a0c:	bd30      	pop	{r4, r5, pc}
  402a0e:	bf00      	nop
  402a10:	400e0c00 	.word	0x400e0c00
  402a14:	00402485 	.word	0x00402485
  402a18:	00402495 	.word	0x00402495

00402a1c <gpio_set_pin_function>:

//--------------------------------------------------------------------------------------------------//


void gpio_set_pin_function(Pio* hardware, uint8_t pin, gpio_peripheral_function_e func)
{
  402a1c:	b570      	push	{r4, r5, r6, lr}
  402a1e:	b082      	sub	sp, #8
  402a20:	4604      	mov	r4, r0
	//Disable write protection in case
	CRITICAL_SECTION_ENTER()
  402a22:	4b18      	ldr	r3, [pc, #96]	; (402a84 <gpio_set_pin_function+0x68>)
{
  402a24:	4616      	mov	r6, r2
	CRITICAL_SECTION_ENTER()
  402a26:	a801      	add	r0, sp, #4
{
  402a28:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  402a2a:	4798      	blx	r3
	hardware->PIO_WPMR = (PIO_WPMR_WPKEY_PASSWD_Val << PIO_WPMR_WPKEY_Pos);
	
	if (hardware == PIOB)
  402a2c:	4b16      	ldr	r3, [pc, #88]	; (402a88 <gpio_set_pin_function+0x6c>)
	hardware->PIO_WPMR = (PIO_WPMR_WPKEY_PASSWD_Val << PIO_WPMR_WPKEY_Pos);
  402a2e:	4a17      	ldr	r2, [pc, #92]	; (402a8c <gpio_set_pin_function+0x70>)
	if (hardware == PIOB)
  402a30:	429c      	cmp	r4, r3
	hardware->PIO_WPMR = (PIO_WPMR_WPKEY_PASSWD_Val << PIO_WPMR_WPKEY_Pos);
  402a32:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	if (hardware == PIOB)
  402a36:	d017      	beq.n	402a68 <gpio_set_pin_function+0x4c>
  402a38:	2101      	movs	r1, #1
  402a3a:	40a9      	lsls	r1, r5
		{
			MATRIX->CCFG_SYSIO |= (1 << pin);
		}
	}
	
	if (func == PERIPHERAL_FUNCTION_OFF)
  402a3c:	2e04      	cmp	r6, #4
  402a3e:	d011      	beq.n	402a64 <gpio_set_pin_function+0x48>
	else
	{
		if (func & 0b01)
		{

			hardware->PIO_ABCDSR[0] |= (1 << pin);
  402a40:	6f23      	ldr	r3, [r4, #112]	; 0x70
		if (func & 0b01)
  402a42:	07f0      	lsls	r0, r6, #31
			hardware->PIO_ABCDSR[0] |= (1 << pin);
  402a44:	bf4c      	ite	mi
  402a46:	430b      	orrmi	r3, r1
		}
		else
		{
			hardware->PIO_ABCDSR[0] &= ~(1 << pin);
  402a48:	438b      	bicpl	r3, r1
		}
		
		if (func & 0b10)
  402a4a:	07b2      	lsls	r2, r6, #30
			hardware->PIO_ABCDSR[0] &= ~(1 << pin);
  402a4c:	6723      	str	r3, [r4, #112]	; 0x70
		{
			hardware->PIO_ABCDSR[1] |= (1 << pin);
  402a4e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402a50:	bf4c      	ite	mi
  402a52:	430b      	orrmi	r3, r1
		}
		else
		{
			hardware->PIO_ABCDSR[1] &= ~(1 << pin);
  402a54:	438b      	bicpl	r3, r1
  402a56:	6763      	str	r3, [r4, #116]	; 0x74
		}
		
		hardware->PIO_PDR = (1 << pin);
  402a58:	6061      	str	r1, [r4, #4]
	}
	CRITICAL_SECTION_LEAVE()
  402a5a:	a801      	add	r0, sp, #4
  402a5c:	4b0c      	ldr	r3, [pc, #48]	; (402a90 <gpio_set_pin_function+0x74>)
  402a5e:	4798      	blx	r3
}
  402a60:	b002      	add	sp, #8
  402a62:	bd70      	pop	{r4, r5, r6, pc}
		hardware->PIO_PER = (1 << pin);
  402a64:	6021      	str	r1, [r4, #0]
  402a66:	e7f8      	b.n	402a5a <gpio_set_pin_function+0x3e>
		if ((pin == 4) | (pin == 5) | (pin == 6) | (pin == 7) | (pin == 12))
  402a68:	1f2b      	subs	r3, r5, #4
  402a6a:	2b03      	cmp	r3, #3
  402a6c:	d901      	bls.n	402a72 <gpio_set_pin_function+0x56>
  402a6e:	2d0c      	cmp	r5, #12
  402a70:	d1e2      	bne.n	402a38 <gpio_set_pin_function+0x1c>
			MATRIX->CCFG_SYSIO |= (1 << pin);
  402a72:	4a08      	ldr	r2, [pc, #32]	; (402a94 <gpio_set_pin_function+0x78>)
  402a74:	2101      	movs	r1, #1
  402a76:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  402a7a:	40a9      	lsls	r1, r5
  402a7c:	430b      	orrs	r3, r1
  402a7e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  402a82:	e7db      	b.n	402a3c <gpio_set_pin_function+0x20>
  402a84:	00402485 	.word	0x00402485
  402a88:	400e1000 	.word	0x400e1000
  402a8c:	50494f00 	.word	0x50494f00
  402a90:	00402495 	.word	0x00402495
  402a94:	40088000 	.word	0x40088000

00402a98 <gpio_set_pin_direction_output>:

//--------------------------------------------------------------------------------------------------//


void gpio_set_pin_direction_output(Pio* hardware, uint8_t pin)
{
  402a98:	b530      	push	{r4, r5, lr}
  402a9a:	b083      	sub	sp, #12
  402a9c:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402a9e:	4b06      	ldr	r3, [pc, #24]	; (402ab8 <gpio_set_pin_direction_output+0x20>)
{
  402aa0:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  402aa2:	a801      	add	r0, sp, #4
  402aa4:	4798      	blx	r3
	hardware->PIO_OER = (1 << pin);
  402aa6:	2301      	movs	r3, #1
	CRITICAL_SECTION_LEAVE()
  402aa8:	a801      	add	r0, sp, #4
  402aaa:	4a04      	ldr	r2, [pc, #16]	; (402abc <gpio_set_pin_direction_output+0x24>)
	hardware->PIO_OER = (1 << pin);
  402aac:	40ab      	lsls	r3, r5
  402aae:	6123      	str	r3, [r4, #16]
	CRITICAL_SECTION_LEAVE()
  402ab0:	4790      	blx	r2
}
  402ab2:	b003      	add	sp, #12
  402ab4:	bd30      	pop	{r4, r5, pc}
  402ab6:	bf00      	nop
  402ab8:	00402485 	.word	0x00402485
  402abc:	00402495 	.word	0x00402495

00402ac0 <gpio_set_pin_direction_input>:

//--------------------------------------------------------------------------------------------------//


void gpio_set_pin_direction_input(Pio* hardware, uint8_t pin)
{
  402ac0:	b530      	push	{r4, r5, lr}
  402ac2:	b083      	sub	sp, #12
  402ac4:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402ac6:	4b06      	ldr	r3, [pc, #24]	; (402ae0 <gpio_set_pin_direction_input+0x20>)
{
  402ac8:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  402aca:	a801      	add	r0, sp, #4
  402acc:	4798      	blx	r3
	hardware->PIO_ODR = (1 << pin);
  402ace:	2301      	movs	r3, #1
	CRITICAL_SECTION_LEAVE()
  402ad0:	a801      	add	r0, sp, #4
  402ad2:	4a04      	ldr	r2, [pc, #16]	; (402ae4 <gpio_set_pin_direction_input+0x24>)
	hardware->PIO_ODR = (1 << pin);
  402ad4:	40ab      	lsls	r3, r5
  402ad6:	6163      	str	r3, [r4, #20]
	CRITICAL_SECTION_LEAVE()
  402ad8:	4790      	blx	r2
}
  402ada:	b003      	add	sp, #12
  402adc:	bd30      	pop	{r4, r5, pc}
  402ade:	bf00      	nop
  402ae0:	00402485 	.word	0x00402485
  402ae4:	00402495 	.word	0x00402495

00402ae8 <gpio_set_pin_value>:

//--------------------------------------------------------------------------------------------------//


void gpio_set_pin_value(Pio* hardware, uint8_t pin)
{
  402ae8:	b530      	push	{r4, r5, lr}
  402aea:	b083      	sub	sp, #12
  402aec:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402aee:	4b06      	ldr	r3, [pc, #24]	; (402b08 <gpio_set_pin_value+0x20>)
{
  402af0:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  402af2:	a801      	add	r0, sp, #4
  402af4:	4798      	blx	r3
	hardware->PIO_SODR = (1 << pin);
  402af6:	2301      	movs	r3, #1
	CRITICAL_SECTION_LEAVE()
  402af8:	a801      	add	r0, sp, #4
  402afa:	4a04      	ldr	r2, [pc, #16]	; (402b0c <gpio_set_pin_value+0x24>)
	hardware->PIO_SODR = (1 << pin);
  402afc:	40ab      	lsls	r3, r5
  402afe:	6323      	str	r3, [r4, #48]	; 0x30
	CRITICAL_SECTION_LEAVE()
  402b00:	4790      	blx	r2
}
  402b02:	b003      	add	sp, #12
  402b04:	bd30      	pop	{r4, r5, pc}
  402b06:	bf00      	nop
  402b08:	00402485 	.word	0x00402485
  402b0c:	00402495 	.word	0x00402495

00402b10 <gpio_clear_pin_value>:

//--------------------------------------------------------------------------------------------------//


void gpio_clear_pin_value(Pio* hardware, uint8_t pin)
{
  402b10:	b530      	push	{r4, r5, lr}
  402b12:	b083      	sub	sp, #12
  402b14:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402b16:	4b06      	ldr	r3, [pc, #24]	; (402b30 <gpio_clear_pin_value+0x20>)
{
  402b18:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  402b1a:	a801      	add	r0, sp, #4
  402b1c:	4798      	blx	r3
	hardware->PIO_CODR = (1 << pin);
  402b1e:	2301      	movs	r3, #1
	CRITICAL_SECTION_LEAVE()
  402b20:	a801      	add	r0, sp, #4
  402b22:	4a04      	ldr	r2, [pc, #16]	; (402b34 <gpio_clear_pin_value+0x24>)
	hardware->PIO_CODR = (1 << pin);
  402b24:	40ab      	lsls	r3, r5
  402b26:	6363      	str	r3, [r4, #52]	; 0x34
	CRITICAL_SECTION_LEAVE()
  402b28:	4790      	blx	r2
}
  402b2a:	b003      	add	sp, #12
  402b2c:	bd30      	pop	{r4, r5, pc}
  402b2e:	bf00      	nop
  402b30:	00402485 	.word	0x00402485
  402b34:	00402495 	.word	0x00402495

00402b38 <gpio_get_pin_value_status_register>:
//--------------------------------------------------------------------------------------------------//


uint32_t gpio_get_pin_value_status_register(Pio* hardware)
{
	uint32_t tmp = hardware->PIO_PDSR;
  402b38:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	
	return tmp;
}
  402b3a:	4770      	bx	lr

00402b3c <gpio_debounce_filter_enable>:

//--------------------------------------------------------------------------------------------------//


void gpio_debounce_filter_enable(Pio* hardware, uint8_t pin, float ms)
{
  402b3c:	b570      	push	{r4, r5, r6, lr}
  402b3e:	b082      	sub	sp, #8
  402b40:	4605      	mov	r5, r0
	float div_field = ((((float)ms / 0.0625) / 2.0) - 1.0);
	
	CRITICAL_SECTION_ENTER()
  402b42:	4b13      	ldr	r3, [pc, #76]	; (402b90 <gpio_debounce_filter_enable+0x54>)
{
  402b44:	4616      	mov	r6, r2
	CRITICAL_SECTION_ENTER()
  402b46:	a801      	add	r0, sp, #4
{
  402b48:	460c      	mov	r4, r1
	CRITICAL_SECTION_ENTER()
  402b4a:	4798      	blx	r3
	hardware->PIO_IFSCER = (1 << pin);
  402b4c:	2101      	movs	r1, #1
	float div_field = ((((float)ms / 0.0625) / 2.0) - 1.0);
  402b4e:	4630      	mov	r0, r6
  402b50:	4b10      	ldr	r3, [pc, #64]	; (402b94 <gpio_debounce_filter_enable+0x58>)
	hardware->PIO_IFSCER = (1 << pin);
  402b52:	fa01 f404 	lsl.w	r4, r1, r4
	float div_field = ((((float)ms / 0.0625) / 2.0) - 1.0);
  402b56:	4e10      	ldr	r6, [pc, #64]	; (402b98 <gpio_debounce_filter_enable+0x5c>)
	hardware->PIO_IFSCER = (1 << pin);
  402b58:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
	float div_field = ((((float)ms / 0.0625) / 2.0) - 1.0);
  402b5c:	4798      	blx	r3
  402b5e:	2200      	movs	r2, #0
  402b60:	4b0e      	ldr	r3, [pc, #56]	; (402b9c <gpio_debounce_filter_enable+0x60>)
  402b62:	47b0      	blx	r6
  402b64:	2200      	movs	r2, #0
  402b66:	4b0e      	ldr	r3, [pc, #56]	; (402ba0 <gpio_debounce_filter_enable+0x64>)
  402b68:	47b0      	blx	r6
  402b6a:	2200      	movs	r2, #0
  402b6c:	4e0d      	ldr	r6, [pc, #52]	; (402ba4 <gpio_debounce_filter_enable+0x68>)
  402b6e:	4b0e      	ldr	r3, [pc, #56]	; (402ba8 <gpio_debounce_filter_enable+0x6c>)
  402b70:	47b0      	blx	r6
  402b72:	4b0e      	ldr	r3, [pc, #56]	; (402bac <gpio_debounce_filter_enable+0x70>)
  402b74:	4798      	blx	r3
	hardware->PIO_SCDR = (PIO_SCDR_DIV_Msk & ((uint32_t)div_field << PIO_SCDR_DIV_Pos));
  402b76:	4b0e      	ldr	r3, [pc, #56]	; (402bb0 <gpio_debounce_filter_enable+0x74>)
  402b78:	4798      	blx	r3
  402b7a:	f3c0 020d 	ubfx	r2, r0, #0, #14
	hardware->PIO_IFER = (1 << pin);
	CRITICAL_SECTION_LEAVE()
  402b7e:	4b0d      	ldr	r3, [pc, #52]	; (402bb4 <gpio_debounce_filter_enable+0x78>)
  402b80:	a801      	add	r0, sp, #4
	hardware->PIO_SCDR = (PIO_SCDR_DIV_Msk & ((uint32_t)div_field << PIO_SCDR_DIV_Pos));
  402b82:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	hardware->PIO_IFER = (1 << pin);
  402b86:	622c      	str	r4, [r5, #32]
	CRITICAL_SECTION_LEAVE()
  402b88:	4798      	blx	r3
}
  402b8a:	b002      	add	sp, #8
  402b8c:	bd70      	pop	{r4, r5, r6, pc}
  402b8e:	bf00      	nop
  402b90:	00402485 	.word	0x00402485
  402b94:	00409e25 	.word	0x00409e25
  402b98:	00409ecd 	.word	0x00409ecd
  402b9c:	40300000 	.word	0x40300000
  402ba0:	3fe00000 	.word	0x3fe00000
  402ba4:	00409b65 	.word	0x00409b65
  402ba8:	3ff00000 	.word	0x3ff00000
  402bac:	0040a2f1 	.word	0x0040a2f1
  402bb0:	0040a391 	.word	0x0040a391
  402bb4:	00402495 	.word	0x00402495

00402bb8 <gpio_pullup_enable>:

//--------------------------------------------------------------------------------------------------//


void gpio_pullup_enable(Pio* hardware, uint8_t pin)
{
  402bb8:	b530      	push	{r4, r5, lr}
  402bba:	b083      	sub	sp, #12
  402bbc:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402bbe:	4b06      	ldr	r3, [pc, #24]	; (402bd8 <gpio_pullup_enable+0x20>)
{
  402bc0:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  402bc2:	a801      	add	r0, sp, #4
  402bc4:	4798      	blx	r3
	hardware->PIO_PUER = (1 << pin);
  402bc6:	2301      	movs	r3, #1
	CRITICAL_SECTION_LEAVE()
  402bc8:	a801      	add	r0, sp, #4
  402bca:	4a04      	ldr	r2, [pc, #16]	; (402bdc <gpio_pullup_enable+0x24>)
	hardware->PIO_PUER = (1 << pin);
  402bcc:	40ab      	lsls	r3, r5
  402bce:	6663      	str	r3, [r4, #100]	; 0x64
	CRITICAL_SECTION_LEAVE()
  402bd0:	4790      	blx	r2
}
  402bd2:	b003      	add	sp, #12
  402bd4:	bd30      	pop	{r4, r5, pc}
  402bd6:	bf00      	nop
  402bd8:	00402485 	.word	0x00402485
  402bdc:	00402495 	.word	0x00402495

00402be0 <gpio_set_interrupt_source>:

//--------------------------------------------------------------------------------------------------//


void gpio_set_interrupt_source(Pio* hardware, uint8_t pin, gpio_interrupt_source_e md)
{
  402be0:	b570      	push	{r4, r5, r6, lr}
  402be2:	b082      	sub	sp, #8
  402be4:	4615      	mov	r5, r2
  402be6:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402be8:	4b23      	ldr	r3, [pc, #140]	; (402c78 <gpio_set_interrupt_source+0x98>)
  402bea:	a801      	add	r0, sp, #4
{
  402bec:	460e      	mov	r6, r1
	CRITICAL_SECTION_ENTER()
  402bee:	4798      	blx	r3
	if (md == GPIO_STANDARD)
  402bf0:	2d04      	cmp	r5, #4
  402bf2:	d03c      	beq.n	402c6e <gpio_set_interrupt_source+0x8e>
		//Both edge detection
		hardware->PIO_AIMDR = (1 << pin);
	}
	else
	{
		if (md & 0b01)
  402bf4:	07e9      	lsls	r1, r5, #31
  402bf6:	d420      	bmi.n	402c3a <gpio_set_interrupt_source+0x5a>
			hardware->PIO_FELLSR |= (1 << pin);
			hardware->PIO_REHLSR &= ~(1 << pin);
		}
		else
		{
			hardware->PIO_FELLSR &= ~(1 << pin);
  402bf8:	2301      	movs	r3, #1
  402bfa:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  402bfe:	fa03 f106 	lsl.w	r1, r3, r6
  402c02:	43cb      	mvns	r3, r1
  402c04:	401a      	ands	r2, r3
  402c06:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
			hardware->PIO_REHLSR |= (1 << pin);
  402c0a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  402c0e:	430a      	orrs	r2, r1
  402c10:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
		}
		if (md & 0b10)
  402c14:	07aa      	lsls	r2, r5, #30
  402c16:	d51f      	bpl.n	402c58 <gpio_set_interrupt_source+0x78>
		{
			hardware->PIO_LSR |= (1 << pin);
  402c18:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
  402c1c:	430a      	orrs	r2, r1
  402c1e:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
			hardware->PIO_ESR &= ~(1 << pin);
  402c22:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
  402c26:	4013      	ands	r3, r2
  402c28:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		else
		{
			hardware->PIO_ESR |= (1 << pin);
			hardware->PIO_LSR &= ~(1 << pin);
		}
		hardware->PIO_AIMER = (1 << pin);
  402c2c:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	}
	CRITICAL_SECTION_LEAVE()
  402c30:	a801      	add	r0, sp, #4
  402c32:	4b12      	ldr	r3, [pc, #72]	; (402c7c <gpio_set_interrupt_source+0x9c>)
  402c34:	4798      	blx	r3
}
  402c36:	b002      	add	sp, #8
  402c38:	bd70      	pop	{r4, r5, r6, pc}
			hardware->PIO_FELLSR |= (1 << pin);
  402c3a:	2101      	movs	r1, #1
  402c3c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  402c40:	40b1      	lsls	r1, r6
  402c42:	430a      	orrs	r2, r1
			hardware->PIO_REHLSR &= ~(1 << pin);
  402c44:	43cb      	mvns	r3, r1
			hardware->PIO_FELLSR |= (1 << pin);
  402c46:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
			hardware->PIO_REHLSR &= ~(1 << pin);
  402c4a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  402c4e:	401a      	ands	r2, r3
  402c50:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
		if (md & 0b10)
  402c54:	07aa      	lsls	r2, r5, #30
  402c56:	d4df      	bmi.n	402c18 <gpio_set_interrupt_source+0x38>
			hardware->PIO_ESR |= (1 << pin);
  402c58:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
  402c5c:	430a      	orrs	r2, r1
  402c5e:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
			hardware->PIO_LSR &= ~(1 << pin);
  402c62:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
  402c66:	4013      	ands	r3, r2
  402c68:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  402c6c:	e7de      	b.n	402c2c <gpio_set_interrupt_source+0x4c>
		hardware->PIO_AIMDR = (1 << pin);
  402c6e:	2101      	movs	r1, #1
  402c70:	40b1      	lsls	r1, r6
  402c72:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  402c76:	e7db      	b.n	402c30 <gpio_set_interrupt_source+0x50>
  402c78:	00402485 	.word	0x00402485
  402c7c:	00402495 	.word	0x00402495

00402c80 <hsmci_write_protection_disable>:

//--------------------------------------------------------------------------------------------------//


void hsmci_write_protection_disable(Hsmci* hardware)
{
  402c80:	b510      	push	{r4, lr}
  402c82:	b082      	sub	sp, #8
  402c84:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402c86:	4b05      	ldr	r3, [pc, #20]	; (402c9c <hsmci_write_protection_disable+0x1c>)
  402c88:	a801      	add	r0, sp, #4
  402c8a:	4798      	blx	r3
	hardware->HSMCI_WPMR = (HSMCI_WPMR_WPKEY_PASSWD_Val << HSMCI_WPMR_WPKEY_Pos);
  402c8c:	4a04      	ldr	r2, [pc, #16]	; (402ca0 <hsmci_write_protection_disable+0x20>)
	CRITICAL_SECTION_LEAVE()
  402c8e:	a801      	add	r0, sp, #4
  402c90:	4b04      	ldr	r3, [pc, #16]	; (402ca4 <hsmci_write_protection_disable+0x24>)
	hardware->HSMCI_WPMR = (HSMCI_WPMR_WPKEY_PASSWD_Val << HSMCI_WPMR_WPKEY_Pos);
  402c92:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	CRITICAL_SECTION_LEAVE()
  402c96:	4798      	blx	r3
}
  402c98:	b002      	add	sp, #8
  402c9a:	bd10      	pop	{r4, pc}
  402c9c:	00402485 	.word	0x00402485
  402ca0:	4d434900 	.word	0x4d434900
  402ca4:	00402495 	.word	0x00402495

00402ca8 <hsmci_enable>:

//--------------------------------------------------------------------------------------------------//


void hsmci_enable(Hsmci* hardware)
{
  402ca8:	b510      	push	{r4, lr}
  402caa:	b082      	sub	sp, #8
  402cac:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402cae:	4b05      	ldr	r3, [pc, #20]	; (402cc4 <hsmci_enable+0x1c>)
  402cb0:	a801      	add	r0, sp, #4
  402cb2:	4798      	blx	r3
	hardware->HSMCI_CR = (1 << HSMCI_CR_MCIEN_Pos);
  402cb4:	2201      	movs	r2, #1
	CRITICAL_SECTION_LEAVE()
  402cb6:	a801      	add	r0, sp, #4
  402cb8:	4b03      	ldr	r3, [pc, #12]	; (402cc8 <hsmci_enable+0x20>)
	hardware->HSMCI_CR = (1 << HSMCI_CR_MCIEN_Pos);
  402cba:	6022      	str	r2, [r4, #0]
	CRITICAL_SECTION_LEAVE()
  402cbc:	4798      	blx	r3
}
  402cbe:	b002      	add	sp, #8
  402cc0:	bd10      	pop	{r4, pc}
  402cc2:	bf00      	nop
  402cc4:	00402485 	.word	0x00402485
  402cc8:	00402495 	.word	0x00402495

00402ccc <hsmci_set_data_timeout>:

//--------------------------------------------------------------------------------------------------//


void hsmci_set_data_timeout(Hsmci* hardware, hsmci_data_timeout_multiplier_e data_timeout_multiplier, uint8_t data_timeout_cycle_number)
{
  402ccc:	b530      	push	{r4, r5, lr}
	uint32_t tmp = (data_timeout_multiplier << HSMCI_DTOR_DTOMUL_Pos) | ((0b1111 & data_timeout_cycle_number) << HSMCI_DTOR_DTOCYC_Pos);
  402cce:	f002 020f 	and.w	r2, r2, #15
{
  402cd2:	b083      	sub	sp, #12
  402cd4:	4605      	mov	r5, r0
	
	CRITICAL_SECTION_ENTER();
  402cd6:	4b05      	ldr	r3, [pc, #20]	; (402cec <hsmci_set_data_timeout+0x20>)
	uint32_t tmp = (data_timeout_multiplier << HSMCI_DTOR_DTOMUL_Pos) | ((0b1111 & data_timeout_cycle_number) << HSMCI_DTOR_DTOCYC_Pos);
  402cd8:	ea42 1401 	orr.w	r4, r2, r1, lsl #4
	CRITICAL_SECTION_ENTER();
  402cdc:	a801      	add	r0, sp, #4
  402cde:	4798      	blx	r3
	hardware->HSMCI_DTOR = tmp;
	CRITICAL_SECTION_LEAVE();
  402ce0:	a801      	add	r0, sp, #4
  402ce2:	4b03      	ldr	r3, [pc, #12]	; (402cf0 <hsmci_set_data_timeout+0x24>)
	hardware->HSMCI_DTOR = tmp;
  402ce4:	60ac      	str	r4, [r5, #8]
	CRITICAL_SECTION_LEAVE();
  402ce6:	4798      	blx	r3
}
  402ce8:	b003      	add	sp, #12
  402cea:	bd30      	pop	{r4, r5, pc}
  402cec:	00402485 	.word	0x00402485
  402cf0:	00402495 	.word	0x00402495

00402cf4 <hsmci_set_completion_timeout>:

//--------------------------------------------------------------------------------------------------//


void hsmci_set_completion_timeout(Hsmci* hardware, hsmci_data_timeout_multiplier_e completion_signal_timout_multiplier, uint8_t completion_signal_timeout_cycle_number)
{
  402cf4:	b570      	push	{r4, r5, r6, lr}
  402cf6:	460e      	mov	r6, r1
  402cf8:	b082      	sub	sp, #8
  402cfa:	4614      	mov	r4, r2
  402cfc:	4605      	mov	r5, r0
	CRITICAL_SECTION_ENTER()
  402cfe:	4b05      	ldr	r3, [pc, #20]	; (402d14 <hsmci_set_completion_timeout+0x20>)
  402d00:	a801      	add	r0, sp, #4
	hardware->HSMCI_CSTOR = (completion_signal_timout_multiplier << HSMCI_CSTOR_CSTOMUL_Pos) | ((0xff & completion_signal_timeout_cycle_number) << HSMCI_CSTOR_CSTOCYC_Pos);
  402d02:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
	CRITICAL_SECTION_ENTER()
  402d06:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
  402d08:	a801      	add	r0, sp, #4
  402d0a:	4b03      	ldr	r3, [pc, #12]	; (402d18 <hsmci_set_completion_timeout+0x24>)
	hardware->HSMCI_CSTOR = (completion_signal_timout_multiplier << HSMCI_CSTOR_CSTOMUL_Pos) | ((0xff & completion_signal_timeout_cycle_number) << HSMCI_CSTOR_CSTOCYC_Pos);
  402d0c:	61ec      	str	r4, [r5, #28]
	CRITICAL_SECTION_LEAVE()
  402d0e:	4798      	blx	r3
}
  402d10:	b002      	add	sp, #8
  402d12:	bd70      	pop	{r4, r5, r6, pc}
  402d14:	00402485 	.word	0x00402485
  402d18:	00402495 	.word	0x00402495

00402d1c <hsmci_set_bus_width>:

//--------------------------------------------------------------------------------------------------//


void hsmci_set_bus_width(Hsmci* hardware, hsmci_sd_bus_width_e bus_width, hsmci_sd_slot_select_e slot_selct)
{
  402d1c:	b530      	push	{r4, r5, lr}
  402d1e:	b083      	sub	sp, #12
	uint32_t tmp = (bus_width << HSMCI_SDCR_SDCBUS_Pos) | (slot_selct << HSMCI_SDCR_SDCSEL_Pos);
  402d20:	ea42 1581 	orr.w	r5, r2, r1, lsl #6
{
  402d24:	4604      	mov	r4, r0
	
	CRITICAL_SECTION_ENTER()
  402d26:	4b04      	ldr	r3, [pc, #16]	; (402d38 <hsmci_set_bus_width+0x1c>)
  402d28:	a801      	add	r0, sp, #4
  402d2a:	4798      	blx	r3
	hardware->HSMCI_SDCR = tmp;
	CRITICAL_SECTION_LEAVE()
  402d2c:	a801      	add	r0, sp, #4
  402d2e:	4b03      	ldr	r3, [pc, #12]	; (402d3c <hsmci_set_bus_width+0x20>)
	hardware->HSMCI_SDCR = tmp;
  402d30:	60e5      	str	r5, [r4, #12]
	CRITICAL_SECTION_LEAVE()
  402d32:	4798      	blx	r3
}
  402d34:	b003      	add	sp, #12
  402d36:	bd30      	pop	{r4, r5, pc}
  402d38:	00402485 	.word	0x00402485
  402d3c:	00402495 	.word	0x00402495

00402d40 <hsmci_write_data_register>:

//--------------------------------------------------------------------------------------------------//


void hsmci_write_data_register(Hsmci* hardware, uint32_t data)
{
  402d40:	b530      	push	{r4, r5, lr}
//--------------------------------------------------------------------------------------------------//


uint32_t hsmci_read_status_register(Hsmci* hardware)
{
	uint32_t tmp = hardware->HSMCI_SR;
  402d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
  402d46:	b083      	sub	sp, #12
  402d48:	4604      	mov	r4, r0
  402d4a:	460d      	mov	r5, r1
	uint32_t tmp = hardware->HSMCI_SR;
  402d4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
	while (!(hsmci_read_status_register(HSMCI) & (1 << HSMCI_SR_TXRDY_Pos)))
  402d4e:	075b      	lsls	r3, r3, #29
  402d50:	d5fc      	bpl.n	402d4c <hsmci_write_data_register+0xc>
	CRITICAL_SECTION_ENTER()
  402d52:	a801      	add	r0, sp, #4
  402d54:	4b03      	ldr	r3, [pc, #12]	; (402d64 <hsmci_write_data_register+0x24>)
  402d56:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
  402d58:	a801      	add	r0, sp, #4
  402d5a:	4b03      	ldr	r3, [pc, #12]	; (402d68 <hsmci_write_data_register+0x28>)
	hardware->HSMCI_TDR = data;
  402d5c:	6365      	str	r5, [r4, #52]	; 0x34
	CRITICAL_SECTION_LEAVE()
  402d5e:	4798      	blx	r3
}
  402d60:	b003      	add	sp, #12
  402d62:	bd30      	pop	{r4, r5, pc}
  402d64:	00402485 	.word	0x00402485
  402d68:	00402495 	.word	0x00402495

00402d6c <hsmci_read_data_register>:
	uint32_t tmp = hardware->HSMCI_SR;
  402d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d70:	6c13      	ldr	r3, [r2, #64]	; 0x40
	while (!(hsmci_read_status_register(HSMCI) & (1 << HSMCI_SR_RXRDY_Pos)))
  402d72:	079b      	lsls	r3, r3, #30
  402d74:	d5fc      	bpl.n	402d70 <hsmci_read_data_register+0x4>
	uint32_t tmp = hardware->HSMCI_RDR;
  402d76:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  402d78:	4770      	bx	lr
  402d7a:	bf00      	nop

00402d7c <hsmci_read_data_register_reverse>:
{
  402d7c:	b570      	push	{r4, r5, r6, lr}
  402d7e:	4614      	mov	r4, r2
  402d80:	4605      	mov	r5, r0
  402d82:	460e      	mov	r6, r1
	check(number_of_words);
  402d84:	22dd      	movs	r2, #221	; 0xdd
  402d86:	4620      	mov	r0, r4
  402d88:	4911      	ldr	r1, [pc, #68]	; (402dd0 <hsmci_read_data_register_reverse+0x54>)
  402d8a:	4b12      	ldr	r3, [pc, #72]	; (402dd4 <hsmci_read_data_register_reverse+0x58>)
  402d8c:	4798      	blx	r3
	for (uint8_t i = 0; i < number_of_words; i++)
  402d8e:	b1f4      	cbz	r4, 402dce <hsmci_read_data_register_reverse+0x52>
  402d90:	2104      	movs	r1, #4
  402d92:	f06f 0303 	mvn.w	r3, #3
  402d96:	1e60      	subs	r0, r4, #1
	uint32_t tmp = hardware->HSMCI_SR;
  402d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d9c:	fb11 3304 	smlabb	r3, r1, r4, r3
  402da0:	fb04 6101 	mla	r1, r4, r1, r6
  402da4:	b2c0      	uxtb	r0, r0
  402da6:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  402daa:	441e      	add	r6, r3
  402dac:	6c13      	ldr	r3, [r2, #64]	; 0x40
		while (!(hsmci_read_status_register(HSMCI) & (1 << HSMCI_SR_RXRDY_Pos)))
  402dae:	079b      	lsls	r3, r3, #30
  402db0:	d5fc      	bpl.n	402dac <hsmci_read_data_register_reverse+0x30>
		reg = hardware->HSMCI_RDR;
  402db2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		data[((4 * number_of_words) - 1) - (4*i + 1)] = (reg >> 8) & 0xFF;
  402db4:	0a1c      	lsrs	r4, r3, #8
		data[((4 * number_of_words) - 1) - 4*i]   = (reg >> 0) & 0xFF;
  402db6:	f801 3c01 	strb.w	r3, [r1, #-1]
		data[((4 * number_of_words) - 1) - (4*i + 2)] = (reg >> 16) & 0xFF;
  402dba:	0c18      	lsrs	r0, r3, #16
		data[((4 * number_of_words) - 1) - (4*i + 3)] = (reg >> 24) & 0xFF;
  402dbc:	0e1b      	lsrs	r3, r3, #24
		data[((4 * number_of_words) - 1) - (4*i + 1)] = (reg >> 8) & 0xFF;
  402dbe:	f801 4c02 	strb.w	r4, [r1, #-2]
		data[((4 * number_of_words) - 1) - (4*i + 2)] = (reg >> 16) & 0xFF;
  402dc2:	f801 0c03 	strb.w	r0, [r1, #-3]
		data[((4 * number_of_words) - 1) - (4*i + 3)] = (reg >> 24) & 0xFF;
  402dc6:	f801 3d04 	strb.w	r3, [r1, #-4]!
	for (uint8_t i = 0; i < number_of_words; i++)
  402dca:	428e      	cmp	r6, r1
  402dcc:	d1ee      	bne.n	402dac <hsmci_read_data_register_reverse+0x30>
  402dce:	bd70      	pop	{r4, r5, r6, pc}
  402dd0:	0040af00 	.word	0x0040af00
  402dd4:	00402219 	.word	0x00402219

00402dd8 <hsmci_read_48_bit_response_register>:
	uint32_t tmp = hardware->HSMCI_RSPR[0];
  402dd8:	6a00      	ldr	r0, [r0, #32]
}
  402dda:	4770      	bx	lr

00402ddc <hsmci_read_136_bit_response_register_extended>:
		reg = hardware->HSMCI_RSPR[i];
  402ddc:	6a03      	ldr	r3, [r0, #32]
  402dde:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
  402de0:	b5f0      	push	{r4, r5, r6, r7, lr}
		reg = hardware->HSMCI_RSPR[i];
  402de2:	6a84      	ldr	r4, [r0, #40]	; 0x28
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402de4:	0a1d      	lsrs	r5, r3, #8
		reg = hardware->HSMCI_RSPR[i];
  402de6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402de8:	0a17      	lsrs	r7, r2, #8
  402dea:	ea4f 2c14 	mov.w	ip, r4, lsr #8
		byte_reverse[4*i + 3] = (reg >> 0) & 0xFF;
  402dee:	710c      	strb	r4, [r1, #4]
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402df0:	ea4f 2e10 	mov.w	lr, r0, lsr #8
		byte_reverse[4*i + 3] = (reg >> 0) & 0xFF;
  402df4:	7008      	strb	r0, [r1, #0]
		byte_reverse[4*i + 1] = (reg >> 16) & 0xFF;
  402df6:	0c06      	lsrs	r6, r0, #16
		byte_reverse[4*i + 3] = (reg >> 0) & 0xFF;
  402df8:	720a      	strb	r2, [r1, #8]
		byte_reverse[4*i]   = (reg >> 24) & 0xFF;
  402dfa:	0e00      	lsrs	r0, r0, #24
		byte_reverse[4*i + 3] = (reg >> 0) & 0xFF;
  402dfc:	730b      	strb	r3, [r1, #12]
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402dfe:	f881 e001 	strb.w	lr, [r1, #1]
		byte_reverse[4*i + 1] = (reg >> 16) & 0xFF;
  402e02:	ea4f 4e14 	mov.w	lr, r4, lsr #16
  402e06:	708e      	strb	r6, [r1, #2]
		byte_reverse[4*i]   = (reg >> 24) & 0xFF;
  402e08:	0e24      	lsrs	r4, r4, #24
		byte_reverse[4*i + 1] = (reg >> 16) & 0xFF;
  402e0a:	0c16      	lsrs	r6, r2, #16
		byte_reverse[4*i]   = (reg >> 24) & 0xFF;
  402e0c:	70c8      	strb	r0, [r1, #3]
  402e0e:	0e12      	lsrs	r2, r2, #24
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402e10:	f881 c005 	strb.w	ip, [r1, #5]
		byte_reverse[4*i + 1] = (reg >> 16) & 0xFF;
  402e14:	0c18      	lsrs	r0, r3, #16
  402e16:	f881 e006 	strb.w	lr, [r1, #6]
		byte_reverse[4*i]   = (reg >> 24) & 0xFF;
  402e1a:	0e1b      	lsrs	r3, r3, #24
  402e1c:	71cc      	strb	r4, [r1, #7]
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402e1e:	724f      	strb	r7, [r1, #9]
		byte_reverse[4*i + 1] = (reg >> 16) & 0xFF;
  402e20:	728e      	strb	r6, [r1, #10]
		byte_reverse[4*i]   = (reg >> 24) & 0xFF;
  402e22:	72ca      	strb	r2, [r1, #11]
		byte_reverse[4*i + 2] = (reg >> 8) & 0xFF;
  402e24:	734d      	strb	r5, [r1, #13]
		byte_reverse[4*i + 1] = (reg >> 16) & 0xFF;
  402e26:	7388      	strb	r0, [r1, #14]
		byte_reverse[4*i]   = (reg >> 24) & 0xFF;
  402e28:	73cb      	strb	r3, [r1, #15]
  402e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00402e2c <hsmci_read_status_register>:
	uint32_t tmp = hardware->HSMCI_SR;
  402e2c:	6c00      	ldr	r0, [r0, #64]	; 0x40
	
	return tmp;
}
  402e2e:	4770      	bx	lr

00402e30 <hsmci_send_command>:

//--------------------------------------------------------------------------------------------------//


hsmci_status_e hsmci_send_command(Hsmci* hardware, uint32_t command, uint32_t argument, hsmci_check_crc_e crc)
{
  402e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e34:	b082      	sub	sp, #8
  402e36:	4616      	mov	r6, r2
  402e38:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  402e3a:	4f20      	ldr	r7, [pc, #128]	; (402ebc <hsmci_send_command+0x8c>)
  402e3c:	a801      	add	r0, sp, #4
{
  402e3e:	460d      	mov	r5, r1
  402e40:	4698      	mov	r8, r3
	CRITICAL_SECTION_ENTER()
  402e42:	47b8      	blx	r7
	hardware->HSMCI_ARGR = argument;
  402e44:	6126      	str	r6, [r4, #16]
	CRITICAL_SECTION_LEAVE()
  402e46:	a801      	add	r0, sp, #4
  402e48:	4e1d      	ldr	r6, [pc, #116]	; (402ec0 <hsmci_send_command+0x90>)
  402e4a:	47b0      	blx	r6
//--------------------------------------------------------------------------------------------------//


void hsmci_write_command_register(Hsmci* hardware, uint32_t command)
{
	CRITICAL_SECTION_ENTER()
  402e4c:	4668      	mov	r0, sp
  402e4e:	47b8      	blx	r7
	hardware->HSMCI_CMDR = command;
  402e50:	6165      	str	r5, [r4, #20]
	CRITICAL_SECTION_LEAVE()
  402e52:	4668      	mov	r0, sp
  402e54:	47b0      	blx	r6
  402e56:	f1b8 0f00 	cmp.w	r8, #0
  402e5a:	d00e      	beq.n	402e7a <hsmci_send_command+0x4a>
  402e5c:	e001      	b.n	402e62 <hsmci_send_command+0x32>
	} while (!(status & HSMCI_SR_CMDRDY_Msk));
  402e5e:	07d9      	lsls	r1, r3, #31
  402e60:	d410      	bmi.n	402e84 <hsmci_send_command+0x54>
	uint32_t tmp = hardware->HSMCI_SR;
  402e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if (status & (HSMCI_SR_RINDE_Msk | HSMCI_SR_RDIRE_Msk | HSMCI_SR_RENDE_Msk | HSMCI_SR_RTOE_Msk | HSMCI_SR_CSTOE_Msk))
  402e64:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  402e68:	d0f9      	beq.n	402e5e <hsmci_send_command+0x2e>
			return HSMCI_ERROR;
  402e6a:	2001      	movs	r0, #1
}
  402e6c:	b002      	add	sp, #8
  402e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & HSMCI_SR_RCRCE_Msk)
  402e72:	035a      	lsls	r2, r3, #13
  402e74:	d40e      	bmi.n	402e94 <hsmci_send_command+0x64>
	} while (!(status & HSMCI_SR_CMDRDY_Msk));
  402e76:	07db      	lsls	r3, r3, #31
  402e78:	d404      	bmi.n	402e84 <hsmci_send_command+0x54>
	uint32_t tmp = hardware->HSMCI_SR;
  402e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if (status & (HSMCI_SR_RINDE_Msk | HSMCI_SR_RDIRE_Msk | HSMCI_SR_RENDE_Msk | HSMCI_SR_RTOE_Msk | HSMCI_SR_CSTOE_Msk))
  402e7c:	f413 001b 	ands.w	r0, r3, #10158080	; 0x9b0000
  402e80:	d0f7      	beq.n	402e72 <hsmci_send_command+0x42>
  402e82:	e7f2      	b.n	402e6a <hsmci_send_command+0x3a>
	if ((command & HSMCI_CMDR_RSPTYP_R1B) == HSMCI_CMDR_RSPTYP_R1B)
  402e84:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
  402e88:	2dc0      	cmp	r5, #192	; 0xc0
  402e8a:	d00c      	beq.n	402ea6 <hsmci_send_command+0x76>
	return HSMCI_OK;
  402e8c:	2000      	movs	r0, #0
}
  402e8e:	b002      	add	sp, #8
  402e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				check(0);
  402e94:	f44f 72a7 	mov.w	r2, #334	; 0x14e
  402e98:	490a      	ldr	r1, [pc, #40]	; (402ec4 <hsmci_send_command+0x94>)
  402e9a:	4b0b      	ldr	r3, [pc, #44]	; (402ec8 <hsmci_send_command+0x98>)
  402e9c:	4798      	blx	r3
				return HSMCI_ERROR;
  402e9e:	2001      	movs	r0, #1
}
  402ea0:	b002      	add	sp, #8
  402ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t tmp = hardware->HSMCI_SR;
  402ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402ea8:	f06f 0201 	mvn.w	r2, #1
		} while (!((status & HSMCI_SR_NOTBUSY_Msk) && ((status & HSMCI_SR_DTIP_Msk) == 0)));
  402eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
  402eb0:	2b20      	cmp	r3, #32
  402eb2:	d0eb      	beq.n	402e8c <hsmci_send_command+0x5c>
			if (timeout-- <= 1)
  402eb4:	3a01      	subs	r2, #1
	uint32_t tmp = hardware->HSMCI_SR;
  402eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (timeout-- <= 1)
  402eb8:	d1f8      	bne.n	402eac <hsmci_send_command+0x7c>
  402eba:	e7d6      	b.n	402e6a <hsmci_send_command+0x3a>
  402ebc:	00402485 	.word	0x00402485
  402ec0:	00402495 	.word	0x00402495
  402ec4:	0040af00 	.word	0x0040af00
  402ec8:	00402219 	.word	0x00402219

00402ecc <hsmci_send_addressed_data_transfer_command>:
{
  402ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ed0:	b08d      	sub	sp, #52	; 0x34
  402ed2:	460f      	mov	r7, r1
  402ed4:	4698      	mov	r8, r3
//--------------------------------------------------------------------------------------------------//


void hsmci_write_proof_enable(Hsmci* hardware)
{
	uint32_t tmp = hardware->HSMCI_MR;
  402ed6:	6841      	ldr	r1, [r0, #4]
{
  402ed8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
  402edc:	4604      	mov	r4, r0
	
	tmp |= HSMCI_MR_WRPROOF_Msk;
  402ede:	f441 5980 	orr.w	r9, r1, #4096	; 0x1000
	
	CRITICAL_SECTION_ENTER()
  402ee2:	4e49      	ldr	r6, [pc, #292]	; (403008 <hsmci_send_addressed_data_transfer_command+0x13c>)
{
  402ee4:	9300      	str	r3, [sp, #0]
	CRITICAL_SECTION_ENTER()
  402ee6:	a803      	add	r0, sp, #12
{
  402ee8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  402eec:	4693      	mov	fp, r2
  402eee:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
  402ef2:	9301      	str	r3, [sp, #4]
	CRITICAL_SECTION_ENTER()
  402ef4:	47b0      	blx	r6
	hardware->HSMCI_MR = tmp;
	CRITICAL_SECTION_LEAVE()
  402ef6:	4d45      	ldr	r5, [pc, #276]	; (40300c <hsmci_send_addressed_data_transfer_command+0x140>)
  402ef8:	a803      	add	r0, sp, #12
	hardware->HSMCI_MR = tmp;
  402efa:	f8c4 9004 	str.w	r9, [r4, #4]
	CRITICAL_SECTION_LEAVE()
  402efe:	47a8      	blx	r5
	uint32_t tmp = hardware->HSMCI_MR;
  402f00:	6863      	ldr	r3, [r4, #4]
	CRITICAL_SECTION_ENTER()
  402f02:	a802      	add	r0, sp, #8
	tmp |= HSMCI_MR_RDPROOF_Msk;
  402f04:	f443 6900 	orr.w	r9, r3, #2048	; 0x800
	CRITICAL_SECTION_ENTER()
  402f08:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
  402f0a:	a802      	add	r0, sp, #8
	hardware->HSMCI_MR = tmp;
  402f0c:	f8c4 9004 	str.w	r9, [r4, #4]
	CRITICAL_SECTION_LEAVE()
  402f10:	47a8      	blx	r5
	if (dma)
  402f12:	f1ba 0f00 	cmp.w	sl, #0
  402f16:	d04c      	beq.n	402fb2 <hsmci_send_addressed_data_transfer_command+0xe6>
//--------------------------------------------------------------------------------------------------//


void hsmci_dma_enable(Hsmci* hardware, hsmci_dma_chunk_size_e chunk_size)
{
	CRITICAL_SECTION_ENTER()
  402f18:	a804      	add	r0, sp, #16
  402f1a:	47b0      	blx	r6
	hardware->HSMCI_DMA = (chunk_size << HSMCI_DMA_CHKSIZE_Pos) | (1 << HSMCI_DMA_DMAEN_Pos);
  402f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
	CRITICAL_SECTION_LEAVE()
  402f20:	a804      	add	r0, sp, #16
	hardware->HSMCI_DMA = (chunk_size << HSMCI_DMA_CHKSIZE_Pos) | (1 << HSMCI_DMA_DMAEN_Pos);
  402f22:	6523      	str	r3, [r4, #80]	; 0x50
	CRITICAL_SECTION_LEAVE()
  402f24:	47a8      	blx	r5
	if (block_size & 0b11)
  402f26:	f018 0f03 	tst.w	r8, #3
	uint32_t tmp = hardware->HSMCI_MR;
  402f2a:	6863      	ldr	r3, [r4, #4]
	if (block_size & 0b11)
  402f2c:	d038      	beq.n	402fa0 <hsmci_send_addressed_data_transfer_command+0xd4>
	tmp |= HSMCI_MR_FBYTE_Msk;
  402f2e:	f443 5a00 	orr.w	sl, r3, #8192	; 0x2000
	CRITICAL_SECTION_ENTER()
  402f32:	a806      	add	r0, sp, #24
  402f34:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
  402f36:	a806      	add	r0, sp, #24
	hardware->HSMCI_MR = tmp;
  402f38:	f8c4 a004 	str.w	sl, [r4, #4]
	CRITICAL_SECTION_LEAVE()
  402f3c:	47a8      	blx	r5
	if ((command_register & HSMCI_CMDR_TRTYP_BYTE) == HSMCI_CMDR_TRTYP_BYTE)
  402f3e:	02b9      	lsls	r1, r7, #10
  402f40:	d525      	bpl.n	402f8e <hsmci_send_addressed_data_transfer_command+0xc2>
		hsmci_set_block_length(hardware, 0, (block_size % 512));
  402f42:	f3c8 0808 	ubfx	r8, r8, #0, #9
	CRITICAL_SECTION_ENTER()
  402f46:	a808      	add	r0, sp, #32
  402f48:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
  402f4a:	a808      	add	r0, sp, #32
	hardware->HSMCI_BLKR = ((0xffff & block_count) << HSMCI_BLKR_BCNT_Pos) | ((0xffff & block_length) << HSMCI_BLKR_BLKLEN_Pos);
  402f4c:	f8c4 8018 	str.w	r8, [r4, #24]
	CRITICAL_SECTION_LEAVE()
  402f50:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER()
  402f52:	a80b      	add	r0, sp, #44	; 0x2c
  402f54:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
  402f56:	a80b      	add	r0, sp, #44	; 0x2c
	hardware->HSMCI_ARGR = argument;
  402f58:	f8c4 b010 	str.w	fp, [r4, #16]
	CRITICAL_SECTION_LEAVE()
  402f5c:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER()
  402f5e:	a80a      	add	r0, sp, #40	; 0x28
  402f60:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
  402f62:	a80a      	add	r0, sp, #40	; 0x28
	hardware->HSMCI_CMDR = command;
  402f64:	6167      	str	r7, [r4, #20]
	CRITICAL_SECTION_LEAVE()
  402f66:	47a8      	blx	r5
	uint32_t tmp = hardware->HSMCI_SR;
  402f68:	6c25      	ldr	r5, [r4, #64]	; 0x40
	} while (!(status & (1 << HSMCI_SR_CMDRDY_Pos)));
  402f6a:	07ea      	lsls	r2, r5, #31
  402f6c:	d5fc      	bpl.n	402f68 <hsmci_send_addressed_data_transfer_command+0x9c>
	if (status & HSMCI_STATUS_REGISTER_ERROR_MASK)
  402f6e:	4b28      	ldr	r3, [pc, #160]	; (403010 <hsmci_send_addressed_data_transfer_command+0x144>)
  402f70:	421d      	tst	r5, r3
  402f72:	d131      	bne.n	402fd8 <hsmci_send_addressed_data_transfer_command+0x10c>
		if (crc == CHECK_CRC)
  402f74:	036b      	lsls	r3, r5, #13
  402f76:	d502      	bpl.n	402f7e <hsmci_send_addressed_data_transfer_command+0xb2>
  402f78:	9b01      	ldr	r3, [sp, #4]
  402f7a:	2b00      	cmp	r3, #0
  402f7c:	d039      	beq.n	402ff2 <hsmci_send_addressed_data_transfer_command+0x126>
	if ((command_register & HSMCI_CMDR_RSPTYP_R1B) == HSMCI_CMDR_RSPTYP_R1B)
  402f7e:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
  402f82:	2fc0      	cmp	r7, #192	; 0xc0
  402f84:	d01c      	beq.n	402fc0 <hsmci_send_addressed_data_transfer_command+0xf4>
	return HSMCI_OK;
  402f86:	2000      	movs	r0, #0
}
  402f88:	b00d      	add	sp, #52	; 0x34
  402f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	CRITICAL_SECTION_ENTER()
  402f8e:	a809      	add	r0, sp, #36	; 0x24
  402f90:	47b0      	blx	r6
	hardware->HSMCI_BLKR = ((0xffff & block_count) << HSMCI_BLKR_BCNT_Pos) | ((0xffff & block_length) << HSMCI_BLKR_BLKLEN_Pos);
  402f92:	9b00      	ldr	r3, [sp, #0]
	CRITICAL_SECTION_LEAVE()
  402f94:	a809      	add	r0, sp, #36	; 0x24
	hardware->HSMCI_BLKR = ((0xffff & block_count) << HSMCI_BLKR_BCNT_Pos) | ((0xffff & block_length) << HSMCI_BLKR_BLKLEN_Pos);
  402f96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  402f9a:	61a3      	str	r3, [r4, #24]
	CRITICAL_SECTION_LEAVE()
  402f9c:	47a8      	blx	r5
  402f9e:	e7d8      	b.n	402f52 <hsmci_send_addressed_data_transfer_command+0x86>
	tmp &= ~HSMCI_MR_FBYTE_Msk;
  402fa0:	f423 5a00 	bic.w	sl, r3, #8192	; 0x2000
	CRITICAL_SECTION_ENTER()
  402fa4:	a807      	add	r0, sp, #28
  402fa6:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
  402fa8:	a807      	add	r0, sp, #28
	hardware->HSMCI_MR = tmp;
  402faa:	f8c4 a004 	str.w	sl, [r4, #4]
	CRITICAL_SECTION_LEAVE()
  402fae:	47a8      	blx	r5
  402fb0:	e7c5      	b.n	402f3e <hsmci_send_addressed_data_transfer_command+0x72>
//--------------------------------------------------------------------------------------------------//


void hsmci_dma_disable(Hsmci* hardware)
{
	CRITICAL_SECTION_ENTER()
  402fb2:	a805      	add	r0, sp, #20
  402fb4:	47b0      	blx	r6
	hardware->HSMCI_DMA = 0;
	CRITICAL_SECTION_LEAVE()
  402fb6:	a805      	add	r0, sp, #20
	hardware->HSMCI_DMA = 0;
  402fb8:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	CRITICAL_SECTION_LEAVE()
  402fbc:	47a8      	blx	r5
  402fbe:	e7b2      	b.n	402f26 <hsmci_send_addressed_data_transfer_command+0x5a>
	uint32_t tmp = hardware->HSMCI_SR;
  402fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402fc2:	f04f 32ff 	mov.w	r2, #4294967295
		} while (!((status & HSMCI_SR_NOTBUSY_Msk) && ((status & HSMCI_SR_DTOE_Msk) == 0)));
  402fc6:	4913      	ldr	r1, [pc, #76]	; (403014 <hsmci_send_addressed_data_transfer_command+0x148>)
  402fc8:	e002      	b.n	402fd0 <hsmci_send_addressed_data_transfer_command+0x104>
			if (timeout++ == 0xffffffff)
  402fca:	3a01      	subs	r2, #1
	uint32_t tmp = hardware->HSMCI_SR;
  402fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
			if (timeout++ == 0xffffffff)
  402fce:	d019      	beq.n	403004 <hsmci_send_addressed_data_transfer_command+0x138>
		} while (!((status & HSMCI_SR_NOTBUSY_Msk) && ((status & HSMCI_SR_DTOE_Msk) == 0)));
  402fd0:	400b      	ands	r3, r1
  402fd2:	2b20      	cmp	r3, #32
  402fd4:	d1f9      	bne.n	402fca <hsmci_send_addressed_data_transfer_command+0xfe>
  402fd6:	e7d6      	b.n	402f86 <hsmci_send_addressed_data_transfer_command+0xba>
		board_serial_print("[  FAIL ] CMD%d ", (HSMCI_CMDR_CMDNB_Msk & command_register));
  402fd8:	f007 013f 	and.w	r1, r7, #63	; 0x3f
  402fdc:	480e      	ldr	r0, [pc, #56]	; (403018 <hsmci_send_addressed_data_transfer_command+0x14c>)
  402fde:	4b0f      	ldr	r3, [pc, #60]	; (40301c <hsmci_send_addressed_data_transfer_command+0x150>)
  402fe0:	4798      	blx	r3
		board_serial_print_register("status: ", status);
  402fe2:	4629      	mov	r1, r5
  402fe4:	480e      	ldr	r0, [pc, #56]	; (403020 <hsmci_send_addressed_data_transfer_command+0x154>)
  402fe6:	4b0f      	ldr	r3, [pc, #60]	; (403024 <hsmci_send_addressed_data_transfer_command+0x158>)
  402fe8:	4798      	blx	r3
		return HSMCI_ERROR;
  402fea:	2001      	movs	r0, #1
}
  402fec:	b00d      	add	sp, #52	; 0x34
  402fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			board_serial_print("[  FAIL ] CMD%d ", (HSMCI_CMDR_CMDNB_Msk & command_register));
  402ff2:	f007 013f 	and.w	r1, r7, #63	; 0x3f
  402ff6:	4808      	ldr	r0, [pc, #32]	; (403018 <hsmci_send_addressed_data_transfer_command+0x14c>)
  402ff8:	4c08      	ldr	r4, [pc, #32]	; (40301c <hsmci_send_addressed_data_transfer_command+0x150>)
  402ffa:	47a0      	blx	r4
			board_serial_print("[WARNING] CRC error\n");
  402ffc:	480a      	ldr	r0, [pc, #40]	; (403028 <hsmci_send_addressed_data_transfer_command+0x15c>)
  402ffe:	47a0      	blx	r4
			return HSMCI_ERROR;
  403000:	2001      	movs	r0, #1
  403002:	e7c1      	b.n	402f88 <hsmci_send_addressed_data_transfer_command+0xbc>
				return HSMCI_ERROR;
  403004:	2001      	movs	r0, #1
  403006:	e7bf      	b.n	402f88 <hsmci_send_addressed_data_transfer_command+0xbc>
  403008:	00402485 	.word	0x00402485
  40300c:	00402495 	.word	0x00402495
  403010:	11fb0000 	.word	0x11fb0000
  403014:	00400020 	.word	0x00400020
  403018:	0040af1c 	.word	0x0040af1c
  40301c:	0040052d 	.word	0x0040052d
  403020:	0040af30 	.word	0x0040af30
  403024:	00400c51 	.word	0x00400c51
  403028:	0040af3c 	.word	0x0040af3c

0040302c <hsmci_set_bus_speed>:
	if (cpu_peripheral_speed > bus_speed * 2)
  40302c:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
{
  403030:	b530      	push	{r4, r5, lr}
  403032:	4605      	mov	r5, r0
  403034:	b083      	sub	sp, #12
	if (cpu_peripheral_speed > bus_speed * 2)
  403036:	d919      	bls.n	40306c <hsmci_set_bus_speed+0x40>
		prescaler = cpu_peripheral_speed / bus_speed;
  403038:	fbb2 f3f1 	udiv	r3, r2, r1
		if (cpu_peripheral_speed % bus_speed)
  40303c:	fb01 2113 	mls	r1, r1, r3, r2
  403040:	b991      	cbnz	r1, 403068 <hsmci_set_bus_speed+0x3c>
		prescaler -= 2;
  403042:	3b02      	subs	r3, #2
  403044:	f3c3 0347 	ubfx	r3, r3, #1, #8
  403048:	3301      	adds	r3, #1
  40304a:	b2db      	uxtb	r3, r3
	uint32_t tmp = hardware->HSMCI_MR;
  40304c:	686c      	ldr	r4, [r5, #4]
	CRITICAL_SECTION_ENTER()
  40304e:	a801      	add	r0, sp, #4
	tmp &= ~HSMCI_MR_CLKODD_Msk;
  403050:	4a07      	ldr	r2, [pc, #28]	; (403070 <hsmci_set_bus_speed+0x44>)
	CRITICAL_SECTION_ENTER()
  403052:	4908      	ldr	r1, [pc, #32]	; (403074 <hsmci_set_bus_speed+0x48>)
	tmp &= ~HSMCI_MR_CLKODD_Msk;
  403054:	4022      	ands	r2, r4
	tmp |= (HSMCI_MR_CLKDIV_Msk & ((div_field + 1) << HSMCI_MR_CLKDIV_Pos));
  403056:	ea42 0403 	orr.w	r4, r2, r3
	CRITICAL_SECTION_ENTER()
  40305a:	4788      	blx	r1
	CRITICAL_SECTION_LEAVE()
  40305c:	a801      	add	r0, sp, #4
  40305e:	4b06      	ldr	r3, [pc, #24]	; (403078 <hsmci_set_bus_speed+0x4c>)
	hardware->HSMCI_MR = tmp;
  403060:	606c      	str	r4, [r5, #4]
	CRITICAL_SECTION_LEAVE()
  403062:	4798      	blx	r3
}
  403064:	b003      	add	sp, #12
  403066:	bd30      	pop	{r4, r5, pc}
			prescaler++;
  403068:	3b01      	subs	r3, #1
  40306a:	e7eb      	b.n	403044 <hsmci_set_bus_speed+0x18>
  40306c:	2301      	movs	r3, #1
  40306e:	e7ed      	b.n	40304c <hsmci_set_bus_speed+0x20>
  403070:	fffeff00 	.word	0xfffeff00
  403074:	00402485 	.word	0x00402485
  403078:	00402495 	.word	0x00402495

0040307c <hsmci_write_mode_register>:
{
  40307c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40307e:	b083      	sub	sp, #12
					((0b1 & force_byte_tranfer_enable) << HSMCI_MR_FBYTE_Pos) |
  403080:	035b      	lsls	r3, r3, #13
					((0b1 & padding) << HSMCI_MR_PADV_Pos) |
  403082:	0392      	lsls	r2, r2, #14
{
  403084:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
					((0b1 & force_byte_tranfer_enable) << HSMCI_MR_FBYTE_Pos) |
  403088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
{
  40308c:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
					((0b1 & padding) << HSMCI_MR_PADV_Pos) |
  403090:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
					((0b111 & power_save_divider) << HSMCI_MR_PWSDIV_Pos) |
  403094:	0225      	lsls	r5, r4, #8
{
  403096:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
  40309a:	f89d 4020 	ldrb.w	r4, [sp, #32]
					((0b1 & read_proof_enable) << HSMCI_MR_RDPROOF_Pos) |
  40309e:	02f6      	lsls	r6, r6, #11
					((0b111 & power_save_divider) << HSMCI_MR_PWSDIV_Pos) |
  4030a0:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
	uint32_t tmp =	((0b1 & odd_clock_divider) << HSMCI_MR_CLKODD_Pos) |
  4030a4:	0409      	lsls	r1, r1, #16
					((0b1 & read_proof_enable) << HSMCI_MR_RDPROOF_Pos) |
  4030a6:	f406 6600 	and.w	r6, r6, #2048	; 0x800
					((0b1 & write_proof_enable) << HSMCI_MR_WRPROOF_Pos) |
  4030aa:	0324      	lsls	r4, r4, #12
					((0b111 & power_save_divider) << HSMCI_MR_PWSDIV_Pos) |
  4030ac:	433d      	orrs	r5, r7
	uint32_t tmp =	((0b1 & odd_clock_divider) << HSMCI_MR_CLKODD_Pos) |
  4030ae:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
					((0b1 & write_proof_enable) << HSMCI_MR_WRPROOF_Pos) |
  4030b2:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
					((0b111 & power_save_divider) << HSMCI_MR_PWSDIV_Pos) |
  4030b6:	4335      	orrs	r5, r6
{
  4030b8:	4606      	mov	r6, r0
	CRITICAL_SECTION_ENTER();
  4030ba:	a801      	add	r0, sp, #4
					((0b111 & power_save_divider) << HSMCI_MR_PWSDIV_Pos) |
  4030bc:	432c      	orrs	r4, r5
	CRITICAL_SECTION_ENTER();
  4030be:	4d05      	ldr	r5, [pc, #20]	; (4030d4 <hsmci_write_mode_register+0x58>)
					((0b111 & power_save_divider) << HSMCI_MR_PWSDIV_Pos) |
  4030c0:	431c      	orrs	r4, r3
  4030c2:	4314      	orrs	r4, r2
  4030c4:	430c      	orrs	r4, r1
	CRITICAL_SECTION_ENTER();
  4030c6:	47a8      	blx	r5
	CRITICAL_SECTION_LEAVE();
  4030c8:	a801      	add	r0, sp, #4
  4030ca:	4b03      	ldr	r3, [pc, #12]	; (4030d8 <hsmci_write_mode_register+0x5c>)
	hardware->HSMCI_MR = tmp;
  4030cc:	6074      	str	r4, [r6, #4]
	CRITICAL_SECTION_LEAVE();
  4030ce:	4798      	blx	r3
}
  4030d0:	b003      	add	sp, #12
  4030d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030d4:	00402485 	.word	0x00402485
  4030d8:	00402495 	.word	0x00402495

004030dc <hsmci_high_speed_enable>:
{
  4030dc:	b510      	push	{r4, lr}
  4030de:	b082      	sub	sp, #8
  4030e0:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  4030e2:	4b06      	ldr	r3, [pc, #24]	; (4030fc <hsmci_high_speed_enable+0x20>)
  4030e4:	a801      	add	r0, sp, #4
  4030e6:	4798      	blx	r3
	hardware->HSMCI_CFG |= (1 << HSMCI_CFG_HSMODE_Pos);
  4030e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
	CRITICAL_SECTION_LEAVE()
  4030ea:	a801      	add	r0, sp, #4
  4030ec:	4a04      	ldr	r2, [pc, #16]	; (403100 <hsmci_high_speed_enable+0x24>)
	hardware->HSMCI_CFG |= (1 << HSMCI_CFG_HSMODE_Pos);
  4030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4030f2:	6563      	str	r3, [r4, #84]	; 0x54
	CRITICAL_SECTION_LEAVE()
  4030f4:	4790      	blx	r2
}
  4030f6:	b002      	add	sp, #8
  4030f8:	bd10      	pop	{r4, pc}
  4030fa:	bf00      	nop
  4030fc:	00402485 	.word	0x00402485
  403100:	00402495 	.word	0x00402495

00403104 <hsmci_write_configuration_register>:
{
  403104:	b530      	push	{r4, r5, lr}
  403106:	b083      	sub	sp, #12
					((0b1 & flow_error_reset_control_mode) << HSMCI_CFG_FERRCTRL_Pos) |
  403108:	011b      	lsls	r3, r3, #4
					((0b1 & high_speed_mode) << HSMCI_CFG_HSMODE_Pos) |
  40310a:	0214      	lsls	r4, r2, #8
{
  40310c:	f89d 5018 	ldrb.w	r5, [sp, #24]
					((0b1 & flow_error_reset_control_mode) << HSMCI_CFG_FERRCTRL_Pos) |
  403110:	f003 0310 	and.w	r3, r3, #16
					((0b1 & high_speed_mode) << HSMCI_CFG_HSMODE_Pos) |
  403114:	f404 7480 	and.w	r4, r4, #256	; 0x100
	uint32_t tmp =	((0b1 & synhronize_last_block) << HSMCI_CFG_LSYNC_Pos) |
  403118:	0309      	lsls	r1, r1, #12
					((0b1 & fifo_mode) << HSMCI_CFG_FIFOMODE_Pos);
  40311a:	f005 0501 	and.w	r5, r5, #1
	uint32_t tmp =	((0b1 & synhronize_last_block) << HSMCI_CFG_LSYNC_Pos) |
  40311e:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
					((0b1 & flow_error_reset_control_mode) << HSMCI_CFG_FERRCTRL_Pos) |
  403122:	432b      	orrs	r3, r5
{
  403124:	4605      	mov	r5, r0
	CRITICAL_SECTION_ENTER()
  403126:	a801      	add	r0, sp, #4
					((0b1 & flow_error_reset_control_mode) << HSMCI_CFG_FERRCTRL_Pos) |
  403128:	431c      	orrs	r4, r3
	CRITICAL_SECTION_ENTER()
  40312a:	4b04      	ldr	r3, [pc, #16]	; (40313c <hsmci_write_configuration_register+0x38>)
					((0b1 & flow_error_reset_control_mode) << HSMCI_CFG_FERRCTRL_Pos) |
  40312c:	430c      	orrs	r4, r1
	CRITICAL_SECTION_ENTER()
  40312e:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
  403130:	a801      	add	r0, sp, #4
  403132:	4b03      	ldr	r3, [pc, #12]	; (403140 <hsmci_write_configuration_register+0x3c>)
	hardware->HSMCI_CFG = tmp;
  403134:	656c      	str	r4, [r5, #84]	; 0x54
	CRITICAL_SECTION_LEAVE()
  403136:	4798      	blx	r3
}
  403138:	b003      	add	sp, #12
  40313a:	bd30      	pop	{r4, r5, pc}
  40313c:	00402485 	.word	0x00402485
  403140:	00402495 	.word	0x00402495

00403144 <interrupt_enable_peripheral_interrupt>:

//--------------------------------------------------------------------------------------------------//


void interrupt_enable_peripheral_interrupt(IRQn_Type irq_type, interrupt_priority_e irq_priority)
{
  403144:	b530      	push	{r4, r5, lr}
  403146:	b083      	sub	sp, #12
  403148:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  40314a:	4b15      	ldr	r3, [pc, #84]	; (4031a0 <interrupt_enable_peripheral_interrupt+0x5c>)
{
  40314c:	460d      	mov	r5, r1
	CRITICAL_SECTION_ENTER()
  40314e:	a801      	add	r0, sp, #4
  403150:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  403152:	2c00      	cmp	r4, #0
  403154:	db1b      	blt.n	40318e <interrupt_enable_peripheral_interrupt+0x4a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403156:	f004 001f 	and.w	r0, r4, #31
  40315a:	0961      	lsrs	r1, r4, #5
  40315c:	4a11      	ldr	r2, [pc, #68]	; (4031a4 <interrupt_enable_peripheral_interrupt+0x60>)
  40315e:	2301      	movs	r3, #1
  403160:	4083      	lsls	r3, r0
  403162:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  403166:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40316a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40316e:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403172:	016d      	lsls	r5, r5, #5
  403174:	4414      	add	r4, r2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403176:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40317a:	b2ed      	uxtb	r5, r5
  40317c:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403180:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ(irq_type);
	NVIC_ClearPendingIRQ(irq_type);
	NVIC_SetPriority(irq_type, irq_priority);
	NVIC_EnableIRQ(irq_type);
	
	CRITICAL_SECTION_LEAVE()
  403184:	a801      	add	r0, sp, #4
  403186:	4b08      	ldr	r3, [pc, #32]	; (4031a8 <interrupt_enable_peripheral_interrupt+0x64>)
  403188:	4798      	blx	r3
}
  40318a:	b003      	add	sp, #12
  40318c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40318e:	f004 040f 	and.w	r4, r4, #15
  403192:	016d      	lsls	r5, r5, #5
  403194:	4b05      	ldr	r3, [pc, #20]	; (4031ac <interrupt_enable_peripheral_interrupt+0x68>)
  403196:	b2ed      	uxtb	r5, r5
  403198:	4423      	add	r3, r4
  40319a:	761d      	strb	r5, [r3, #24]
  40319c:	e7f2      	b.n	403184 <interrupt_enable_peripheral_interrupt+0x40>
  40319e:	bf00      	nop
  4031a0:	00402485 	.word	0x00402485
  4031a4:	e000e100 	.word	0xe000e100
  4031a8:	00402495 	.word	0x00402495
  4031ac:	e000ecfc 	.word	0xe000ecfc

004031b0 <interrupt_global_disable>:
  __ASM volatile ("cpsid i" : : : "memory");
  4031b0:	b672      	cpsid	i
  4031b2:	4770      	bx	lr

004031b4 <matrix_write_protection_disable>:

//--------------------------------------------------------------------------------------------------//


void matrix_write_protection_disable(Matrix* hardware)
{
  4031b4:	b510      	push	{r4, lr}
  4031b6:	b082      	sub	sp, #8
  4031b8:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  4031ba:	4b05      	ldr	r3, [pc, #20]	; (4031d0 <matrix_write_protection_disable+0x1c>)
  4031bc:	a801      	add	r0, sp, #4
  4031be:	4798      	blx	r3
	hardware->MATRIX_WPMR = (MATRIX_WPMR_WPKEY_PASSWD_Val << MATRIX_WPMR_WPKEY_Pos);
  4031c0:	4a04      	ldr	r2, [pc, #16]	; (4031d4 <matrix_write_protection_disable+0x20>)
	CRITICAL_SECTION_LEAVE()
  4031c2:	a801      	add	r0, sp, #4
  4031c4:	4b04      	ldr	r3, [pc, #16]	; (4031d8 <matrix_write_protection_disable+0x24>)
	hardware->MATRIX_WPMR = (MATRIX_WPMR_WPKEY_PASSWD_Val << MATRIX_WPMR_WPKEY_Pos);
  4031c6:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
	CRITICAL_SECTION_LEAVE()
  4031ca:	4798      	blx	r3
}
  4031cc:	b002      	add	sp, #8
  4031ce:	bd10      	pop	{r4, pc}
  4031d0:	00402485 	.word	0x00402485
  4031d4:	4d415400 	.word	0x4d415400
  4031d8:	00402495 	.word	0x00402495

004031dc <matrix_write_flash_chip_select_configuration_register>:
void matrix_write_flash_chip_select_configuration_register(	Matrix* hardware,
															matrix_chip_select_1_e assign_cs1,
															uint8_t assign_cs2_flash,
															uint8_t assign_cs3_flash,
															uint8_t assign_cs0_flash)
{
  4031dc:	b530      	push	{r4, r5, lr}
  4031de:	b083      	sub	sp, #12
	uint32_t tmp_reg =	((0b1 & assign_cs0_flash) << CCFG_SMCNFCS_SMC_NFCS0_Pos) |
	((0b1 & assign_cs2_flash) << CCFG_SMCNFCS_SMC_NFCS2_Pos) |
  4031e0:	0092      	lsls	r2, r2, #2
	((0b1 & assign_cs3_flash) << CCFG_SMCNFCS_SMC_NFCS3_Pos);
  4031e2:	00db      	lsls	r3, r3, #3
{
  4031e4:	4605      	mov	r5, r0
  4031e6:	f89d 4018 	ldrb.w	r4, [sp, #24]
	((0b1 & assign_cs2_flash) << CCFG_SMCNFCS_SMC_NFCS2_Pos) |
  4031ea:	f002 0204 	and.w	r2, r2, #4
	((0b1 & assign_cs3_flash) << CCFG_SMCNFCS_SMC_NFCS3_Pos);
  4031ee:	f003 0308 	and.w	r3, r3, #8
	uint32_t tmp_reg =	((0b1 & assign_cs0_flash) << CCFG_SMCNFCS_SMC_NFCS0_Pos) |
  4031f2:	f004 0401 	and.w	r4, r4, #1
  4031f6:	4322      	orrs	r2, r4
	((0b1 & assign_cs2_flash) << CCFG_SMCNFCS_SMC_NFCS2_Pos) |
  4031f8:	ea42 0403 	orr.w	r4, r2, r3
	
	if (assign_cs1 == MATRIX_CS_SDRAM)
  4031fc:	b169      	cbz	r1, 40321a <matrix_write_flash_chip_select_configuration_register+0x3e>
	{
		tmp_reg |= (1 << CCFG_SMCNFCS_SDRAMEN_Pos);
	}
	else if (assign_cs1 == MATRIX_CS_NAND_FLASH)
  4031fe:	2901      	cmp	r1, #1
	{
		tmp_reg |= (1 << CCFG_SMCNFCS_SMC_NFCS1_Pos);
  403200:	bf08      	it	eq
  403202:	f044 0402 	orreq.w	r4, r4, #2
	}
	
	CRITICAL_SECTION_ENTER()
  403206:	a801      	add	r0, sp, #4
  403208:	4b05      	ldr	r3, [pc, #20]	; (403220 <matrix_write_flash_chip_select_configuration_register+0x44>)
  40320a:	4798      	blx	r3
	hardware->CCFG_SMCNFCS = tmp_reg;
	CRITICAL_SECTION_LEAVE()
  40320c:	a801      	add	r0, sp, #4
  40320e:	4b05      	ldr	r3, [pc, #20]	; (403224 <matrix_write_flash_chip_select_configuration_register+0x48>)
	hardware->CCFG_SMCNFCS = tmp_reg;
  403210:	f8c5 4124 	str.w	r4, [r5, #292]	; 0x124
	CRITICAL_SECTION_LEAVE()
  403214:	4798      	blx	r3
}
  403216:	b003      	add	sp, #12
  403218:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= (1 << CCFG_SMCNFCS_SDRAMEN_Pos);
  40321a:	f044 0410 	orr.w	r4, r4, #16
  40321e:	e7f2      	b.n	403206 <matrix_write_flash_chip_select_configuration_register+0x2a>
  403220:	00402485 	.word	0x00402485
  403224:	00402495 	.word	0x00402495

00403228 <systick_config>:

//--------------------------------------------------------------------------------------------------//


void systick_config(void)
{
  403228:	b510      	push	{r4, lr}
  40322a:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER()
  40322c:	4b06      	ldr	r3, [pc, #24]	; (403248 <systick_config+0x20>)
	
	SysTick->LOAD = ((SYSTICK_FREQUENCY / 1000) << SysTick_LOAD_RELOAD_Pos);
  40322e:	4c07      	ldr	r4, [pc, #28]	; (40324c <systick_config+0x24>)
	CRITICAL_SECTION_ENTER()
  403230:	a801      	add	r0, sp, #4
  403232:	4798      	blx	r3
	SysTick->LOAD = ((SYSTICK_FREQUENCY / 1000) << SysTick_LOAD_RELOAD_Pos);
  403234:	4b06      	ldr	r3, [pc, #24]	; (403250 <systick_config+0x28>)
	SysTick->CTRL =	(1 << SysTick_CTRL_ENABLE_Pos) |
  403236:	2107      	movs	r1, #7
	(1 << SysTick_CTRL_TICKINT_Pos) |
	(1 << SysTick_CTRL_CLKSOURCE_Pos);
	
	CRITICAL_SECTION_LEAVE()
  403238:	a801      	add	r0, sp, #4
  40323a:	4a06      	ldr	r2, [pc, #24]	; (403254 <systick_config+0x2c>)
	SysTick->LOAD = ((SYSTICK_FREQUENCY / 1000) << SysTick_LOAD_RELOAD_Pos);
  40323c:	605c      	str	r4, [r3, #4]
	SysTick->CTRL =	(1 << SysTick_CTRL_ENABLE_Pos) |
  40323e:	6019      	str	r1, [r3, #0]
	CRITICAL_SECTION_LEAVE()
  403240:	4790      	blx	r2
}
  403242:	b002      	add	sp, #8
  403244:	bd10      	pop	{r4, pc}
  403246:	bf00      	nop
  403248:	00402485 	.word	0x00402485
  40324c:	000493e0 	.word	0x000493e0
  403250:	e000e010 	.word	0xe000e010
  403254:	00402495 	.word	0x00402495

00403258 <systick_disable>:

//--------------------------------------------------------------------------------------------------//


void systick_disable(void)
{
  403258:	b500      	push	{lr}
  40325a:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER()
  40325c:	4b06      	ldr	r3, [pc, #24]	; (403278 <systick_disable+0x20>)
  40325e:	a801      	add	r0, sp, #4
  403260:	4798      	blx	r3
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
  403262:	4a06      	ldr	r2, [pc, #24]	; (40327c <systick_disable+0x24>)
	CRITICAL_SECTION_LEAVE()
  403264:	a801      	add	r0, sp, #4
  403266:	4906      	ldr	r1, [pc, #24]	; (403280 <systick_disable+0x28>)
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
  403268:	6813      	ldr	r3, [r2, #0]
  40326a:	f023 0301 	bic.w	r3, r3, #1
  40326e:	6013      	str	r3, [r2, #0]
	CRITICAL_SECTION_LEAVE()
  403270:	4788      	blx	r1
}
  403272:	b003      	add	sp, #12
  403274:	f85d fb04 	ldr.w	pc, [sp], #4
  403278:	00402485 	.word	0x00402485
  40327c:	e000e010 	.word	0xe000e010
  403280:	00402495 	.word	0x00402495

00403284 <systick_set_reload_value>:

//--------------------------------------------------------------------------------------------------//


void systick_set_reload_value(uint32_t value)
{
  403284:	b510      	push	{r4, lr}
  403286:	b082      	sub	sp, #8
  403288:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  40328a:	4b05      	ldr	r3, [pc, #20]	; (4032a0 <systick_set_reload_value+0x1c>)
  40328c:	a801      	add	r0, sp, #4
  40328e:	4798      	blx	r3
	SysTick->LOAD = value;
  403290:	4a04      	ldr	r2, [pc, #16]	; (4032a4 <systick_set_reload_value+0x20>)
	CRITICAL_SECTION_LEAVE()
  403292:	a801      	add	r0, sp, #4
  403294:	4b04      	ldr	r3, [pc, #16]	; (4032a8 <systick_set_reload_value+0x24>)
	SysTick->LOAD = value;
  403296:	6054      	str	r4, [r2, #4]
	CRITICAL_SECTION_LEAVE()
  403298:	4798      	blx	r3
}
  40329a:	b002      	add	sp, #8
  40329c:	bd10      	pop	{r4, pc}
  40329e:	bf00      	nop
  4032a0:	00402485 	.word	0x00402485
  4032a4:	e000e010 	.word	0xe000e010
  4032a8:	00402495 	.word	0x00402495

004032ac <systick_set_counter_value>:

//--------------------------------------------------------------------------------------------------//


void systick_set_counter_value(uint32_t value)
{
  4032ac:	b510      	push	{r4, lr}
  4032ae:	b082      	sub	sp, #8
  4032b0:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  4032b2:	4b05      	ldr	r3, [pc, #20]	; (4032c8 <systick_set_counter_value+0x1c>)
  4032b4:	a801      	add	r0, sp, #4
  4032b6:	4798      	blx	r3
	SysTick->VAL = value;
  4032b8:	4a04      	ldr	r2, [pc, #16]	; (4032cc <systick_set_counter_value+0x20>)
	CRITICAL_SECTION_LEAVE()
  4032ba:	a801      	add	r0, sp, #4
  4032bc:	4b04      	ldr	r3, [pc, #16]	; (4032d0 <systick_set_counter_value+0x24>)
	SysTick->VAL = value;
  4032be:	6094      	str	r4, [r2, #8]
	CRITICAL_SECTION_LEAVE()
  4032c0:	4798      	blx	r3
}
  4032c2:	b002      	add	sp, #8
  4032c4:	bd10      	pop	{r4, pc}
  4032c6:	bf00      	nop
  4032c8:	00402485 	.word	0x00402485
  4032cc:	e000e010 	.word	0xe000e010
  4032d0:	00402495 	.word	0x00402495

004032d4 <systick_get_counter_value>:
//--------------------------------------------------------------------------------------------------//


uint32_t systick_get_counter_value(void)
{
	return SysTick->VAL;
  4032d4:	4b01      	ldr	r3, [pc, #4]	; (4032dc <systick_get_counter_value+0x8>)
  4032d6:	6898      	ldr	r0, [r3, #8]
}
  4032d8:	4770      	bx	lr
  4032da:	bf00      	nop
  4032dc:	e000e010 	.word	0xe000e010

004032e0 <systick_delay_milliseconds>:
//--------------------------------------------------------------------------------------------------//


static inline uint32_t get_cycles_ms(uint32_t ms, uint32_t frequency)
{
	return (ms * (frequency / 1000));
  4032e0:	4b11      	ldr	r3, [pc, #68]	; (403328 <systick_delay_milliseconds+0x48>)
		SysTick->LOAD = 0xffffff;
  4032e2:	4a12      	ldr	r2, [pc, #72]	; (40332c <systick_delay_milliseconds+0x4c>)
	return (ms * (frequency / 1000));
  4032e4:	fb03 f000 	mul.w	r0, r3, r0
			buf -= 0xffffff;
  4032e8:	4911      	ldr	r1, [pc, #68]	; (403330 <systick_delay_milliseconds+0x50>)

//--------------------------------------------------------------------------------------------------//


void systick_delay_milliseconds(uint16_t ms)
{
  4032ea:	b430      	push	{r4, r5}
		SysTick->LOAD = 0xffffff;
  4032ec:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
	uint8_t n = cycles >> 24;
  4032f0:	0e04      	lsrs	r4, r0, #24
	while (n--)
  4032f2:	3c01      	subs	r4, #1
  4032f4:	b2e4      	uxtb	r4, r4
  4032f6:	2cff      	cmp	r4, #255	; 0xff
  4032f8:	d00c      	beq.n	403314 <systick_delay_milliseconds+0x34>
		SysTick->LOAD = 0xffffff;
  4032fa:	6055      	str	r5, [r2, #4]
		SysTick->VAL = 0xffffff;
  4032fc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & (1 << SysTick_CTRL_COUNTFLAG_Pos)))
  4032fe:	6813      	ldr	r3, [r2, #0]
  403300:	03db      	lsls	r3, r3, #15
  403302:	d4f6      	bmi.n	4032f2 <systick_delay_milliseconds+0x12>
  403304:	6813      	ldr	r3, [r2, #0]
			buf -= 0xffffff;
  403306:	4408      	add	r0, r1
		while (!(SysTick->CTRL & (1 << SysTick_CTRL_COUNTFLAG_Pos)))
  403308:	03db      	lsls	r3, r3, #15
  40330a:	d5fb      	bpl.n	403304 <systick_delay_milliseconds+0x24>
	while (n--)
  40330c:	3c01      	subs	r4, #1
  40330e:	b2e4      	uxtb	r4, r4
  403310:	2cff      	cmp	r4, #255	; 0xff
  403312:	d1f2      	bne.n	4032fa <systick_delay_milliseconds+0x1a>
	SysTick->LOAD = buf;
  403314:	4b05      	ldr	r3, [pc, #20]	; (40332c <systick_delay_milliseconds+0x4c>)
	while (!(SysTick->CTRL & (1 << SysTick_CTRL_COUNTFLAG_Pos)))
  403316:	461a      	mov	r2, r3
	SysTick->LOAD = buf;
  403318:	6058      	str	r0, [r3, #4]
	SysTick->VAL = buf;
  40331a:	6098      	str	r0, [r3, #8]
	while (!(SysTick->CTRL & (1 << SysTick_CTRL_COUNTFLAG_Pos)))
  40331c:	6813      	ldr	r3, [r2, #0]
  40331e:	03db      	lsls	r3, r3, #15
  403320:	d5fc      	bpl.n	40331c <systick_delay_milliseconds+0x3c>
	systick_delay_cycles(get_cycles_ms(ms, SYSTICK_FREQUENCY));
}
  403322:	bc30      	pop	{r4, r5}
  403324:	4770      	bx	lr
  403326:	bf00      	nop
  403328:	000493e0 	.word	0x000493e0
  40332c:	e000e010 	.word	0xe000e010
  403330:	ff000001 	.word	0xff000001

00403334 <timer_clock_enable>:

//--------------------------------------------------------------------------------------------------//


void timer_clock_enable(Tc* hardware, timer_channel_e channel)
{
  403334:	b530      	push	{r4, r5, lr}
  403336:	b083      	sub	sp, #12
  403338:	460c      	mov	r4, r1
  40333a:	4605      	mov	r5, r0
	CRITICAL_SECTION_ENTER()
  40333c:	4b05      	ldr	r3, [pc, #20]	; (403354 <timer_clock_enable+0x20>)
  40333e:	a801      	add	r0, sp, #4
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_CLKEN_Pos);
  403340:	01a4      	lsls	r4, r4, #6
	CRITICAL_SECTION_ENTER()
  403342:	4798      	blx	r3
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_CLKEN_Pos);
  403344:	2201      	movs	r2, #1
	CRITICAL_SECTION_LEAVE()
  403346:	a801      	add	r0, sp, #4
  403348:	4b03      	ldr	r3, [pc, #12]	; (403358 <timer_clock_enable+0x24>)
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_CLKEN_Pos);
  40334a:	512a      	str	r2, [r5, r4]
	CRITICAL_SECTION_LEAVE()
  40334c:	4798      	blx	r3
}
  40334e:	b003      	add	sp, #12
  403350:	bd30      	pop	{r4, r5, pc}
  403352:	bf00      	nop
  403354:	00402485 	.word	0x00402485
  403358:	00402495 	.word	0x00402495

0040335c <timer_clock_disable>:

//--------------------------------------------------------------------------------------------------//


void timer_clock_disable(Tc* hardware, timer_channel_e channel)
{
  40335c:	b530      	push	{r4, r5, lr}
  40335e:	b083      	sub	sp, #12
  403360:	460c      	mov	r4, r1
  403362:	4605      	mov	r5, r0
	CRITICAL_SECTION_ENTER()
  403364:	4b05      	ldr	r3, [pc, #20]	; (40337c <timer_clock_disable+0x20>)
  403366:	a801      	add	r0, sp, #4
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_CLKDIS_Pos);
  403368:	01a4      	lsls	r4, r4, #6
	CRITICAL_SECTION_ENTER()
  40336a:	4798      	blx	r3
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_CLKDIS_Pos);
  40336c:	2202      	movs	r2, #2
	CRITICAL_SECTION_LEAVE()
  40336e:	a801      	add	r0, sp, #4
  403370:	4b03      	ldr	r3, [pc, #12]	; (403380 <timer_clock_disable+0x24>)
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_CLKDIS_Pos);
  403372:	512a      	str	r2, [r5, r4]
	CRITICAL_SECTION_LEAVE()
  403374:	4798      	blx	r3
}
  403376:	b003      	add	sp, #12
  403378:	bd30      	pop	{r4, r5, pc}
  40337a:	bf00      	nop
  40337c:	00402485 	.word	0x00402485
  403380:	00402495 	.word	0x00402495

00403384 <timer_software_trigger>:

//--------------------------------------------------------------------------------------------------//


void timer_software_trigger(Tc* hardware, timer_channel_e channel)
{
  403384:	b530      	push	{r4, r5, lr}
  403386:	b083      	sub	sp, #12
  403388:	460c      	mov	r4, r1
  40338a:	4605      	mov	r5, r0
	CRITICAL_SECTION_ENTER()
  40338c:	4b05      	ldr	r3, [pc, #20]	; (4033a4 <timer_software_trigger+0x20>)
  40338e:	a801      	add	r0, sp, #4
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_SWTRG_Pos);
  403390:	01a4      	lsls	r4, r4, #6
	CRITICAL_SECTION_ENTER()
  403392:	4798      	blx	r3
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_SWTRG_Pos);
  403394:	2204      	movs	r2, #4
	CRITICAL_SECTION_LEAVE()
  403396:	4b04      	ldr	r3, [pc, #16]	; (4033a8 <timer_software_trigger+0x24>)
  403398:	eb0d 0002 	add.w	r0, sp, r2
	hardware->TcChannel[channel].TC_CCR = (1 << TC_CCR_SWTRG_Pos);
  40339c:	512a      	str	r2, [r5, r4]
	CRITICAL_SECTION_LEAVE()
  40339e:	4798      	blx	r3
}
  4033a0:	b003      	add	sp, #12
  4033a2:	bd30      	pop	{r4, r5, pc}
  4033a4:	00402485 	.word	0x00402485
  4033a8:	00402495 	.word	0x00402495

004033ac <timer_write_protection_disable>:

//--------------------------------------------------------------------------------------------------//


void timer_write_protection_disable(Tc* hardware)
{
  4033ac:	b510      	push	{r4, lr}
  4033ae:	b082      	sub	sp, #8
  4033b0:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  4033b2:	4b05      	ldr	r3, [pc, #20]	; (4033c8 <timer_write_protection_disable+0x1c>)
  4033b4:	a801      	add	r0, sp, #4
  4033b6:	4798      	blx	r3
	hardware->TC_WPMR = (TC_WPMR_WPKEY_PASSWD_Val << TC_WPMR_WPKEY_Pos);
  4033b8:	4a04      	ldr	r2, [pc, #16]	; (4033cc <timer_write_protection_disable+0x20>)
	CRITICAL_SECTION_LEAVE()
  4033ba:	a801      	add	r0, sp, #4
  4033bc:	4b04      	ldr	r3, [pc, #16]	; (4033d0 <timer_write_protection_disable+0x24>)
	hardware->TC_WPMR = (TC_WPMR_WPKEY_PASSWD_Val << TC_WPMR_WPKEY_Pos);
  4033be:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	CRITICAL_SECTION_LEAVE()
  4033c2:	4798      	blx	r3
}
  4033c4:	b002      	add	sp, #8
  4033c6:	bd10      	pop	{r4, pc}
  4033c8:	00402485 	.word	0x00402485
  4033cc:	54494d00 	.word	0x54494d00
  4033d0:	00402495 	.word	0x00402495

004033d4 <timer_set_compare_c>:

//--------------------------------------------------------------------------------------------------//


void timer_set_compare_c(Tc* hardware, timer_channel_e channel, uint32_t value)
{
  4033d4:	b570      	push	{r4, r5, r6, lr}
  4033d6:	460e      	mov	r6, r1
  4033d8:	b082      	sub	sp, #8
  4033da:	4604      	mov	r4, r0
  4033dc:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
  4033de:	a801      	add	r0, sp, #4
  4033e0:	4b04      	ldr	r3, [pc, #16]	; (4033f4 <timer_set_compare_c+0x20>)
	hardware->TcChannel[channel].TC_RC = value;
  4033e2:	eb04 1486 	add.w	r4, r4, r6, lsl #6
	CRITICAL_SECTION_ENTER()
  4033e6:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
  4033e8:	a801      	add	r0, sp, #4
  4033ea:	4b03      	ldr	r3, [pc, #12]	; (4033f8 <timer_set_compare_c+0x24>)
	hardware->TcChannel[channel].TC_RC = value;
  4033ec:	61e5      	str	r5, [r4, #28]
	CRITICAL_SECTION_LEAVE()
  4033ee:	4798      	blx	r3
}
  4033f0:	b002      	add	sp, #8
  4033f2:	bd70      	pop	{r4, r5, r6, pc}
  4033f4:	00402485 	.word	0x00402485
  4033f8:	00402495 	.word	0x00402495

004033fc <timer_read_interrupt_status>:
//--------------------------------------------------------------------------------------------------//


uint32_t timer_read_interrupt_status(Tc* hardware, timer_channel_e channel)
{
	uint32_t tmp = hardware->TcChannel[channel].TC_SR;
  4033fc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  403400:	6a08      	ldr	r0, [r1, #32]
	
	return tmp;
}
  403402:	4770      	bx	lr

00403404 <timer_interrupt_enable>:

//--------------------------------------------------------------------------------------------------//


void timer_interrupt_enable(Tc* hardware, timer_channel_e channel, uint32_t interrupt_mask)
{
  403404:	b570      	push	{r4, r5, r6, lr}
  403406:	460e      	mov	r6, r1
  403408:	b082      	sub	sp, #8
  40340a:	4604      	mov	r4, r0
  40340c:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
  40340e:	a801      	add	r0, sp, #4
  403410:	4b04      	ldr	r3, [pc, #16]	; (403424 <timer_interrupt_enable+0x20>)
	hardware->TcChannel[channel].TC_IER = interrupt_mask;
  403412:	eb04 1486 	add.w	r4, r4, r6, lsl #6
	CRITICAL_SECTION_ENTER()
  403416:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
  403418:	a801      	add	r0, sp, #4
  40341a:	4b03      	ldr	r3, [pc, #12]	; (403428 <timer_interrupt_enable+0x24>)
	hardware->TcChannel[channel].TC_IER = interrupt_mask;
  40341c:	6265      	str	r5, [r4, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
  40341e:	4798      	blx	r3
}
  403420:	b002      	add	sp, #8
  403422:	bd70      	pop	{r4, r5, r6, pc}
  403424:	00402485 	.word	0x00402485
  403428:	00402495 	.word	0x00402495

0040342c <timer_capture_mode_config>:
								uint8_t reset_on_c_compare,
								uint8_t clock_stop_on_b_loading,
								uint8_t clock_disable_on_b_loading,
								timer_clock_invert_e clock_invert,
								timer_clock_source_e clock_source)
{
  40342c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40342e:	b083      	sub	sp, #12
  403430:	4605      	mov	r5, r0
  403432:	460e      	mov	r6, r1
  403434:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  403438:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
					(clock_disable_on_b_loading << TC_CMR_CAPTURE_LDBDIS_Pos) |
					(clock_invert << TC_CMR_CLKI_Pos) |
					(clock_source << TC_CMR_TCCLKS_Pos);
	
	CRITICAL_SECTION_ENTER()
	hardware->TcChannel[channel].TC_CMR = tmp;
  40343c:	eb05 1586 	add.w	r5, r5, r6, lsl #6
{
  403440:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
					(clock_invert << TC_CMR_CLKI_Pos) |
  403444:	ea44 04c7 	orr.w	r4, r4, r7, lsl #3
{
  403448:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
					(clock_invert << TC_CMR_CLKI_Pos) |
  40344c:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
{
  403450:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
					(clock_invert << TC_CMR_CLKI_Pos) |
  403454:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
{
  403458:	f89d 1020 	ldrb.w	r1, [sp, #32]
					(clock_invert << TC_CMR_CLKI_Pos) |
  40345c:	ea44 3480 	orr.w	r4, r4, r0, lsl #14
	CRITICAL_SECTION_ENTER()
  403460:	a801      	add	r0, sp, #4
					(clock_invert << TC_CMR_CLKI_Pos) |
  403462:	ea44 34c1 	orr.w	r4, r4, r1, lsl #15
	CRITICAL_SECTION_ENTER()
  403466:	4906      	ldr	r1, [pc, #24]	; (403480 <timer_capture_mode_config+0x54>)
					(clock_invert << TC_CMR_CLKI_Pos) |
  403468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  40346c:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
	CRITICAL_SECTION_ENTER()
  403470:	4788      	blx	r1
	CRITICAL_SECTION_LEAVE()
  403472:	a801      	add	r0, sp, #4
  403474:	4b03      	ldr	r3, [pc, #12]	; (403484 <timer_capture_mode_config+0x58>)
	hardware->TcChannel[channel].TC_CMR = tmp;
  403476:	606c      	str	r4, [r5, #4]
	CRITICAL_SECTION_LEAVE()
  403478:	4798      	blx	r3
}
  40347a:	b003      	add	sp, #12
  40347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40347e:	bf00      	nop
  403480:	00402485 	.word	0x00402485
  403484:	00402495 	.word	0x00402495

00403488 <usart_mode_config>:

//--------------------------------------------------------------------------------------------------//


void usart_mode_config(Usart* hardware, usart_stop_bits_e sp, usart_parity_e pb, usart_synchronous_mode_e sm, uint16_t cd_value)
{
  403488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40348c:	b089      	sub	sp, #36	; 0x24
  40348e:	4604      	mov	r4, r0
	// Disable USART write protection
	CRITICAL_SECTION_ENTER()
  403490:	4e23      	ldr	r6, [pc, #140]	; (403520 <usart_mode_config+0x98>)
{
  403492:	4689      	mov	r9, r1
	CRITICAL_SECTION_ENTER()
  403494:	a801      	add	r0, sp, #4
{
  403496:	4693      	mov	fp, r2
  403498:	461f      	mov	r7, r3
  40349a:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
	CRITICAL_SECTION_ENTER()
  40349e:	47b0      	blx	r6
	hardware->US_WPMR = (US_WPMR_WPKEY_Msk & (US_WPMR_WPKEY_PASSWD_Val << US_WPMR_WPKEY_Pos));
  4034a0:	4b20      	ldr	r3, [pc, #128]	; (403524 <usart_mode_config+0x9c>)
	CRITICAL_SECTION_LEAVE()
  4034a2:	4d21      	ldr	r5, [pc, #132]	; (403528 <usart_mode_config+0xa0>)
  4034a4:	a801      	add	r0, sp, #4
	hardware->US_WPMR = (US_WPMR_WPKEY_Msk & (US_WPMR_WPKEY_PASSWD_Val << US_WPMR_WPKEY_Pos));
  4034a6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	CRITICAL_SECTION_LEAVE()
	
	// Configure USART mode x16 oversampling
	uint32_t tmp_reg =	((uint8_t)sp << US_MR_USART_NBSTOP_Pos) |
						((uint8_t)pb << US_MR_USART_PAR_Pos) |
						((uint8_t)sm << US_MR_USART_SYNC_Pos) |
  4034aa:	023f      	lsls	r7, r7, #8
	CRITICAL_SECTION_LEAVE()
  4034ac:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER()
  4034ae:	a802      	add	r0, sp, #8
  4034b0:	47b0      	blx	r6
	hardware->US_MR = 0x0;
  4034b2:	2300      	movs	r3, #0
	CRITICAL_SECTION_LEAVE()
  4034b4:	a802      	add	r0, sp, #8
	uint32_t tmp_reg =	((uint8_t)sp << US_MR_USART_NBSTOP_Pos) |
  4034b6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 40352c <usart_mode_config+0xa4>
	hardware->US_MR = 0x0;
  4034ba:	6063      	str	r3, [r4, #4]
	hardware->US_RTOR = 0x0;
  4034bc:	6263      	str	r3, [r4, #36]	; 0x24
	hardware->US_TTGR = 0x0;
  4034be:	62a3      	str	r3, [r4, #40]	; 0x28
	CRITICAL_SECTION_LEAVE()
  4034c0:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER()
  4034c2:	a803      	add	r0, sp, #12
  4034c4:	47b0      	blx	r6
	hardware->US_CR =	(1 << US_CR_RSTRX_Pos) | (1 << US_CR_RSTTX_Pos) | (1 << US_CR_TXDIS_Pos) | (1 << US_CR_RXDIS_Pos);
  4034c6:	23ac      	movs	r3, #172	; 0xac
	CRITICAL_SECTION_LEAVE()
  4034c8:	a803      	add	r0, sp, #12
	hardware->US_CR =	(1 << US_CR_RSTRX_Pos) | (1 << US_CR_RSTTX_Pos) | (1 << US_CR_TXDIS_Pos) | (1 << US_CR_RXDIS_Pos);
  4034ca:	6023      	str	r3, [r4, #0]
	CRITICAL_SECTION_LEAVE()
  4034cc:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER()
  4034ce:	a804      	add	r0, sp, #16
  4034d0:	47b0      	blx	r6
	hardware->US_CR |= (1 << US_CR_RSTSTA_Pos);
  4034d2:	6823      	ldr	r3, [r4, #0]
	CRITICAL_SECTION_LEAVE()
  4034d4:	a804      	add	r0, sp, #16
	hardware->US_CR |= (1 << US_CR_RSTSTA_Pos);
  4034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4034da:	6023      	str	r3, [r4, #0]
	CRITICAL_SECTION_LEAVE()
  4034dc:	47a8      	blx	r5
	CRITICAL_SECTION_ENTER()
  4034de:	a805      	add	r0, sp, #20
  4034e0:	47b0      	blx	r6
	hardware->US_CR |= (1 << US_CR_USART_RTSDIS_Pos);
  4034e2:	6823      	ldr	r3, [r4, #0]
	CRITICAL_SECTION_LEAVE()
  4034e4:	a805      	add	r0, sp, #20
	hardware->US_CR |= (1 << US_CR_USART_RTSDIS_Pos);
  4034e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4034ea:	6023      	str	r3, [r4, #0]
	CRITICAL_SECTION_LEAVE()
  4034ec:	47a8      	blx	r5
						(1 << US_MR_USART_INACK_Pos) |
						(US_MR_CHRL_8_BIT_Val << US_MR_CHRL_Pos);
	
	CRITICAL_SECTION_ENTER()
  4034ee:	a806      	add	r0, sp, #24
						((uint8_t)pb << US_MR_USART_PAR_Pos) |
  4034f0:	ea47 224b 	orr.w	r2, r7, fp, lsl #9
  4034f4:	ea42 3109 	orr.w	r1, r2, r9, lsl #12
	uint32_t tmp_reg =	((uint8_t)sp << US_MR_USART_NBSTOP_Pos) |
  4034f8:	ea41 0808 	orr.w	r8, r1, r8
	CRITICAL_SECTION_ENTER()
  4034fc:	47b0      	blx	r6
	hardware->US_MR = tmp_reg;
	CRITICAL_SECTION_LEAVE()
  4034fe:	a806      	add	r0, sp, #24
	hardware->US_MR = tmp_reg;
  403500:	f8c4 8004 	str.w	r8, [r4, #4]
	CRITICAL_SECTION_LEAVE()
  403504:	47a8      	blx	r5
	
	// Configure USART baud rate register (OVER = 0)
	CRITICAL_SECTION_ENTER()
  403506:	a807      	add	r0, sp, #28
  403508:	47b0      	blx	r6
	hardware->US_BRGR = (US_BRGR_CD_Msk & (cd_value << US_BRGR_CD_Pos));
  40350a:	f8c4 a020 	str.w	sl, [r4, #32]
	CRITICAL_SECTION_LEAVE()
  40350e:	a807      	add	r0, sp, #28
  403510:	47a8      	blx	r5
	
	// Enable receiver and transmitter
	hardware->US_CR |= (1 << US_CR_TXEN_Pos) | (1 << US_CR_RXEN_Pos);
  403512:	6823      	ldr	r3, [r4, #0]
  403514:	f043 0350 	orr.w	r3, r3, #80	; 0x50
  403518:	6023      	str	r3, [r4, #0]
}
  40351a:	b009      	add	sp, #36	; 0x24
  40351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403520:	00402485 	.word	0x00402485
  403524:	55534100 	.word	0x55534100
  403528:	00402495 	.word	0x00402495
  40352c:	001000c0 	.word	0x001000c0

00403530 <usart_interrupt_enable>:

//--------------------------------------------------------------------------------------------------//


void usart_interrupt_enable(Usart* hardware, uint32_t interrupt_mask)
{
  403530:	b530      	push	{r4, r5, lr}
  403532:	b083      	sub	sp, #12
  403534:	460d      	mov	r5, r1
  403536:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  403538:	4b04      	ldr	r3, [pc, #16]	; (40354c <usart_interrupt_enable+0x1c>)
  40353a:	a801      	add	r0, sp, #4
  40353c:	4798      	blx	r3
	hardware->US_IER = interrupt_mask;
	CRITICAL_SECTION_LEAVE()
  40353e:	a801      	add	r0, sp, #4
  403540:	4b03      	ldr	r3, [pc, #12]	; (403550 <usart_interrupt_enable+0x20>)
	hardware->US_IER = interrupt_mask;
  403542:	60a5      	str	r5, [r4, #8]
	CRITICAL_SECTION_LEAVE()
  403544:	4798      	blx	r3
}
  403546:	b003      	add	sp, #12
  403548:	bd30      	pop	{r4, r5, pc}
  40354a:	bf00      	nop
  40354c:	00402485 	.word	0x00402485
  403550:	00402495 	.word	0x00402495

00403554 <usart_write>:
//--------------------------------------------------------------------------------------------------//


void usart_write(Usart* hardware, char data)
{
	hardware->US_THR = data;
  403554:	61c1      	str	r1, [r0, #28]
	
	//wait for data to be shifted out
	while (!(hardware->US_CSR & (1 << US_CSR_TXRDY_Pos)))
  403556:	6943      	ldr	r3, [r0, #20]
  403558:	079b      	lsls	r3, r3, #30
  40355a:	d5fc      	bpl.n	403556 <usart_write+0x2>
	{
		
	}
}
  40355c:	4770      	bx	lr
  40355e:	bf00      	nop

00403560 <usart_read>:
//--------------------------------------------------------------------------------------------------//


char usart_read(Usart* hardware)
{
	uint8_t data = (uint8_t)hardware->US_RHR;
  403560:	6980      	ldr	r0, [r0, #24]

	return data;
}
  403562:	b2c0      	uxtb	r0, r0
  403564:	4770      	bx	lr
  403566:	bf00      	nop

00403568 <usbhs_global_unfreeze_clock>:

//--------------------------------------------------------------------------------------------------//


void usbhs_global_unfreeze_clock(void)
{
  403568:	b500      	push	{lr}
  40356a:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER()
  40356c:	4b07      	ldr	r3, [pc, #28]	; (40358c <usbhs_global_unfreeze_clock+0x24>)
  40356e:	a801      	add	r0, sp, #4
  403570:	4798      	blx	r3
	USBHS->USBHS_CTRL &= ~(1 << USBHS_CTRL_FRZCLK_Pos);
  403572:	4a07      	ldr	r2, [pc, #28]	; (403590 <usbhs_global_unfreeze_clock+0x28>)
	CRITICAL_SECTION_LEAVE()
  403574:	a801      	add	r0, sp, #4
  403576:	4907      	ldr	r1, [pc, #28]	; (403594 <usbhs_global_unfreeze_clock+0x2c>)
	USBHS->USBHS_CTRL &= ~(1 << USBHS_CTRL_FRZCLK_Pos);
  403578:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  40357c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  403580:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	CRITICAL_SECTION_LEAVE()
  403584:	4788      	blx	r1
}
  403586:	b003      	add	sp, #12
  403588:	f85d fb04 	ldr.w	pc, [sp], #4
  40358c:	00402485 	.word	0x00402485
  403590:	40038000 	.word	0x40038000
  403594:	00402495 	.word	0x00402495

00403598 <usbhs_global_send_vbus_request>:

//--------------------------------------------------------------------------------------------------//


void usbhs_global_send_vbus_request(void)
{
  403598:	b500      	push	{lr}
  40359a:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER()
  40359c:	4b06      	ldr	r3, [pc, #24]	; (4035b8 <usbhs_global_send_vbus_request+0x20>)
  40359e:	a801      	add	r0, sp, #4
  4035a0:	4798      	blx	r3
	USBHS->USBHS_SFR = (1 << USBHS_SFR_VBUSRQS_Pos);
  4035a2:	4a06      	ldr	r2, [pc, #24]	; (4035bc <usbhs_global_send_vbus_request+0x24>)
  4035a4:	f44f 7100 	mov.w	r1, #512	; 0x200
	CRITICAL_SECTION_LEAVE()
  4035a8:	a801      	add	r0, sp, #4
  4035aa:	4b05      	ldr	r3, [pc, #20]	; (4035c0 <usbhs_global_send_vbus_request+0x28>)
	USBHS->USBHS_SFR = (1 << USBHS_SFR_VBUSRQS_Pos);
  4035ac:	f8c2 180c 	str.w	r1, [r2, #2060]	; 0x80c
	CRITICAL_SECTION_LEAVE()
  4035b0:	4798      	blx	r3
}
  4035b2:	b003      	add	sp, #12
  4035b4:	f85d fb04 	ldr.w	pc, [sp], #4
  4035b8:	00402485 	.word	0x00402485
  4035bc:	40038000 	.word	0x40038000
  4035c0:	00402495 	.word	0x00402495

004035c4 <usbhs_global_clock_usable>:
//--------------------------------------------------------------------------------------------------//


uint8_t usbhs_global_clock_usable(void)
{
	if (USBHS->USBHS_SR & (1 << USBHS_SR_CLKUSABLE_Pos))
  4035c4:	4b02      	ldr	r3, [pc, #8]	; (4035d0 <usbhs_global_clock_usable+0xc>)
  4035c6:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
	}
	else
	{
		return 0;
	}
}
  4035ca:	f3c0 3080 	ubfx	r0, r0, #14, #1
  4035ce:	4770      	bx	lr
  4035d0:	40038000 	.word	0x40038000

004035d4 <usbhs_host_send_reset>:

//--------------------------------------------------------------------------------------------------//


void usbhs_host_send_reset(void)
{
  4035d4:	b500      	push	{lr}
  4035d6:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER()
  4035d8:	4b07      	ldr	r3, [pc, #28]	; (4035f8 <usbhs_host_send_reset+0x24>)
  4035da:	a801      	add	r0, sp, #4
  4035dc:	4798      	blx	r3
	USBHS->USBHS_HSTCTRL |= (1 << USBHS_HSTCTRL_RESET_Pos);
  4035de:	4a07      	ldr	r2, [pc, #28]	; (4035fc <usbhs_host_send_reset+0x28>)
	CRITICAL_SECTION_LEAVE()
  4035e0:	a801      	add	r0, sp, #4
  4035e2:	4907      	ldr	r1, [pc, #28]	; (403600 <usbhs_host_send_reset+0x2c>)
	USBHS->USBHS_HSTCTRL |= (1 << USBHS_HSTCTRL_RESET_Pos);
  4035e4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  4035e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4035ec:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
	CRITICAL_SECTION_LEAVE()
  4035f0:	4788      	blx	r1
}
  4035f2:	b003      	add	sp, #12
  4035f4:	f85d fb04 	ldr.w	pc, [sp], #4
  4035f8:	00402485 	.word	0x00402485
  4035fc:	40038000 	.word	0x40038000
  403600:	00402495 	.word	0x00402495

00403604 <usbhs_host_get_interrupt_status_register>:
//--------------------------------------------------------------------------------------------------//


uint32_t usbhs_host_get_interrupt_status_register(void)
{
	uint32_t tmp = USBHS->USBHS_HSTISR;
  403604:	4b01      	ldr	r3, [pc, #4]	; (40360c <usbhs_host_get_interrupt_status_register+0x8>)
  403606:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
	
	return tmp;
}
  40360a:	4770      	bx	lr
  40360c:	40038000 	.word	0x40038000

00403610 <usbhs_host_get_interrupt_mask>:
//--------------------------------------------------------------------------------------------------//


uint32_t usbhs_host_get_interrupt_mask(void)
{
	uint32_t tmp = USBHS->USBHS_HSTIMR;
  403610:	4b01      	ldr	r3, [pc, #4]	; (403618 <usbhs_host_get_interrupt_mask+0x8>)
  403612:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
	
	return tmp;
}
  403616:	4770      	bx	lr
  403618:	40038000 	.word	0x40038000

0040361c <usbhs_host_interrupt_clear>:

//--------------------------------------------------------------------------------------------------//


void usbhs_host_interrupt_clear(uint32_t mask)
{
  40361c:	b510      	push	{r4, lr}
  40361e:	b082      	sub	sp, #8
  403620:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  403622:	4b05      	ldr	r3, [pc, #20]	; (403638 <usbhs_host_interrupt_clear+0x1c>)
  403624:	a801      	add	r0, sp, #4
  403626:	4798      	blx	r3
	USBHS->USBHS_HSTICR = mask;
  403628:	4a04      	ldr	r2, [pc, #16]	; (40363c <usbhs_host_interrupt_clear+0x20>)
	CRITICAL_SECTION_LEAVE()
  40362a:	a801      	add	r0, sp, #4
  40362c:	4b04      	ldr	r3, [pc, #16]	; (403640 <usbhs_host_interrupt_clear+0x24>)
	USBHS->USBHS_HSTICR = mask;
  40362e:	f8c2 4408 	str.w	r4, [r2, #1032]	; 0x408
	CRITICAL_SECTION_LEAVE()
  403632:	4798      	blx	r3
}
  403634:	b002      	add	sp, #8
  403636:	bd10      	pop	{r4, pc}
  403638:	00402485 	.word	0x00402485
  40363c:	40038000 	.word	0x40038000
  403640:	00402495 	.word	0x00402495

00403644 <usbhs_host_interrupt_disable>:

//--------------------------------------------------------------------------------------------------//


void usbhs_host_interrupt_disable(uint32_t mask)
{
  403644:	b510      	push	{r4, lr}
  403646:	b082      	sub	sp, #8
  403648:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  40364a:	4b05      	ldr	r3, [pc, #20]	; (403660 <usbhs_host_interrupt_disable+0x1c>)
  40364c:	a801      	add	r0, sp, #4
  40364e:	4798      	blx	r3
	USBHS->USBHS_HSTIDR = mask;
  403650:	4a04      	ldr	r2, [pc, #16]	; (403664 <usbhs_host_interrupt_disable+0x20>)
	CRITICAL_SECTION_LEAVE()
  403652:	a801      	add	r0, sp, #4
  403654:	4b04      	ldr	r3, [pc, #16]	; (403668 <usbhs_host_interrupt_disable+0x24>)
	USBHS->USBHS_HSTIDR = mask;
  403656:	f8c2 4414 	str.w	r4, [r2, #1044]	; 0x414
	CRITICAL_SECTION_LEAVE()
  40365a:	4798      	blx	r3
}
  40365c:	b002      	add	sp, #8
  40365e:	bd10      	pop	{r4, pc}
  403660:	00402485 	.word	0x00402485
  403664:	40038000 	.word	0x40038000
  403668:	00402495 	.word	0x00402495

0040366c <usbhs_host_interrupt_enable>:

//--------------------------------------------------------------------------------------------------//


void usbhs_host_interrupt_enable(uint32_t mask)
{
  40366c:	b510      	push	{r4, lr}
  40366e:	b082      	sub	sp, #8
  403670:	4604      	mov	r4, r0
	CRITICAL_SECTION_ENTER()
  403672:	4b05      	ldr	r3, [pc, #20]	; (403688 <usbhs_host_interrupt_enable+0x1c>)
  403674:	a801      	add	r0, sp, #4
  403676:	4798      	blx	r3
	USBHS->USBHS_HSTIER = mask;
  403678:	4a04      	ldr	r2, [pc, #16]	; (40368c <usbhs_host_interrupt_enable+0x20>)
	CRITICAL_SECTION_LEAVE()
  40367a:	a801      	add	r0, sp, #4
  40367c:	4b04      	ldr	r3, [pc, #16]	; (403690 <usbhs_host_interrupt_enable+0x24>)
	USBHS->USBHS_HSTIER = mask;
  40367e:	f8c2 4418 	str.w	r4, [r2, #1048]	; 0x418
	CRITICAL_SECTION_LEAVE()
  403682:	4798      	blx	r3
}
  403684:	b002      	add	sp, #8
  403686:	bd10      	pop	{r4, pc}
  403688:	00402485 	.word	0x00402485
  40368c:	40038000 	.word	0x40038000
  403690:	00402495 	.word	0x00402495

00403694 <watchdog_disable>:

//--------------------------------------------------------------------------------------------------//


void watchdog_disable(void)
{
  403694:	b500      	push	{lr}
  403696:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER()
  403698:	4b06      	ldr	r3, [pc, #24]	; (4036b4 <watchdog_disable+0x20>)
  40369a:	a801      	add	r0, sp, #4
  40369c:	4798      	blx	r3
	WDT->WDT_MR |= (1 << WDT_MR_WDDIS_Pos);
  40369e:	4a06      	ldr	r2, [pc, #24]	; (4036b8 <watchdog_disable+0x24>)
	CRITICAL_SECTION_LEAVE()
  4036a0:	a801      	add	r0, sp, #4
  4036a2:	4906      	ldr	r1, [pc, #24]	; (4036bc <watchdog_disable+0x28>)
	WDT->WDT_MR |= (1 << WDT_MR_WDDIS_Pos);
  4036a4:	6853      	ldr	r3, [r2, #4]
  4036a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4036aa:	6053      	str	r3, [r2, #4]
	CRITICAL_SECTION_LEAVE()
  4036ac:	4788      	blx	r1
}
  4036ae:	b003      	add	sp, #12
  4036b0:	f85d fb04 	ldr.w	pc, [sp], #4
  4036b4:	00402485 	.word	0x00402485
  4036b8:	400e1850 	.word	0x400e1850
  4036bc:	00402495 	.word	0x00402495

004036c0 <get_fileinfo>:
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
  4036c0:	2200      	movs	r2, #0
{
  4036c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
  4036c6:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;			/* Invaidate file info */
  4036c8:	758a      	strb	r2, [r1, #22]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
  4036ca:	6983      	ldr	r3, [r0, #24]
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	f000 80a2 	beq.w	403816 <get_fileinfo+0x156>
		get_xfileinfo(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
  4036d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4036d4:	3301      	adds	r3, #1
  4036d6:	d02e      	beq.n	403736 <get_fileinfo+0x76>
  4036d8:	463b      	mov	r3, r7
  4036da:	68fe      	ldr	r6, [r7, #12]
	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
  4036dc:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 403990 <get_fileinfo+0x2d0>
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
  4036e0:	f240 3aff 	movw	sl, #1023	; 0x3ff
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
  4036e4:	4614      	mov	r4, r2
  4036e6:	4617      	mov	r7, r2
  4036e8:	469e      	mov	lr, r3
  4036ea:	e001      	b.n	4036f0 <get_fileinfo+0x30>
  4036ec:	461f      	mov	r7, r3
  4036ee:	3202      	adds	r2, #2
			si = di = hs = 0;
			while (fs->lfnbuf[si] != 0) {
  4036f0:	5ab3      	ldrh	r3, [r6, r2]
  4036f2:	2b00      	cmp	r3, #0
  4036f4:	f000 80fc 	beq.w	4038f0 <get_fileinfo+0x230>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
  4036f8:	b92f      	cbnz	r7, 403706 <get_fileinfo+0x46>
  4036fa:	f503 5520 	add.w	r5, r3, #10240	; 0x2800
  4036fe:	b2ad      	uxth	r5, r5
  403700:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  403704:	d3f2      	bcc.n	4036ec <get_fileinfo+0x2c>
					hs = wc; continue;		/* Get low surrogate */
				}
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
  403706:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  40370a:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
	if (chr < 0x80) {	/* Single byte code? */
  40370e:	2b7f      	cmp	r3, #127	; 0x7f
  403710:	f200 8094 	bhi.w	40383c <get_fileinfo+0x17c>
		if (szb < 1) return 0;	/* Buffer overflow? */
  403714:	b13e      	cbz	r6, 403726 <get_fileinfo+0x66>
		*buf = (TCHAR)chr;
  403716:	190e      	adds	r6, r1, r4
  403718:	2501      	movs	r5, #1
  40371a:	75b3      	strb	r3, [r6, #22]
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
				di += wc;
  40371c:	442c      	add	r4, r5
  40371e:	f8de 600c 	ldr.w	r6, [lr, #12]
				hs = 0;
  403722:	2700      	movs	r7, #0
  403724:	e7e3      	b.n	4036ee <get_fileinfo+0x2e>
  403726:	46be      	mov	lr, r7
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
  403728:	2300      	movs	r3, #0
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
  40372a:	f1be 0f00 	cmp.w	lr, #0
  40372e:	bf18      	it	ne
  403730:	461e      	movne	r6, r3
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
  403732:	440e      	add	r6, r1
  403734:	75b3      	strb	r3, [r6, #22]
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
  403736:	2500      	movs	r5, #0
  403738:	4688      	mov	r8, r1
  40373a:	4606      	mov	r6, r0
  40373c:	69c2      	ldr	r2, [r0, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
#if FF_LFN_UNICODE >= 1	/* Unicode output */
		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed */
			wc = wc << 8 | dp->dir[si++];
		}
		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
  40373e:	4f92      	ldr	r7, [pc, #584]	; (403988 <get_fileinfo+0x2c8>)
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
  403740:	462b      	mov	r3, r5
  403742:	e00b      	b.n	40375c <get_fileinfo+0x9c>
		if (szb < 1) return 0;	/* Buffer overflow? */
  403744:	2b00      	cmp	r3, #0
  403746:	d044      	beq.n	4037d2 <get_fileinfo+0x112>
		*buf = (TCHAR)chr;
  403748:	eb08 0305 	add.w	r3, r8, r5
  40374c:	2101      	movs	r1, #1
  40374e:	7258      	strb	r0, [r3, #9]
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
		di += wc;
  403750:	440d      	add	r5, r1
  403752:	69f2      	ldr	r2, [r6, #28]
	while (si < 11) {		/* Get SFN from SFN entry */
  403754:	2c0b      	cmp	r4, #11
  403756:	4623      	mov	r3, r4
  403758:	f000 80ec 	beq.w	403934 <get_fileinfo+0x274>
		wc = dp->dir[si++];			/* Get a char */
  40375c:	5cd0      	ldrb	r0, [r2, r3]
  40375e:	1c5c      	adds	r4, r3, #1
		if (wc == ' ') continue;	/* Skip padding spaces */
  403760:	2820      	cmp	r0, #32
  403762:	d0f7      	beq.n	403754 <get_fileinfo+0x94>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
  403764:	2805      	cmp	r0, #5
  403766:	bf08      	it	eq
  403768:	20e5      	moveq	r0, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
  40376a:	2c09      	cmp	r4, #9
  40376c:	d106      	bne.n	40377c <get_fileinfo+0xbc>
  40376e:	2d0b      	cmp	r5, #11
  403770:	d804      	bhi.n	40377c <get_fileinfo+0xbc>
  403772:	eb08 0305 	add.w	r3, r8, r5
  403776:	222e      	movs	r2, #46	; 0x2e
  403778:	3501      	adds	r5, #1
  40377a:	725a      	strb	r2, [r3, #9]
		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
  40377c:	f240 11b5 	movw	r1, #437	; 0x1b5
  403780:	47b8      	blx	r7
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
  403782:	2800      	cmp	r0, #0
  403784:	f000 809f 	beq.w	4038c6 <get_fileinfo+0x206>
	if (chr < 0x80) {	/* Single byte code? */
  403788:	287f      	cmp	r0, #127	; 0x7f
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
  40378a:	f1c5 030c 	rsb	r3, r5, #12
	if (chr < 0x80) {	/* Single byte code? */
  40378e:	d9d9      	bls.n	403744 <get_fileinfo+0x84>
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
  403790:	f105 0209 	add.w	r2, r5, #9
	if (chr < 0x800) {	/* 2-byte sequence? */
  403794:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
  403798:	4442      	add	r2, r8
	if (chr < 0x800) {	/* 2-byte sequence? */
  40379a:	d33e      	bcc.n	40381a <get_fileinfo+0x15a>
		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
  40379c:	2b02      	cmp	r3, #2
  40379e:	d918      	bls.n	4037d2 <get_fileinfo+0x112>
  4037a0:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
  4037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  4037a8:	d313      	bcc.n	4037d2 <get_fileinfo+0x112>
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
  4037aa:	ea4f 3e10 	mov.w	lr, r0, lsr #12
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  4037ae:	f3c0 1385 	ubfx	r3, r0, #6, #6
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  4037b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
  4037b6:	eb08 0105 	add.w	r1, r8, r5
  4037ba:	f06e 0e1f 	orn	lr, lr, #31
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  4037be:	f063 037f 	orn	r3, r3, #127	; 0x7f
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  4037c2:	f060 007f 	orn	r0, r0, #127	; 0x7f
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
  4037c6:	f881 e009 	strb.w	lr, [r1, #9]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  4037ca:	2103      	movs	r1, #3
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  4037cc:	7053      	strb	r3, [r2, #1]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  4037ce:	7090      	strb	r0, [r2, #2]
  4037d0:	e7be      	b.n	403750 <get_fileinfo+0x90>
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
  4037d2:	2200      	movs	r2, #0

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
  4037d4:	f898 3016 	ldrb.w	r3, [r8, #22]
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
  4037d8:	f888 2009 	strb.w	r2, [r8, #9]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
  4037dc:	2b00      	cmp	r3, #0
  4037de:	d078      	beq.n	4038d2 <get_fileinfo+0x212>
  4037e0:	69f2      	ldr	r2, [r6, #28]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
  4037e2:	7ad3      	ldrb	r3, [r2, #11]
  4037e4:	f888 3008 	strb.w	r3, [r8, #8]
	rv = rv << 8 | ptr[2];
  4037e8:	8bd0      	ldrh	r0, [r2, #30]
	rv = rv << 8 | ptr[1];
  4037ea:	7f51      	ldrb	r1, [r2, #29]
	rv = rv << 8 | ptr[0];
  4037ec:	7f13      	ldrb	r3, [r2, #28]
	rv = rv << 8 | ptr[1];
  4037ee:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
  4037f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
  4037f6:	f8c8 3000 	str.w	r3, [r8]
	rv = rv << 8 | ptr[0];
  4037fa:	7dd1      	ldrb	r1, [r2, #23]
  4037fc:	7d93      	ldrb	r3, [r2, #22]
  4037fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
  403802:	f8a8 3006 	strh.w	r3, [r8, #6]
	rv = rv << 8 | ptr[0];
  403806:	7e51      	ldrb	r1, [r2, #25]
  403808:	7e13      	ldrb	r3, [r2, #24]
  40380a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
  40380e:	f8a8 3004 	strh.w	r3, [r8, #4]
  403812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (szb < 2) return 0;	/* Buffer overflow? */
  40381a:	2b01      	cmp	r3, #1
  40381c:	d9d9      	bls.n	4037d2 <get_fileinfo+0x112>
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  40381e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403822:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  403826:	eb08 0305 	add.w	r3, r8, r5
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  40382a:	2102      	movs	r1, #2
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  40382c:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403830:	f060 007f 	orn	r0, r0, #127	; 0x7f
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  403834:	f883 e009 	strb.w	lr, [r3, #9]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403838:	7050      	strb	r0, [r2, #1]
  40383a:	e789      	b.n	403750 <get_fileinfo+0x90>
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
  40383c:	f104 0516 	add.w	r5, r4, #22
	if (chr < 0x800) {	/* 2-byte sequence? */
  403840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
  403844:	eb01 0c05 	add.w	ip, r1, r5
	if (chr < 0x800) {	/* 2-byte sequence? */
  403848:	d20e      	bcs.n	403868 <get_fileinfo+0x1a8>
		if (szb < 2) return 0;	/* Buffer overflow? */
  40384a:	2e01      	cmp	r6, #1
  40384c:	d938      	bls.n	4038c0 <get_fileinfo+0x200>
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  40384e:	099f      	lsrs	r7, r3, #6
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  403854:	190e      	adds	r6, r1, r4
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403856:	2502      	movs	r5, #2
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  403858:	f067 073f 	orn	r7, r7, #63	; 0x3f
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  40385c:	f063 037f 	orn	r3, r3, #127	; 0x7f
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
  403860:	75b7      	strb	r7, [r6, #22]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403862:	f88c 3001 	strb.w	r3, [ip, #1]
  403866:	e759      	b.n	40371c <get_fileinfo+0x5c>
	if (chr < 0x10000) {	/* 3-byte sequence? */
  403868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40386c:	d219      	bcs.n	4038a2 <get_fileinfo+0x1e2>
		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
  40386e:	2e02      	cmp	r6, #2
  403870:	d926      	bls.n	4038c0 <get_fileinfo+0x200>
  403872:	f5a3 4558 	sub.w	r5, r3, #55296	; 0xd800
  403876:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  40387a:	d321      	bcc.n	4038c0 <get_fileinfo+0x200>
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
  40387c:	0b1f      	lsrs	r7, r3, #12
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  40387e:	f3c3 1685 	ubfx	r6, r3, #6, #6
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
  403886:	190d      	adds	r5, r1, r4
  403888:	f067 071f 	orn	r7, r7, #31
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  40388c:	f066 067f 	orn	r6, r6, #127	; 0x7f
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403890:	f063 037f 	orn	r3, r3, #127	; 0x7f
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
  403894:	75af      	strb	r7, [r5, #22]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  403896:	2503      	movs	r5, #3
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  403898:	f88c 6001 	strb.w	r6, [ip, #1]
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  40389c:	f88c 3002 	strb.w	r3, [ip, #2]
  4038a0:	e73c      	b.n	40371c <get_fileinfo+0x5c>
	if (szb < 4) return 0;	/* Buffer overflow? */
  4038a2:	2e03      	cmp	r6, #3
  4038a4:	d90c      	bls.n	4038c0 <get_fileinfo+0x200>
	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
  4038a6:	ea03 050b 	and.w	r5, r3, fp
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
  4038aa:	4e38      	ldr	r6, [pc, #224]	; (40398c <get_fileinfo+0x2cc>)
	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
  4038ac:	b29b      	uxth	r3, r3
	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
  4038ae:	f105 5520 	add.w	r5, r5, #671088640	; 0x28000000
	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
  4038b2:	f5a3 435c 	sub.w	r3, r3, #56320	; 0xdc00
	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
  4038b6:	09ad      	lsrs	r5, r5, #6
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
  4038b8:	42b5      	cmp	r5, r6
  4038ba:	d801      	bhi.n	4038c0 <get_fileinfo+0x200>
  4038bc:	4553      	cmp	r3, sl
  4038be:	d91a      	bls.n	4038f6 <get_fileinfo+0x236>
  4038c0:	46be      	mov	lr, r7
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
  4038c2:	2600      	movs	r6, #0
  4038c4:	e730      	b.n	403728 <get_fileinfo+0x68>
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
  4038c6:	f898 3016 	ldrb.w	r3, [r8, #22]
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
  4038ca:	f888 0009 	strb.w	r0, [r8, #9]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
  4038ce:	2b00      	cmp	r3, #0
  4038d0:	d186      	bne.n	4037e0 <get_fileinfo+0x120>
			fno->fname[di++] = '?';
  4038d2:	233f      	movs	r3, #63	; 0x3f
  4038d4:	2101      	movs	r1, #1
  4038d6:	f888 3016 	strb.w	r3, [r8, #22]
  4038da:	69f2      	ldr	r2, [r6, #28]
		fno->fname[di] = 0;	/* Terminate the LFN */
  4038dc:	2300      	movs	r3, #0
  4038de:	4441      	add	r1, r8
  4038e0:	758b      	strb	r3, [r1, #22]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
  4038e2:	7b13      	ldrb	r3, [r2, #12]
  4038e4:	2b00      	cmp	r3, #0
  4038e6:	f47f af7c 	bne.w	4037e2 <get_fileinfo+0x122>
  4038ea:	f888 3009 	strb.w	r3, [r8, #9]
  4038ee:	e778      	b.n	4037e2 <get_fileinfo+0x122>
  4038f0:	46be      	mov	lr, r7
  4038f2:	4626      	mov	r6, r4
  4038f4:	e718      	b.n	403728 <get_fileinfo+0x68>
	chr = (hc | chr) + 0x10000;
  4038f6:	432b      	orrs	r3, r5
	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  4038f8:	eb01 0804 	add.w	r8, r1, r4
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  4038fc:	2504      	movs	r5, #4
	chr = (hc | chr) + 0x10000;
  4038fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  403902:	ea4f 4993 	mov.w	r9, r3, lsr #18
	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  403906:	f3c3 3705 	ubfx	r7, r3, #12, #6
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  40390a:	f3c3 1685 	ubfx	r6, r3, #6, #6
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  40390e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  403912:	f069 090f 	orn	r9, r9, #15
	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  403916:	f067 077f 	orn	r7, r7, #127	; 0x7f
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  40391a:	f066 067f 	orn	r6, r6, #127	; 0x7f
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  40391e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
  403922:	f888 9016 	strb.w	r9, [r8, #22]
	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
  403926:	f88c 7001 	strb.w	r7, [ip, #1]
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
  40392a:	f88c 6002 	strb.w	r6, [ip, #2]
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
  40392e:	f88c 3003 	strb.w	r3, [ip, #3]
  403932:	e6f3      	b.n	40371c <get_fileinfo+0x5c>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
  403934:	2100      	movs	r1, #0
  403936:	eb08 0305 	add.w	r3, r8, r5
  40393a:	7259      	strb	r1, [r3, #9]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
  40393c:	f898 1016 	ldrb.w	r1, [r8, #22]
  403940:	2900      	cmp	r1, #0
  403942:	f47f af4e 	bne.w	4037e2 <get_fileinfo+0x122>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
  403946:	2d00      	cmp	r5, #0
  403948:	d0c3      	beq.n	4038d2 <get_fileinfo+0x212>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
  40394a:	f898 3009 	ldrb.w	r3, [r8, #9]
  40394e:	b1cb      	cbz	r3, 403984 <get_fileinfo+0x2c4>
  403950:	f108 0409 	add.w	r4, r8, #9
  403954:	f108 0015 	add.w	r0, r8, #21
  403958:	2608      	movs	r6, #8
  40395a:	e00c      	b.n	403976 <get_fileinfo+0x2b6>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
  40395c:	2d19      	cmp	r5, #25
  40395e:	d803      	bhi.n	403968 <get_fileinfo+0x2a8>
  403960:	7b15      	ldrb	r5, [r2, #12]
  403962:	422e      	tst	r6, r5
  403964:	d000      	beq.n	403968 <get_fileinfo+0x2a8>
  403966:	3320      	adds	r3, #32
				fno->fname[di] = (TCHAR)wc;
  403968:	f800 3f01 	strb.w	r3, [r0, #1]!
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
  40396c:	3101      	adds	r1, #1
  40396e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403972:	2b00      	cmp	r3, #0
  403974:	d0b2      	beq.n	4038dc <get_fileinfo+0x21c>
				wc = (WCHAR)fno->altname[si];
  403976:	b29b      	uxth	r3, r3
				if (wc == '.') lcf = NS_EXT;
  403978:	2b2e      	cmp	r3, #46	; 0x2e
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
  40397a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
				if (wc == '.') lcf = NS_EXT;
  40397e:	d1ed      	bne.n	40395c <get_fileinfo+0x29c>
  403980:	2610      	movs	r6, #16
  403982:	e7f1      	b.n	403968 <get_fileinfo+0x2a8>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
  403984:	4619      	mov	r1, r3
  403986:	e7a9      	b.n	4038dc <get_fileinfo+0x21c>
  403988:	00407981 	.word	0x00407981
  40398c:	000fffff 	.word	0x000fffff
  403990:	ffff0000 	.word	0xffff0000

00403994 <dir_clear>:
{
  403994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
  403998:	78c3      	ldrb	r3, [r0, #3]
{
  40399a:	4604      	mov	r4, r0
  40399c:	460d      	mov	r5, r1
  40399e:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4039a2:	b1cb      	cbz	r3, 4039d8 <dir_clear+0x44>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4039a4:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4039a6:	2301      	movs	r3, #1
  4039a8:	4639      	mov	r1, r7
  4039aa:	7840      	ldrb	r0, [r0, #1]
  4039ac:	4e1f      	ldr	r6, [pc, #124]	; (403a2c <dir_clear+0x98>)
  4039ae:	47b0      	blx	r6
  4039b0:	b978      	cbnz	r0, 4039d2 <dir_clear+0x3e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4039b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4039b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4039b6:	69e2      	ldr	r2, [r4, #28]
  4039b8:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4039ba:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4039bc:	4293      	cmp	r3, r2
  4039be:	d20b      	bcs.n	4039d8 <dir_clear+0x44>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4039c0:	78a3      	ldrb	r3, [r4, #2]
  4039c2:	2b02      	cmp	r3, #2
  4039c4:	d108      	bne.n	4039d8 <dir_clear+0x44>
  4039c6:	440a      	add	r2, r1
  4039c8:	2301      	movs	r3, #1
  4039ca:	4639      	mov	r1, r7
  4039cc:	7860      	ldrb	r0, [r4, #1]
  4039ce:	47b0      	blx	r6
  4039d0:	e002      	b.n	4039d8 <dir_clear+0x44>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
  4039d2:	2001      	movs	r0, #1
  4039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4039d8:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;		/* Cluster number is origin from 2 */
  4039da:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4039dc:	3b02      	subs	r3, #2
  4039de:	429d      	cmp	r5, r3
  4039e0:	d204      	bcs.n	4039ec <dir_clear+0x58>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  4039e2:	8962      	ldrh	r2, [r4, #10]
  4039e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4039e6:	fb05 3502 	mla	r5, r5, r2, r3
  4039ea:	e000      	b.n	4039ee <dir_clear+0x5a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4039ec:	2500      	movs	r5, #0
  4039ee:	f504 710d 	add.w	r1, r4, #564	; 0x234
	BYTE *d = (BYTE*)dst;
  4039f2:	463b      	mov	r3, r7
		*d++ = (BYTE)val;
  4039f4:	2200      	movs	r2, #0
	fs->winsect = sect;				/* Set window to top of the cluster */
  4039f6:	6325      	str	r5, [r4, #48]	; 0x30
		*d++ = (BYTE)val;
  4039f8:	f803 2b01 	strb.w	r2, [r3], #1
	} while (--cnt);
  4039fc:	428b      	cmp	r3, r1
  4039fe:	d1fb      	bne.n	4039f8 <dir_clear+0x64>
  403a00:	2600      	movs	r6, #0
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
  403a02:	f8df 8028 	ldr.w	r8, [pc, #40]	; 403a2c <dir_clear+0x98>
  403a06:	8960      	ldrh	r0, [r4, #10]
  403a08:	19aa      	adds	r2, r5, r6
  403a0a:	2301      	movs	r3, #1
  403a0c:	4639      	mov	r1, r7
  403a0e:	4286      	cmp	r6, r0
  403a10:	d305      	bcc.n	403a1e <dir_clear+0x8a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
  403a12:	8960      	ldrh	r0, [r4, #10]
  403a14:	1b80      	subs	r0, r0, r6
  403a16:	bf18      	it	ne
  403a18:	2001      	movne	r0, #1
  403a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
  403a1e:	7860      	ldrb	r0, [r4, #1]
  403a20:	47c0      	blx	r8
  403a22:	2800      	cmp	r0, #0
  403a24:	d1f5      	bne.n	403a12 <dir_clear+0x7e>
  403a26:	3601      	adds	r6, #1
  403a28:	e7ed      	b.n	403a06 <dir_clear+0x72>
  403a2a:	bf00      	nop
  403a2c:	004078e9 	.word	0x004078e9

00403a30 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
  403a30:	6b02      	ldr	r2, [r0, #48]	; 0x30
  403a32:	428a      	cmp	r2, r1
  403a34:	d02c      	beq.n	403a90 <move_window+0x60>
{
  403a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
  403a38:	78c3      	ldrb	r3, [r0, #3]
  403a3a:	4604      	mov	r4, r0
  403a3c:	460d      	mov	r5, r1
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  403a3e:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  403a42:	b96b      	cbnz	r3, 403a60 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  403a44:	4631      	mov	r1, r6
  403a46:	462a      	mov	r2, r5
  403a48:	2301      	movs	r3, #1
  403a4a:	7860      	ldrb	r0, [r4, #1]
  403a4c:	4e11      	ldr	r6, [pc, #68]	; (403a94 <move_window+0x64>)
  403a4e:	47b0      	blx	r6
  403a50:	2800      	cmp	r0, #0
  403a52:	bf1a      	itte	ne
  403a54:	f04f 35ff 	movne.w	r5, #4294967295
  403a58:	2001      	movne	r0, #1
  403a5a:	2000      	moveq	r0, #0
			fs->winsect = sect;
  403a5c:	6325      	str	r5, [r4, #48]	; 0x30
}
  403a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  403a60:	2301      	movs	r3, #1
  403a62:	7840      	ldrb	r0, [r0, #1]
  403a64:	4631      	mov	r1, r6
  403a66:	4f0c      	ldr	r7, [pc, #48]	; (403a98 <move_window+0x68>)
  403a68:	47b8      	blx	r7
  403a6a:	b978      	cbnz	r0, 403a8c <move_window+0x5c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  403a6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403a70:	69e2      	ldr	r2, [r4, #28]
  403a72:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  403a74:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  403a76:	4293      	cmp	r3, r2
  403a78:	d2e4      	bcs.n	403a44 <move_window+0x14>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  403a7a:	78a3      	ldrb	r3, [r4, #2]
  403a7c:	2b02      	cmp	r3, #2
  403a7e:	d1e1      	bne.n	403a44 <move_window+0x14>
  403a80:	440a      	add	r2, r1
  403a82:	2301      	movs	r3, #1
  403a84:	4631      	mov	r1, r6
  403a86:	7860      	ldrb	r0, [r4, #1]
  403a88:	47b8      	blx	r7
  403a8a:	e7db      	b.n	403a44 <move_window+0x14>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  403a8c:	2001      	movs	r0, #1
	return res;
  403a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
  403a90:	2000      	movs	r0, #0
  403a92:	4770      	bx	lr
  403a94:	004078c5 	.word	0x004078c5
  403a98:	004078e9 	.word	0x004078e9

00403a9c <sync_fs>:
{
  403a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
  403a9e:	78c3      	ldrb	r3, [r0, #3]
{
  403aa0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
  403aa2:	b95b      	cbnz	r3, 403abc <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
  403aa4:	7823      	ldrb	r3, [r4, #0]
  403aa6:	2b03      	cmp	r3, #3
  403aa8:	d023      	beq.n	403af2 <sync_fs+0x56>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
  403aaa:	2200      	movs	r2, #0
  403aac:	7860      	ldrb	r0, [r4, #1]
  403aae:	4b33      	ldr	r3, [pc, #204]	; (403b7c <sync_fs+0xe0>)
  403ab0:	4611      	mov	r1, r2
  403ab2:	4798      	blx	r3
  403ab4:	3000      	adds	r0, #0
  403ab6:	bf18      	it	ne
  403ab8:	2001      	movne	r0, #1
  403aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  403abc:	f100 0634 	add.w	r6, r0, #52	; 0x34
  403ac0:	6b02      	ldr	r2, [r0, #48]	; 0x30
  403ac2:	2301      	movs	r3, #1
  403ac4:	7840      	ldrb	r0, [r0, #1]
  403ac6:	4631      	mov	r1, r6
  403ac8:	4d2d      	ldr	r5, [pc, #180]	; (403b80 <sync_fs+0xe4>)
  403aca:	47a8      	blx	r5
  403acc:	b978      	cbnz	r0, 403aee <sync_fs+0x52>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  403ace:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ad2:	69e2      	ldr	r2, [r4, #28]
  403ad4:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  403ad6:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  403ad8:	4293      	cmp	r3, r2
  403ada:	d2e3      	bcs.n	403aa4 <sync_fs+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  403adc:	78a3      	ldrb	r3, [r4, #2]
  403ade:	2b02      	cmp	r3, #2
  403ae0:	d1e0      	bne.n	403aa4 <sync_fs+0x8>
  403ae2:	440a      	add	r2, r1
  403ae4:	2301      	movs	r3, #1
  403ae6:	4631      	mov	r1, r6
  403ae8:	7860      	ldrb	r0, [r4, #1]
  403aea:	47a8      	blx	r5
  403aec:	e7da      	b.n	403aa4 <sync_fs+0x8>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  403aee:	2001      	movs	r0, #1
	return res;
  403af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
  403af2:	7925      	ldrb	r5, [r4, #4]
  403af4:	2d01      	cmp	r5, #1
  403af6:	d1d8      	bne.n	403aaa <sync_fs+0xe>
		*d++ = (BYTE)val;
  403af8:	f104 0734 	add.w	r7, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
  403afc:	2600      	movs	r6, #0
  403afe:	f44f 7200 	mov.w	r2, #512	; 0x200
  403b02:	2100      	movs	r1, #0
  403b04:	4b1f      	ldr	r3, [pc, #124]	; (403b84 <sync_fs+0xe8>)
  403b06:	4638      	mov	r0, r7
  403b08:	4798      	blx	r3
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
  403b0a:	6923      	ldr	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
  403b0c:	4630      	mov	r0, r6
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
  403b0e:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
  403b10:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val; val >>= 8;
  403b12:	0a1f      	lsrs	r7, r3, #8
  403b14:	f363 0007 	bfi	r0, r3, #0, #8
  403b18:	ea4f 2e12 	mov.w	lr, r2, lsr #8
  403b1c:	f362 0607 	bfi	r6, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
  403b20:	f04f 0c55 	mov.w	ip, #85	; 0x55
	*ptr++ = (BYTE)val; val >>= 8;
  403b24:	f367 200f 	bfi	r0, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
  403b28:	0c1f      	lsrs	r7, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
  403b2a:	f36e 260f 	bfi	r6, lr, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
  403b2e:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
  403b30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
  403b34:	f367 4017 	bfi	r0, r7, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
  403b38:	0e12      	lsrs	r2, r2, #24
			fs->winsect = fs->volbase + 1;
  403b3a:	6a27      	ldr	r7, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
  403b3c:	f363 601f 	bfi	r0, r3, #24, #8
  403b40:	f36e 4617 	bfi	r6, lr, #16, #8
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
  403b44:	462b      	mov	r3, r5
			fs->winsect = fs->volbase + 1;
  403b46:	3701      	adds	r7, #1
	*ptr++ = (BYTE)val; val >>= 8;
  403b48:	f362 661f 	bfi	r6, r2, #24, #8
	*ptr++ = (BYTE)val;
  403b4c:	f04f 0eaa 	mov.w	lr, #170	; 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
  403b50:	4d0d      	ldr	r5, [pc, #52]	; (403b88 <sync_fs+0xec>)
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
  403b52:	463a      	mov	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
  403b54:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  403b58:	480c      	ldr	r0, [pc, #48]	; (403b8c <sync_fs+0xf0>)
  403b5a:	6365      	str	r5, [r4, #52]	; 0x34
  403b5c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  403b60:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
  403b64:	6327      	str	r7, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
  403b66:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
  403b6a:	f884 e233 	strb.w	lr, [r4, #563]	; 0x233
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
  403b6e:	7860      	ldrb	r0, [r4, #1]
  403b70:	4d03      	ldr	r5, [pc, #12]	; (403b80 <sync_fs+0xe4>)
  403b72:	47a8      	blx	r5
			fs->fsi_flag = 0;
  403b74:	2300      	movs	r3, #0
  403b76:	7123      	strb	r3, [r4, #4]
  403b78:	e797      	b.n	403aaa <sync_fs+0xe>
  403b7a:	bf00      	nop
  403b7c:	0040790d 	.word	0x0040790d
  403b80:	004078e9 	.word	0x004078e9
  403b84:	0040a555 	.word	0x0040a555
  403b88:	41615252 	.word	0x41615252
  403b8c:	61417272 	.word	0x61417272

00403b90 <check_fs>:

static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
  403b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
  403b92:	f04f 36ff 	mov.w	r6, #4294967295
  403b96:	2300      	movs	r3, #0
{
  403b98:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
  403b9a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
  403b9c:	70c3      	strb	r3, [r0, #3]
  403b9e:	6306      	str	r6, [r0, #48]	; 0x30
	if (sect != fs->winsect) {	/* Window offset changed? */
  403ba0:	d00c      	beq.n	403bbc <check_fs+0x2c>
  403ba2:	460d      	mov	r5, r1
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  403ba4:	460a      	mov	r2, r1
  403ba6:	2301      	movs	r3, #1
  403ba8:	f100 0134 	add.w	r1, r0, #52	; 0x34
  403bac:	4f21      	ldr	r7, [pc, #132]	; (403c34 <check_fs+0xa4>)
  403bae:	7840      	ldrb	r0, [r0, #1]
  403bb0:	47b8      	blx	r7
  403bb2:	b110      	cbz	r0, 403bba <check_fs+0x2a>
			fs->winsect = sect;
  403bb4:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
  403bb6:	2004      	movs	r0, #4
  403bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			fs->winsect = sect;
  403bba:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
  403bbc:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
  403bc0:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
  403bc4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
  403bc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
  403bcc:	4293      	cmp	r3, r2
  403bce:	d001      	beq.n	403bd4 <check_fs+0x44>
  403bd0:	2003      	movs	r0, #3
  403bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */

	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
  403bd4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  403bd8:	f102 0318 	add.w	r3, r2, #24
  403bdc:	b2db      	uxtb	r3, r3
  403bde:	2b01      	cmp	r3, #1
  403be0:	d903      	bls.n	403bea <check_fs+0x5a>
  403be2:	2aeb      	cmp	r2, #235	; 0xeb
  403be4:	d001      	beq.n	403bea <check_fs+0x5a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
	}
	return 2;	/* Valid BS but not FAT */
  403be6:	2002      	movs	r0, #2
  403be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} while (--cnt && r == 0);
  403bea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
  403bee:	2b46      	cmp	r3, #70	; 0x46
  403bf0:	d107      	bne.n	403c02 <check_fs+0x72>
  403bf2:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
  403bf6:	2b41      	cmp	r3, #65	; 0x41
  403bf8:	d103      	bne.n	403c02 <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
  403bfa:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  403bfe:	2b54      	cmp	r3, #84	; 0x54
  403c00:	d016      	beq.n	403c30 <check_fs+0xa0>
	} while (--cnt && r == 0);
  403c02:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
  403c06:	2b46      	cmp	r3, #70	; 0x46
  403c08:	d1ed      	bne.n	403be6 <check_fs+0x56>
  403c0a:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
  403c0e:	2b41      	cmp	r3, #65	; 0x41
  403c10:	d1e9      	bne.n	403be6 <check_fs+0x56>
  403c12:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
  403c16:	2b54      	cmp	r3, #84	; 0x54
  403c18:	d1e5      	bne.n	403be6 <check_fs+0x56>
  403c1a:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
  403c1e:	2b33      	cmp	r3, #51	; 0x33
  403c20:	d1e1      	bne.n	403be6 <check_fs+0x56>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
  403c22:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
  403c26:	2b32      	cmp	r3, #50	; 0x32
  403c28:	bf14      	ite	ne
  403c2a:	2002      	movne	r0, #2
  403c2c:	2000      	moveq	r0, #0
  403c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c30:	2000      	movs	r0, #0
  403c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c34:	004078c5 	.word	0x004078c5

00403c38 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
  403c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
  403c3c:	2300      	movs	r3, #0
	tt = tp = *path;
  403c3e:	6805      	ldr	r5, [r0, #0]
	*rfs = 0;
  403c40:	600b      	str	r3, [r1, #0]
	if (!tp) return vol;	/* Invalid path name? */
  403c42:	b37d      	cbz	r5, 403ca4 <mount_volume+0x6c>
  403c44:	462c      	mov	r4, r5
  403c46:	e001      	b.n	403c4c <mount_volume+0x14>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
  403c48:	2b3a      	cmp	r3, #58	; 0x3a
  403c4a:	d003      	beq.n	403c54 <mount_volume+0x1c>
  403c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
  403c50:	2b1f      	cmp	r3, #31
  403c52:	d8f9      	bhi.n	403c48 <mount_volume+0x10>
	if (tc == ':') {	/* DOS/Windows style volume ID? */
  403c54:	2b3a      	cmp	r3, #58	; 0x3a
  403c56:	d021      	beq.n	403c9c <mount_volume+0x64>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
  403c58:	4eba      	ldr	r6, [pc, #744]	; (403f44 <mount_volume+0x30c>)
  403c5a:	f8d6 5204 	ldr.w	r5, [r6, #516]	; 0x204
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
  403c5e:	b325      	cbz	r5, 403caa <mount_volume+0x72>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
  403c60:	600d      	str	r5, [r1, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
  403c62:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
  403c66:	782b      	ldrb	r3, [r5, #0]
  403c68:	b953      	cbnz	r3, 403c80 <mount_volume+0x48>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
  403c6a:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  403c6c:	4ab6      	ldr	r2, [pc, #728]	; (403f48 <mount_volume+0x310>)
	fs->fs_type = 0;					/* Clear the filesystem object */
  403c6e:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  403c70:	4618      	mov	r0, r3
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
  403c72:	706b      	strb	r3, [r5, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  403c74:	4790      	blx	r2
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
  403c76:	07c1      	lsls	r1, r0, #31
  403c78:	d51c      	bpl.n	403cb4 <mount_volume+0x7c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
  403c7a:	2003      	movs	r0, #3
  403c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		stat = disk_status(fs->pdrv);
  403c80:	7868      	ldrb	r0, [r5, #1]
  403c82:	4bb2      	ldr	r3, [pc, #712]	; (403f4c <mount_volume+0x314>)
  403c84:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
  403c86:	07c7      	lsls	r7, r0, #31
  403c88:	d4ef      	bmi.n	403c6a <mount_volume+0x32>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
  403c8a:	2c00      	cmp	r4, #0
  403c8c:	f000 810b 	beq.w	403ea6 <mount_volume+0x26e>
  403c90:	f010 0004 	ands.w	r0, r0, #4
  403c94:	d00c      	beq.n	403cb0 <mount_volume+0x78>
				return FR_WRITE_PROTECTED;
  403c96:	200a      	movs	r0, #10
  403c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
  403c9c:	1cab      	adds	r3, r5, #2
  403c9e:	429c      	cmp	r4, r3
  403ca0:	f000 8104 	beq.w	403eac <mount_volume+0x274>
	if (vol < 0) return FR_INVALID_DRIVE;
  403ca4:	200b      	movs	r0, #11
  403ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
  403caa:	200c      	movs	r0, #12
  403cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
  403cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
  403cb4:	b10c      	cbz	r4, 403cba <mount_volume+0x82>
  403cb6:	0742      	lsls	r2, r0, #29
  403cb8:	d4ed      	bmi.n	403c96 <mount_volume+0x5e>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
  403cba:	2100      	movs	r1, #0
  403cbc:	4628      	mov	r0, r5
  403cbe:	4fa4      	ldr	r7, [pc, #656]	; (403f50 <mount_volume+0x318>)
  403cc0:	47b8      	blx	r7
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
  403cc2:	2802      	cmp	r0, #2
  403cc4:	d006      	beq.n	403cd4 <mount_volume+0x9c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  403cc6:	2804      	cmp	r0, #4
  403cc8:	d03e      	beq.n	403d48 <mount_volume+0x110>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
  403cca:	2801      	cmp	r0, #1
  403ccc:	d944      	bls.n	403d58 <mount_volume+0x120>
  403cce:	200d      	movs	r0, #13
  403cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	rv = rv << 8 | ptr[2];
  403cd4:	f8b5 821c 	ldrh.w	r8, [r5, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
  403cd8:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
	rv = rv << 8 | ptr[2];
  403cdc:	f8b5 422c 	ldrh.w	r4, [r5, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
  403ce0:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
  403ce4:	f895 122b 	ldrb.w	r1, [r5, #555]	; 0x22b
	rv = rv << 8 | ptr[2];
  403ce8:	f8b5 e1fc 	ldrh.w	lr, [r5, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
  403cec:	f895 31fb 	ldrb.w	r3, [r5, #507]	; 0x1fb
  403cf0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	rv = rv << 8 | ptr[0];
  403cf4:	f895 821a 	ldrb.w	r8, [r5, #538]	; 0x21a
	rv = rv << 8 | ptr[2];
  403cf8:	f8b5 920c 	ldrh.w	r9, [r5, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
  403cfc:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  403d00:	f895 020b 	ldrb.w	r0, [r5, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
  403d04:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
  403d08:	f895 422a 	ldrb.w	r4, [r5, #554]	; 0x22a
  403d0c:	f895 21fa 	ldrb.w	r2, [r5, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
  403d10:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
	rv = rv << 8 | ptr[0];
  403d14:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
  403d18:	f895 920a 	ldrb.w	r9, [r5, #522]	; 0x20a
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  403d1c:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
	rv = rv << 8 | ptr[0];
  403d20:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  403d24:	f040 80ae 	bne.w	403e84 <mount_volume+0x24c>
  403d28:	f1b9 0f00 	cmp.w	r9, #0
  403d2c:	d10f      	bne.n	403d4e <mount_volume+0x116>
  403d2e:	f1b8 0f00 	cmp.w	r8, #0
  403d32:	f040 80b1 	bne.w	403e98 <mount_volume+0x260>
  403d36:	2c00      	cmp	r4, #0
  403d38:	d0c9      	beq.n	403cce <mount_volume+0x96>
  403d3a:	4621      	mov	r1, r4
  403d3c:	4628      	mov	r0, r5
  403d3e:	47b8      	blx	r7
	} while (part == 0 && fmt >= 2 && ++i < 4);
  403d40:	2801      	cmp	r0, #1
  403d42:	d909      	bls.n	403d58 <mount_volume+0x120>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  403d44:	2804      	cmp	r0, #4
  403d46:	d1c2      	bne.n	403cce <mount_volume+0x96>
  403d48:	2001      	movs	r0, #1
  403d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  403d4e:	4649      	mov	r1, r9
  403d50:	4628      	mov	r0, r5
  403d52:	47b8      	blx	r7
	} while (part == 0 && fmt >= 2 && ++i < 4);
  403d54:	2801      	cmp	r0, #1
  403d56:	d8ea      	bhi.n	403d2e <mount_volume+0xf6>
	rv = rv << 8 | ptr[0];
  403d58:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
  403d5c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
  403d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
  403d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d68:	d1b1      	bne.n	403cce <mount_volume+0x96>
	rv = rv << 8 | ptr[0];
  403d6a:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
  403d6e:	f895 204a 	ldrb.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
  403d72:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  403d76:	d109      	bne.n	403d8c <mount_volume+0x154>
	rv = rv << 8 | ptr[2];
  403d78:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
  403d7c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
	rv = rv << 8 | ptr[0];
  403d80:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
	rv = rv << 8 | ptr[1];
  403d84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
  403d88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
  403d8c:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
		fs->fsize = fasize;
  403d90:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
  403d92:	1e7b      	subs	r3, r7, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
  403d94:	70af      	strb	r7, [r5, #2]
	bsect = fs->winsect;					/* Volume location */
  403d96:	6b29      	ldr	r1, [r5, #48]	; 0x30
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
  403d98:	2b01      	cmp	r3, #1
  403d9a:	d898      	bhi.n	403cce <mount_volume+0x96>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
  403d9c:	f895 c041 	ldrb.w	ip, [r5, #65]	; 0x41
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
  403da0:	fb02 f707 	mul.w	r7, r2, r7
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
  403da4:	fa1f f38c 	uxth.w	r3, ip
  403da8:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  403daa:	2b00      	cmp	r3, #0
  403dac:	d08f      	beq.n	403cce <mount_volume+0x96>
  403dae:	f10c 33ff 	add.w	r3, ip, #4294967295
  403db2:	ea13 0f0c 	tst.w	r3, ip
  403db6:	d18a      	bne.n	403cce <mount_volume+0x96>
	rv = rv << 8 | ptr[0];
  403db8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
  403dbc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  403dc0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
  403dc4:	0723      	lsls	r3, r4, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
  403dc6:	812c      	strh	r4, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
  403dc8:	d181      	bne.n	403cce <mount_volume+0x96>
	rv = rv << 8 | ptr[0];
  403dca:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
  403dce:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
  403dd2:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  403dd6:	d109      	bne.n	403dec <mount_volume+0x1b4>
	rv = rv << 8 | ptr[2];
  403dd8:	f8b5 e056 	ldrh.w	lr, [r5, #86]	; 0x56
	rv = rv << 8 | ptr[1];
  403ddc:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
	rv = rv << 8 | ptr[0];
  403de0:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
	rv = rv << 8 | ptr[1];
  403de4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
	rv = rv << 8 | ptr[0];
  403de8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
  403dec:	f895 e043 	ldrb.w	lr, [r5, #67]	; 0x43
  403df0:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
  403df4:	ea50 200e 	orrs.w	r0, r0, lr, lsl #8
  403df8:	f43f af69 	beq.w	403cce <mount_volume+0x96>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
  403dfc:	eb00 1e14 	add.w	lr, r0, r4, lsr #4
  403e00:	44be      	add	lr, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
  403e02:	4573      	cmp	r3, lr
  403e04:	f4ff af63 	bcc.w	403cce <mount_volume+0x96>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
  403e08:	eba3 030e 	sub.w	r3, r3, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  403e0c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 403f58 <mount_volume+0x320>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
  403e10:	fbb3 f3fc 	udiv	r3, r3, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  403e14:	f103 3cff 	add.w	ip, r3, #4294967295
  403e18:	45c4      	cmp	ip, r8
  403e1a:	f63f af58 	bhi.w	403cce <mount_volume+0x96>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
  403e1e:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  403e22:	4563      	cmp	r3, ip
  403e24:	d858      	bhi.n	403ed8 <mount_volume+0x2a0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
  403e26:	f640 7cf5 	movw	ip, #4085	; 0xff5
  403e2a:	4563      	cmp	r3, ip
  403e2c:	d844      	bhi.n	403eb8 <mount_volume+0x280>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  403e2e:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  403e30:	4408      	add	r0, r1
		fs->database = bsect + sysect;					/* Data start sector */
  403e32:	448e      	add	lr, r1
		fs->volbase = bsect;							/* Volume start sector */
  403e34:	6229      	str	r1, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  403e36:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  403e38:	6268      	str	r0, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
  403e3a:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  403e3e:	2c00      	cmp	r4, #0
  403e40:	f43f af45 	beq.w	403cce <mount_volume+0x96>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  403e44:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  403e48:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  403e4c:	4438      	add	r0, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  403e4e:	2101      	movs	r1, #1
  403e50:	eb03 0354 	add.w	r3, r3, r4, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  403e54:	62a8      	str	r0, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  403e56:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  403e5a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  403e5e:	f4ff af36 	bcc.w	403cce <mount_volume+0x96>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  403e62:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
  403e66:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  403e68:	616b      	str	r3, [r5, #20]
  403e6a:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
  403e6c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* Volume mount ID */
  403e6e:	8833      	ldrh	r3, [r6, #0]
	return FR_OK;
  403e70:	2000      	movs	r0, #0
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
  403e72:	4a38      	ldr	r2, [pc, #224]	; (403f54 <mount_volume+0x31c>)
	fs->id = ++Fsid;		/* Volume mount ID */
  403e74:	3301      	adds	r3, #1
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
  403e76:	7029      	strb	r1, [r5, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
  403e78:	60ea      	str	r2, [r5, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
  403e7a:	b29b      	uxth	r3, r3
  403e7c:	8033      	strh	r3, [r6, #0]
  403e7e:	80eb      	strh	r3, [r5, #6]
	return FR_OK;
  403e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  403e84:	4628      	mov	r0, r5
  403e86:	47b8      	blx	r7
	} while (part == 0 && fmt >= 2 && ++i < 4);
  403e88:	2801      	cmp	r0, #1
  403e8a:	f67f af65 	bls.w	403d58 <mount_volume+0x120>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  403e8e:	f1b9 0f00 	cmp.w	r9, #0
  403e92:	f43f af4c 	beq.w	403d2e <mount_volume+0xf6>
  403e96:	e75a      	b.n	403d4e <mount_volume+0x116>
  403e98:	4641      	mov	r1, r8
  403e9a:	4628      	mov	r0, r5
  403e9c:	47b8      	blx	r7
	} while (part == 0 && fmt >= 2 && ++i < 4);
  403e9e:	2801      	cmp	r0, #1
  403ea0:	f63f af49 	bhi.w	403d36 <mount_volume+0xfe>
  403ea4:	e758      	b.n	403d58 <mount_volume+0x120>
			return FR_OK;				/* The filesystem object is already valid */
  403ea6:	4620      	mov	r0, r4
  403ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
  403eac:	782b      	ldrb	r3, [r5, #0]
  403eae:	2b30      	cmp	r3, #48	; 0x30
  403eb0:	f47f aef8 	bne.w	403ca4 <mount_volume+0x6c>
			*path = tt;		/* Snip the drive prefix off */
  403eb4:	6004      	str	r4, [r0, #0]
  403eb6:	e6cf      	b.n	403c58 <mount_volume+0x20>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  403eb8:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  403eba:	4408      	add	r0, r1
		fs->database = bsect + sysect;					/* Data start sector */
  403ebc:	448e      	add	lr, r1
		fs->volbase = bsect;							/* Volume start sector */
  403ebe:	6229      	str	r1, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  403ec0:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  403ec2:	6268      	str	r0, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
  403ec4:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  403ec8:	2c00      	cmp	r4, #0
  403eca:	f43f af00 	beq.w	403cce <mount_volume+0x96>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  403ece:	4438      	add	r0, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  403ed0:	005b      	lsls	r3, r3, #1
  403ed2:	2102      	movs	r1, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  403ed4:	62a8      	str	r0, [r5, #40]	; 0x28
  403ed6:	e7be      	b.n	403e56 <mount_volume+0x21e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  403ed8:	4408      	add	r0, r1
	rv = rv << 8 | ptr[0];
  403eda:	f895 705f 	ldrb.w	r7, [r5, #95]	; 0x5f
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  403ede:	3302      	adds	r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
  403ee0:	448e      	add	lr, r1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  403ee2:	6268      	str	r0, [r5, #36]	; 0x24
	rv = rv << 8 | ptr[0];
  403ee4:	f895 005e 	ldrb.w	r0, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  403ee8:	61ab      	str	r3, [r5, #24]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
  403eea:	ea50 2007 	orrs.w	r0, r0, r7, lsl #8
		fs->database = bsect + sysect;					/* Data start sector */
  403eee:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
  403ef2:	6229      	str	r1, [r5, #32]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
  403ef4:	f47f aeeb 	bne.w	403cce <mount_volume+0x96>
  403ef8:	2c00      	cmp	r4, #0
  403efa:	f47f aee8 	bne.w	403cce <mount_volume+0x96>
	rv = rv << 8 | ptr[2];
  403efe:	f8b5 7062 	ldrh.w	r7, [r5, #98]	; 0x62
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
  403f02:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[1];
  403f04:	f895 4061 	ldrb.w	r4, [r5, #97]	; 0x61
	rv = rv << 8 | ptr[0];
  403f08:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  403f0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
  403f10:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  403f14:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
	rv = rv << 8 | ptr[0];
  403f18:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
  403f1c:	62a8      	str	r0, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  403f1e:	f4ff aed6 	bcc.w	403cce <mount_volume+0x96>
	rv = rv << 8 | ptr[0];
  403f22:	f895 4065 	ldrb.w	r4, [r5, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  403f26:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
  403f2a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		fs->fsi_flag = 0x80;
  403f2e:	2080      	movs	r0, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  403f30:	616a      	str	r2, [r5, #20]
	rv = rv << 8 | ptr[0];
  403f32:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  403f36:	612a      	str	r2, [r5, #16]
		fs->fsi_flag = 0x80;
  403f38:	7128      	strb	r0, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
  403f3a:	2b01      	cmp	r3, #1
  403f3c:	d00e      	beq.n	403f5c <mount_volume+0x324>
  403f3e:	2103      	movs	r1, #3
  403f40:	e795      	b.n	403e6e <mount_volume+0x236>
  403f42:	bf00      	nop
  403f44:	204021ec 	.word	0x204021ec
  403f48:	0040789d 	.word	0x0040789d
  403f4c:	00407879 	.word	0x00407879
  403f50:	00403b91 	.word	0x00403b91
  403f54:	204021f0 	.word	0x204021f0
  403f58:	0ffffff4 	.word	0x0ffffff4
			&& move_window(fs, bsect + 1) == FR_OK)
  403f5c:	3101      	adds	r1, #1
  403f5e:	4628      	mov	r0, r5
  403f60:	4b1f      	ldr	r3, [pc, #124]	; (403fe0 <mount_volume+0x3a8>)
  403f62:	4798      	blx	r3
  403f64:	2800      	cmp	r0, #0
  403f66:	d1ea      	bne.n	403f3e <mount_volume+0x306>
	rv = rv << 8 | ptr[0];
  403f68:	f895 1233 	ldrb.w	r1, [r5, #563]	; 0x233
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
  403f6c:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
  403f70:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
  403f74:	7128      	strb	r0, [r5, #4]
	rv = rv << 8 | ptr[0];
  403f76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
  403f7a:	4293      	cmp	r3, r2
  403f7c:	d1df      	bne.n	403f3e <mount_volume+0x306>
	rv = rv << 8 | ptr[2];
  403f7e:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
	rv = rv << 8 | ptr[1];
  403f80:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	rv = rv << 8 | ptr[0];
  403f84:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	rv = rv << 8 | ptr[1];
  403f88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
  403f8c:	4915      	ldr	r1, [pc, #84]	; (403fe4 <mount_volume+0x3ac>)
	rv = rv << 8 | ptr[0];
  403f8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
  403f92:	428b      	cmp	r3, r1
  403f94:	d1d3      	bne.n	403f3e <mount_volume+0x306>
	rv = rv << 8 | ptr[2];
  403f96:	f8b5 121a 	ldrh.w	r1, [r5, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
  403f9a:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
	rv = rv << 8 | ptr[0];
  403f9e:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
	rv = rv << 8 | ptr[1];
  403fa2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  403fa6:	4910      	ldr	r1, [pc, #64]	; (403fe8 <mount_volume+0x3b0>)
	rv = rv << 8 | ptr[0];
  403fa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  403fac:	428b      	cmp	r3, r1
  403fae:	d1c6      	bne.n	403f3e <mount_volume+0x306>
	rv = rv << 8 | ptr[1];
  403fb0:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
  403fb4:	2103      	movs	r1, #3
	rv = rv << 8 | ptr[1];
  403fb6:	f895 3221 	ldrb.w	r3, [r5, #545]	; 0x221
	rv = rv << 8 | ptr[2];
  403fba:	f8b5 421e 	ldrh.w	r4, [r5, #542]	; 0x21e
  403fbe:	f8b5 0222 	ldrh.w	r0, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
  403fc2:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	rv = rv << 8 | ptr[0];
  403fc6:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
  403fca:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
  403fce:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
  403fd2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  403fd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
  403fda:	616a      	str	r2, [r5, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
  403fdc:	612b      	str	r3, [r5, #16]
  403fde:	e746      	b.n	403e6e <mount_volume+0x236>
  403fe0:	00403a31 	.word	0x00403a31
  403fe4:	41615252 	.word	0x41615252
  403fe8:	61417272 	.word	0x61417272

00403fec <put_fat.part.8>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
  403fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
  403ff0:	7806      	ldrb	r6, [r0, #0]
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
  403ff2:	b083      	sub	sp, #12
  403ff4:	4604      	mov	r4, r0
  403ff6:	460d      	mov	r5, r1
		switch (fs->fs_type) {
  403ff8:	2e02      	cmp	r6, #2
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
  403ffa:	9201      	str	r2, [sp, #4]
		switch (fs->fs_type) {
  403ffc:	f000 809f 	beq.w	40413e <put_fat.part.8+0x152>
  404000:	2e03      	cmp	r6, #3
  404002:	d063      	beq.n	4040cc <put_fat.part.8+0xe0>
  404004:	2e01      	cmp	r6, #1
  404006:	d003      	beq.n	404010 <put_fat.part.8+0x24>
	FRESULT res = FR_INT_ERR;
  404008:	2002      	movs	r0, #2
}
  40400a:	b003      	add	sp, #12
  40400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
  404010:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404014:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  404016:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404018:	eb03 295a 	add.w	r9, r3, sl, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
  40401c:	4591      	cmp	r9, r2
  40401e:	f000 812d 	beq.w	40427c <put_fat.part.8+0x290>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404022:	78c3      	ldrb	r3, [r0, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404024:	f100 0834 	add.w	r8, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404028:	2b00      	cmp	r3, #0
  40402a:	f040 80b0 	bne.w	40418e <put_fat.part.8+0x1a2>
  40402e:	46c3      	mov	fp, r8
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404030:	4641      	mov	r1, r8
  404032:	2301      	movs	r3, #1
  404034:	464a      	mov	r2, r9
  404036:	7860      	ldrb	r0, [r4, #1]
  404038:	4e98      	ldr	r6, [pc, #608]	; (40429c <put_fat.part.8+0x2b0>)
  40403a:	47b0      	blx	r6
  40403c:	2800      	cmp	r0, #0
  40403e:	f040 80f5 	bne.w	40422c <put_fat.part.8+0x240>
			fs->winsect = sect;
  404042:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
  404046:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
  40404a:	f10a 0801 	add.w	r8, sl, #1
  40404e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
  404052:	f000 80f2 	beq.w	40423a <put_fat.part.8+0x24e>
  404056:	f81b 300a 	ldrb.w	r3, [fp, sl]
			fs->wflag = 1;
  40405a:	2101      	movs	r1, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
  40405c:	9a01      	ldr	r2, [sp, #4]
  40405e:	f003 030f 	and.w	r3, r3, #15
  404062:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  404066:	f80b 300a 	strb.w	r3, [fp, sl]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40406a:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  40406c:	6b22      	ldr	r2, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40406e:	eb06 2658 	add.w	r6, r6, r8, lsr #9
			fs->wflag = 1;
  404072:	70e1      	strb	r1, [r4, #3]
	if (sect != fs->winsect) {	/* Window offset changed? */
  404074:	42b2      	cmp	r2, r6
  404076:	f000 810d 	beq.w	404294 <put_fat.part.8+0x2a8>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40407a:	2301      	movs	r3, #1
  40407c:	4659      	mov	r1, fp
  40407e:	7860      	ldrb	r0, [r4, #1]
  404080:	f8df 921c 	ldr.w	r9, [pc, #540]	; 4042a0 <put_fat.part.8+0x2b4>
  404084:	47c8      	blx	r9
  404086:	2800      	cmp	r0, #0
  404088:	f040 80ce 	bne.w	404228 <put_fat.part.8+0x23c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40408c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40408e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404090:	69e2      	ldr	r2, [r4, #28]
  404092:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404094:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404096:	4293      	cmp	r3, r2
  404098:	d203      	bcs.n	4040a2 <put_fat.part.8+0xb6>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  40409a:	78a3      	ldrb	r3, [r4, #2]
  40409c:	2b02      	cmp	r3, #2
  40409e:	f000 80f3 	beq.w	404288 <put_fat.part.8+0x29c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4040a2:	2301      	movs	r3, #1
  4040a4:	4632      	mov	r2, r6
  4040a6:	4659      	mov	r1, fp
  4040a8:	7860      	ldrb	r0, [r4, #1]
  4040aa:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 40429c <put_fat.part.8+0x2b0>
  4040ae:	47c8      	blx	r9
  4040b0:	2800      	cmp	r0, #0
  4040b2:	f040 80bb 	bne.w	40422c <put_fat.part.8+0x240>
			p = fs->win + bc % SS(fs);
  4040b6:	f3c8 0308 	ubfx	r3, r8, #0, #9
			fs->winsect = sect;
  4040ba:	6326      	str	r6, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
  4040bc:	449b      	add	fp, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
  4040be:	2d00      	cmp	r5, #0
  4040c0:	f000 80cb 	beq.w	40425a <put_fat.part.8+0x26e>
  4040c4:	9b01      	ldr	r3, [sp, #4]
  4040c6:	f3c3 1707 	ubfx	r7, r3, #4, #8
  4040ca:	e0ce      	b.n	40426a <put_fat.part.8+0x27e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4040cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  4040ce:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4040d0:	eb03 19d1 	add.w	r9, r3, r1, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
  4040d4:	4591      	cmp	r9, r2
  4040d6:	f000 80d4 	beq.w	404282 <put_fat.part.8+0x296>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4040da:	78c3      	ldrb	r3, [r0, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4040dc:	f100 0834 	add.w	r8, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4040e0:	2b00      	cmp	r3, #0
  4040e2:	f040 8087 	bne.w	4041f4 <put_fat.part.8+0x208>
  4040e6:	4646      	mov	r6, r8
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4040e8:	4641      	mov	r1, r8
  4040ea:	2301      	movs	r3, #1
  4040ec:	464a      	mov	r2, r9
  4040ee:	7860      	ldrb	r0, [r4, #1]
  4040f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 40429c <put_fat.part.8+0x2b0>
  4040f4:	47c0      	blx	r8
  4040f6:	2800      	cmp	r0, #0
  4040f8:	f040 8098 	bne.w	40422c <put_fat.part.8+0x240>
			fs->winsect = sect;
  4040fc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  404100:	00ad      	lsls	r5, r5, #2
  404102:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
  404104:	2200      	movs	r2, #0
			fs->wflag = 1;
  404106:	2101      	movs	r1, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  404108:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  40410c:	f023 4770 	bic.w	r7, r3, #4026531840	; 0xf0000000
			fs->wflag = 1;
  404110:	4610      	mov	r0, r2
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  404112:	1973      	adds	r3, r6, r5
	rv = rv << 8 | ptr[2];
  404114:	885b      	ldrh	r3, [r3, #2]
	rv = rv << 8 | ptr[0];
  404116:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
  404118:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
  40411c:	431f      	orrs	r7, r3
	*ptr++ = (BYTE)val; val >>= 8;
  40411e:	0a3b      	lsrs	r3, r7, #8
  404120:	f367 0207 	bfi	r2, r7, #0, #8
  404124:	f363 220f 	bfi	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
  404128:	0c3b      	lsrs	r3, r7, #16
	*ptr++ = (BYTE)val; val >>= 8;
  40412a:	0e3f      	lsrs	r7, r7, #24
	*ptr++ = (BYTE)val; val >>= 8;
  40412c:	f363 4217 	bfi	r2, r3, #16, #8
  404130:	f367 621f 	bfi	r2, r7, #24, #8
  404134:	5172      	str	r2, [r6, r5]
			fs->wflag = 1;
  404136:	70e1      	strb	r1, [r4, #3]
}
  404138:	b003      	add	sp, #12
  40413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40413e:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  404140:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  404142:	eb06 2611 	add.w	r6, r6, r1, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
  404146:	4296      	cmp	r6, r2
  404148:	f000 8095 	beq.w	404276 <put_fat.part.8+0x28a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40414c:	78c3      	ldrb	r3, [r0, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40414e:	f100 0834 	add.w	r8, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404152:	2b00      	cmp	r3, #0
  404154:	d136      	bne.n	4041c4 <put_fat.part.8+0x1d8>
  404156:	46c1      	mov	r9, r8
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404158:	4641      	mov	r1, r8
  40415a:	2301      	movs	r3, #1
  40415c:	4632      	mov	r2, r6
  40415e:	7860      	ldrb	r0, [r4, #1]
  404160:	f8df 8138 	ldr.w	r8, [pc, #312]	; 40429c <put_fat.part.8+0x2b0>
  404164:	47c0      	blx	r8
  404166:	2800      	cmp	r0, #0
  404168:	d160      	bne.n	40422c <put_fat.part.8+0x240>
			fs->winsect = sect;
  40416a:	6326      	str	r6, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
  40416c:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
  40416e:	9e01      	ldr	r6, [sp, #4]
			fs->wflag = 1;
  404170:	2301      	movs	r3, #1
  404172:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
  404174:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
  404178:	f3c6 2107 	ubfx	r1, r6, #8, #8
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
  40417c:	eb09 0205 	add.w	r2, r9, r5
	*ptr++ = (BYTE)val; val >>= 8;
  404180:	f809 6005 	strb.w	r6, [r9, r5]
	*ptr++ = (BYTE)val;
  404184:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
  404186:	70e3      	strb	r3, [r4, #3]
}
  404188:	b003      	add	sp, #12
  40418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40418e:	4633      	mov	r3, r6
  404190:	7840      	ldrb	r0, [r0, #1]
  404192:	4641      	mov	r1, r8
  404194:	4f42      	ldr	r7, [pc, #264]	; (4042a0 <put_fat.part.8+0x2b4>)
  404196:	47b8      	blx	r7
  404198:	46c3      	mov	fp, r8
  40419a:	2800      	cmp	r0, #0
  40419c:	d144      	bne.n	404228 <put_fat.part.8+0x23c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40419e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4041a2:	69e2      	ldr	r2, [r4, #28]
  4041a4:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4041a6:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4041a8:	4293      	cmp	r3, r2
  4041aa:	f4bf af40 	bcs.w	40402e <put_fat.part.8+0x42>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4041ae:	78a3      	ldrb	r3, [r4, #2]
  4041b0:	2b02      	cmp	r3, #2
  4041b2:	f47f af3c 	bne.w	40402e <put_fat.part.8+0x42>
  4041b6:	4633      	mov	r3, r6
  4041b8:	440a      	add	r2, r1
  4041ba:	7860      	ldrb	r0, [r4, #1]
  4041bc:	4641      	mov	r1, r8
  4041be:	4e38      	ldr	r6, [pc, #224]	; (4042a0 <put_fat.part.8+0x2b4>)
  4041c0:	47b0      	blx	r6
  4041c2:	e735      	b.n	404030 <put_fat.part.8+0x44>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4041c4:	2301      	movs	r3, #1
  4041c6:	7840      	ldrb	r0, [r0, #1]
  4041c8:	4641      	mov	r1, r8
  4041ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 4042a0 <put_fat.part.8+0x2b4>
  4041ce:	47d0      	blx	sl
  4041d0:	46c1      	mov	r9, r8
  4041d2:	bb48      	cbnz	r0, 404228 <put_fat.part.8+0x23c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4041d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4041d8:	69e2      	ldr	r2, [r4, #28]
  4041da:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4041dc:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4041de:	4293      	cmp	r3, r2
  4041e0:	d2b9      	bcs.n	404156 <put_fat.part.8+0x16a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4041e2:	78a3      	ldrb	r3, [r4, #2]
  4041e4:	2b02      	cmp	r3, #2
  4041e6:	d1b6      	bne.n	404156 <put_fat.part.8+0x16a>
  4041e8:	440a      	add	r2, r1
  4041ea:	2301      	movs	r3, #1
  4041ec:	4641      	mov	r1, r8
  4041ee:	7860      	ldrb	r0, [r4, #1]
  4041f0:	47d0      	blx	sl
  4041f2:	e7b1      	b.n	404158 <put_fat.part.8+0x16c>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4041f4:	2301      	movs	r3, #1
  4041f6:	7840      	ldrb	r0, [r0, #1]
  4041f8:	4641      	mov	r1, r8
  4041fa:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4042a0 <put_fat.part.8+0x2b4>
  4041fe:	47d0      	blx	sl
  404200:	4646      	mov	r6, r8
  404202:	b988      	cbnz	r0, 404228 <put_fat.part.8+0x23c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404204:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404206:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404208:	69e2      	ldr	r2, [r4, #28]
  40420a:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  40420c:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40420e:	4293      	cmp	r3, r2
  404210:	f4bf af69 	bcs.w	4040e6 <put_fat.part.8+0xfa>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404214:	78a3      	ldrb	r3, [r4, #2]
  404216:	2b02      	cmp	r3, #2
  404218:	f47f af65 	bne.w	4040e6 <put_fat.part.8+0xfa>
  40421c:	440a      	add	r2, r1
  40421e:	2301      	movs	r3, #1
  404220:	4641      	mov	r1, r8
  404222:	7860      	ldrb	r0, [r4, #1]
  404224:	47d0      	blx	sl
  404226:	e75f      	b.n	4040e8 <put_fat.part.8+0xfc>
	FRESULT res = FR_INT_ERR;
  404228:	2001      	movs	r0, #1
  40422a:	e6ee      	b.n	40400a <put_fat.part.8+0x1e>
			fs->winsect = sect;
  40422c:	f04f 33ff 	mov.w	r3, #4294967295
  404230:	2001      	movs	r0, #1
  404232:	6323      	str	r3, [r4, #48]	; 0x30
}
  404234:	b003      	add	sp, #12
  404236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
  40423a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40423e:	f80b 300a 	strb.w	r3, [fp, sl]
			fs->wflag = 1;
  404242:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404244:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  404246:	6b22      	ldr	r2, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404248:	eb06 2658 	add.w	r6, r6, r8, lsr #9
			fs->wflag = 1;
  40424c:	70e3      	strb	r3, [r4, #3]
	if (sect != fs->winsect) {	/* Window offset changed? */
  40424e:	42b2      	cmp	r2, r6
  404250:	f47f af13 	bne.w	40407a <put_fat.part.8+0x8e>
			p = fs->win + bc % SS(fs);
  404254:	f3c8 0308 	ubfx	r3, r8, #0, #9
  404258:	449b      	add	fp, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
  40425a:	f89b 3000 	ldrb.w	r3, [fp]
  40425e:	9a01      	ldr	r2, [sp, #4]
  404260:	f023 070f 	bic.w	r7, r3, #15
  404264:	f3c2 2203 	ubfx	r2, r2, #8, #4
  404268:	4317      	orrs	r7, r2
			fs->wflag = 1;
  40426a:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
  40426c:	f88b 7000 	strb.w	r7, [fp]
			fs->wflag = 1;
  404270:	2000      	movs	r0, #0
  404272:	70e3      	strb	r3, [r4, #3]
  404274:	e6c9      	b.n	40400a <put_fat.part.8+0x1e>
  404276:	f100 0934 	add.w	r9, r0, #52	; 0x34
  40427a:	e777      	b.n	40416c <put_fat.part.8+0x180>
  40427c:	f100 0b34 	add.w	fp, r0, #52	; 0x34
  404280:	e6e1      	b.n	404046 <put_fat.part.8+0x5a>
  404282:	f100 0634 	add.w	r6, r0, #52	; 0x34
  404286:	e73b      	b.n	404100 <put_fat.part.8+0x114>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404288:	440a      	add	r2, r1
  40428a:	2301      	movs	r3, #1
  40428c:	4659      	mov	r1, fp
  40428e:	7860      	ldrb	r0, [r4, #1]
  404290:	47c8      	blx	r9
  404292:	e706      	b.n	4040a2 <put_fat.part.8+0xb6>
			p = fs->win + bc % SS(fs);
  404294:	f3c8 0308 	ubfx	r3, r8, #0, #9
  404298:	449b      	add	fp, r3
  40429a:	e713      	b.n	4040c4 <put_fat.part.8+0xd8>
  40429c:	004078c5 	.word	0x004078c5
  4042a0:	004078e9 	.word	0x004078e9

004042a4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
  4042a4:	2901      	cmp	r1, #1
  4042a6:	d90c      	bls.n	4042c2 <remove_chain+0x1e>
{
  4042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
  4042ac:	6805      	ldr	r5, [r0, #0]
{
  4042ae:	b083      	sub	sp, #12
  4042b0:	460c      	mov	r4, r1
  4042b2:	4682      	mov	sl, r0
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
  4042b4:	69ab      	ldr	r3, [r5, #24]
  4042b6:	4299      	cmp	r1, r3
  4042b8:	d305      	bcc.n	4042c6 <remove_chain+0x22>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
  4042ba:	2002      	movs	r0, #2
}
  4042bc:	b003      	add	sp, #12
  4042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
  4042c2:	2002      	movs	r0, #2
}
  4042c4:	4770      	bx	lr
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
  4042c6:	b17a      	cbz	r2, 4042e8 <remove_chain+0x44>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
  4042c8:	2a01      	cmp	r2, #1
  4042ca:	d9f6      	bls.n	4042ba <remove_chain+0x16>
  4042cc:	4293      	cmp	r3, r2
  4042ce:	d9f4      	bls.n	4042ba <remove_chain+0x16>
  4042d0:	4611      	mov	r1, r2
  4042d2:	4628      	mov	r0, r5
  4042d4:	f04f 32ff 	mov.w	r2, #4294967295
  4042d8:	4b9a      	ldr	r3, [pc, #616]	; (404544 <remove_chain+0x2a0>)
  4042da:	4798      	blx	r3
		if (res != FR_OK) return res;
  4042dc:	2800      	cmp	r0, #0
  4042de:	d1ed      	bne.n	4042bc <remove_chain+0x18>
  4042e0:	f8da 6000 	ldr.w	r6, [sl]
  4042e4:	69b3      	ldr	r3, [r6, #24]
  4042e6:	e000      	b.n	4042ea <remove_chain+0x46>
  4042e8:	462e      	mov	r6, r5
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4042ea:	f8df b260 	ldr.w	fp, [pc, #608]	; 40454c <remove_chain+0x2a8>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  4042ee:	42a3      	cmp	r3, r4
  4042f0:	d9e3      	bls.n	4042ba <remove_chain+0x16>
		switch (fs->fs_type) {
  4042f2:	7833      	ldrb	r3, [r6, #0]
  4042f4:	2b02      	cmp	r3, #2
  4042f6:	9300      	str	r3, [sp, #0]
  4042f8:	d06d      	beq.n	4043d6 <remove_chain+0x132>
  4042fa:	2b03      	cmp	r3, #3
  4042fc:	f000 808a 	beq.w	404414 <remove_chain+0x170>
  404300:	2b01      	cmp	r3, #1
  404302:	d1da      	bne.n	4042ba <remove_chain+0x16>
			bc = (UINT)clst; bc += bc / 2;
  404304:	eb04 0954 	add.w	r9, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  404308:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  40430a:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  40430c:	eb03 2859 	add.w	r8, r3, r9, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
  404310:	4590      	cmp	r8, r2
  404312:	d012      	beq.n	40433a <remove_chain+0x96>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404314:	78f3      	ldrb	r3, [r6, #3]
  404316:	2b00      	cmp	r3, #0
  404318:	f040 80bc 	bne.w	404494 <remove_chain+0x1f0>
  40431c:	f106 0334 	add.w	r3, r6, #52	; 0x34
  404320:	9301      	str	r3, [sp, #4]
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404322:	9901      	ldr	r1, [sp, #4]
  404324:	2301      	movs	r3, #1
  404326:	4642      	mov	r2, r8
  404328:	7870      	ldrb	r0, [r6, #1]
  40432a:	47d8      	blx	fp
  40432c:	2800      	cmp	r0, #0
  40432e:	f040 8093 	bne.w	404458 <remove_chain+0x1b4>
			fs->winsect = sect;
  404332:	4642      	mov	r2, r8
  404334:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404336:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  40433a:	f109 0001 	add.w	r0, r9, #1
  40433e:	f3c9 0108 	ubfx	r1, r9, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  404342:	eb03 2850 	add.w	r8, r3, r0, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  404346:	4431      	add	r1, r6
  404348:	9000      	str	r0, [sp, #0]
  40434a:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
	if (sect != fs->winsect) {	/* Window offset changed? */
  40434e:	4590      	cmp	r8, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  404350:	9301      	str	r3, [sp, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
  404352:	d00e      	beq.n	404372 <remove_chain+0xce>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404354:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404356:	f106 0934 	add.w	r9, r6, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40435a:	2b00      	cmp	r3, #0
  40435c:	f040 80d9 	bne.w	404512 <remove_chain+0x26e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404360:	4649      	mov	r1, r9
  404362:	2301      	movs	r3, #1
  404364:	4642      	mov	r2, r8
  404366:	7870      	ldrb	r0, [r6, #1]
  404368:	47d8      	blx	fp
  40436a:	2800      	cmp	r0, #0
  40436c:	d174      	bne.n	404458 <remove_chain+0x1b4>
			fs->winsect = sect;
  40436e:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
  404372:	9b00      	ldr	r3, [sp, #0]
  404374:	f3c3 0708 	ubfx	r7, r3, #0, #9
  404378:	9b01      	ldr	r3, [sp, #4]
  40437a:	443e      	add	r6, r7
  40437c:	f896 7034 	ldrb.w	r7, [r6, #52]	; 0x34
  404380:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
  404384:	07e3      	lsls	r3, r4, #31
  404386:	bf4c      	ite	mi
  404388:	093f      	lsrmi	r7, r7, #4
  40438a:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
  40438e:	2f00      	cmp	r7, #0
  404390:	f000 80ba 	beq.w	404508 <remove_chain+0x264>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
  404394:	2f01      	cmp	r7, #1
  404396:	d090      	beq.n	4042ba <remove_chain+0x16>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
  404398:	2c01      	cmp	r4, #1
  40439a:	d98e      	bls.n	4042ba <remove_chain+0x16>
  40439c:	69ab      	ldr	r3, [r5, #24]
  40439e:	42a3      	cmp	r3, r4
  4043a0:	d98b      	bls.n	4042ba <remove_chain+0x16>
  4043a2:	4621      	mov	r1, r4
  4043a4:	2200      	movs	r2, #0
  4043a6:	4628      	mov	r0, r5
  4043a8:	4b66      	ldr	r3, [pc, #408]	; (404544 <remove_chain+0x2a0>)
  4043aa:	4798      	blx	r3
			if (res != FR_OK) return res;
  4043ac:	2800      	cmp	r0, #0
  4043ae:	d185      	bne.n	4042bc <remove_chain+0x18>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
  4043b0:	69aa      	ldr	r2, [r5, #24]
  4043b2:	696b      	ldr	r3, [r5, #20]
  4043b4:	1e91      	subs	r1, r2, #2
  4043b6:	428b      	cmp	r3, r1
  4043b8:	d205      	bcs.n	4043c6 <remove_chain+0x122>
			fs->fsi_flag |= 1;
  4043ba:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
  4043bc:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
  4043be:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
  4043c2:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
  4043c4:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
  4043c6:	42ba      	cmp	r2, r7
  4043c8:	f240 809e 	bls.w	404508 <remove_chain+0x264>
  4043cc:	f8da 6000 	ldr.w	r6, [sl]
  4043d0:	463c      	mov	r4, r7
  4043d2:	69b3      	ldr	r3, [r6, #24]
  4043d4:	e78b      	b.n	4042ee <remove_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  4043d6:	6a77      	ldr	r7, [r6, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  4043d8:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  4043da:	eb07 2914 	add.w	r9, r7, r4, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
  4043de:	4591      	cmp	r9, r2
  4043e0:	f000 808d 	beq.w	4044fe <remove_chain+0x25a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4043e4:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4043e6:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4043ea:	2b00      	cmp	r3, #0
  4043ec:	d16e      	bne.n	4044cc <remove_chain+0x228>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4043ee:	2301      	movs	r3, #1
  4043f0:	464a      	mov	r2, r9
  4043f2:	4641      	mov	r1, r8
  4043f4:	7870      	ldrb	r0, [r6, #1]
  4043f6:	47d8      	blx	fp
  4043f8:	bb70      	cbnz	r0, 404458 <remove_chain+0x1b4>
			fs->winsect = sect;
  4043fa:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  4043fe:	0063      	lsls	r3, r4, #1
  404400:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  404404:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
  404408:	f818 7003 	ldrb.w	r7, [r8, r3]
  40440c:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  40440e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  404412:	e7bc      	b.n	40438e <remove_chain+0xea>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  404414:	6a77      	ldr	r7, [r6, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  404416:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  404418:	eb07 19d4 	add.w	r9, r7, r4, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
  40441c:	4591      	cmp	r9, r2
  40441e:	d06b      	beq.n	4044f8 <remove_chain+0x254>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404420:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404422:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404426:	b9f3      	cbnz	r3, 404466 <remove_chain+0x1c2>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404428:	2301      	movs	r3, #1
  40442a:	464a      	mov	r2, r9
  40442c:	4641      	mov	r1, r8
  40442e:	7870      	ldrb	r0, [r6, #1]
  404430:	47d8      	blx	fp
  404432:	b988      	cbnz	r0, 404458 <remove_chain+0x1b4>
			fs->winsect = sect;
  404434:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  404438:	00a3      	lsls	r3, r4, #2
  40443a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  40443e:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
  404442:	f818 7003 	ldrb.w	r7, [r8, r3]
	rv = rv << 8 | ptr[2];
  404446:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
  404448:	7853      	ldrb	r3, [r2, #1]
  40444a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
  40444e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  404452:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
  404456:	e79a      	b.n	40438e <remove_chain+0xea>
			fs->winsect = sect;
  404458:	f04f 33ff 	mov.w	r3, #4294967295
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
  40445c:	2001      	movs	r0, #1
			fs->winsect = sect;
  40445e:	6333      	str	r3, [r6, #48]	; 0x30
}
  404460:	b003      	add	sp, #12
  404462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404466:	2301      	movs	r3, #1
  404468:	7870      	ldrb	r0, [r6, #1]
  40446a:	4641      	mov	r1, r8
  40446c:	4f36      	ldr	r7, [pc, #216]	; (404548 <remove_chain+0x2a4>)
  40446e:	47b8      	blx	r7
  404470:	2800      	cmp	r0, #0
  404472:	d147      	bne.n	404504 <remove_chain+0x260>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404474:	6b31      	ldr	r1, [r6, #48]	; 0x30
  404476:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404478:	69f2      	ldr	r2, [r6, #28]
  40447a:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  40447c:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40447e:	4293      	cmp	r3, r2
  404480:	d2d2      	bcs.n	404428 <remove_chain+0x184>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404482:	78b3      	ldrb	r3, [r6, #2]
  404484:	2b02      	cmp	r3, #2
  404486:	d1cf      	bne.n	404428 <remove_chain+0x184>
  404488:	440a      	add	r2, r1
  40448a:	2301      	movs	r3, #1
  40448c:	4641      	mov	r1, r8
  40448e:	7870      	ldrb	r0, [r6, #1]
  404490:	47b8      	blx	r7
  404492:	e7c9      	b.n	404428 <remove_chain+0x184>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404494:	f106 0334 	add.w	r3, r6, #52	; 0x34
  404498:	7870      	ldrb	r0, [r6, #1]
  40449a:	4f2b      	ldr	r7, [pc, #172]	; (404548 <remove_chain+0x2a4>)
  40449c:	4619      	mov	r1, r3
  40449e:	9301      	str	r3, [sp, #4]
  4044a0:	9b00      	ldr	r3, [sp, #0]
  4044a2:	47b8      	blx	r7
  4044a4:	2800      	cmp	r0, #0
  4044a6:	d131      	bne.n	40450c <remove_chain+0x268>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4044a8:	6b31      	ldr	r1, [r6, #48]	; 0x30
  4044aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4044ac:	69f2      	ldr	r2, [r6, #28]
  4044ae:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4044b0:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4044b2:	4293      	cmp	r3, r2
  4044b4:	f4bf af35 	bcs.w	404322 <remove_chain+0x7e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4044b8:	78b3      	ldrb	r3, [r6, #2]
  4044ba:	2b02      	cmp	r3, #2
  4044bc:	f47f af31 	bne.w	404322 <remove_chain+0x7e>
  4044c0:	440a      	add	r2, r1
  4044c2:	9b00      	ldr	r3, [sp, #0]
  4044c4:	9901      	ldr	r1, [sp, #4]
  4044c6:	7870      	ldrb	r0, [r6, #1]
  4044c8:	47b8      	blx	r7
  4044ca:	e72a      	b.n	404322 <remove_chain+0x7e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4044cc:	2301      	movs	r3, #1
  4044ce:	7870      	ldrb	r0, [r6, #1]
  4044d0:	4641      	mov	r1, r8
  4044d2:	4f1d      	ldr	r7, [pc, #116]	; (404548 <remove_chain+0x2a4>)
  4044d4:	47b8      	blx	r7
  4044d6:	b9a8      	cbnz	r0, 404504 <remove_chain+0x260>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4044d8:	6b31      	ldr	r1, [r6, #48]	; 0x30
  4044da:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4044dc:	69f2      	ldr	r2, [r6, #28]
  4044de:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4044e0:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4044e2:	4293      	cmp	r3, r2
  4044e4:	d283      	bcs.n	4043ee <remove_chain+0x14a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4044e6:	78b3      	ldrb	r3, [r6, #2]
  4044e8:	2b02      	cmp	r3, #2
  4044ea:	d180      	bne.n	4043ee <remove_chain+0x14a>
  4044ec:	440a      	add	r2, r1
  4044ee:	2301      	movs	r3, #1
  4044f0:	4641      	mov	r1, r8
  4044f2:	7870      	ldrb	r0, [r6, #1]
  4044f4:	47b8      	blx	r7
  4044f6:	e77a      	b.n	4043ee <remove_chain+0x14a>
  4044f8:	f106 0834 	add.w	r8, r6, #52	; 0x34
  4044fc:	e79c      	b.n	404438 <remove_chain+0x194>
  4044fe:	f106 0834 	add.w	r8, r6, #52	; 0x34
  404502:	e77c      	b.n	4043fe <remove_chain+0x15a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
  404504:	2001      	movs	r0, #1
  404506:	e6d9      	b.n	4042bc <remove_chain+0x18>
	return FR_OK;
  404508:	2000      	movs	r0, #0
  40450a:	e6d7      	b.n	4042bc <remove_chain+0x18>
  40450c:	9f00      	ldr	r7, [sp, #0]
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
  40450e:	4638      	mov	r0, r7
  404510:	e6d4      	b.n	4042bc <remove_chain+0x18>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404512:	2301      	movs	r3, #1
  404514:	7870      	ldrb	r0, [r6, #1]
  404516:	4649      	mov	r1, r9
  404518:	4f0b      	ldr	r7, [pc, #44]	; (404548 <remove_chain+0x2a4>)
  40451a:	47b8      	blx	r7
  40451c:	2800      	cmp	r0, #0
  40451e:	d1f1      	bne.n	404504 <remove_chain+0x260>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404520:	6b31      	ldr	r1, [r6, #48]	; 0x30
  404522:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404524:	69f2      	ldr	r2, [r6, #28]
  404526:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404528:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40452a:	4293      	cmp	r3, r2
  40452c:	f4bf af18 	bcs.w	404360 <remove_chain+0xbc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404530:	78b3      	ldrb	r3, [r6, #2]
  404532:	2b02      	cmp	r3, #2
  404534:	f47f af14 	bne.w	404360 <remove_chain+0xbc>
  404538:	440a      	add	r2, r1
  40453a:	2301      	movs	r3, #1
  40453c:	4649      	mov	r1, r9
  40453e:	7870      	ldrb	r0, [r6, #1]
  404540:	47b8      	blx	r7
  404542:	e70d      	b.n	404360 <remove_chain+0xbc>
  404544:	00403fed 	.word	0x00403fed
  404548:	004078e9 	.word	0x004078e9
  40454c:	004078c5 	.word	0x004078c5

00404550 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  404550:	2901      	cmp	r1, #1
  404552:	d910      	bls.n	404576 <get_fat.isra.9+0x26>
  404554:	6983      	ldr	r3, [r0, #24]
  404556:	4299      	cmp	r1, r3
  404558:	d20d      	bcs.n	404576 <get_fat.isra.9+0x26>
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
  40455a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
  40455e:	7803      	ldrb	r3, [r0, #0]
  404560:	4604      	mov	r4, r0
  404562:	460d      	mov	r5, r1
  404564:	2b02      	cmp	r3, #2
  404566:	d048      	beq.n	4045fa <get_fat.isra.9+0xaa>
  404568:	2b03      	cmp	r3, #3
  40456a:	d05f      	beq.n	40462c <get_fat.isra.9+0xdc>
  40456c:	2b01      	cmp	r3, #1
  40456e:	d004      	beq.n	40457a <get_fat.isra.9+0x2a>
			val = 1;	/* Internal error */
  404570:	2001      	movs	r0, #1
  404572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		val = 1;	/* Internal error */
  404576:	2001      	movs	r0, #1
  404578:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
  40457a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  40457e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  404580:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  404582:	eb01 2758 	add.w	r7, r1, r8, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
  404586:	4297      	cmp	r7, r2
  404588:	d010      	beq.n	4045ac <get_fat.isra.9+0x5c>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40458a:	78c1      	ldrb	r1, [r0, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40458c:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404590:	2900      	cmp	r1, #0
  404592:	f040 80b2 	bne.w	4046fa <get_fat.isra.9+0x1aa>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404596:	4631      	mov	r1, r6
  404598:	2301      	movs	r3, #1
  40459a:	463a      	mov	r2, r7
  40459c:	7860      	ldrb	r0, [r4, #1]
  40459e:	4e73      	ldr	r6, [pc, #460]	; (40476c <get_fat.isra.9+0x21c>)
  4045a0:	47b0      	blx	r6
  4045a2:	2800      	cmp	r0, #0
  4045a4:	d13d      	bne.n	404622 <get_fat.isra.9+0xd2>
			fs->winsect = sect;
  4045a6:	463a      	mov	r2, r7
  4045a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  4045aa:	6327      	str	r7, [r4, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  4045ac:	f3c8 0308 	ubfx	r3, r8, #0, #9
  4045b0:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  4045b4:	eb01 2758 	add.w	r7, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  4045b8:	4423      	add	r3, r4
	if (sect != fs->winsect) {	/* Window offset changed? */
  4045ba:	4297      	cmp	r7, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  4045bc:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
	if (sect != fs->winsect) {	/* Window offset changed? */
  4045c0:	d00d      	beq.n	4045de <get_fat.isra.9+0x8e>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4045c2:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4045c4:	f104 0634 	add.w	r6, r4, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4045c8:	2b00      	cmp	r3, #0
  4045ca:	f040 80b5 	bne.w	404738 <get_fat.isra.9+0x1e8>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4045ce:	4631      	mov	r1, r6
  4045d0:	2301      	movs	r3, #1
  4045d2:	463a      	mov	r2, r7
  4045d4:	7860      	ldrb	r0, [r4, #1]
  4045d6:	4e65      	ldr	r6, [pc, #404]	; (40476c <get_fat.isra.9+0x21c>)
  4045d8:	47b0      	blx	r6
  4045da:	bb10      	cbnz	r0, 404622 <get_fat.isra.9+0xd2>
			fs->winsect = sect;
  4045dc:	6327      	str	r7, [r4, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
  4045de:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
  4045e2:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
  4045e4:	4444      	add	r4, r8
  4045e6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
  4045ea:	ea49 2000 	orr.w	r0, r9, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
  4045ee:	bf4c      	ite	mi
  4045f0:	0900      	lsrmi	r0, r0, #4
  4045f2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
  4045f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  4045fa:	6a47      	ldr	r7, [r0, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  4045fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  4045fe:	eb07 2711 	add.w	r7, r7, r1, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
  404602:	4297      	cmp	r7, r2
  404604:	f000 8095 	beq.w	404732 <get_fat.isra.9+0x1e2>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404608:	78c3      	ldrb	r3, [r0, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40460a:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40460e:	2b00      	cmp	r3, #0
  404610:	d13f      	bne.n	404692 <get_fat.isra.9+0x142>
  404612:	46b0      	mov	r8, r6
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404614:	4631      	mov	r1, r6
  404616:	2301      	movs	r3, #1
  404618:	463a      	mov	r2, r7
  40461a:	7860      	ldrb	r0, [r4, #1]
  40461c:	4e53      	ldr	r6, [pc, #332]	; (40476c <get_fat.isra.9+0x21c>)
  40461e:	47b0      	blx	r6
  404620:	b350      	cbz	r0, 404678 <get_fat.isra.9+0x128>
			fs->winsect = sect;
  404622:	f04f 30ff 	mov.w	r0, #4294967295
  404626:	6320      	str	r0, [r4, #48]	; 0x30
  404628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  40462c:	6a47      	ldr	r7, [r0, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  40462e:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  404630:	eb07 17d1 	add.w	r7, r7, r1, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
  404634:	4297      	cmp	r7, r2
  404636:	d079      	beq.n	40472c <get_fat.isra.9+0x1dc>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404638:	78c3      	ldrb	r3, [r0, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40463a:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40463e:	2b00      	cmp	r3, #0
  404640:	d13f      	bne.n	4046c2 <get_fat.isra.9+0x172>
  404642:	46b0      	mov	r8, r6
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404644:	4631      	mov	r1, r6
  404646:	2301      	movs	r3, #1
  404648:	463a      	mov	r2, r7
  40464a:	7860      	ldrb	r0, [r4, #1]
  40464c:	4e47      	ldr	r6, [pc, #284]	; (40476c <get_fat.isra.9+0x21c>)
  40464e:	47b0      	blx	r6
  404650:	2800      	cmp	r0, #0
  404652:	d1e6      	bne.n	404622 <get_fat.isra.9+0xd2>
			fs->winsect = sect;
  404654:	6327      	str	r7, [r4, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  404656:	00a9      	lsls	r1, r5, #2
  404658:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  40465c:	eb08 0201 	add.w	r2, r8, r1
	rv = rv << 8 | ptr[0];
  404660:	f818 0001 	ldrb.w	r0, [r8, r1]
	rv = rv << 8 | ptr[1];
  404664:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
  404666:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
  404668:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
  40466c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  404670:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  404674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fs->winsect = sect;
  404678:	6327      	str	r7, [r4, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  40467a:	0069      	lsls	r1, r5, #1
  40467c:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
  404680:	eb08 0301 	add.w	r3, r8, r1
	rv = rv << 8 | ptr[0];
  404684:	f818 0001 	ldrb.w	r0, [r8, r1]
  404688:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  40468a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404692:	2301      	movs	r3, #1
  404694:	7840      	ldrb	r0, [r0, #1]
  404696:	4631      	mov	r1, r6
  404698:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 404770 <get_fat.isra.9+0x220>
  40469c:	47c8      	blx	r9
  40469e:	46b0      	mov	r8, r6
  4046a0:	bb38      	cbnz	r0, 4046f2 <get_fat.isra.9+0x1a2>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4046a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4046a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4046a6:	69e2      	ldr	r2, [r4, #28]
  4046a8:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4046aa:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4046ac:	4293      	cmp	r3, r2
  4046ae:	d2b0      	bcs.n	404612 <get_fat.isra.9+0xc2>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4046b0:	78a3      	ldrb	r3, [r4, #2]
  4046b2:	2b02      	cmp	r3, #2
  4046b4:	d1ad      	bne.n	404612 <get_fat.isra.9+0xc2>
  4046b6:	440a      	add	r2, r1
  4046b8:	2301      	movs	r3, #1
  4046ba:	4631      	mov	r1, r6
  4046bc:	7860      	ldrb	r0, [r4, #1]
  4046be:	47c8      	blx	r9
  4046c0:	e7a8      	b.n	404614 <get_fat.isra.9+0xc4>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4046c2:	2301      	movs	r3, #1
  4046c4:	7840      	ldrb	r0, [r0, #1]
  4046c6:	4631      	mov	r1, r6
  4046c8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 404770 <get_fat.isra.9+0x220>
  4046cc:	47c8      	blx	r9
  4046ce:	46b0      	mov	r8, r6
  4046d0:	b978      	cbnz	r0, 4046f2 <get_fat.isra.9+0x1a2>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4046d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4046d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4046d6:	69e2      	ldr	r2, [r4, #28]
  4046d8:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4046da:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4046dc:	4293      	cmp	r3, r2
  4046de:	d2b0      	bcs.n	404642 <get_fat.isra.9+0xf2>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4046e0:	78a3      	ldrb	r3, [r4, #2]
  4046e2:	2b02      	cmp	r3, #2
  4046e4:	d1ad      	bne.n	404642 <get_fat.isra.9+0xf2>
  4046e6:	440a      	add	r2, r1
  4046e8:	2301      	movs	r3, #1
  4046ea:	4631      	mov	r1, r6
  4046ec:	7860      	ldrb	r0, [r4, #1]
  4046ee:	47c8      	blx	r9
  4046f0:	e7a8      	b.n	404644 <get_fat.isra.9+0xf4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
  4046f2:	f04f 30ff 	mov.w	r0, #4294967295
  4046f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4046fa:	7840      	ldrb	r0, [r0, #1]
  4046fc:	4631      	mov	r1, r6
  4046fe:	f8df 9070 	ldr.w	r9, [pc, #112]	; 404770 <get_fat.isra.9+0x220>
  404702:	47c8      	blx	r9
  404704:	2800      	cmp	r0, #0
  404706:	d1f4      	bne.n	4046f2 <get_fat.isra.9+0x1a2>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404708:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40470a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40470c:	69e2      	ldr	r2, [r4, #28]
  40470e:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404710:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404712:	4293      	cmp	r3, r2
  404714:	f4bf af3f 	bcs.w	404596 <get_fat.isra.9+0x46>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404718:	78a3      	ldrb	r3, [r4, #2]
  40471a:	2b02      	cmp	r3, #2
  40471c:	f47f af3b 	bne.w	404596 <get_fat.isra.9+0x46>
  404720:	440a      	add	r2, r1
  404722:	2301      	movs	r3, #1
  404724:	4631      	mov	r1, r6
  404726:	7860      	ldrb	r0, [r4, #1]
  404728:	47c8      	blx	r9
  40472a:	e734      	b.n	404596 <get_fat.isra.9+0x46>
  40472c:	f100 0834 	add.w	r8, r0, #52	; 0x34
  404730:	e791      	b.n	404656 <get_fat.isra.9+0x106>
  404732:	f100 0834 	add.w	r8, r0, #52	; 0x34
  404736:	e7a0      	b.n	40467a <get_fat.isra.9+0x12a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404738:	2301      	movs	r3, #1
  40473a:	7860      	ldrb	r0, [r4, #1]
  40473c:	4631      	mov	r1, r6
  40473e:	f8df a030 	ldr.w	sl, [pc, #48]	; 404770 <get_fat.isra.9+0x220>
  404742:	47d0      	blx	sl
  404744:	2800      	cmp	r0, #0
  404746:	d1d4      	bne.n	4046f2 <get_fat.isra.9+0x1a2>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404748:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40474a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40474c:	69e2      	ldr	r2, [r4, #28]
  40474e:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404750:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404752:	4293      	cmp	r3, r2
  404754:	f4bf af3b 	bcs.w	4045ce <get_fat.isra.9+0x7e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404758:	78a3      	ldrb	r3, [r4, #2]
  40475a:	2b02      	cmp	r3, #2
  40475c:	f47f af37 	bne.w	4045ce <get_fat.isra.9+0x7e>
  404760:	440a      	add	r2, r1
  404762:	2301      	movs	r3, #1
  404764:	4631      	mov	r1, r6
  404766:	7860      	ldrb	r0, [r4, #1]
  404768:	47d0      	blx	sl
  40476a:	e730      	b.n	4045ce <get_fat.isra.9+0x7e>
  40476c:	004078c5 	.word	0x004078c5
  404770:	004078e9 	.word	0x004078e9

00404774 <create_chain>:
{
  404774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404778:	4683      	mov	fp, r0
  40477a:	b085      	sub	sp, #20
	if (clst == 0) {	/* Create a new chain */
  40477c:	468a      	mov	sl, r1
	FATFS *fs = obj->fs;
  40477e:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
  404782:	2900      	cmp	r1, #0
  404784:	f040 80b3 	bne.w	4048ee <create_chain+0x17a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
  404788:	f8d8 7010 	ldr.w	r7, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
  40478c:	b317      	cbz	r7, 4047d4 <create_chain+0x60>
  40478e:	f8d8 3018 	ldr.w	r3, [r8, #24]
  404792:	429f      	cmp	r7, r3
  404794:	bf28      	it	cs
  404796:	2701      	movcs	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
  404798:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40479c:	b1fb      	cbz	r3, 4047de <create_chain+0x6a>
  40479e:	f8d8 3018 	ldr.w	r3, [r8, #24]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
  4047a2:	463c      	mov	r4, r7
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4047a4:	f8cd a00c 	str.w	sl, [sp, #12]
				ncl++;							/* Next cluster */
  4047a8:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
  4047aa:	429c      	cmp	r4, r3
  4047ac:	d31c      	bcc.n	4047e8 <create_chain+0x74>
					if (ncl > scl) return 0;	/* No free cluster found? */
  4047ae:	2f01      	cmp	r7, #1
  4047b0:	d915      	bls.n	4047de <create_chain+0x6a>
  4047b2:	f8db 5000 	ldr.w	r5, [fp]
					ncl = 2;
  4047b6:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  4047b8:	69ab      	ldr	r3, [r5, #24]
  4047ba:	42a3      	cmp	r3, r4
  4047bc:	d918      	bls.n	4047f0 <create_chain+0x7c>
		switch (fs->fs_type) {
  4047be:	782b      	ldrb	r3, [r5, #0]
  4047c0:	2b02      	cmp	r3, #2
  4047c2:	9301      	str	r3, [sp, #4]
  4047c4:	d019      	beq.n	4047fa <create_chain+0x86>
  4047c6:	2b03      	cmp	r3, #3
  4047c8:	d042      	beq.n	404850 <create_chain+0xdc>
  4047ca:	2b01      	cmp	r3, #1
  4047cc:	d072      	beq.n	4048b4 <create_chain+0x140>
			val = 1;	/* Internal error */
  4047ce:	2301      	movs	r3, #1
					if (ncl > scl) return 0;	/* No free cluster found? */
  4047d0:	461c      	mov	r4, r3
  4047d2:	e00e      	b.n	4047f2 <create_chain+0x7e>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
  4047d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
  4047d8:	2701      	movs	r7, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
  4047da:	2b00      	cmp	r3, #0
  4047dc:	d1df      	bne.n	40479e <create_chain+0x2a>
					if (ncl > scl) return 0;	/* No free cluster found? */
  4047de:	2400      	movs	r4, #0
}
  4047e0:	4620      	mov	r0, r4
  4047e2:	b005      	add	sp, #20
  4047e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  4047e8:	2c01      	cmp	r4, #1
  4047ea:	f8db 5000 	ldr.w	r5, [fp]
  4047ee:	d8e3      	bhi.n	4047b8 <create_chain+0x44>
		val = 1;	/* Internal error */
  4047f0:	2401      	movs	r4, #1
}
  4047f2:	4620      	mov	r0, r4
  4047f4:	b005      	add	sp, #20
  4047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  4047fa:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  4047fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  4047fe:	eb06 2a14 	add.w	sl, r6, r4, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
  404802:	4592      	cmp	sl, r2
  404804:	f000 8123 	beq.w	404a4e <create_chain+0x2da>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404808:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40480a:	f105 0934 	add.w	r9, r5, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40480e:	2b00      	cmp	r3, #0
  404810:	f040 80df 	bne.w	4049d2 <create_chain+0x25e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404814:	2301      	movs	r3, #1
  404816:	4652      	mov	r2, sl
  404818:	4649      	mov	r1, r9
  40481a:	7868      	ldrb	r0, [r5, #1]
  40481c:	4eae      	ldr	r6, [pc, #696]	; (404ad8 <create_chain+0x364>)
  40481e:	47b0      	blx	r6
  404820:	2800      	cmp	r0, #0
  404822:	d140      	bne.n	4048a6 <create_chain+0x132>
			fs->winsect = sect;
  404824:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  404828:	0063      	lsls	r3, r4, #1
  40482a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  40482e:	eb09 0203 	add.w	r2, r9, r3
	rv = rv << 8 | ptr[0];
  404832:	f819 3003 	ldrb.w	r3, [r9, r3]
  404836:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  404838:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				if (cs == 0) break;				/* Found a free cluster? */
  40483c:	2b00      	cmp	r3, #0
  40483e:	f000 816f 	beq.w	404b20 <create_chain+0x3ac>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
  404842:	2b01      	cmp	r3, #1
  404844:	d0c4      	beq.n	4047d0 <create_chain+0x5c>
				if (ncl == scl) return 0;		/* No free cluster found? */
  404846:	42a7      	cmp	r7, r4
  404848:	d0c9      	beq.n	4047de <create_chain+0x6a>
  40484a:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40484e:	e7ab      	b.n	4047a8 <create_chain+0x34>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  404850:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  404852:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  404854:	eb06 1ad4 	add.w	sl, r6, r4, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
  404858:	4592      	cmp	sl, r2
  40485a:	f000 80fb 	beq.w	404a54 <create_chain+0x2e0>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40485e:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404860:	f105 0934 	add.w	r9, r5, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404864:	b1b3      	cbz	r3, 404894 <create_chain+0x120>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404866:	2301      	movs	r3, #1
  404868:	7868      	ldrb	r0, [r5, #1]
  40486a:	4649      	mov	r1, r9
  40486c:	4e9b      	ldr	r6, [pc, #620]	; (404adc <create_chain+0x368>)
  40486e:	47b0      	blx	r6
  404870:	2800      	cmp	r0, #0
  404872:	f040 80e6 	bne.w	404a42 <create_chain+0x2ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404876:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404878:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40487a:	69ea      	ldr	r2, [r5, #28]
  40487c:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  40487e:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404880:	4293      	cmp	r3, r2
  404882:	d207      	bcs.n	404894 <create_chain+0x120>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404884:	78ab      	ldrb	r3, [r5, #2]
  404886:	2b02      	cmp	r3, #2
  404888:	d104      	bne.n	404894 <create_chain+0x120>
  40488a:	440a      	add	r2, r1
  40488c:	2301      	movs	r3, #1
  40488e:	4649      	mov	r1, r9
  404890:	7868      	ldrb	r0, [r5, #1]
  404892:	47b0      	blx	r6
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404894:	2301      	movs	r3, #1
  404896:	4652      	mov	r2, sl
  404898:	4649      	mov	r1, r9
  40489a:	7868      	ldrb	r0, [r5, #1]
  40489c:	4e8e      	ldr	r6, [pc, #568]	; (404ad8 <create_chain+0x364>)
  40489e:	47b0      	blx	r6
  4048a0:	2800      	cmp	r0, #0
  4048a2:	f000 8084 	beq.w	4049ae <create_chain+0x23a>
			fs->winsect = sect;
  4048a6:	f04f 34ff 	mov.w	r4, #4294967295
}
  4048aa:	4620      	mov	r0, r4
			fs->winsect = sect;
  4048ac:	632c      	str	r4, [r5, #48]	; 0x30
}
  4048ae:	b005      	add	sp, #20
  4048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bc = (UINT)clst; bc += bc / 2;
  4048b4:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  4048b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  4048ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  4048bc:	eb03 295a 	add.w	r9, r3, sl, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
  4048c0:	4591      	cmp	r9, r2
  4048c2:	f000 80ce 	beq.w	404a62 <create_chain+0x2ee>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4048c6:	78eb      	ldrb	r3, [r5, #3]
  4048c8:	2b00      	cmp	r3, #0
  4048ca:	f040 809b 	bne.w	404a04 <create_chain+0x290>
  4048ce:	f105 0334 	add.w	r3, r5, #52	; 0x34
  4048d2:	9302      	str	r3, [sp, #8]
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4048d4:	9902      	ldr	r1, [sp, #8]
  4048d6:	2301      	movs	r3, #1
  4048d8:	464a      	mov	r2, r9
  4048da:	7868      	ldrb	r0, [r5, #1]
  4048dc:	4e7e      	ldr	r6, [pc, #504]	; (404ad8 <create_chain+0x364>)
  4048de:	47b0      	blx	r6
  4048e0:	2800      	cmp	r0, #0
  4048e2:	f000 80ba 	beq.w	404a5a <create_chain+0x2e6>
			fs->winsect = sect;
  4048e6:	f04f 33ff 	mov.w	r3, #4294967295
  4048ea:	632b      	str	r3, [r5, #48]	; 0x30
  4048ec:	e770      	b.n	4047d0 <create_chain+0x5c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
  4048ee:	4640      	mov	r0, r8
  4048f0:	4d7b      	ldr	r5, [pc, #492]	; (404ae0 <create_chain+0x36c>)
  4048f2:	47a8      	blx	r5
		if (cs < 2) return 1;				/* Test for insanity */
  4048f4:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
  4048f6:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
  4048f8:	f67f af7a 	bls.w	4047f0 <create_chain+0x7c>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
  4048fc:	3001      	adds	r0, #1
  4048fe:	f000 80a0 	beq.w	404a42 <create_chain+0x2ce>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  404902:	f8d8 3018 	ldr.w	r3, [r8, #24]
  404906:	429c      	cmp	r4, r3
  404908:	f4ff af73 	bcc.w	4047f2 <create_chain+0x7e>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
  40490c:	f8d8 2014 	ldr.w	r2, [r8, #20]
  404910:	2a00      	cmp	r2, #0
  404912:	f43f af64 	beq.w	4047de <create_chain+0x6a>
			ncl = scl + 1;						/* Test if next cluster is free */
  404916:	f10a 0401 	add.w	r4, sl, #1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
  40491a:	f8db 0000 	ldr.w	r0, [fp]
			if (ncl >= fs->n_fatent) ncl = 2;
  40491e:	42a3      	cmp	r3, r4
  404920:	bf98      	it	ls
  404922:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
  404924:	4621      	mov	r1, r4
  404926:	47a8      	blx	r5
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
  404928:	2801      	cmp	r0, #1
  40492a:	f000 80c6 	beq.w	404aba <create_chain+0x346>
  40492e:	1c41      	adds	r1, r0, #1
  404930:	f000 80c3 	beq.w	404aba <create_chain+0x346>
			if (cs != 0) {						/* Not free? */
  404934:	2800      	cmp	r0, #0
  404936:	f040 80c2 	bne.w	404abe <create_chain+0x34a>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
  40493a:	2c00      	cmp	r4, #0
  40493c:	f000 80ec 	beq.w	404b18 <create_chain+0x3a4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
  404940:	2c01      	cmp	r4, #1
  404942:	f67f af55 	bls.w	4047f0 <create_chain+0x7c>
  404946:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40494a:	42a3      	cmp	r3, r4
  40494c:	f67f af50 	bls.w	4047f0 <create_chain+0x7c>
  404950:	f04f 32ff 	mov.w	r2, #4294967295
  404954:	4621      	mov	r1, r4
  404956:	4640      	mov	r0, r8
  404958:	4d62      	ldr	r5, [pc, #392]	; (404ae4 <create_chain+0x370>)
  40495a:	47a8      	blx	r5
		if (res == FR_OK && clst != 0) {
  40495c:	b978      	cbnz	r0, 40497e <create_chain+0x20a>
  40495e:	f1ba 0f00 	cmp.w	sl, #0
  404962:	d00c      	beq.n	40497e <create_chain+0x20a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
  404964:	f1ba 0f01 	cmp.w	sl, #1
  404968:	f67f af42 	bls.w	4047f0 <create_chain+0x7c>
  40496c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  404970:	459a      	cmp	sl, r3
  404972:	f4bf af3d 	bcs.w	4047f0 <create_chain+0x7c>
  404976:	4651      	mov	r1, sl
  404978:	4622      	mov	r2, r4
  40497a:	4640      	mov	r0, r8
  40497c:	47a8      	blx	r5
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
  40497e:	2800      	cmp	r0, #0
  404980:	d15c      	bne.n	404a3c <create_chain+0x2c8>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
  404982:	f8d8 3018 	ldr.w	r3, [r8, #24]
  404986:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40498a:	3b02      	subs	r3, #2
		fs->last_clst = ncl;
  40498c:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
  404990:	429a      	cmp	r2, r3
  404992:	d802      	bhi.n	40499a <create_chain+0x226>
  404994:	3a01      	subs	r2, #1
  404996:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
  40499a:	f898 3004 	ldrb.w	r3, [r8, #4]
}
  40499e:	4620      	mov	r0, r4
		fs->fsi_flag |= 1;
  4049a0:	f043 0301 	orr.w	r3, r3, #1
  4049a4:	f888 3004 	strb.w	r3, [r8, #4]
}
  4049a8:	b005      	add	sp, #20
  4049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
  4049ae:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  4049b2:	00a3      	lsls	r3, r4, #2
  4049b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  4049b8:	eb09 0103 	add.w	r1, r9, r3
	rv = rv << 8 | ptr[0];
  4049bc:	f819 3003 	ldrb.w	r3, [r9, r3]
	rv = rv << 8 | ptr[2];
  4049c0:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
  4049c2:	784a      	ldrb	r2, [r1, #1]
  4049c4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
  4049c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  4049cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  4049d0:	e734      	b.n	40483c <create_chain+0xc8>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4049d2:	2301      	movs	r3, #1
  4049d4:	7868      	ldrb	r0, [r5, #1]
  4049d6:	4649      	mov	r1, r9
  4049d8:	4e40      	ldr	r6, [pc, #256]	; (404adc <create_chain+0x368>)
  4049da:	47b0      	blx	r6
  4049dc:	2800      	cmp	r0, #0
  4049de:	d130      	bne.n	404a42 <create_chain+0x2ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4049e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4049e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4049e4:	69ea      	ldr	r2, [r5, #28]
  4049e6:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4049e8:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4049ea:	4293      	cmp	r3, r2
  4049ec:	f4bf af12 	bcs.w	404814 <create_chain+0xa0>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4049f0:	78ab      	ldrb	r3, [r5, #2]
  4049f2:	2b02      	cmp	r3, #2
  4049f4:	f47f af0e 	bne.w	404814 <create_chain+0xa0>
  4049f8:	440a      	add	r2, r1
  4049fa:	2301      	movs	r3, #1
  4049fc:	4649      	mov	r1, r9
  4049fe:	7868      	ldrb	r0, [r5, #1]
  404a00:	47b0      	blx	r6
  404a02:	e707      	b.n	404814 <create_chain+0xa0>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404a04:	f105 0334 	add.w	r3, r5, #52	; 0x34
  404a08:	7868      	ldrb	r0, [r5, #1]
  404a0a:	4e34      	ldr	r6, [pc, #208]	; (404adc <create_chain+0x368>)
  404a0c:	4619      	mov	r1, r3
  404a0e:	9302      	str	r3, [sp, #8]
  404a10:	9b01      	ldr	r3, [sp, #4]
  404a12:	47b0      	blx	r6
  404a14:	2800      	cmp	r0, #0
  404a16:	d15c      	bne.n	404ad2 <create_chain+0x35e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404a18:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  404a1c:	69ea      	ldr	r2, [r5, #28]
  404a1e:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404a20:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404a22:	4293      	cmp	r3, r2
  404a24:	f4bf af56 	bcs.w	4048d4 <create_chain+0x160>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404a28:	78ab      	ldrb	r3, [r5, #2]
  404a2a:	2b02      	cmp	r3, #2
  404a2c:	f47f af52 	bne.w	4048d4 <create_chain+0x160>
  404a30:	440a      	add	r2, r1
  404a32:	9b01      	ldr	r3, [sp, #4]
  404a34:	9902      	ldr	r1, [sp, #8]
  404a36:	7868      	ldrb	r0, [r5, #1]
  404a38:	47b0      	blx	r6
  404a3a:	e74b      	b.n	4048d4 <create_chain+0x160>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
  404a3c:	2801      	cmp	r0, #1
  404a3e:	f47f aed7 	bne.w	4047f0 <create_chain+0x7c>
			fs->winsect = sect;
  404a42:	f04f 34ff 	mov.w	r4, #4294967295
}
  404a46:	4620      	mov	r0, r4
  404a48:	b005      	add	sp, #20
  404a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a4e:	f105 0934 	add.w	r9, r5, #52	; 0x34
  404a52:	e6e9      	b.n	404828 <create_chain+0xb4>
  404a54:	f105 0934 	add.w	r9, r5, #52	; 0x34
  404a58:	e7ab      	b.n	4049b2 <create_chain+0x23e>
			fs->winsect = sect;
  404a5a:	464a      	mov	r2, r9
  404a5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  404a5e:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  404a62:	f3ca 0108 	ubfx	r1, sl, #0, #9
  404a66:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  404a6a:	eb03 235a 	add.w	r3, r3, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  404a6e:	4429      	add	r1, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  404a70:	4618      	mov	r0, r3
  404a72:	9301      	str	r3, [sp, #4]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  404a74:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
	if (sect != fs->winsect) {	/* Window offset changed? */
  404a78:	4290      	cmp	r0, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  404a7a:	9302      	str	r3, [sp, #8]
	if (sect != fs->winsect) {	/* Window offset changed? */
  404a7c:	d00f      	beq.n	404a9e <create_chain+0x32a>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404a7e:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404a80:	f105 0934 	add.w	r9, r5, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404a84:	2b00      	cmp	r3, #0
  404a86:	d12f      	bne.n	404ae8 <create_chain+0x374>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404a88:	4649      	mov	r1, r9
  404a8a:	2301      	movs	r3, #1
  404a8c:	9a01      	ldr	r2, [sp, #4]
  404a8e:	7868      	ldrb	r0, [r5, #1]
  404a90:	4e11      	ldr	r6, [pc, #68]	; (404ad8 <create_chain+0x364>)
  404a92:	47b0      	blx	r6
  404a94:	2800      	cmp	r0, #0
  404a96:	f47f af06 	bne.w	4048a6 <create_chain+0x132>
			fs->winsect = sect;
  404a9a:	9b01      	ldr	r3, [sp, #4]
  404a9c:	632b      	str	r3, [r5, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
  404a9e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
  404aa2:	9a02      	ldr	r2, [sp, #8]
  404aa4:	4455      	add	r5, sl
  404aa6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  404aaa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
  404aae:	07e2      	lsls	r2, r4, #31
  404ab0:	bf4c      	ite	mi
  404ab2:	091b      	lsrmi	r3, r3, #4
  404ab4:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  404ab8:	e6c0      	b.n	40483c <create_chain+0xc8>
			cs = get_fat(obj, ncl);				/* Get next cluster status */
  404aba:	4604      	mov	r4, r0
  404abc:	e699      	b.n	4047f2 <create_chain+0x7e>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
  404abe:	f8d8 7010 	ldr.w	r7, [r8, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
  404ac2:	f8d8 3018 	ldr.w	r3, [r8, #24]
  404ac6:	2f01      	cmp	r7, #1
  404ac8:	d928      	bls.n	404b1c <create_chain+0x3a8>
  404aca:	429f      	cmp	r7, r3
  404acc:	bf28      	it	cs
  404ace:	4657      	movcs	r7, sl
  404ad0:	e667      	b.n	4047a2 <create_chain+0x2e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
  404ad2:	f04f 33ff 	mov.w	r3, #4294967295
  404ad6:	e67b      	b.n	4047d0 <create_chain+0x5c>
  404ad8:	004078c5 	.word	0x004078c5
  404adc:	004078e9 	.word	0x004078e9
  404ae0:	00404551 	.word	0x00404551
  404ae4:	00403fed 	.word	0x00403fed
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404ae8:	2301      	movs	r3, #1
  404aea:	7868      	ldrb	r0, [r5, #1]
  404aec:	4649      	mov	r1, r9
  404aee:	4e0e      	ldr	r6, [pc, #56]	; (404b28 <create_chain+0x3b4>)
  404af0:	47b0      	blx	r6
  404af2:	2800      	cmp	r0, #0
  404af4:	d1a5      	bne.n	404a42 <create_chain+0x2ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404af6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404af8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  404afa:	69ea      	ldr	r2, [r5, #28]
  404afc:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404afe:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404b00:	4293      	cmp	r3, r2
  404b02:	d2c1      	bcs.n	404a88 <create_chain+0x314>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404b04:	78ab      	ldrb	r3, [r5, #2]
  404b06:	2b02      	cmp	r3, #2
  404b08:	d1be      	bne.n	404a88 <create_chain+0x314>
  404b0a:	440a      	add	r2, r1
  404b0c:	2301      	movs	r3, #1
  404b0e:	4649      	mov	r1, r9
  404b10:	7868      	ldrb	r0, [r5, #1]
  404b12:	4e05      	ldr	r6, [pc, #20]	; (404b28 <create_chain+0x3b4>)
  404b14:	47b0      	blx	r6
  404b16:	e7b7      	b.n	404a88 <create_chain+0x314>
  404b18:	f8d8 3018 	ldr.w	r3, [r8, #24]
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
  404b1c:	4657      	mov	r7, sl
  404b1e:	e640      	b.n	4047a2 <create_chain+0x2e>
  404b20:	f8dd a00c 	ldr.w	sl, [sp, #12]
  404b24:	e70f      	b.n	404946 <create_chain+0x1d2>
  404b26:	bf00      	nop
  404b28:	004078e9 	.word	0x004078e9

00404b2c <dir_next>:
{
  404b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
  404b30:	6904      	ldr	r4, [r0, #16]
{
  404b32:	b082      	sub	sp, #8
  404b34:	4605      	mov	r5, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
  404b36:	3420      	adds	r4, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  404b38:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
  404b3c:	d20f      	bcs.n	404b5e <dir_next+0x32>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  404b3e:	6983      	ldr	r3, [r0, #24]
  404b40:	2b00      	cmp	r3, #0
  404b42:	d033      	beq.n	404bac <dir_next+0x80>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  404b44:	f3c4 0208 	ubfx	r2, r4, #0, #9
	FATFS *fs = dp->obj.fs;
  404b48:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  404b4a:	bb3a      	cbnz	r2, 404b9c <dir_next+0x70>
  404b4c:	460f      	mov	r7, r1
		dp->sect++;				/* Next sector */
  404b4e:	3301      	adds	r3, #1
		if (dp->clust == 0) {	/* Static table */
  404b50:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
  404b52:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
  404b54:	bb71      	cbnz	r1, 404bb4 <dir_next+0x88>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
  404b56:	8933      	ldrh	r3, [r6, #8]
  404b58:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
  404b5c:	d81e      	bhi.n	404b9c <dir_next+0x70>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  404b5e:	2300      	movs	r3, #0
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  404b60:	2004      	movs	r0, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  404b62:	61ab      	str	r3, [r5, #24]
}
  404b64:	b002      	add	sp, #8
  404b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
  404b6a:	2801      	cmp	r0, #1
  404b6c:	d041      	beq.n	404bf2 <dir_next+0xc6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  404b6e:	f1b0 3fff 	cmp.w	r0, #4294967295
  404b72:	d040      	beq.n	404bf6 <dir_next+0xca>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
  404b74:	4601      	mov	r1, r0
  404b76:	4b22      	ldr	r3, [pc, #136]	; (404c00 <dir_next+0xd4>)
  404b78:	4630      	mov	r0, r6
  404b7a:	4798      	blx	r3
  404b7c:	2800      	cmp	r0, #0
  404b7e:	d13a      	bne.n	404bf6 <dir_next+0xca>
  404b80:	69b3      	ldr	r3, [r6, #24]
  404b82:	9a01      	ldr	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  404b84:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
  404b86:	f1a8 0102 	sub.w	r1, r8, #2
				dp->clust = clst;		/* Initialize data for new cluster */
  404b8a:	f8c5 8014 	str.w	r8, [r5, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  404b8e:	4299      	cmp	r1, r3
  404b90:	d233      	bcs.n	404bfa <dir_next+0xce>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  404b92:	8973      	ldrh	r3, [r6, #10]
  404b94:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  404b96:	fb01 0303 	mla	r3, r1, r3, r0
				dp->sect = clst2sect(fs, clst);
  404b9a:	61ab      	str	r3, [r5, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404b9c:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
  404b9e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
  404ba0:	612c      	str	r4, [r5, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404ba2:	4416      	add	r6, r2
  404ba4:	61ee      	str	r6, [r5, #28]
}
  404ba6:	b002      	add	sp, #8
  404ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  404bac:	2004      	movs	r0, #4
}
  404bae:	b002      	add	sp, #8
  404bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
  404bb4:	8973      	ldrh	r3, [r6, #10]
  404bb6:	3b01      	subs	r3, #1
  404bb8:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
  404bbc:	d1ee      	bne.n	404b9c <dir_next+0x70>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
  404bbe:	4630      	mov	r0, r6
  404bc0:	4b10      	ldr	r3, [pc, #64]	; (404c04 <dir_next+0xd8>)
  404bc2:	9201      	str	r2, [sp, #4]
  404bc4:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  404bc6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
  404bc8:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  404bca:	9a01      	ldr	r2, [sp, #4]
  404bcc:	d911      	bls.n	404bf2 <dir_next+0xc6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  404bce:	f1b0 3fff 	cmp.w	r0, #4294967295
  404bd2:	d010      	beq.n	404bf6 <dir_next+0xca>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
  404bd4:	69b3      	ldr	r3, [r6, #24]
  404bd6:	4298      	cmp	r0, r3
  404bd8:	d3d4      	bcc.n	404b84 <dir_next+0x58>
					if (!stretch) {								/* If no stretch, report EOT */
  404bda:	2f00      	cmp	r7, #0
  404bdc:	d0bf      	beq.n	404b5e <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
  404bde:	6969      	ldr	r1, [r5, #20]
  404be0:	4628      	mov	r0, r5
  404be2:	4b09      	ldr	r3, [pc, #36]	; (404c08 <dir_next+0xdc>)
  404be4:	9201      	str	r2, [sp, #4]
  404be6:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  404be8:	4680      	mov	r8, r0
  404bea:	2800      	cmp	r0, #0
  404bec:	d1bd      	bne.n	404b6a <dir_next+0x3e>
  404bee:	2007      	movs	r0, #7
  404bf0:	e7b8      	b.n	404b64 <dir_next+0x38>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  404bf2:	2002      	movs	r0, #2
  404bf4:	e7b6      	b.n	404b64 <dir_next+0x38>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  404bf6:	2001      	movs	r0, #1
  404bf8:	e7b4      	b.n	404b64 <dir_next+0x38>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  404bfa:	2300      	movs	r3, #0
  404bfc:	e7cd      	b.n	404b9a <dir_next+0x6e>
  404bfe:	bf00      	nop
  404c00:	00403995 	.word	0x00403995
  404c04:	00404551 	.word	0x00404551
  404c08:	00404775 	.word	0x00404775

00404c0c <dir_read>:
{
  404c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
  404c10:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
  404c14:	b085      	sub	sp, #20
  404c16:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
  404c18:	6805      	ldr	r5, [r0, #0]
	while (dp->sect) {
  404c1a:	f1b8 0f00 	cmp.w	r8, #0
  404c1e:	d04c      	beq.n	404cba <dir_read+0xae>
  404c20:	23ff      	movs	r3, #255	; 0xff
  404c22:	468b      	mov	fp, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  404c24:	f8df a334 	ldr.w	sl, [pc, #820]	; 404f5c <dir_read+0x350>
	while (dp->sect) {
  404c28:	461e      	mov	r6, r3
  404c2a:	9301      	str	r3, [sp, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
  404c2c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  404c2e:	4542      	cmp	r2, r8
  404c30:	d016      	beq.n	404c60 <dir_read+0x54>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404c32:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404c34:	f105 0934 	add.w	r9, r5, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  404c38:	2b00      	cmp	r3, #0
  404c3a:	d16b      	bne.n	404d14 <dir_read+0x108>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  404c3c:	4649      	mov	r1, r9
  404c3e:	2301      	movs	r3, #1
  404c40:	4642      	mov	r2, r8
  404c42:	7868      	ldrb	r0, [r5, #1]
  404c44:	4fc3      	ldr	r7, [pc, #780]	; (404f54 <dir_read+0x348>)
  404c46:	47b8      	blx	r7
  404c48:	b140      	cbz	r0, 404c5c <dir_read+0x50>
			fs->winsect = sect;
  404c4a:	f04f 33ff 	mov.w	r3, #4294967295
  404c4e:	2001      	movs	r0, #1
  404c50:	632b      	str	r3, [r5, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
  404c52:	2300      	movs	r3, #0
  404c54:	61a3      	str	r3, [r4, #24]
}
  404c56:	b005      	add	sp, #20
  404c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
  404c5c:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
		b = dp->dir[DIR_Name];	/* Test for the entry type */
  404c60:	69e2      	ldr	r2, [r4, #28]
  404c62:	7811      	ldrb	r1, [r2, #0]
		if (b == 0) {
  404c64:	b349      	cbz	r1, 404cba <dir_read+0xae>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
  404c66:	7ad3      	ldrb	r3, [r2, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
  404c68:	29e5      	cmp	r1, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
  404c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404c6e:	71a3      	strb	r3, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
  404c70:	d00a      	beq.n	404c88 <dir_read+0x7c>
  404c72:	292e      	cmp	r1, #46	; 0x2e
  404c74:	d008      	beq.n	404c88 <dir_read+0x7c>
  404c76:	f023 0020 	bic.w	r0, r3, #32
  404c7a:	f1a0 0008 	sub.w	r0, r0, #8
  404c7e:	fab0 f080 	clz	r0, r0
  404c82:	0940      	lsrs	r0, r0, #5
  404c84:	4558      	cmp	r0, fp
  404c86:	d05c      	beq.n	404d42 <dir_read+0x136>
  404c88:	6923      	ldr	r3, [r4, #16]
				ord = 0xFF;
  404c8a:	26ff      	movs	r6, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
  404c8c:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  404c8e:	4553      	cmp	r3, sl
  404c90:	d813      	bhi.n	404cba <dir_read+0xae>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  404c92:	f8d4 8018 	ldr.w	r8, [r4, #24]
  404c96:	f1b8 0f00 	cmp.w	r8, #0
  404c9a:	d00e      	beq.n	404cba <dir_read+0xae>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  404c9c:	f3c3 0108 	ubfx	r1, r3, #0, #9
	FATFS *fs = dp->obj.fs;
  404ca0:	6822      	ldr	r2, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  404ca2:	2900      	cmp	r1, #0
  404ca4:	d15e      	bne.n	404d64 <dir_read+0x158>
		dp->sect++;				/* Next sector */
  404ca6:	f108 0801 	add.w	r8, r8, #1
		if (dp->clust == 0) {	/* Static table */
  404caa:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
  404cac:	f8c4 8018 	str.w	r8, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
  404cb0:	b929      	cbnz	r1, 404cbe <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
  404cb2:	8911      	ldrh	r1, [r2, #8]
  404cb4:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
  404cb8:	d822      	bhi.n	404d00 <dir_read+0xf4>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  404cba:	2004      	movs	r0, #4
  404cbc:	e7c9      	b.n	404c52 <dir_read+0x46>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
  404cbe:	8950      	ldrh	r0, [r2, #10]
  404cc0:	3801      	subs	r0, #1
  404cc2:	ea10 2953 	ands.w	r9, r0, r3, lsr #9
  404cc6:	d11b      	bne.n	404d00 <dir_read+0xf4>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
  404cc8:	4610      	mov	r0, r2
  404cca:	f8df 8294 	ldr.w	r8, [pc, #660]	; 404f60 <dir_read+0x354>
  404cce:	9303      	str	r3, [sp, #12]
  404cd0:	9202      	str	r2, [sp, #8]
  404cd2:	47c0      	blx	r8
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  404cd4:	2801      	cmp	r0, #1
  404cd6:	d950      	bls.n	404d7a <dir_read+0x16e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  404cd8:	1c43      	adds	r3, r0, #1
  404cda:	d04c      	beq.n	404d76 <dir_read+0x16a>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
  404cdc:	9a02      	ldr	r2, [sp, #8]
  404cde:	6991      	ldr	r1, [r2, #24]
  404ce0:	4288      	cmp	r0, r1
  404ce2:	d2ea      	bcs.n	404cba <dir_read+0xae>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  404ce4:	3902      	subs	r1, #2
	clst -= 2;		/* Cluster number is origin from 2 */
  404ce6:	f1a0 0e02 	sub.w	lr, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
  404cea:	6160      	str	r0, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  404cec:	458e      	cmp	lr, r1
  404cee:	9b03      	ldr	r3, [sp, #12]
  404cf0:	d245      	bcs.n	404d7e <dir_read+0x172>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  404cf2:	f8b2 800a 	ldrh.w	r8, [r2, #10]
  404cf6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  404cf8:	fb0e 1808 	mla	r8, lr, r8, r1
				dp->sect = clst2sect(fs, clst);
  404cfc:	f8c4 8018 	str.w	r8, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404d00:	3234      	adds	r2, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
  404d02:	6123      	str	r3, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404d04:	61e2      	str	r2, [r4, #28]
	while (dp->sect) {
  404d06:	f1b8 0f00 	cmp.w	r8, #0
  404d0a:	d18f      	bne.n	404c2c <dir_read+0x20>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
  404d0c:	2000      	movs	r0, #0
}
  404d0e:	b005      	add	sp, #20
  404d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  404d14:	2301      	movs	r3, #1
  404d16:	7868      	ldrb	r0, [r5, #1]
  404d18:	4649      	mov	r1, r9
  404d1a:	4f8f      	ldr	r7, [pc, #572]	; (404f58 <dir_read+0x34c>)
  404d1c:	47b8      	blx	r7
  404d1e:	bb50      	cbnz	r0, 404d76 <dir_read+0x16a>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404d20:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404d22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  404d24:	69ea      	ldr	r2, [r5, #28]
  404d26:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  404d28:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  404d2a:	4293      	cmp	r3, r2
  404d2c:	d286      	bcs.n	404c3c <dir_read+0x30>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  404d2e:	78ab      	ldrb	r3, [r5, #2]
  404d30:	2b02      	cmp	r3, #2
  404d32:	d183      	bne.n	404c3c <dir_read+0x30>
  404d34:	440a      	add	r2, r1
  404d36:	2301      	movs	r3, #1
  404d38:	4649      	mov	r1, r9
  404d3a:	7868      	ldrb	r0, [r5, #1]
  404d3c:	4f86      	ldr	r7, [pc, #536]	; (404f58 <dir_read+0x34c>)
  404d3e:	47b8      	blx	r7
  404d40:	e77c      	b.n	404c3c <dir_read+0x30>
				if (attr == AM_LFN) {			/* An LFN entry is found */
  404d42:	2b0f      	cmp	r3, #15
  404d44:	f040 8181 	bne.w	40504a <dir_read+0x43e>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
  404d48:	0648      	lsls	r0, r1, #25
						dp->blk_ofs = dp->dptr;
  404d4a:	6923      	ldr	r3, [r4, #16]
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
  404d4c:	d50f      	bpl.n	404d6e <dir_read+0x162>
						b &= (BYTE)~LLEF; ord = b;
  404d4e:	f001 06bf 	and.w	r6, r1, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
  404d52:	7b51      	ldrb	r1, [r2, #13]
						dp->blk_ofs = dp->dptr;
  404d54:	62e3      	str	r3, [r4, #44]	; 0x2c
  404d56:	4608      	mov	r0, r1
						sum = dp->dir[LDIR_Chksum];
  404d58:	9101      	str	r1, [sp, #4]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  404d5a:	7b51      	ldrb	r1, [r2, #13]
  404d5c:	4281      	cmp	r1, r0
  404d5e:	d015      	beq.n	404d8c <dir_read+0x180>
  404d60:	26ff      	movs	r6, #255	; 0xff
  404d62:	e793      	b.n	404c8c <dir_read+0x80>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404d64:	3234      	adds	r2, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
  404d66:	6123      	str	r3, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404d68:	4411      	add	r1, r2
  404d6a:	61e1      	str	r1, [r4, #28]
  404d6c:	e75e      	b.n	404c2c <dir_read+0x20>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  404d6e:	42b1      	cmp	r1, r6
  404d70:	d1f6      	bne.n	404d60 <dir_read+0x154>
  404d72:	9801      	ldr	r0, [sp, #4]
  404d74:	e7f1      	b.n	404d5a <dir_read+0x14e>
			fs->winsect = sect;
  404d76:	2001      	movs	r0, #1
  404d78:	e76b      	b.n	404c52 <dir_read+0x46>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  404d7a:	2002      	movs	r0, #2
  404d7c:	e769      	b.n	404c52 <dir_read+0x46>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404d7e:	3234      	adds	r2, #52	; 0x34
				dp->sect = clst2sect(fs, clst);
  404d80:	f8c4 9018 	str.w	r9, [r4, #24]
	dp->dptr = ofs;						/* Current entry */
  404d84:	6123      	str	r3, [r4, #16]
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
  404d86:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  404d88:	61e2      	str	r2, [r4, #28]
  404d8a:	e7c0      	b.n	404d0e <dir_read+0x102>
	rv = rv << 8 | ptr[0];
  404d8c:	f892 e01b 	ldrb.w	lr, [r2, #27]
  404d90:	7e90      	ldrb	r0, [r2, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
  404d92:	ea50 200e 	orrs.w	r0, r0, lr, lsl #8
  404d96:	d1e3      	bne.n	404d60 <dir_read+0x154>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
  404d98:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
  404d9a:	f892 c002 	ldrb.w	ip, [r2, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
  404d9e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
	rv = rv << 8 | ptr[0];
  404da2:	f892 e001 	ldrb.w	lr, [r2, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
  404da6:	3801      	subs	r0, #1
	rv = rv << 8 | ptr[0];
  404da8:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
  404dac:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
  404db0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404db4:	28ff      	cmp	r0, #255	; 0xff
  404db6:	d8d3      	bhi.n	404d60 <dir_read+0x154>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  404db8:	68ef      	ldr	r7, [r5, #12]
  404dba:	9702      	str	r7, [sp, #8]
			lfnbuf[i++] = wc = uc;			/* Store it */
  404dbc:	0047      	lsls	r7, r0, #1
  404dbe:	9703      	str	r7, [sp, #12]
  404dc0:	9f02      	ldr	r7, [sp, #8]
  404dc2:	f827 e010 	strh.w	lr, [r7, r0, lsl #1]
	rv = rv << 8 | ptr[0];
  404dc6:	f892 c004 	ldrb.w	ip, [r2, #4]
  404dca:	f892 8003 	ldrb.w	r8, [r2, #3]
  404dce:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
		if (wc != 0) {
  404dd2:	f1be 0f00 	cmp.w	lr, #0
  404dd6:	f000 80c5 	beq.w	404f64 <dir_read+0x358>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404dda:	f100 0e01 	add.w	lr, r0, #1
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404dde:	f5be 7f80 	cmp.w	lr, #256	; 0x100
  404de2:	d0bd      	beq.n	404d60 <dir_read+0x154>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404de4:	f827 801e 	strh.w	r8, [r7, lr, lsl #1]
  404de8:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
	rv = rv << 8 | ptr[0];
  404dec:	f892 9006 	ldrb.w	r9, [r2, #6]
  404df0:	f892 c005 	ldrb.w	ip, [r2, #5]
  404df4:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
		if (wc != 0) {
  404df8:	f1b8 0f00 	cmp.w	r8, #0
  404dfc:	f000 80bc 	beq.w	404f78 <dir_read+0x36c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404e00:	28fe      	cmp	r0, #254	; 0xfe
  404e02:	d0ad      	beq.n	404d60 <dir_read+0x154>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404e04:	44be      	add	lr, r7
  404e06:	f8ae c002 	strh.w	ip, [lr, #2]
	rv = rv << 8 | ptr[0];
  404e0a:	f892 9008 	ldrb.w	r9, [r2, #8]
  404e0e:	f892 8007 	ldrb.w	r8, [r2, #7]
  404e12:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		if (wc != 0) {
  404e16:	f1bc 0f00 	cmp.w	ip, #0
  404e1a:	f000 80b7 	beq.w	404f8c <dir_read+0x380>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404e1e:	28fd      	cmp	r0, #253	; 0xfd
  404e20:	d09e      	beq.n	404d60 <dir_read+0x154>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404e22:	f8ae 8004 	strh.w	r8, [lr, #4]
	rv = rv << 8 | ptr[0];
  404e26:	f892 900a 	ldrb.w	r9, [r2, #10]
  404e2a:	f892 c009 	ldrb.w	ip, [r2, #9]
  404e2e:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
		if (wc != 0) {
  404e32:	f1b8 0f00 	cmp.w	r8, #0
  404e36:	f000 80b3 	beq.w	404fa0 <dir_read+0x394>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404e3a:	28fc      	cmp	r0, #252	; 0xfc
  404e3c:	f000 815a 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404e40:	f8ae c006 	strh.w	ip, [lr, #6]
	rv = rv << 8 | ptr[0];
  404e44:	f892 900f 	ldrb.w	r9, [r2, #15]
  404e48:	f892 800e 	ldrb.w	r8, [r2, #14]
  404e4c:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		if (wc != 0) {
  404e50:	f1bc 0f00 	cmp.w	ip, #0
  404e54:	f000 80ae 	beq.w	404fb4 <dir_read+0x3a8>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404e58:	28fb      	cmp	r0, #251	; 0xfb
  404e5a:	f000 814b 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404e5e:	f8ae 8008 	strh.w	r8, [lr, #8]
	rv = rv << 8 | ptr[0];
  404e62:	f892 9011 	ldrb.w	r9, [r2, #17]
  404e66:	f892 c010 	ldrb.w	ip, [r2, #16]
  404e6a:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
		if (wc != 0) {
  404e6e:	f1b8 0f00 	cmp.w	r8, #0
  404e72:	f000 80a9 	beq.w	404fc8 <dir_read+0x3bc>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404e76:	28fa      	cmp	r0, #250	; 0xfa
  404e78:	f000 813c 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404e7c:	f8ae c00a 	strh.w	ip, [lr, #10]
	rv = rv << 8 | ptr[0];
  404e80:	f892 9013 	ldrb.w	r9, [r2, #19]
  404e84:	f892 8012 	ldrb.w	r8, [r2, #18]
  404e88:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		if (wc != 0) {
  404e8c:	f1bc 0f00 	cmp.w	ip, #0
  404e90:	f000 80a4 	beq.w	404fdc <dir_read+0x3d0>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404e94:	28f9      	cmp	r0, #249	; 0xf9
  404e96:	f000 812d 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404e9a:	f8ae 800c 	strh.w	r8, [lr, #12]
	rv = rv << 8 | ptr[0];
  404e9e:	f892 9015 	ldrb.w	r9, [r2, #21]
  404ea2:	f892 c014 	ldrb.w	ip, [r2, #20]
  404ea6:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
		if (wc != 0) {
  404eaa:	f1b8 0f00 	cmp.w	r8, #0
  404eae:	f000 809f 	beq.w	404ff0 <dir_read+0x3e4>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404eb2:	28f8      	cmp	r0, #248	; 0xf8
  404eb4:	f000 811e 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404eb8:	f8ae c00e 	strh.w	ip, [lr, #14]
	rv = rv << 8 | ptr[0];
  404ebc:	f892 9017 	ldrb.w	r9, [r2, #23]
  404ec0:	f892 8016 	ldrb.w	r8, [r2, #22]
  404ec4:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		if (wc != 0) {
  404ec8:	f1bc 0f00 	cmp.w	ip, #0
  404ecc:	f000 8099 	beq.w	405002 <dir_read+0x3f6>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404ed0:	28f7      	cmp	r0, #247	; 0xf7
  404ed2:	f000 810f 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404ed6:	f8ae 8010 	strh.w	r8, [lr, #16]
	rv = rv << 8 | ptr[0];
  404eda:	f892 9019 	ldrb.w	r9, [r2, #25]
  404ede:	f892 c018 	ldrb.w	ip, [r2, #24]
  404ee2:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
		if (wc != 0) {
  404ee6:	f1b8 0f00 	cmp.w	r8, #0
  404eea:	f000 8093 	beq.w	405014 <dir_read+0x408>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404eee:	28f6      	cmp	r0, #246	; 0xf6
  404ef0:	f000 8100 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404ef4:	f8ae c012 	strh.w	ip, [lr, #18]
	rv = rv << 8 | ptr[0];
  404ef8:	f892 901d 	ldrb.w	r9, [r2, #29]
  404efc:	f892 801c 	ldrb.w	r8, [r2, #28]
  404f00:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
		if (wc != 0) {
  404f04:	f1bc 0f00 	cmp.w	ip, #0
  404f08:	f000 808d 	beq.w	405026 <dir_read+0x41a>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404f0c:	28f5      	cmp	r0, #245	; 0xf5
  404f0e:	f000 80f1 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404f12:	f8ae 8014 	strh.w	r8, [lr, #20]
	rv = rv << 8 | ptr[0];
  404f16:	f892 901f 	ldrb.w	r9, [r2, #31]
  404f1a:	f892 c01e 	ldrb.w	ip, [r2, #30]
  404f1e:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
		if (wc != 0) {
  404f22:	f1b8 0f00 	cmp.w	r8, #0
  404f26:	f000 8088 	beq.w	40503a <dir_read+0x42e>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404f2a:	28f4      	cmp	r0, #244	; 0xf4
  404f2c:	f000 80e2 	beq.w	4050f4 <dir_read+0x4e8>
			lfnbuf[i++] = wc = uc;			/* Store it */
  404f30:	f8ae c016 	strh.w	ip, [lr, #22]
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
  404f34:	7812      	ldrb	r2, [r2, #0]
  404f36:	0652      	lsls	r2, r2, #25
  404f38:	f140 8083 	bpl.w	405042 <dir_read+0x436>
  404f3c:	f1bc 0f00 	cmp.w	ip, #0
  404f40:	d07f      	beq.n	405042 <dir_read+0x436>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  404f42:	28f3      	cmp	r0, #243	; 0xf3
  404f44:	f000 80d6 	beq.w	4050f4 <dir_read+0x4e8>
		lfnbuf[i] = 0;
  404f48:	9803      	ldr	r0, [sp, #12]
  404f4a:	463a      	mov	r2, r7
  404f4c:	4402      	add	r2, r0
  404f4e:	2000      	movs	r0, #0
  404f50:	8350      	strh	r0, [r2, #26]
  404f52:	e076      	b.n	405042 <dir_read+0x436>
  404f54:	004078c5 	.word	0x004078c5
  404f58:	004078e9 	.word	0x004078e9
  404f5c:	001fffff 	.word	0x001fffff
  404f60:	00404551 	.word	0x00404551
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404f64:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404f68:	4580      	cmp	r8, r0
  404f6a:	f47f aef9 	bne.w	404d60 <dir_read+0x154>
	rv = rv << 8 | ptr[0];
  404f6e:	7990      	ldrb	r0, [r2, #6]
  404f70:	f892 c005 	ldrb.w	ip, [r2, #5]
  404f74:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404f78:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404f7c:	4584      	cmp	ip, r0
  404f7e:	f040 80b9 	bne.w	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404f82:	7a10      	ldrb	r0, [r2, #8]
  404f84:	f892 8007 	ldrb.w	r8, [r2, #7]
  404f88:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404f8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404f90:	4580      	cmp	r8, r0
  404f92:	f040 80af 	bne.w	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404f96:	7a90      	ldrb	r0, [r2, #10]
  404f98:	f892 c009 	ldrb.w	ip, [r2, #9]
  404f9c:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404fa0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404fa4:	4584      	cmp	ip, r0
  404fa6:	f040 80a5 	bne.w	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404faa:	7bd0      	ldrb	r0, [r2, #15]
  404fac:	f892 800e 	ldrb.w	r8, [r2, #14]
  404fb0:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404fb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404fb8:	4580      	cmp	r8, r0
  404fba:	f040 809b 	bne.w	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404fbe:	7c50      	ldrb	r0, [r2, #17]
  404fc0:	f892 c010 	ldrb.w	ip, [r2, #16]
  404fc4:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404fc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404fcc:	4584      	cmp	ip, r0
  404fce:	f040 8091 	bne.w	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404fd2:	7cd0      	ldrb	r0, [r2, #19]
  404fd4:	f892 8012 	ldrb.w	r8, [r2, #18]
  404fd8:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404fdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404fe0:	4580      	cmp	r8, r0
  404fe2:	f040 8087 	bne.w	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404fe6:	7d50      	ldrb	r0, [r2, #21]
  404fe8:	f892 c014 	ldrb.w	ip, [r2, #20]
  404fec:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  404ff0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404ff4:	4584      	cmp	ip, r0
  404ff6:	d17d      	bne.n	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  404ff8:	7dd0      	ldrb	r0, [r2, #23]
  404ffa:	f892 8016 	ldrb.w	r8, [r2, #22]
  404ffe:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  405002:	f64f 70ff 	movw	r0, #65535	; 0xffff
  405006:	4580      	cmp	r8, r0
  405008:	d174      	bne.n	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  40500a:	7e50      	ldrb	r0, [r2, #25]
  40500c:	f892 c018 	ldrb.w	ip, [r2, #24]
  405010:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  405014:	f64f 70ff 	movw	r0, #65535	; 0xffff
  405018:	4584      	cmp	ip, r0
  40501a:	d16b      	bne.n	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  40501c:	7f50      	ldrb	r0, [r2, #29]
  40501e:	f892 801c 	ldrb.w	r8, [r2, #28]
  405022:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  405026:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40502a:	4580      	cmp	r8, r0
  40502c:	d162      	bne.n	4050f4 <dir_read+0x4e8>
	rv = rv << 8 | ptr[0];
  40502e:	f892 901f 	ldrb.w	r9, [r2, #31]
  405032:	f892 c01e 	ldrb.w	ip, [r2, #30]
  405036:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
  40503a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40503e:	4594      	cmp	ip, r2
  405040:	d158      	bne.n	4050f4 <dir_read+0x4e8>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  405042:	3e01      	subs	r6, #1
  405044:	9101      	str	r1, [sp, #4]
  405046:	b2f6      	uxtb	r6, r6
  405048:	e620      	b.n	404c8c <dir_read+0x80>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
  40504a:	2e00      	cmp	r6, #0
  40504c:	d14d      	bne.n	4050ea <dir_read+0x4de>
		sum = (sum >> 1) + (sum << 7) + *dir++;
  40504e:	7811      	ldrb	r1, [r2, #0]
  405050:	f892 e001 	ldrb.w	lr, [r2, #1]
  405054:	01cb      	lsls	r3, r1, #7
  405056:	7896      	ldrb	r6, [r2, #2]
  405058:	78d5      	ldrb	r5, [r2, #3]
  40505a:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
  40505e:	7910      	ldrb	r0, [r2, #4]
  405060:	f892 c005 	ldrb.w	ip, [r2, #5]
  405064:	eb03 010e 	add.w	r1, r3, lr
  405068:	f892 e006 	ldrb.w	lr, [r2, #6]
  40506c:	f3c1 0346 	ubfx	r3, r1, #1, #7
  405070:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
  405074:	fa56 f183 	uxtab	r1, r6, r3
  405078:	79d6      	ldrb	r6, [r2, #7]
  40507a:	f3c1 0346 	ubfx	r3, r1, #1, #7
  40507e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
  405082:	fa55 f183 	uxtab	r1, r5, r3
  405086:	7a15      	ldrb	r5, [r2, #8]
  405088:	f3c1 0346 	ubfx	r3, r1, #1, #7
  40508c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
  405090:	fa50 f183 	uxtab	r1, r0, r3
  405094:	7a50      	ldrb	r0, [r2, #9]
  405096:	f3c1 0346 	ubfx	r3, r1, #1, #7
  40509a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
  40509e:	7a91      	ldrb	r1, [r2, #10]
  4050a0:	fa5c f283 	uxtab	r2, ip, r3
  4050a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4050a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4050ac:	fa5e f283 	uxtab	r2, lr, r3
  4050b0:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4050b4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4050b8:	fa56 f283 	uxtab	r2, r6, r3
  4050bc:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4050c0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4050c4:	fa55 f283 	uxtab	r2, r5, r3
  4050c8:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4050cc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4050d0:	fa50 f283 	uxtab	r2, r0, r3
  4050d4:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4050d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
  4050dc:	9a01      	ldr	r2, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
  4050de:	fa51 f383 	uxtab	r3, r1, r3
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
  4050e2:	b2db      	uxtb	r3, r3
  4050e4:	4293      	cmp	r3, r2
  4050e6:	f43f ae11 	beq.w	404d0c <dir_read+0x100>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
  4050ea:	f04f 33ff 	mov.w	r3, #4294967295
  4050ee:	2000      	movs	r0, #0
  4050f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  4050f2:	e5b0      	b.n	404c56 <dir_read+0x4a>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
  4050f4:	9101      	str	r1, [sp, #4]
  4050f6:	e633      	b.n	404d60 <dir_read+0x154>

004050f8 <dir_sdi>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
  4050f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4050fc:	d301      	bcc.n	405102 <dir_sdi+0xa>
		return FR_INT_ERR;
  4050fe:	2002      	movs	r0, #2
}
  405100:	4770      	bx	lr
{
  405102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405106:	460c      	mov	r4, r1
  405108:	b085      	sub	sp, #20
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
  40510a:	06e1      	lsls	r1, r4, #27
  40510c:	d003      	beq.n	405116 <dir_sdi+0x1e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
  40510e:	2002      	movs	r0, #2
}
  405110:	b005      	add	sp, #20
  405112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
  405116:	6885      	ldr	r5, [r0, #8]
  405118:	4607      	mov	r7, r0
	dp->dptr = ofs;				/* Set current offset */
  40511a:	6104      	str	r4, [r0, #16]
	FATFS *fs = dp->obj.fs;
  40511c:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
  405120:	b945      	cbnz	r5, 405134 <dir_sdi+0x3c>
  405122:	f89b 3000 	ldrb.w	r3, [fp]
  405126:	2b02      	cmp	r3, #2
  405128:	d970      	bls.n	40520c <dir_sdi+0x114>
		clst = (DWORD)fs->dirbase;
  40512a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
  40512e:	2b00      	cmp	r3, #0
  405130:	d06c      	beq.n	40520c <dir_sdi+0x114>
  405132:	461d      	mov	r5, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
  405134:	f8bb a00a 	ldrh.w	sl, [fp, #10]
  405138:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
  40513c:	4554      	cmp	r4, sl
  40513e:	f0c0 813f 	bcc.w	4053c0 <dir_sdi+0x2c8>
  405142:	eba4 040a 	sub.w	r4, r4, sl
  405146:	465e      	mov	r6, fp
  405148:	9701      	str	r7, [sp, #4]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
  40514a:	2d01      	cmp	r5, #1
  40514c:	d9df      	bls.n	40510e <dir_sdi+0x16>
  40514e:	69b3      	ldr	r3, [r6, #24]
  405150:	42ab      	cmp	r3, r5
  405152:	d9dc      	bls.n	40510e <dir_sdi+0x16>
		switch (fs->fs_type) {
  405154:	7833      	ldrb	r3, [r6, #0]
  405156:	2b02      	cmp	r3, #2
  405158:	d070      	beq.n	40523c <dir_sdi+0x144>
  40515a:	2b03      	cmp	r3, #3
  40515c:	f000 808f 	beq.w	40527e <dir_sdi+0x186>
  405160:	2b01      	cmp	r3, #1
  405162:	d1d4      	bne.n	40510e <dir_sdi+0x16>
			bc = (UINT)clst; bc += bc / 2;
  405164:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  405168:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  40516a:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  40516c:	eb01 2859 	add.w	r8, r1, r9, lsr #9
	if (sect != fs->winsect) {	/* Window offset changed? */
  405170:	4590      	cmp	r8, r2
  405172:	d013      	beq.n	40519c <dir_sdi+0xa4>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  405174:	78f1      	ldrb	r1, [r6, #3]
  405176:	2900      	cmp	r1, #0
  405178:	f040 80bf 	bne.w	4052fa <dir_sdi+0x202>
  40517c:	f106 0334 	add.w	r3, r6, #52	; 0x34
  405180:	9302      	str	r3, [sp, #8]
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  405182:	9902      	ldr	r1, [sp, #8]
  405184:	2301      	movs	r3, #1
  405186:	4642      	mov	r2, r8
  405188:	7870      	ldrb	r0, [r6, #1]
  40518a:	4f8f      	ldr	r7, [pc, #572]	; (4053c8 <dir_sdi+0x2d0>)
  40518c:	47b8      	blx	r7
  40518e:	2800      	cmp	r0, #0
  405190:	f040 809c 	bne.w	4052cc <dir_sdi+0x1d4>
			fs->winsect = sect;
  405194:	4642      	mov	r2, r8
  405196:	6a71      	ldr	r1, [r6, #36]	; 0x24
  405198:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  40519c:	f3c9 0308 	ubfx	r3, r9, #0, #9
  4051a0:	f109 0901 	add.w	r9, r9, #1
  4051a4:	4433      	add	r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
  4051a6:	eb01 2859 	add.w	r8, r1, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  4051aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sect != fs->winsect) {	/* Window offset changed? */
  4051ae:	4590      	cmp	r8, r2
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
  4051b0:	9303      	str	r3, [sp, #12]
	if (sect != fs->winsect) {	/* Window offset changed? */
  4051b2:	d010      	beq.n	4051d6 <dir_sdi+0xde>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4051b4:	78f3      	ldrb	r3, [r6, #3]
  4051b6:	2b00      	cmp	r3, #0
  4051b8:	f040 80e6 	bne.w	405388 <dir_sdi+0x290>
  4051bc:	f106 0334 	add.w	r3, r6, #52	; 0x34
  4051c0:	9302      	str	r3, [sp, #8]
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4051c2:	9902      	ldr	r1, [sp, #8]
  4051c4:	2301      	movs	r3, #1
  4051c6:	4642      	mov	r2, r8
  4051c8:	7870      	ldrb	r0, [r6, #1]
  4051ca:	4f7f      	ldr	r7, [pc, #508]	; (4053c8 <dir_sdi+0x2d0>)
  4051cc:	47b8      	blx	r7
  4051ce:	2800      	cmp	r0, #0
  4051d0:	d17c      	bne.n	4052cc <dir_sdi+0x1d4>
			fs->winsect = sect;
  4051d2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
  4051d6:	f3c9 0908 	ubfx	r9, r9, #0, #9
  4051da:	9a03      	ldr	r2, [sp, #12]
  4051dc:	444e      	add	r6, r9
  4051de:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
  4051e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
  4051e6:	07ea      	lsls	r2, r5, #31
  4051e8:	bf4c      	ite	mi
  4051ea:	091d      	lsrmi	r5, r3, #4
  4051ec:	f3c3 050b 	ubfxpl	r5, r3, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
  4051f0:	2d01      	cmp	r5, #1
  4051f2:	d98c      	bls.n	40510e <dir_sdi+0x16>
  4051f4:	f8db 3018 	ldr.w	r3, [fp, #24]
  4051f8:	42ab      	cmp	r3, r5
  4051fa:	d988      	bls.n	40510e <dir_sdi+0x16>
		while (ofs >= csz) {				/* Follow cluster chain */
  4051fc:	45a2      	cmp	sl, r4
  4051fe:	f200 80b4 	bhi.w	40536a <dir_sdi+0x272>
  405202:	9b01      	ldr	r3, [sp, #4]
  405204:	eba4 040a 	sub.w	r4, r4, sl
  405208:	681e      	ldr	r6, [r3, #0]
  40520a:	e79e      	b.n	40514a <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
  40520c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
  405210:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
  405214:	f67f af7b 	bls.w	40510e <dir_sdi+0x16>
		dp->sect = fs->dirbase;
  405218:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
  40521c:	61ba      	str	r2, [r7, #24]
	dp->clust = clst;					/* Current cluster# */
  40521e:	617d      	str	r5, [r7, #20]
	if (dp->sect == 0) return FR_INT_ERR;
  405220:	2a00      	cmp	r2, #0
  405222:	f43f af74 	beq.w	40510e <dir_sdi+0x16>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
  405226:	f10b 0334 	add.w	r3, fp, #52	; 0x34
  40522a:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
  40522e:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
  405232:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
  405234:	440b      	add	r3, r1
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
  405236:	61ba      	str	r2, [r7, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
  405238:	61fb      	str	r3, [r7, #28]
	return FR_OK;
  40523a:	e769      	b.n	405110 <dir_sdi+0x18>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  40523c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  40523e:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
  405240:	eb03 2815 	add.w	r8, r3, r5, lsr #8
	if (sect != fs->winsect) {	/* Window offset changed? */
  405244:	4590      	cmp	r8, r2
  405246:	f000 808d 	beq.w	405364 <dir_sdi+0x26c>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40524a:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40524c:	f106 0934 	add.w	r9, r6, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  405250:	2b00      	cmp	r3, #0
  405252:	d16c      	bne.n	40532e <dir_sdi+0x236>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  405254:	2301      	movs	r3, #1
  405256:	4642      	mov	r2, r8
  405258:	4649      	mov	r1, r9
  40525a:	7870      	ldrb	r0, [r6, #1]
  40525c:	4f5a      	ldr	r7, [pc, #360]	; (4053c8 <dir_sdi+0x2d0>)
  40525e:	47b8      	blx	r7
  405260:	2800      	cmp	r0, #0
  405262:	d133      	bne.n	4052cc <dir_sdi+0x1d4>
			fs->winsect = sect;
  405264:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  405268:	006d      	lsls	r5, r5, #1
  40526a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
  40526e:	eb09 0305 	add.w	r3, r9, r5
	rv = rv << 8 | ptr[0];
  405272:	f819 5005 	ldrb.w	r5, [r9, r5]
  405276:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
  405278:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  40527c:	e7b8      	b.n	4051f0 <dir_sdi+0xf8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  40527e:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sect != fs->winsect) {	/* Window offset changed? */
  405280:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
  405282:	eb03 18d5 	add.w	r8, r3, r5, lsr #7
	if (sect != fs->winsect) {	/* Window offset changed? */
  405286:	4590      	cmp	r8, r2
  405288:	d069      	beq.n	40535e <dir_sdi+0x266>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40528a:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40528c:	f106 0934 	add.w	r9, r6, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  405290:	b1ab      	cbz	r3, 4052be <dir_sdi+0x1c6>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  405292:	2301      	movs	r3, #1
  405294:	7870      	ldrb	r0, [r6, #1]
  405296:	4649      	mov	r1, r9
  405298:	4f4c      	ldr	r7, [pc, #304]	; (4053cc <dir_sdi+0x2d4>)
  40529a:	47b8      	blx	r7
  40529c:	2800      	cmp	r0, #0
  40529e:	d15c      	bne.n	40535a <dir_sdi+0x262>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4052a0:	6b31      	ldr	r1, [r6, #48]	; 0x30
  4052a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4052a4:	69f2      	ldr	r2, [r6, #28]
  4052a6:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4052a8:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4052aa:	4293      	cmp	r3, r2
  4052ac:	d207      	bcs.n	4052be <dir_sdi+0x1c6>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4052ae:	78b3      	ldrb	r3, [r6, #2]
  4052b0:	2b02      	cmp	r3, #2
  4052b2:	d104      	bne.n	4052be <dir_sdi+0x1c6>
  4052b4:	440a      	add	r2, r1
  4052b6:	2301      	movs	r3, #1
  4052b8:	4649      	mov	r1, r9
  4052ba:	7870      	ldrb	r0, [r6, #1]
  4052bc:	47b8      	blx	r7
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4052be:	2301      	movs	r3, #1
  4052c0:	4642      	mov	r2, r8
  4052c2:	4649      	mov	r1, r9
  4052c4:	7870      	ldrb	r0, [r6, #1]
  4052c6:	4f40      	ldr	r7, [pc, #256]	; (4053c8 <dir_sdi+0x2d0>)
  4052c8:	47b8      	blx	r7
  4052ca:	b120      	cbz	r0, 4052d6 <dir_sdi+0x1de>
			fs->winsect = sect;
  4052cc:	f04f 33ff 	mov.w	r3, #4294967295
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4052d0:	2001      	movs	r0, #1
			fs->winsect = sect;
  4052d2:	6333      	str	r3, [r6, #48]	; 0x30
  4052d4:	e71c      	b.n	405110 <dir_sdi+0x18>
  4052d6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  4052da:	00ad      	lsls	r5, r5, #2
  4052dc:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  4052e0:	eb09 0205 	add.w	r2, r9, r5
	rv = rv << 8 | ptr[0];
  4052e4:	f819 5005 	ldrb.w	r5, [r9, r5]
	rv = rv << 8 | ptr[2];
  4052e8:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
  4052ea:	7853      	ldrb	r3, [r2, #1]
  4052ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
  4052f0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
  4052f4:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
  4052f8:	e77a      	b.n	4051f0 <dir_sdi+0xf8>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4052fa:	f106 0134 	add.w	r1, r6, #52	; 0x34
  4052fe:	7870      	ldrb	r0, [r6, #1]
  405300:	4f32      	ldr	r7, [pc, #200]	; (4053cc <dir_sdi+0x2d4>)
  405302:	9102      	str	r1, [sp, #8]
  405304:	47b8      	blx	r7
  405306:	bb40      	cbnz	r0, 40535a <dir_sdi+0x262>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  405308:	6b31      	ldr	r1, [r6, #48]	; 0x30
  40530a:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40530c:	69f2      	ldr	r2, [r6, #28]
  40530e:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  405310:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  405312:	4293      	cmp	r3, r2
  405314:	f4bf af35 	bcs.w	405182 <dir_sdi+0x8a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  405318:	78b3      	ldrb	r3, [r6, #2]
  40531a:	2b02      	cmp	r3, #2
  40531c:	f47f af31 	bne.w	405182 <dir_sdi+0x8a>
  405320:	440a      	add	r2, r1
  405322:	2301      	movs	r3, #1
  405324:	9902      	ldr	r1, [sp, #8]
  405326:	7870      	ldrb	r0, [r6, #1]
  405328:	4f28      	ldr	r7, [pc, #160]	; (4053cc <dir_sdi+0x2d4>)
  40532a:	47b8      	blx	r7
  40532c:	e729      	b.n	405182 <dir_sdi+0x8a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40532e:	2301      	movs	r3, #1
  405330:	7870      	ldrb	r0, [r6, #1]
  405332:	4649      	mov	r1, r9
  405334:	4f25      	ldr	r7, [pc, #148]	; (4053cc <dir_sdi+0x2d4>)
  405336:	47b8      	blx	r7
  405338:	b978      	cbnz	r0, 40535a <dir_sdi+0x262>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40533a:	6b31      	ldr	r1, [r6, #48]	; 0x30
  40533c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40533e:	69f2      	ldr	r2, [r6, #28]
  405340:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  405342:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  405344:	4293      	cmp	r3, r2
  405346:	d285      	bcs.n	405254 <dir_sdi+0x15c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  405348:	78b3      	ldrb	r3, [r6, #2]
  40534a:	2b02      	cmp	r3, #2
  40534c:	d182      	bne.n	405254 <dir_sdi+0x15c>
  40534e:	440a      	add	r2, r1
  405350:	2301      	movs	r3, #1
  405352:	4649      	mov	r1, r9
  405354:	7870      	ldrb	r0, [r6, #1]
  405356:	47b8      	blx	r7
  405358:	e77c      	b.n	405254 <dir_sdi+0x15c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40535a:	2001      	movs	r0, #1
  40535c:	e6d8      	b.n	405110 <dir_sdi+0x18>
  40535e:	f106 0934 	add.w	r9, r6, #52	; 0x34
  405362:	e7ba      	b.n	4052da <dir_sdi+0x1e2>
  405364:	f106 0934 	add.w	r9, r6, #52	; 0x34
  405368:	e77e      	b.n	405268 <dir_sdi+0x170>
  40536a:	9f01      	ldr	r7, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  40536c:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
  40536e:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  405370:	4299      	cmp	r1, r3
  405372:	d207      	bcs.n	405384 <dir_sdi+0x28c>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  405374:	f8bb 200a 	ldrh.w	r2, [fp, #10]
  405378:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
  40537c:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clst2sect(fs, clst);
  405380:	61ba      	str	r2, [r7, #24]
  405382:	e74c      	b.n	40521e <dir_sdi+0x126>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  405384:	2200      	movs	r2, #0
  405386:	e7fb      	b.n	405380 <dir_sdi+0x288>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  405388:	f106 0334 	add.w	r3, r6, #52	; 0x34
  40538c:	7870      	ldrb	r0, [r6, #1]
  40538e:	4f0f      	ldr	r7, [pc, #60]	; (4053cc <dir_sdi+0x2d4>)
  405390:	4619      	mov	r1, r3
  405392:	9302      	str	r3, [sp, #8]
  405394:	2301      	movs	r3, #1
  405396:	47b8      	blx	r7
  405398:	2800      	cmp	r0, #0
  40539a:	d1de      	bne.n	40535a <dir_sdi+0x262>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40539c:	6b31      	ldr	r1, [r6, #48]	; 0x30
  40539e:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4053a0:	69f2      	ldr	r2, [r6, #28]
  4053a2:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4053a4:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4053a6:	4293      	cmp	r3, r2
  4053a8:	f4bf af0b 	bcs.w	4051c2 <dir_sdi+0xca>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4053ac:	78b3      	ldrb	r3, [r6, #2]
  4053ae:	2b02      	cmp	r3, #2
  4053b0:	f47f af07 	bne.w	4051c2 <dir_sdi+0xca>
  4053b4:	440a      	add	r2, r1
  4053b6:	2301      	movs	r3, #1
  4053b8:	9902      	ldr	r1, [sp, #8]
  4053ba:	7870      	ldrb	r0, [r6, #1]
  4053bc:	47b8      	blx	r7
  4053be:	e700      	b.n	4051c2 <dir_sdi+0xca>
  4053c0:	f8db 3018 	ldr.w	r3, [fp, #24]
  4053c4:	e7d2      	b.n	40536c <dir_sdi+0x274>
  4053c6:	bf00      	nop
  4053c8:	004078c5 	.word	0x004078c5
  4053cc:	004078e9 	.word	0x004078e9

004053d0 <dir_find>:
{
  4053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
  4053d4:	2100      	movs	r1, #0
{
  4053d6:	b087      	sub	sp, #28
	res = dir_sdi(dp, 0);			/* Rewind directory object */
  4053d8:	4baf      	ldr	r3, [pc, #700]	; (405698 <dir_find+0x2c8>)
{
  4053da:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
  4053dc:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
  4053de:	4798      	blx	r3
	if (res != FR_OK) return res;
  4053e0:	4681      	mov	r9, r0
  4053e2:	b9f0      	cbnz	r0, 405422 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
  4053e4:	23ff      	movs	r3, #255	; 0xff
  4053e6:	69a7      	ldr	r7, [r4, #24]
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4053e8:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 4056a0 <dir_find+0x2d0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
  4053ec:	461a      	mov	r2, r3
  4053ee:	f04f 33ff 	mov.w	r3, #4294967295
  4053f2:	9001      	str	r0, [sp, #4]
  4053f4:	4616      	mov	r6, r2
  4053f6:	4692      	mov	sl, r2
  4053f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
  4053fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  4053fc:	42ba      	cmp	r2, r7
  4053fe:	d015      	beq.n	40542c <dir_find+0x5c>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  405400:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  405402:	f105 0834 	add.w	r8, r5, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  405406:	2b00      	cmp	r3, #0
  405408:	f040 80ff 	bne.w	40560a <dir_find+0x23a>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  40540c:	4641      	mov	r1, r8
  40540e:	2301      	movs	r3, #1
  405410:	463a      	mov	r2, r7
  405412:	7868      	ldrb	r0, [r5, #1]
  405414:	47d8      	blx	fp
  405416:	b140      	cbz	r0, 40542a <dir_find+0x5a>
			fs->winsect = sect;
  405418:	f04f 33ff 	mov.w	r3, #4294967295
  40541c:	f04f 0901 	mov.w	r9, #1
  405420:	632b      	str	r3, [r5, #48]	; 0x30
}
  405422:	4648      	mov	r0, r9
  405424:	b007      	add	sp, #28
  405426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sect;
  40542a:	632f      	str	r7, [r5, #48]	; 0x30
		c = dp->dir[DIR_Name];
  40542c:	69e7      	ldr	r7, [r4, #28]
  40542e:	783b      	ldrb	r3, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  405430:	2b00      	cmp	r3, #0
  405432:	f000 8104 	beq.w	40563e <dir_find+0x26e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
  405436:	7af9      	ldrb	r1, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  405438:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
  40543a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
  40543e:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  405440:	d004      	beq.n	40544c <dir_find+0x7c>
  405442:	0709      	lsls	r1, r1, #28
  405444:	d54a      	bpl.n	4054dc <dir_find+0x10c>
  405446:	2a0f      	cmp	r2, #15
  405448:	f000 80fc 	beq.w	405644 <dir_find+0x274>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
  40544c:	f04f 33ff 	mov.w	r3, #4294967295
  405450:	26ff      	movs	r6, #255	; 0xff
  405452:	62e3      	str	r3, [r4, #44]	; 0x2c
	ofs = dp->dptr + SZDIRE;	/* Next entry */
  405454:	6923      	ldr	r3, [r4, #16]
  405456:	3320      	adds	r3, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  405458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
  40545c:	d211      	bcs.n	405482 <dir_find+0xb2>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  40545e:	69a7      	ldr	r7, [r4, #24]
  405460:	2f00      	cmp	r7, #0
  405462:	f000 80ec 	beq.w	40563e <dir_find+0x26e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  405466:	f3c3 0808 	ubfx	r8, r3, #0, #9
	FATFS *fs = dp->obj.fs;
  40546a:	6822      	ldr	r2, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  40546c:	f1b8 0f00 	cmp.w	r8, #0
  405470:	d12f      	bne.n	4054d2 <dir_find+0x102>
		dp->sect++;				/* Next sector */
  405472:	3701      	adds	r7, #1
		if (dp->clust == 0) {	/* Static table */
  405474:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
  405476:	61a7      	str	r7, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
  405478:	b959      	cbnz	r1, 405492 <dir_find+0xc2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
  40547a:	8911      	ldrh	r1, [r2, #8]
  40547c:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
  405480:	d827      	bhi.n	4054d2 <dir_find+0x102>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  405482:	f04f 0904 	mov.w	r9, #4
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  405486:	2300      	movs	r3, #0
}
  405488:	4648      	mov	r0, r9
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  40548a:	61a3      	str	r3, [r4, #24]
}
  40548c:	b007      	add	sp, #28
  40548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
  405492:	8950      	ldrh	r0, [r2, #10]
  405494:	3801      	subs	r0, #1
  405496:	ea10 2053 	ands.w	r0, r0, r3, lsr #9
  40549a:	d11a      	bne.n	4054d2 <dir_find+0x102>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
  40549c:	4610      	mov	r0, r2
  40549e:	4f7f      	ldr	r7, [pc, #508]	; (40569c <dir_find+0x2cc>)
  4054a0:	9303      	str	r3, [sp, #12]
  4054a2:	9202      	str	r2, [sp, #8]
  4054a4:	47b8      	blx	r7
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  4054a6:	2801      	cmp	r0, #1
  4054a8:	f240 8130 	bls.w	40570c <dir_find+0x33c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4054ac:	1c43      	adds	r3, r0, #1
  4054ae:	f000 8126 	beq.w	4056fe <dir_find+0x32e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
  4054b2:	9a02      	ldr	r2, [sp, #8]
  4054b4:	6991      	ldr	r1, [r2, #24]
  4054b6:	4288      	cmp	r0, r1
  4054b8:	d2e3      	bcs.n	405482 <dir_find+0xb2>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4054ba:	3902      	subs	r1, #2
	clst -= 2;		/* Cluster number is origin from 2 */
  4054bc:	1e87      	subs	r7, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
  4054be:	6160      	str	r0, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4054c0:	428f      	cmp	r7, r1
  4054c2:	9b03      	ldr	r3, [sp, #12]
  4054c4:	f080 8125 	bcs.w	405712 <dir_find+0x342>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  4054c8:	8950      	ldrh	r0, [r2, #10]
  4054ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  4054cc:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clst2sect(fs, clst);
  4054d0:	61a7      	str	r7, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  4054d2:	3234      	adds	r2, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
  4054d4:	6123      	str	r3, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  4054d6:	4442      	add	r2, r8
  4054d8:	61e2      	str	r2, [r4, #28]
  4054da:	e78e      	b.n	4053fa <dir_find+0x2a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  4054dc:	2a0f      	cmp	r2, #15
  4054de:	f000 80b1 	beq.w	405644 <dir_find+0x274>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
  4054e2:	2e00      	cmp	r6, #0
  4054e4:	d147      	bne.n	405576 <dir_find+0x1a6>
		sum = (sum >> 1) + (sum << 7) + *dir++;
  4054e6:	783b      	ldrb	r3, [r7, #0]
  4054e8:	787e      	ldrb	r6, [r7, #1]
  4054ea:	01da      	lsls	r2, r3, #7
  4054ec:	78b8      	ldrb	r0, [r7, #2]
  4054ee:	78f9      	ldrb	r1, [r7, #3]
  4054f0:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  4054f4:	199a      	adds	r2, r3, r6
  4054f6:	793e      	ldrb	r6, [r7, #4]
  4054f8:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4054fc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  405500:	fa50 f383 	uxtab	r3, r0, r3
  405504:	7978      	ldrb	r0, [r7, #5]
  405506:	f3c3 0246 	ubfx	r2, r3, #1, #7
  40550a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
  40550e:	fa51 f283 	uxtab	r2, r1, r3
  405512:	79b9      	ldrb	r1, [r7, #6]
  405514:	f3c2 0346 	ubfx	r3, r2, #1, #7
  405518:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  40551c:	fa56 f383 	uxtab	r3, r6, r3
  405520:	79fe      	ldrb	r6, [r7, #7]
  405522:	f3c3 0246 	ubfx	r2, r3, #1, #7
  405526:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
  40552a:	fa50 f283 	uxtab	r2, r0, r3
  40552e:	7a78      	ldrb	r0, [r7, #9]
  405530:	f3c2 0346 	ubfx	r3, r2, #1, #7
  405534:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  405538:	7a3a      	ldrb	r2, [r7, #8]
  40553a:	fa51 f383 	uxtab	r3, r1, r3
  40553e:	f3c3 0146 	ubfx	r1, r3, #1, #7
  405542:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
  405546:	fa56 f183 	uxtab	r1, r6, r3
  40554a:	f3c1 0346 	ubfx	r3, r1, #1, #7
  40554e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
  405552:	7ab9      	ldrb	r1, [r7, #10]
  405554:	fa52 f383 	uxtab	r3, r2, r3
  405558:	f3c3 0246 	ubfx	r2, r3, #1, #7
  40555c:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
  405560:	fa50 f283 	uxtab	r2, r0, r3
  405564:	f3c2 0346 	ubfx	r3, r2, #1, #7
  405568:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  40556c:	fa51 f383 	uxtab	r3, r1, r3
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
  405570:	b2db      	uxtb	r3, r3
  405572:	459a      	cmp	sl, r3
  405574:	d046      	beq.n	405604 <dir_find+0x234>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
  405576:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  40557a:	07da      	lsls	r2, r3, #31
  40557c:	f53f af66 	bmi.w	40544c <dir_find+0x7c>
	} while (--cnt && r == 0);
  405580:	f894 2020 	ldrb.w	r2, [r4, #32]
  405584:	783b      	ldrb	r3, [r7, #0]
  405586:	429a      	cmp	r2, r3
  405588:	f47f af60 	bne.w	40544c <dir_find+0x7c>
  40558c:	787a      	ldrb	r2, [r7, #1]
  40558e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  405592:	429a      	cmp	r2, r3
  405594:	f47f af5a 	bne.w	40544c <dir_find+0x7c>
  405598:	78ba      	ldrb	r2, [r7, #2]
  40559a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  40559e:	429a      	cmp	r2, r3
  4055a0:	f47f af54 	bne.w	40544c <dir_find+0x7c>
  4055a4:	78fa      	ldrb	r2, [r7, #3]
  4055a6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  4055aa:	429a      	cmp	r2, r3
  4055ac:	f47f af4e 	bne.w	40544c <dir_find+0x7c>
  4055b0:	793a      	ldrb	r2, [r7, #4]
  4055b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4055b6:	429a      	cmp	r2, r3
  4055b8:	f47f af48 	bne.w	40544c <dir_find+0x7c>
  4055bc:	797a      	ldrb	r2, [r7, #5]
  4055be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  4055c2:	429a      	cmp	r2, r3
  4055c4:	f47f af42 	bne.w	40544c <dir_find+0x7c>
  4055c8:	79ba      	ldrb	r2, [r7, #6]
  4055ca:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
  4055ce:	429a      	cmp	r2, r3
  4055d0:	f47f af3c 	bne.w	40544c <dir_find+0x7c>
  4055d4:	79fa      	ldrb	r2, [r7, #7]
  4055d6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
  4055da:	429a      	cmp	r2, r3
  4055dc:	f47f af36 	bne.w	40544c <dir_find+0x7c>
  4055e0:	7a3a      	ldrb	r2, [r7, #8]
  4055e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  4055e6:	429a      	cmp	r2, r3
  4055e8:	f47f af30 	bne.w	40544c <dir_find+0x7c>
  4055ec:	7a7a      	ldrb	r2, [r7, #9]
  4055ee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  4055f2:	429a      	cmp	r2, r3
  4055f4:	f47f af2a 	bne.w	40544c <dir_find+0x7c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
  4055f8:	7aba      	ldrb	r2, [r7, #10]
  4055fa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4055fe:	429a      	cmp	r2, r3
  405600:	f47f af24 	bne.w	40544c <dir_find+0x7c>
  405604:	f8dd 9004 	ldr.w	r9, [sp, #4]
  405608:	e70b      	b.n	405422 <dir_find+0x52>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  40560a:	2301      	movs	r3, #1
  40560c:	7868      	ldrb	r0, [r5, #1]
  40560e:	4641      	mov	r1, r8
  405610:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4056a4 <dir_find+0x2d4>
  405614:	47c8      	blx	r9
  405616:	2800      	cmp	r0, #0
  405618:	d171      	bne.n	4056fe <dir_find+0x32e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40561a:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40561c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40561e:	69ea      	ldr	r2, [r5, #28]
  405620:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  405622:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  405624:	4293      	cmp	r3, r2
  405626:	f4bf aef1 	bcs.w	40540c <dir_find+0x3c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  40562a:	78ab      	ldrb	r3, [r5, #2]
  40562c:	2b02      	cmp	r3, #2
  40562e:	f47f aeed 	bne.w	40540c <dir_find+0x3c>
  405632:	440a      	add	r2, r1
  405634:	2301      	movs	r3, #1
  405636:	4641      	mov	r1, r8
  405638:	7868      	ldrb	r0, [r5, #1]
  40563a:	47c8      	blx	r9
  40563c:	e6e6      	b.n	40540c <dir_find+0x3c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40563e:	f04f 0904 	mov.w	r9, #4
  405642:	e6ee      	b.n	405422 <dir_find+0x52>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
  405644:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
  405648:	0652      	lsls	r2, r2, #25
  40564a:	f53f af03 	bmi.w	405454 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
  40564e:	0658      	lsls	r0, r3, #25
  405650:	d558      	bpl.n	405704 <dir_find+0x334>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
  405652:	6922      	ldr	r2, [r4, #16]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
  405654:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
  405658:	f897 a00d 	ldrb.w	sl, [r7, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
  40565c:	62e2      	str	r2, [r4, #44]	; 0x2c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  40565e:	f897 800d 	ldrb.w	r8, [r7, #13]
  405662:	45d0      	cmp	r8, sl
  405664:	d150      	bne.n	405708 <dir_find+0x338>
	rv = rv << 8 | ptr[0];
  405666:	7ef9      	ldrb	r1, [r7, #27]
  405668:	7eba      	ldrb	r2, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
  40566a:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
  40566e:	d14b      	bne.n	405708 <dir_find+0x338>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  405670:	7839      	ldrb	r1, [r7, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
  405672:	f04f 0e01 	mov.w	lr, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  405676:	68ea      	ldr	r2, [r5, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  405678:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  40567c:	9404      	str	r4, [sp, #16]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  40567e:	9202      	str	r2, [sp, #8]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  405680:	4670      	mov	r0, lr
  405682:	3901      	subs	r1, #1
  405684:	f8df 9020 	ldr.w	r9, [pc, #32]	; 4056a8 <dir_find+0x2d8>
  405688:	9503      	str	r5, [sp, #12]
  40568a:	463c      	mov	r4, r7
  40568c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  405690:	9305      	str	r3, [sp, #20]
  405692:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
  405696:	e01c      	b.n	4056d2 <dir_find+0x302>
  405698:	004050f9 	.word	0x004050f9
  40569c:	00404551 	.word	0x00404551
  4056a0:	004078c5 	.word	0x004078c5
  4056a4:	004078e9 	.word	0x004078e9
  4056a8:	0040af54 	.word	0x0040af54
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
  4056ac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
  4056b0:	4630      	mov	r0, r6
  4056b2:	d81f      	bhi.n	4056f4 <dir_find+0x324>
  4056b4:	4b21      	ldr	r3, [pc, #132]	; (40573c <dir_find+0x36c>)
  4056b6:	4798      	blx	r3
  4056b8:	9b02      	ldr	r3, [sp, #8]
  4056ba:	4605      	mov	r5, r0
  4056bc:	f833 001a 	ldrh.w	r0, [r3, sl, lsl #1]
  4056c0:	46ba      	mov	sl, r7
  4056c2:	4b1e      	ldr	r3, [pc, #120]	; (40573c <dir_find+0x36c>)
  4056c4:	4798      	blx	r3
  4056c6:	4285      	cmp	r5, r0
	rv = rv << 8 | ptr[0];
  4056c8:	4630      	mov	r0, r6
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
  4056ca:	d113      	bne.n	4056f4 <dir_find+0x324>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
  4056cc:	4b1c      	ldr	r3, [pc, #112]	; (405740 <dir_find+0x370>)
  4056ce:	4599      	cmp	r9, r3
  4056d0:	d021      	beq.n	405716 <dir_find+0x346>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
  4056d2:	f819 1b01 	ldrb.w	r1, [r9], #1
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
  4056d6:	f10a 0701 	add.w	r7, sl, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
  4056da:	eb04 0e01 	add.w	lr, r4, r1
	rv = rv << 8 | ptr[0];
  4056de:	5c66      	ldrb	r6, [r4, r1]
  4056e0:	f89e 1001 	ldrb.w	r1, [lr, #1]
  4056e4:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
		if (wc != 0) {
  4056e8:	2800      	cmp	r0, #0
  4056ea:	d1df      	bne.n	4056ac <dir_find+0x2dc>
			if (uc != 0xFFFF) return 0;		/* Check filler */
  4056ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4056f0:	429e      	cmp	r6, r3
  4056f2:	d0eb      	beq.n	4056cc <dir_find+0x2fc>
  4056f4:	9d03      	ldr	r5, [sp, #12]
  4056f6:	46c2      	mov	sl, r8
  4056f8:	9c04      	ldr	r4, [sp, #16]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  4056fa:	26ff      	movs	r6, #255	; 0xff
  4056fc:	e6aa      	b.n	405454 <dir_find+0x84>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4056fe:	f04f 0901 	mov.w	r9, #1
  405702:	e68e      	b.n	405422 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  405704:	429e      	cmp	r6, r3
  405706:	d0aa      	beq.n	40565e <dir_find+0x28e>
  405708:	26ff      	movs	r6, #255	; 0xff
  40570a:	e6a3      	b.n	405454 <dir_find+0x84>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  40570c:	f04f 0902 	mov.w	r9, #2
  405710:	e687      	b.n	405422 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  405712:	4647      	mov	r7, r8
  405714:	e6dc      	b.n	4054d0 <dir_find+0x100>
  405716:	4627      	mov	r7, r4
  405718:	4686      	mov	lr, r0
  40571a:	9d03      	ldr	r5, [sp, #12]
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
  40571c:	783a      	ldrb	r2, [r7, #0]
  40571e:	9b05      	ldr	r3, [sp, #20]
  405720:	0651      	lsls	r1, r2, #25
  405722:	9c04      	ldr	r4, [sp, #16]
  405724:	d504      	bpl.n	405730 <dir_find+0x360>
  405726:	b118      	cbz	r0, 405730 <dir_find+0x360>
  405728:	9a02      	ldr	r2, [sp, #8]
  40572a:	f832 201a 	ldrh.w	r2, [r2, sl, lsl #1]
  40572e:	b91a      	cbnz	r2, 405738 <dir_find+0x368>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
  405730:	3b01      	subs	r3, #1
  405732:	46c2      	mov	sl, r8
  405734:	b2de      	uxtb	r6, r3
  405736:	e68d      	b.n	405454 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
  405738:	46c2      	mov	sl, r8
  40573a:	e7e5      	b.n	405708 <dir_find+0x338>
  40573c:	004079a9 	.word	0x004079a9
  405740:	0040af61 	.word	0x0040af61

00405744 <follow_path>:
{
  405744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
  405748:	780b      	ldrb	r3, [r1, #0]
{
  40574a:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
  40574c:	6802      	ldr	r2, [r0, #0]
{
  40574e:	460d      	mov	r5, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
  405750:	2b2f      	cmp	r3, #47	; 0x2f
{
  405752:	4683      	mov	fp, r0
	FATFS *fs = dp->obj.fs;
  405754:	9200      	str	r2, [sp, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
  405756:	d103      	bne.n	405760 <follow_path+0x1c>
  405758:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40575c:	2b2f      	cmp	r3, #47	; 0x2f
  40575e:	d0fb      	beq.n	405758 <follow_path+0x14>
  405760:	2b5c      	cmp	r3, #92	; 0x5c
  405762:	d0f9      	beq.n	405758 <follow_path+0x14>
		dp->obj.sclust = 0;					/* Start from root directory */
  405764:	2100      	movs	r1, #0
  405766:	f8cb 1008 	str.w	r1, [fp, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
  40576a:	782a      	ldrb	r2, [r5, #0]
  40576c:	2a1f      	cmp	r2, #31
  40576e:	f240 81de 	bls.w	405b2e <follow_path+0x3ea>
  405772:	9b00      	ldr	r3, [sp, #0]
  405774:	4617      	mov	r7, r2
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
  405776:	f8df 9374 	ldr.w	r9, [pc, #884]	; 405aec <follow_path+0x3a8>
  40577a:	f8df a374 	ldr.w	sl, [pc, #884]	; 405af0 <follow_path+0x3ac>
	if (uc & 0x80) {	/* Multiple byte code? */
  40577e:	063a      	lsls	r2, r7, #24
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
  405780:	68de      	ldr	r6, [r3, #12]
  405782:	f04f 0100 	mov.w	r1, #0
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
  405786:	f240 7eff 	movw	lr, #2047	; 0x7ff
	uc = (BYTE)*p++;	/* Get an encoding unit */
  40578a:	f105 0301 	add.w	r3, r5, #1
	if (uc & 0x80) {	/* Multiple byte code? */
  40578e:	d41f      	bmi.n	4057d0 <follow_path+0x8c>
	uc = (BYTE)*p++;	/* Get an encoding unit */
  405790:	461d      	mov	r5, r3
  405792:	460c      	mov	r4, r1
		wc = (WCHAR)uc;
  405794:	b2b8      	uxth	r0, r7
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
  405796:	281f      	cmp	r0, #31
  405798:	d96d      	bls.n	405876 <follow_path+0x132>
  40579a:	282f      	cmp	r0, #47	; 0x2f
  40579c:	d06b      	beq.n	405876 <follow_path+0x132>
  40579e:	285c      	cmp	r0, #92	; 0x5c
  4057a0:	f000 8158 	beq.w	405a54 <follow_path+0x310>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
  4057a4:	287f      	cmp	r0, #127	; 0x7f
  4057a6:	d80a      	bhi.n	4057be <follow_path+0x7a>
  4057a8:	b2bf      	uxth	r7, r7
	while (*str && *str != chr) str++;
  4057aa:	2f22      	cmp	r7, #34	; 0x22
  4057ac:	d01e      	beq.n	4057ec <follow_path+0xa8>
  4057ae:	232a      	movs	r3, #42	; 0x2a
  4057b0:	4ac9      	ldr	r2, [pc, #804]	; (405ad8 <follow_path+0x394>)
  4057b2:	429f      	cmp	r7, r3
  4057b4:	d01a      	beq.n	4057ec <follow_path+0xa8>
  4057b6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4057ba:	2b00      	cmp	r3, #0
  4057bc:	d1f9      	bne.n	4057b2 <follow_path+0x6e>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
  4057be:	2cfe      	cmp	r4, #254	; 0xfe
  4057c0:	d814      	bhi.n	4057ec <follow_path+0xa8>
		lfn[di++] = wc;					/* Store the Unicode character */
  4057c2:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
  4057c6:	1c61      	adds	r1, r4, #1
  4057c8:	782f      	ldrb	r7, [r5, #0]
	uc = (BYTE)*p++;	/* Get an encoding unit */
  4057ca:	1c6b      	adds	r3, r5, #1
	if (uc & 0x80) {	/* Multiple byte code? */
  4057cc:	063a      	lsls	r2, r7, #24
  4057ce:	d5df      	bpl.n	405790 <follow_path+0x4c>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
  4057d0:	f007 03e0 	and.w	r3, r7, #224	; 0xe0
  4057d4:	2bc0      	cmp	r3, #192	; 0xc0
  4057d6:	f000 80f5 	beq.w	4059c4 <follow_path+0x280>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
  4057da:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
  4057de:	2be0      	cmp	r3, #224	; 0xe0
  4057e0:	f000 810b 	beq.w	4059fa <follow_path+0x2b6>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
  4057e4:	f007 03f8 	and.w	r3, r7, #248	; 0xf8
  4057e8:	2bf0      	cmp	r3, #240	; 0xf0
  4057ea:	d003      	beq.n	4057f4 <follow_path+0xb0>
					b |= 1; wc -= 0x20;
  4057ec:	2006      	movs	r0, #6
}
  4057ee:	b005      	add	sp, #20
  4057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					uc &= 0x07; nf = 3;
  4057f4:	f007 0707 	and.w	r7, r7, #7
  4057f8:	2003      	movs	r0, #3
			b = (BYTE)*p++;
  4057fa:	786b      	ldrb	r3, [r5, #1]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
  4057fc:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
  405800:	2a80      	cmp	r2, #128	; 0x80
  405802:	d1f3      	bne.n	4057ec <follow_path+0xa8>
			b = (BYTE)*p++;
  405804:	78ac      	ldrb	r4, [r5, #2]
			uc = uc << 6 | (b & 0x3F);
  405806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
			b = (BYTE)*p++;
  40580a:	1cea      	adds	r2, r5, #3
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
  40580c:	f004 0cc0 	and.w	ip, r4, #192	; 0xc0
			uc = uc << 6 | (b & 0x3F);
  405810:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
  405814:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
  405818:	d1e8      	bne.n	4057ec <follow_path+0xa8>
			uc = uc << 6 | (b & 0x3F);
  40581a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
		} while (--nf != 0);
  40581e:	2802      	cmp	r0, #2
			uc = uc << 6 | (b & 0x3F);
  405820:	ea44 1787 	orr.w	r7, r4, r7, lsl #6
		} while (--nf != 0);
  405824:	f000 80db 	beq.w	4059de <follow_path+0x29a>
			b = (BYTE)*p++;
  405828:	78eb      	ldrb	r3, [r5, #3]
  40582a:	3504      	adds	r5, #4
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
  40582c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
  405830:	2a80      	cmp	r2, #128	; 0x80
  405832:	d1db      	bne.n	4057ec <follow_path+0xa8>
			uc = uc << 6 | (b & 0x3F);
  405834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405838:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
  40583c:	f5a7 4358 	sub.w	r3, r7, #55296	; 0xd800
  405840:	4573      	cmp	r3, lr
  405842:	d9d3      	bls.n	4057ec <follow_path+0xa8>
  405844:	f1a7 0380 	sub.w	r3, r7, #128	; 0x80
  405848:	4aa4      	ldr	r2, [pc, #656]	; (405adc <follow_path+0x398>)
  40584a:	4293      	cmp	r3, r2
  40584c:	d8ce      	bhi.n	4057ec <follow_path+0xa8>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
  40584e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
  405852:	f0c0 819b 	bcc.w	405b8c <follow_path+0x448>
  405856:	f5a7 3380 	sub.w	r3, r7, #65536	; 0x10000
  40585a:	f3c7 0709 	ubfx	r7, r7, #0, #10
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
  40585e:	1c4c      	adds	r4, r1, #1
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
  405860:	ea09 1383 	and.w	r3, r9, r3, lsl #6
  405864:	ea47 070a 	orr.w	r7, r7, sl
  405868:	431f      	orrs	r7, r3
		wc = (WCHAR)uc;
  40586a:	b2b8      	uxth	r0, r7
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
  40586c:	0c3b      	lsrs	r3, r7, #16
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
  40586e:	281f      	cmp	r0, #31
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
  405870:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
  405874:	d891      	bhi.n	40579a <follow_path+0x56>
	if (wc < ' ') {				/* End of path? */
  405876:	281f      	cmp	r0, #31
  405878:	f200 80ec 	bhi.w	405a54 <follow_path+0x310>
		cf = NS_LAST;			/* Set last segment flag */
  40587c:	2704      	movs	r7, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
  40587e:	2c00      	cmp	r4, #0
  405880:	f000 80e2 	beq.w	405a48 <follow_path+0x304>
		wc = lfn[di - 1];
  405884:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  405888:	4423      	add	r3, r4
  40588a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
  40588e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		if (wc != ' ' && wc != '.') break;
  405892:	292e      	cmp	r1, #46	; 0x2e
  405894:	d001      	beq.n	40589a <follow_path+0x156>
  405896:	2920      	cmp	r1, #32
  405898:	d108      	bne.n	4058ac <follow_path+0x168>
	while (di) {						/* Snip off trailing spaces and dots if exist */
  40589a:	3c01      	subs	r4, #1
  40589c:	f000 80d4 	beq.w	405a48 <follow_path+0x304>
		wc = lfn[di - 1];
  4058a0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (wc != ' ' && wc != '.') break;
  4058a4:	2a20      	cmp	r2, #32
  4058a6:	d0f8      	beq.n	40589a <follow_path+0x156>
  4058a8:	2a2e      	cmp	r2, #46	; 0x2e
  4058aa:	d0f6      	beq.n	40589a <follow_path+0x156>
	lfn[di] = 0;							/* LFN is created into the working buffer */
  4058ac:	f04f 0800 	mov.w	r8, #0
  4058b0:	eb06 0344 	add.w	r3, r6, r4, lsl #1
  4058b4:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
  4058b8:	8831      	ldrh	r1, [r6, #0]
  4058ba:	2920      	cmp	r1, #32
  4058bc:	f040 8162 	bne.w	405b84 <follow_path+0x440>
  4058c0:	4631      	mov	r1, r6
  4058c2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4058c6:	f108 0801 	add.w	r8, r8, #1
  4058ca:	2a20      	cmp	r2, #32
  4058cc:	d0f9      	beq.n	4058c2 <follow_path+0x17e>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
  4058ce:	f047 0703 	orr.w	r7, r7, #3
  4058d2:	e001      	b.n	4058d8 <follow_path+0x194>
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
  4058d4:	3c01      	subs	r4, #1
  4058d6:	d003      	beq.n	4058e0 <follow_path+0x19c>
  4058d8:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
  4058dc:	2a2e      	cmp	r2, #46	; 0x2e
  4058de:	d1f9      	bne.n	4058d4 <follow_path+0x190>
		*d++ = (BYTE)val;
  4058e0:	2120      	movs	r1, #32
  4058e2:	2300      	movs	r3, #0
  4058e4:	2208      	movs	r2, #8
  4058e6:	9301      	str	r3, [sp, #4]
  4058e8:	f88b 1020 	strb.w	r1, [fp, #32]
  4058ec:	f88b 1021 	strb.w	r1, [fp, #33]	; 0x21
  4058f0:	f88b 1022 	strb.w	r1, [fp, #34]	; 0x22
  4058f4:	f88b 1023 	strb.w	r1, [fp, #35]	; 0x23
  4058f8:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
  4058fc:	f88b 1025 	strb.w	r1, [fp, #37]	; 0x25
  405900:	f88b 1026 	strb.w	r1, [fp, #38]	; 0x26
  405904:	f88b 1027 	strb.w	r1, [fp, #39]	; 0x27
  405908:	f88b 1028 	strb.w	r1, [fp, #40]	; 0x28
  40590c:	f88b 1029 	strb.w	r1, [fp, #41]	; 0x29
  405910:	f88b 102a 	strb.w	r1, [fp, #42]	; 0x2a
		wc = lfn[si++];					/* Get an LFN character */
  405914:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
  405918:	f108 0801 	add.w	r8, r8, #1
		if (wc == 0) break;				/* Break on end of the LFN */
  40591c:	b168      	cbz	r0, 40593a <follow_path+0x1f6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
  40591e:	2820      	cmp	r0, #32
  405920:	d003      	beq.n	40592a <follow_path+0x1e6>
  405922:	282e      	cmp	r0, #46	; 0x2e
  405924:	d16d      	bne.n	405a02 <follow_path+0x2be>
  405926:	45a0      	cmp	r8, r4
  405928:	d06b      	beq.n	405a02 <follow_path+0x2be>
		wc = lfn[si++];					/* Get an LFN character */
  40592a:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
			cf |= NS_LOSS | NS_LFN;
  40592e:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
  405932:	f108 0801 	add.w	r8, r8, #1
		if (wc == 0) break;				/* Break on end of the LFN */
  405936:	2800      	cmp	r0, #0
  405938:	d1f1      	bne.n	40591e <follow_path+0x1da>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
  40593a:	f89b 3020 	ldrb.w	r3, [fp, #32]
  40593e:	2be5      	cmp	r3, #229	; 0xe5
  405940:	f000 80e9 	beq.w	405b16 <follow_path+0x3d2>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
  405944:	2a08      	cmp	r2, #8
  405946:	f000 80e1 	beq.w	405b0c <follow_path+0x3c8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
  40594a:	9a01      	ldr	r2, [sp, #4]
  40594c:	f002 030c 	and.w	r3, r2, #12
  405950:	2b0c      	cmp	r3, #12
  405952:	f000 809f 	beq.w	405a94 <follow_path+0x350>
  405956:	f002 0303 	and.w	r3, r2, #3
  40595a:	2b03      	cmp	r3, #3
  40595c:	f000 809a 	beq.w	405a94 <follow_path+0x350>
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
  405960:	07bc      	lsls	r4, r7, #30
  405962:	d408      	bmi.n	405976 <follow_path+0x232>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
  405964:	9b01      	ldr	r3, [sp, #4]
  405966:	07d8      	lsls	r0, r3, #31
  405968:	bf48      	it	mi
  40596a:	f047 0710 	orrmi.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
  40596e:	0759      	lsls	r1, r3, #29
  405970:	bf48      	it	mi
  405972:	f047 0708 	orrmi.w	r7, r7, #8
			res = dir_find(dp);				/* Find an object with the segment name */
  405976:	4b5a      	ldr	r3, [pc, #360]	; (405ae0 <follow_path+0x39c>)
  405978:	4658      	mov	r0, fp
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
  40597a:	f88b 702b 	strb.w	r7, [fp, #43]	; 0x2b
			res = dir_find(dp);				/* Find an object with the segment name */
  40597e:	4798      	blx	r3
			ns = dp->fn[NSFLAG];
  405980:	f89b 302b 	ldrb.w	r3, [fp, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
  405984:	2800      	cmp	r0, #0
  405986:	f040 80ca 	bne.w	405b1e <follow_path+0x3da>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
  40598a:	075a      	lsls	r2, r3, #29
  40598c:	f53f af2f 	bmi.w	4057ee <follow_path+0xaa>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
  405990:	f89b 3006 	ldrb.w	r3, [fp, #6]
  405994:	06db      	lsls	r3, r3, #27
  405996:	f140 80e8 	bpl.w	405b6a <follow_path+0x426>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
  40599a:	9a00      	ldr	r2, [sp, #0]
  40599c:	f8db 1010 	ldr.w	r1, [fp, #16]
  4059a0:	4613      	mov	r3, r2
	if (fs->fs_type == FS_FAT32) {
  4059a2:	7810      	ldrb	r0, [r2, #0]
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
  4059a4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4059a8:	3334      	adds	r3, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
  4059aa:	2803      	cmp	r0, #3
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
  4059ac:	440b      	add	r3, r1
	rv = rv << 8 | ptr[0];
  4059ae:	7edc      	ldrb	r4, [r3, #27]
  4059b0:	7e99      	ldrb	r1, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
  4059b2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
  4059b6:	d040      	beq.n	405a3a <follow_path+0x2f6>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
  4059b8:	f8cb 1008 	str.w	r1, [fp, #8]
  4059bc:	f8db 3000 	ldr.w	r3, [fp]
  4059c0:	782f      	ldrb	r7, [r5, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
  4059c2:	e6dc      	b.n	40577e <follow_path+0x3a>
			b = (BYTE)*p++;
  4059c4:	786b      	ldrb	r3, [r5, #1]
			uc &= 0x1F; nf = 1;
  4059c6:	f007 071f 	and.w	r7, r7, #31
			b = (BYTE)*p++;
  4059ca:	1caa      	adds	r2, r5, #2
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
  4059cc:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
  4059d0:	2880      	cmp	r0, #128	; 0x80
  4059d2:	f47f af0b 	bne.w	4057ec <follow_path+0xa8>
			uc = uc << 6 | (b & 0x3F);
  4059d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4059da:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
  4059de:	f1a7 0380 	sub.w	r3, r7, #128	; 0x80
  4059e2:	483e      	ldr	r0, [pc, #248]	; (405adc <follow_path+0x398>)
  4059e4:	4283      	cmp	r3, r0
  4059e6:	f63f af01 	bhi.w	4057ec <follow_path+0xa8>
  4059ea:	f5a7 4358 	sub.w	r3, r7, #55296	; 0xd800
  4059ee:	4573      	cmp	r3, lr
  4059f0:	f67f aefc 	bls.w	4057ec <follow_path+0xa8>
  4059f4:	4615      	mov	r5, r2
  4059f6:	460c      	mov	r4, r1
  4059f8:	e6cc      	b.n	405794 <follow_path+0x50>
				uc &= 0x0F; nf = 2;
  4059fa:	f007 070f 	and.w	r7, r7, #15
  4059fe:	2002      	movs	r0, #2
  405a00:	e6fb      	b.n	4057fa <follow_path+0xb6>
		if (i >= ni || si == di) {		/* End of field? */
  405a02:	4293      	cmp	r3, r2
  405a04:	d236      	bcs.n	405a74 <follow_path+0x330>
  405a06:	45a0      	cmp	r8, r4
  405a08:	d034      	beq.n	405a74 <follow_path+0x330>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
  405a0a:	287f      	cmp	r0, #127	; 0x7f
  405a0c:	d845      	bhi.n	405a9a <follow_path+0x356>
	while (*str && *str != chr) str++;
  405a0e:	282b      	cmp	r0, #43	; 0x2b
  405a10:	d00a      	beq.n	405a28 <follow_path+0x2e4>
  405a12:	212c      	movs	r1, #44	; 0x2c
  405a14:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 405af4 <follow_path+0x3b0>
  405a18:	e004      	b.n	405a24 <follow_path+0x2e0>
  405a1a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
  405a1e:	2900      	cmp	r1, #0
  405a20:	f000 808e 	beq.w	405b40 <follow_path+0x3fc>
  405a24:	4281      	cmp	r1, r0
  405a26:	d1f8      	bne.n	405a1a <follow_path+0x2d6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  405a28:	f047 0703 	orr.w	r7, r7, #3
  405a2c:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
  405a2e:	eb0b 0103 	add.w	r1, fp, r3
  405a32:	3301      	adds	r3, #1
  405a34:	f881 0020 	strb.w	r0, [r1, #32]
  405a38:	e76c      	b.n	405914 <follow_path+0x1d0>
	rv = rv << 8 | ptr[0];
  405a3a:	7d58      	ldrb	r0, [r3, #21]
  405a3c:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
  405a3e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  405a42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  405a46:	e7b7      	b.n	4059b8 <follow_path+0x274>
	lfn[di] = 0;							/* LFN is created into the working buffer */
  405a48:	2300      	movs	r3, #0
  405a4a:	2006      	movs	r0, #6
  405a4c:	8033      	strh	r3, [r6, #0]
}
  405a4e:	b005      	add	sp, #20
  405a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
  405a54:	782b      	ldrb	r3, [r5, #0]
  405a56:	2b2f      	cmp	r3, #47	; 0x2f
  405a58:	d103      	bne.n	405a62 <follow_path+0x31e>
  405a5a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  405a5e:	2b2f      	cmp	r3, #47	; 0x2f
  405a60:	d0fb      	beq.n	405a5a <follow_path+0x316>
  405a62:	f1a3 035c 	sub.w	r3, r3, #92	; 0x5c
  405a66:	fab3 f383 	clz	r3, r3
  405a6a:	095b      	lsrs	r3, r3, #5
  405a6c:	2b00      	cmp	r3, #0
  405a6e:	d1f4      	bne.n	405a5a <follow_path+0x316>
  405a70:	461f      	mov	r7, r3
  405a72:	e704      	b.n	40587e <follow_path+0x13a>
			if (ni == 11) {				/* Name extension overflow? */
  405a74:	2a0b      	cmp	r2, #11
  405a76:	d07a      	beq.n	405b6e <follow_path+0x42a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
  405a78:	45a0      	cmp	r8, r4
  405a7a:	d003      	beq.n	405a84 <follow_path+0x340>
  405a7c:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
  405a80:	f63f af5b 	bhi.w	40593a <follow_path+0x1f6>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
  405a84:	9b01      	ldr	r3, [sp, #4]
  405a86:	46a0      	mov	r8, r4
  405a88:	220b      	movs	r2, #11
  405a8a:	0099      	lsls	r1, r3, #2
  405a8c:	2308      	movs	r3, #8
  405a8e:	b2c9      	uxtb	r1, r1
  405a90:	9101      	str	r1, [sp, #4]
  405a92:	e73f      	b.n	405914 <follow_path+0x1d0>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
  405a94:	f047 0702 	orr.w	r7, r7, #2
  405a98:	e762      	b.n	405960 <follow_path+0x21c>
  405a9a:	9302      	str	r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
  405a9c:	f240 11b5 	movw	r1, #437	; 0x1b5
  405aa0:	4b10      	ldr	r3, [pc, #64]	; (405ae4 <follow_path+0x3a0>)
  405aa2:	9203      	str	r2, [sp, #12]
  405aa4:	4798      	blx	r3
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
  405aa6:	f010 0f80 	tst.w	r0, #128	; 0x80
			cf |= NS_LFN;	/* LFN entry needs to be created */
  405aaa:	f047 0c02 	orr.w	ip, r7, #2
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
  405aae:	9b02      	ldr	r3, [sp, #8]
  405ab0:	9a03      	ldr	r2, [sp, #12]
  405ab2:	d108      	bne.n	405ac6 <follow_path+0x382>
		if (wc >= 0x100) {				/* Is this a DBC? */
  405ab4:	28ff      	cmp	r0, #255	; 0xff
  405ab6:	d90b      	bls.n	405ad0 <follow_path+0x38c>
			if (i >= ni - 1) {			/* Field overflow? */
  405ab8:	1e51      	subs	r1, r2, #1
  405aba:	428b      	cmp	r3, r1
  405abc:	d31c      	bcc.n	405af8 <follow_path+0x3b4>
				cf |= NS_LOSS | NS_LFN;
  405abe:	f047 0703 	orr.w	r7, r7, #3
  405ac2:	4613      	mov	r3, r2
  405ac4:	e726      	b.n	405914 <follow_path+0x1d0>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
  405ac6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
  405aca:	4807      	ldr	r0, [pc, #28]	; (405ae8 <follow_path+0x3a4>)
  405acc:	4401      	add	r1, r0
  405ace:	7c08      	ldrb	r0, [r1, #16]
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
  405ad0:	4667      	mov	r7, ip
  405ad2:	2800      	cmp	r0, #0
  405ad4:	d0a8      	beq.n	405a28 <follow_path+0x2e4>
  405ad6:	e79a      	b.n	405a0e <follow_path+0x2ca>
  405ad8:	0040b009 	.word	0x0040b009
  405adc:	0010ff7f 	.word	0x0010ff7f
  405ae0:	004053d1 	.word	0x004053d1
  405ae4:	0040793d 	.word	0x0040793d
  405ae8:	0040af54 	.word	0x0040af54
  405aec:	03ff0000 	.word	0x03ff0000
  405af0:	d800dc00 	.word	0xd800dc00
  405af4:	0040b015 	.word	0x0040b015
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
  405af8:	eb0b 0103 	add.w	r1, fp, r3
  405afc:	ea4f 2e10 	mov.w	lr, r0, lsr #8
			cf |= NS_LFN;	/* LFN entry needs to be created */
  405b00:	4667      	mov	r7, ip
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
  405b02:	3301      	adds	r3, #1
  405b04:	f881 e020 	strb.w	lr, [r1, #32]
  405b08:	b2c0      	uxtb	r0, r0
  405b0a:	e790      	b.n	405a2e <follow_path+0x2ea>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
  405b0c:	9b01      	ldr	r3, [sp, #4]
  405b0e:	009b      	lsls	r3, r3, #2
  405b10:	b2db      	uxtb	r3, r3
  405b12:	9301      	str	r3, [sp, #4]
  405b14:	e719      	b.n	40594a <follow_path+0x206>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
  405b16:	2305      	movs	r3, #5
  405b18:	f88b 3020 	strb.w	r3, [fp, #32]
  405b1c:	e712      	b.n	405944 <follow_path+0x200>
				if (res == FR_NO_FILE) {	/* Object is not found */
  405b1e:	2804      	cmp	r0, #4
  405b20:	f47f ae65 	bne.w	4057ee <follow_path+0xaa>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
  405b24:	f013 0f04 	tst.w	r3, #4
  405b28:	bf08      	it	eq
  405b2a:	2005      	moveq	r0, #5
  405b2c:	e65f      	b.n	4057ee <follow_path+0xaa>
		dp->fn[NSFLAG] = NS_NONAME;
  405b2e:	2280      	movs	r2, #128	; 0x80
		res = dir_sdi(dp, 0);
  405b30:	4658      	mov	r0, fp
  405b32:	4b17      	ldr	r3, [pc, #92]	; (405b90 <follow_path+0x44c>)
		dp->fn[NSFLAG] = NS_NONAME;
  405b34:	f88b 202b 	strb.w	r2, [fp, #43]	; 0x2b
}
  405b38:	b005      	add	sp, #20
  405b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
  405b3e:	4718      	bx	r3
				if (IsUpper(wc)) {		/* ASCII upper case? */
  405b40:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
  405b44:	b289      	uxth	r1, r1
  405b46:	2919      	cmp	r1, #25
  405b48:	d803      	bhi.n	405b52 <follow_path+0x40e>
					b |= 2;
  405b4a:	9901      	ldr	r1, [sp, #4]
  405b4c:	f041 0102 	orr.w	r1, r1, #2
  405b50:	9101      	str	r1, [sp, #4]
				if (IsLower(wc)) {		/* ASCII lower case? */
  405b52:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
  405b56:	b289      	uxth	r1, r1
  405b58:	2919      	cmp	r1, #25
  405b5a:	d804      	bhi.n	405b66 <follow_path+0x422>
					b |= 1; wc -= 0x20;
  405b5c:	9901      	ldr	r1, [sp, #4]
  405b5e:	3820      	subs	r0, #32
  405b60:	f041 0101 	orr.w	r1, r1, #1
  405b64:	9101      	str	r1, [sp, #4]
  405b66:	b2c0      	uxtb	r0, r0
  405b68:	e761      	b.n	405a2e <follow_path+0x2ea>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
  405b6a:	2005      	movs	r0, #5
  405b6c:	e63f      	b.n	4057ee <follow_path+0xaa>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
  405b6e:	f89b 3020 	ldrb.w	r3, [fp, #32]
				cf |= NS_LOSS | NS_LFN;
  405b72:	f047 0703 	orr.w	r7, r7, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
  405b76:	2be5      	cmp	r3, #229	; 0xe5
  405b78:	f47f aee7 	bne.w	40594a <follow_path+0x206>
  405b7c:	2305      	movs	r3, #5
  405b7e:	f88b 3020 	strb.w	r3, [fp, #32]
  405b82:	e6e2      	b.n	40594a <follow_path+0x206>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
  405b84:	292e      	cmp	r1, #46	; 0x2e
  405b86:	f47f aea7 	bne.w	4058d8 <follow_path+0x194>
  405b8a:	e6a0      	b.n	4058ce <follow_path+0x18a>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
  405b8c:	460c      	mov	r4, r1
  405b8e:	e601      	b.n	405794 <follow_path+0x50>
  405b90:	004050f9 	.word	0x004050f9

00405b94 <dir_register>:
{
  405b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
  405b98:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
{
  405b9c:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
  405b9e:	f013 03a0 	ands.w	r3, r3, #160	; 0xa0
  405ba2:	d005      	beq.n	405bb0 <dir_register+0x1c>
  405ba4:	2306      	movs	r3, #6
  405ba6:	9301      	str	r3, [sp, #4]
}
  405ba8:	9801      	ldr	r0, [sp, #4]
  405baa:	b013      	add	sp, #76	; 0x4c
  405bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	FATFS *fs = dp->obj.fs;
  405bb0:	f8d0 b000 	ldr.w	fp, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
  405bb4:	f8db e00c 	ldr.w	lr, [fp, #12]
  405bb8:	f8be 2000 	ldrh.w	r2, [lr]
  405bbc:	2a00      	cmp	r2, #0
  405bbe:	f000 8511 	beq.w	4065e4 <dir_register+0xa50>
  405bc2:	4698      	mov	r8, r3
  405bc4:	4673      	mov	r3, lr
  405bc6:	f833 2f02 	ldrh.w	r2, [r3, #2]!
  405bca:	f108 0801 	add.w	r8, r8, #1
  405bce:	2a00      	cmp	r2, #0
  405bd0:	d1f9      	bne.n	405bc6 <dir_register+0x32>
	mem_cpy(sn, dp->fn, 12);
  405bd2:	4605      	mov	r5, r0
  405bd4:	4604      	mov	r4, r0
  405bd6:	ab0f      	add	r3, sp, #60	; 0x3c
  405bd8:	f855 0f20 	ldr.w	r0, [r5, #32]!
  405bdc:	68aa      	ldr	r2, [r5, #8]
  405bde:	6869      	ldr	r1, [r5, #4]
  405be0:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  405be2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
  405be6:	07da      	lsls	r2, r3, #31
  405be8:	930a      	str	r3, [sp, #40]	; 0x28
  405bea:	f140 8279 	bpl.w	4060e0 <dir_register+0x54c>
  405bee:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
  405bf2:	2340      	movs	r3, #64	; 0x40
  405bf4:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
		for (n = 1; n < 100; n++) {
  405bf8:	f04f 0901 	mov.w	r9, #1
  405bfc:	9204      	str	r2, [sp, #16]
	ns[i] = '~';
  405bfe:	277e      	movs	r7, #126	; 0x7e
  405c00:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
  405c04:	4670      	mov	r0, lr
  405c06:	9102      	str	r1, [sp, #8]
  405c08:	9205      	str	r2, [sp, #20]
  405c0a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  405c0e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
  405c12:	9206      	str	r2, [sp, #24]
  405c14:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  405c18:	9103      	str	r1, [sp, #12]
  405c1a:	9207      	str	r2, [sp, #28]
  405c1c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
  405c20:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
  405c24:	9208      	str	r2, [sp, #32]
  405c26:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
  405c2a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  405c2e:	9209      	str	r2, [sp, #36]	; 0x24
  405c30:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
  405c34:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
				if (sreg & 0x10000) sreg ^= 0x11021;
  405c38:	4e9d      	ldr	r6, [pc, #628]	; (405eb0 <dir_register+0x31c>)
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
  405c3a:	4690      	mov	r8, r2
  405c3c:	9101      	str	r1, [sp, #4]
  405c3e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
			*d++ = *s++;
  405c42:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
  405c46:	f1b9 0f05 	cmp.w	r9, #5
			*d++ = *s++;
  405c4a:	f884 a020 	strb.w	sl, [r4, #32]
  405c4e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  405c52:	f89d 3018 	ldrb.w	r3, [sp, #24]
  405c56:	f884 8026 	strb.w	r8, [r4, #38]	; 0x26
  405c5a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  405c5e:	f89d 301c 	ldrb.w	r3, [sp, #28]
  405c62:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  405c66:	f89d 3020 	ldrb.w	r3, [sp, #32]
  405c6a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  405c6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  405c72:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  405c76:	f89d 3008 	ldrb.w	r3, [sp, #8]
  405c7a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  405c7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
  405c82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  405c86:	f89d 3004 	ldrb.w	r3, [sp, #4]
  405c8a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  405c8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  405c92:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
  405c96:	f240 81f1 	bls.w	40607c <dir_register+0x4e8>
  405c9a:	3802      	subs	r0, #2
  405c9c:	464b      	mov	r3, r9
  405c9e:	e094      	b.n	405dca <dir_register+0x236>
				sreg = (sreg << 1) + (wc & 1);
  405ca0:	f002 0e01 	and.w	lr, r2, #1
				wc >>= 1;
  405ca4:	0851      	lsrs	r1, r2, #1
				sreg = (sreg << 1) + (wc & 1);
  405ca6:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  405caa:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
  405cae:	0893      	lsrs	r3, r2, #2
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cb0:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405cb4:	f003 0301 	and.w	r3, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cb8:	bf18      	it	ne
  405cba:	ea8e 0e06 	eorne.w	lr, lr, r6
				sreg = (sreg << 1) + (wc & 1);
  405cbe:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
  405cc2:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cc6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405cca:	f00e 0e01 	and.w	lr, lr, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cce:	bf18      	it	ne
  405cd0:	4071      	eorne	r1, r6
				sreg = (sreg << 1) + (wc & 1);
  405cd2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cd6:	03d9      	lsls	r1, r3, #15
				wc >>= 1;
  405cd8:	ea4f 1112 	mov.w	r1, r2, lsr #4
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cdc:	bf48      	it	mi
  405cde:	4073      	eormi	r3, r6
				sreg = (sreg << 1) + (wc & 1);
  405ce0:	f001 0101 	and.w	r1, r1, #1
  405ce4:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				wc >>= 1;
  405ce8:	0953      	lsrs	r3, r2, #5
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cea:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405cee:	f003 0301 	and.w	r3, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405cf2:	bf18      	it	ne
  405cf4:	ea8e 0e06 	eorne.w	lr, lr, r6
				sreg = (sreg << 1) + (wc & 1);
  405cf8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
  405cfc:	ea4f 1e92 	mov.w	lr, r2, lsr #6
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d00:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405d04:	f00e 0e01 	and.w	lr, lr, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d08:	bf18      	it	ne
  405d0a:	4071      	eorne	r1, r6
				sreg = (sreg << 1) + (wc & 1);
  405d0c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d10:	03d9      	lsls	r1, r3, #15
				wc >>= 1;
  405d12:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d16:	bf48      	it	mi
  405d18:	4073      	eormi	r3, r6
				sreg = (sreg << 1) + (wc & 1);
  405d1a:	f001 0101 	and.w	r1, r1, #1
  405d1e:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				wc >>= 1;
  405d22:	0a13      	lsrs	r3, r2, #8
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d24:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405d28:	f003 0301 	and.w	r3, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d2c:	bf18      	it	ne
  405d2e:	ea8e 0e06 	eorne.w	lr, lr, r6
				sreg = (sreg << 1) + (wc & 1);
  405d32:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
  405d36:	ea4f 2e52 	mov.w	lr, r2, lsr #9
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d3a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405d3e:	f00e 0e01 	and.w	lr, lr, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d42:	bf18      	it	ne
  405d44:	4071      	eorne	r1, r6
				sreg = (sreg << 1) + (wc & 1);
  405d46:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d4a:	03d9      	lsls	r1, r3, #15
				wc >>= 1;
  405d4c:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d50:	bf48      	it	mi
  405d52:	4073      	eormi	r3, r6
				sreg = (sreg << 1) + (wc & 1);
  405d54:	f001 0101 	and.w	r1, r1, #1
  405d58:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				wc >>= 1;
  405d5c:	0ad3      	lsrs	r3, r2, #11
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d5e:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405d62:	f003 0301 	and.w	r3, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d66:	bf18      	it	ne
  405d68:	ea8e 0e06 	eorne.w	lr, lr, r6
				sreg = (sreg << 1) + (wc & 1);
  405d6c:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				wc >>= 1;
  405d70:	ea4f 3e12 	mov.w	lr, r2, lsr #12
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d74:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				sreg = (sreg << 1) + (wc & 1);
  405d78:	f00e 0e01 	and.w	lr, lr, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d7c:	bf18      	it	ne
  405d7e:	4071      	eorne	r1, r6
				sreg = (sreg << 1) + (wc & 1);
  405d80:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d84:	03d9      	lsls	r1, r3, #15
				wc >>= 1;
  405d86:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d8a:	bf48      	it	mi
  405d8c:	4073      	eormi	r3, r6
				sreg = (sreg << 1) + (wc & 1);
  405d8e:	f001 0101 	and.w	r1, r1, #1
  405d92:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				wc >>= 1;
  405d96:	0b93      	lsrs	r3, r2, #14
				if (sreg & 0x10000) sreg ^= 0x11021;
  405d98:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
				wc >>= 1;
  405d9c:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				sreg = (sreg << 1) + (wc & 1);
  405da0:	f003 0301 	and.w	r3, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405da4:	bf18      	it	ne
  405da6:	ea8e 0e06 	eorne.w	lr, lr, r6
				sreg = (sreg << 1) + (wc & 1);
  405daa:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405dae:	f411 3f80 	tst.w	r1, #65536	; 0x10000
  405db2:	bf18      	it	ne
  405db4:	4071      	eorne	r1, r6
				sreg = (sreg << 1) + (wc & 1);
  405db6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405dba:	03d9      	lsls	r1, r3, #15
  405dbc:	bf48      	it	mi
  405dbe:	4073      	eormi	r3, r6
				sreg = (sreg << 1) + (wc & 1);
  405dc0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
  405dc4:	03da      	lsls	r2, r3, #15
  405dc6:	bf48      	it	mi
  405dc8:	4073      	eormi	r3, r6
		while (*lfn) {	/* Create a CRC as hash value */
  405dca:	f830 2f02 	ldrh.w	r2, [r0, #2]!
  405dce:	2a00      	cmp	r2, #0
  405dd0:	f47f af66 	bne.w	405ca0 <dir_register+0x10c>
		c = (BYTE)((seq % 16) + '0');
  405dd4:	f003 010f 	and.w	r1, r3, #15
  405dd8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
  405ddc:	2a39      	cmp	r2, #57	; 0x39
  405dde:	bf88      	it	hi
  405de0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
		ns[i--] = c;
  405de4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
  405de8:	091a      	lsrs	r2, r3, #4
  405dea:	f000 8151 	beq.w	406090 <dir_register+0x4fc>
		c = (BYTE)((seq % 16) + '0');
  405dee:	f002 020f 	and.w	r2, r2, #15
  405df2:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
  405df6:	2939      	cmp	r1, #57	; 0x39
  405df8:	bf88      	it	hi
  405dfa:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
  405dfe:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
  405e00:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
	} while (seq);
  405e04:	f000 8169 	beq.w	4060da <dir_register+0x546>
		c = (BYTE)((seq % 16) + '0');
  405e08:	f002 020f 	and.w	r2, r2, #15
  405e0c:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
  405e10:	2939      	cmp	r1, #57	; 0x39
  405e12:	bf88      	it	hi
  405e14:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
  405e18:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
  405e1a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
	} while (seq);
  405e1e:	f000 8159 	beq.w	4060d4 <dir_register+0x540>
		c = (BYTE)((seq % 16) + '0');
  405e22:	f002 020f 	and.w	r2, r2, #15
  405e26:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
  405e2a:	2939      	cmp	r1, #57	; 0x39
  405e2c:	bf88      	it	hi
  405e2e:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
  405e32:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
  405e34:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
	} while (seq);
  405e38:	f000 8149 	beq.w	4060ce <dir_register+0x53a>
		c = (BYTE)((seq % 16) + '0');
  405e3c:	f002 020f 	and.w	r2, r2, #15
  405e40:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
  405e44:	2939      	cmp	r1, #57	; 0x39
  405e46:	bf88      	it	hi
  405e48:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
  405e4c:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
  405e4e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
	} while (seq);
  405e52:	f000 8139 	beq.w	4060c8 <dir_register+0x534>
		c = (BYTE)((seq % 16) + '0');
  405e56:	f002 020f 	and.w	r2, r2, #15
  405e5a:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
  405e5e:	2939      	cmp	r1, #57	; 0x39
  405e60:	bf88      	it	hi
  405e62:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
  405e66:	0e1a      	lsrs	r2, r3, #24
		ns[i--] = c;
  405e68:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	} while (seq);
  405e6c:	f000 8129 	beq.w	4060c2 <dir_register+0x52e>
		c = (BYTE)((seq % 16) + '0');
  405e70:	f002 020f 	and.w	r2, r2, #15
  405e74:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
  405e78:	2939      	cmp	r1, #57	; 0x39
  405e7a:	bf88      	it	hi
  405e7c:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
  405e80:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
  405e82:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
	} while (seq);
  405e86:	f000 8114 	beq.w	4060b2 <dir_register+0x51e>
		c = (BYTE)((seq % 16) + '0');
  405e8a:	b2db      	uxtb	r3, r3
  405e8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
  405e90:	2a39      	cmp	r2, #57	; 0x39
  405e92:	bf88      	it	hi
  405e94:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405e98:	f1ba 0f20 	cmp.w	sl, #32
		ns[i--] = c;
  405e9c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405ea0:	f000 80b0 	beq.w	406004 <dir_register+0x470>
		ns[i--] = c;
  405ea4:	f04f 3eff 	mov.w	lr, #4294967295
  405ea8:	f104 0221 	add.w	r2, r4, #33	; 0x21
  405eac:	2100      	movs	r1, #0
  405eae:	e008      	b.n	405ec2 <dir_register+0x32e>
  405eb0:	00011021 	.word	0x00011021
	for (j = 0; j < i && dst[j] != ' '; j++) {
  405eb4:	f890 c000 	ldrb.w	ip, [r0]
  405eb8:	f1bc 0f20 	cmp.w	ip, #32
  405ebc:	f000 80e0 	beq.w	406080 <dir_register+0x4ec>
  405ec0:	4619      	mov	r1, r3
  405ec2:	1c4b      	adds	r3, r1, #1
  405ec4:	4610      	mov	r0, r2
  405ec6:	3201      	adds	r2, #1
  405ec8:	4573      	cmp	r3, lr
  405eca:	d3f3      	bcc.n	405eb4 <dir_register+0x320>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405ecc:	f1be 0f07 	cmp.w	lr, #7
  405ed0:	f101 0102 	add.w	r1, r1, #2
  405ed4:	eb05 0003 	add.w	r0, r5, r3
  405ed8:	f200 80d8 	bhi.w	40608c <dir_register+0x4f8>
  405edc:	f10e 0e01 	add.w	lr, lr, #1
  405ee0:	227e      	movs	r2, #126	; 0x7e
	} while (j < 8);
  405ee2:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405ee4:	7002      	strb	r2, [r0, #0]
	} while (j < 8);
  405ee6:	d87e      	bhi.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405ee8:	f1be 0f07 	cmp.w	lr, #7
  405eec:	f103 0202 	add.w	r2, r3, #2
  405ef0:	eb05 0001 	add.w	r0, r5, r1
  405ef4:	f200 808c 	bhi.w	406010 <dir_register+0x47c>
  405ef8:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
	} while (j < 8);
  405efc:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405efe:	f10e 0001 	add.w	r0, lr, #1
  405f02:	44f4      	add	ip, lr
  405f04:	f81c cc14 	ldrb.w	ip, [ip, #-20]
  405f08:	f805 c001 	strb.w	ip, [r5, r1]
	} while (j < 8);
  405f0c:	d06b      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f0e:	2807      	cmp	r0, #7
  405f10:	f103 0103 	add.w	r1, r3, #3
  405f14:	eb05 0c02 	add.w	ip, r5, r2
  405f18:	f200 8081 	bhi.w	40601e <dir_register+0x48a>
  405f1c:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
	} while (j < 8);
  405f20:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f22:	4484      	add	ip, r0
  405f24:	f10e 0002 	add.w	r0, lr, #2
  405f28:	f81c cc14 	ldrb.w	ip, [ip, #-20]
  405f2c:	f805 c002 	strb.w	ip, [r5, r2]
	} while (j < 8);
  405f30:	d059      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f32:	2807      	cmp	r0, #7
  405f34:	f103 0204 	add.w	r2, r3, #4
  405f38:	eb05 0c01 	add.w	ip, r5, r1
  405f3c:	d877      	bhi.n	40602e <dir_register+0x49a>
  405f3e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
	} while (j < 8);
  405f42:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f44:	4484      	add	ip, r0
  405f46:	f10e 0003 	add.w	r0, lr, #3
  405f4a:	f81c cc14 	ldrb.w	ip, [ip, #-20]
  405f4e:	f805 c001 	strb.w	ip, [r5, r1]
	} while (j < 8);
  405f52:	d048      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f54:	2807      	cmp	r0, #7
  405f56:	f103 0105 	add.w	r1, r3, #5
  405f5a:	eb05 0c02 	add.w	ip, r5, r2
  405f5e:	d86e      	bhi.n	40603e <dir_register+0x4aa>
  405f60:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
	} while (j < 8);
  405f64:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f66:	4484      	add	ip, r0
  405f68:	f10e 0004 	add.w	r0, lr, #4
  405f6c:	f81c cc14 	ldrb.w	ip, [ip, #-20]
  405f70:	f805 c002 	strb.w	ip, [r5, r2]
	} while (j < 8);
  405f74:	d037      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f76:	2807      	cmp	r0, #7
  405f78:	f103 0206 	add.w	r2, r3, #6
  405f7c:	eb05 0c01 	add.w	ip, r5, r1
  405f80:	d865      	bhi.n	40604e <dir_register+0x4ba>
  405f82:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
	} while (j < 8);
  405f86:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f88:	4484      	add	ip, r0
  405f8a:	f10e 0005 	add.w	r0, lr, #5
  405f8e:	f81c cc14 	ldrb.w	ip, [ip, #-20]
  405f92:	f805 c001 	strb.w	ip, [r5, r1]
	} while (j < 8);
  405f96:	d026      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405f98:	2807      	cmp	r0, #7
  405f9a:	f103 0107 	add.w	r1, r3, #7
  405f9e:	eb05 0c02 	add.w	ip, r5, r2
  405fa2:	d85c      	bhi.n	40605e <dir_register+0x4ca>
  405fa4:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
	} while (j < 8);
  405fa8:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405faa:	f10e 0e06 	add.w	lr, lr, #6
  405fae:	4460      	add	r0, ip
  405fb0:	f810 0c14 	ldrb.w	r0, [r0, #-20]
  405fb4:	54a8      	strb	r0, [r5, r2]
	} while (j < 8);
  405fb6:	d016      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405fb8:	f1be 0f08 	cmp.w	lr, #8
  405fbc:	f103 0308 	add.w	r3, r3, #8
  405fc0:	eb05 0201 	add.w	r2, r5, r1
  405fc4:	d052      	beq.n	40606c <dir_register+0x4d8>
  405fc6:	4662      	mov	r2, ip
	} while (j < 8);
  405fc8:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405fca:	4472      	add	r2, lr
  405fcc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
  405fd0:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
  405fd2:	d108      	bne.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405fd4:	f1be 0f06 	cmp.w	lr, #6
  405fd8:	f104 0227 	add.w	r2, r4, #39	; 0x27
  405fdc:	bf0c      	ite	eq
  405fde:	f89d 303b 	ldrbeq.w	r3, [sp, #59]	; 0x3b
  405fe2:	2320      	movne	r3, #32
  405fe4:	7013      	strb	r3, [r2, #0]
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
  405fe6:	4620      	mov	r0, r4
  405fe8:	4b9a      	ldr	r3, [pc, #616]	; (406254 <dir_register+0x6c0>)
  405fea:	4798      	blx	r3
			if (res != FR_OK) break;
  405fec:	2800      	cmp	r0, #0
  405fee:	f040 80df 	bne.w	4061b0 <dir_register+0x61c>
		for (n = 1; n < 100; n++) {
  405ff2:	f109 0901 	add.w	r9, r9, #1
  405ff6:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
  405ffa:	f000 80ba 	beq.w	406172 <dir_register+0x5de>
  405ffe:	f8db 000c 	ldr.w	r0, [fp, #12]
  406002:	e61e      	b.n	405c42 <dir_register+0xae>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406004:	f104 0021 	add.w	r0, r4, #33	; 0x21
  406008:	2202      	movs	r2, #2
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40600a:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40600c:	f884 a020 	strb.w	sl, [r4, #32]
  406010:	2120      	movs	r1, #32
	} while (j < 8);
  406012:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406014:	7001      	strb	r1, [r0, #0]
	} while (j < 8);
  406016:	d0e6      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406018:	eb05 0c02 	add.w	ip, r5, r2
  40601c:	1cd9      	adds	r1, r3, #3
  40601e:	2220      	movs	r2, #32
	} while (j < 8);
  406020:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406022:	f88c 2000 	strb.w	r2, [ip]
	} while (j < 8);
  406026:	d0de      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406028:	eb05 0c01 	add.w	ip, r5, r1
  40602c:	1d1a      	adds	r2, r3, #4
  40602e:	2120      	movs	r1, #32
	} while (j < 8);
  406030:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406032:	f88c 1000 	strb.w	r1, [ip]
	} while (j < 8);
  406036:	d0d6      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406038:	eb05 0c02 	add.w	ip, r5, r2
  40603c:	1d59      	adds	r1, r3, #5
  40603e:	2220      	movs	r2, #32
	} while (j < 8);
  406040:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406042:	f88c 2000 	strb.w	r2, [ip]
	} while (j < 8);
  406046:	d0ce      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406048:	eb05 0c01 	add.w	ip, r5, r1
  40604c:	1d9a      	adds	r2, r3, #6
  40604e:	2120      	movs	r1, #32
	} while (j < 8);
  406050:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406052:	f88c 1000 	strb.w	r1, [ip]
	} while (j < 8);
  406056:	d0c6      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406058:	eb05 0c02 	add.w	ip, r5, r2
  40605c:	1dd9      	adds	r1, r3, #7
  40605e:	2220      	movs	r2, #32
	} while (j < 8);
  406060:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406062:	f88c 2000 	strb.w	r2, [ip]
	} while (j < 8);
  406066:	d0be      	beq.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406068:	3308      	adds	r3, #8
  40606a:	186a      	adds	r2, r5, r1
  40606c:	2120      	movs	r1, #32
	} while (j < 8);
  40606e:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406070:	7011      	strb	r1, [r2, #0]
	} while (j < 8);
  406072:	d1b8      	bne.n	405fe6 <dir_register+0x452>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406074:	460b      	mov	r3, r1
  406076:	f104 0227 	add.w	r2, r4, #39	; 0x27
  40607a:	e7b3      	b.n	405fe4 <dir_register+0x450>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
  40607c:	464b      	mov	r3, r9
  40607e:	e6a9      	b.n	405dd4 <dir_register+0x240>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406080:	f1be 0f07 	cmp.w	lr, #7
  406084:	f101 0102 	add.w	r1, r1, #2
  406088:	f67f af28 	bls.w	405edc <dir_register+0x348>
  40608c:	2220      	movs	r2, #32
  40608e:	e728      	b.n	405ee2 <dir_register+0x34e>
		ns[i--] = c;
  406090:	f04f 0e06 	mov.w	lr, #6
	ns[i] = '~';
  406094:	ab12      	add	r3, sp, #72	; 0x48
	for (j = 0; j < i && dst[j] != ' '; j++) {
  406096:	f1ba 0f20 	cmp.w	sl, #32
	ns[i] = '~';
  40609a:	4473      	add	r3, lr
  40609c:	f803 7c14 	strb.w	r7, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4060a0:	f47f af02 	bne.w	405ea8 <dir_register+0x314>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4060a4:	f10e 0e01 	add.w	lr, lr, #1
  4060a8:	f884 7020 	strb.w	r7, [r4, #32]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4060ac:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4060ae:	2101      	movs	r1, #1
  4060b0:	e71a      	b.n	405ee8 <dir_register+0x354>
  4060b2:	f04f 0e01 	mov.w	lr, #1
	ns[i] = '~';
  4060b6:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4060ba:	f884 7020 	strb.w	r7, [r4, #32]
  4060be:	4671      	mov	r1, lr
  4060c0:	e712      	b.n	405ee8 <dir_register+0x354>
		ns[i--] = c;
  4060c2:	f04f 0e01 	mov.w	lr, #1
  4060c6:	e7e5      	b.n	406094 <dir_register+0x500>
  4060c8:	f04f 0e02 	mov.w	lr, #2
  4060cc:	e7e2      	b.n	406094 <dir_register+0x500>
  4060ce:	f04f 0e03 	mov.w	lr, #3
  4060d2:	e7df      	b.n	406094 <dir_register+0x500>
  4060d4:	f04f 0e04 	mov.w	lr, #4
  4060d8:	e7dc      	b.n	406094 <dir_register+0x500>
  4060da:	f04f 0e05 	mov.w	lr, #5
  4060de:	e7d9      	b.n	406094 <dir_register+0x500>
  4060e0:	465f      	mov	r7, fp
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
  4060e2:	079b      	lsls	r3, r3, #30
  4060e4:	d424      	bmi.n	406130 <dir_register+0x59c>
  4060e6:	2601      	movs	r6, #1
	res = dir_sdi(dp, 0);
  4060e8:	4b5b      	ldr	r3, [pc, #364]	; (406258 <dir_register+0x6c4>)
  4060ea:	2100      	movs	r1, #0
  4060ec:	4620      	mov	r0, r4
  4060ee:	4798      	blx	r3
	if (res == FR_OK) {
  4060f0:	4603      	mov	r3, r0
  4060f2:	9001      	str	r0, [sp, #4]
  4060f4:	2800      	cmp	r0, #0
  4060f6:	d139      	bne.n	40616c <dir_register+0x5d8>
  4060f8:	4681      	mov	r9, r0
			res = dir_next(dp, 1);
  4060fa:	9502      	str	r5, [sp, #8]
			res = move_window(fs, dp->sect);
  4060fc:	f8d4 8018 	ldr.w	r8, [r4, #24]
	if (sect != fs->winsect) {	/* Window offset changed? */
  406100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406102:	4590      	cmp	r8, r2
  406104:	d01e      	beq.n	406144 <dir_register+0x5b0>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  406106:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  406108:	f107 0a34 	add.w	sl, r7, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  40610c:	2b00      	cmp	r3, #0
  40610e:	d138      	bne.n	406182 <dir_register+0x5ee>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  406110:	4651      	mov	r1, sl
  406112:	2301      	movs	r3, #1
  406114:	4642      	mov	r2, r8
  406116:	7878      	ldrb	r0, [r7, #1]
  406118:	4d50      	ldr	r5, [pc, #320]	; (40625c <dir_register+0x6c8>)
  40611a:	47a8      	blx	r5
  40611c:	b180      	cbz	r0, 406140 <dir_register+0x5ac>
			fs->winsect = sect;
  40611e:	f04f 33ff 	mov.w	r3, #4294967295
  406122:	633b      	str	r3, [r7, #48]	; 0x30
  406124:	2301      	movs	r3, #1
  406126:	9301      	str	r3, [sp, #4]
}
  406128:	9801      	ldr	r0, [sp, #4]
  40612a:	b013      	add	sp, #76	; 0x4c
  40612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
  406130:	f108 060c 	add.w	r6, r8, #12
  406134:	4b4a      	ldr	r3, [pc, #296]	; (406260 <dir_register+0x6cc>)
  406136:	fba3 3606 	umull	r3, r6, r3, r6
  40613a:	08b6      	lsrs	r6, r6, #2
  40613c:	3601      	adds	r6, #1
  40613e:	e7d3      	b.n	4060e8 <dir_register+0x554>
			fs->winsect = sect;
  406140:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
  406144:	69e3      	ldr	r3, [r4, #28]
  406146:	781b      	ldrb	r3, [r3, #0]
  406148:	2be5      	cmp	r3, #229	; 0xe5
  40614a:	d003      	beq.n	406154 <dir_register+0x5c0>
  40614c:	fab3 f383 	clz	r3, r3
  406150:	095b      	lsrs	r3, r3, #5
  406152:	b1a3      	cbz	r3, 40617e <dir_register+0x5ea>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
  406154:	f109 0901 	add.w	r9, r9, #1
  406158:	454e      	cmp	r6, r9
  40615a:	d036      	beq.n	4061ca <dir_register+0x636>
			res = dir_next(dp, 1);
  40615c:	2101      	movs	r1, #1
  40615e:	4620      	mov	r0, r4
  406160:	4b40      	ldr	r3, [pc, #256]	; (406264 <dir_register+0x6d0>)
  406162:	4798      	blx	r3
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
  406164:	2800      	cmp	r0, #0
  406166:	d0c9      	beq.n	4060fc <dir_register+0x568>
  406168:	4603      	mov	r3, r0
			res = dir_next(dp, 1);
  40616a:	9001      	str	r0, [sp, #4]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
  40616c:	2b04      	cmp	r3, #4
  40616e:	f47f ad1b 	bne.w	405ba8 <dir_register+0x14>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  406172:	2307      	movs	r3, #7
  406174:	9301      	str	r3, [sp, #4]
}
  406176:	9801      	ldr	r0, [sp, #4]
  406178:	b013      	add	sp, #76	; 0x4c
  40617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				n = 0;					/* Not a blank entry. Restart to search */
  40617e:	4699      	mov	r9, r3
  406180:	e7ec      	b.n	40615c <dir_register+0x5c8>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  406182:	2301      	movs	r3, #1
  406184:	7878      	ldrb	r0, [r7, #1]
  406186:	4651      	mov	r1, sl
  406188:	4d37      	ldr	r5, [pc, #220]	; (406268 <dir_register+0x6d4>)
  40618a:	47a8      	blx	r5
  40618c:	2800      	cmp	r0, #0
  40618e:	d1c9      	bne.n	406124 <dir_register+0x590>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  406190:	6b39      	ldr	r1, [r7, #48]	; 0x30
  406192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  406194:	69fa      	ldr	r2, [r7, #28]
  406196:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  406198:	70f8      	strb	r0, [r7, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40619a:	4293      	cmp	r3, r2
  40619c:	d2b8      	bcs.n	406110 <dir_register+0x57c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  40619e:	78bb      	ldrb	r3, [r7, #2]
  4061a0:	2b02      	cmp	r3, #2
  4061a2:	d1b5      	bne.n	406110 <dir_register+0x57c>
  4061a4:	440a      	add	r2, r1
  4061a6:	2301      	movs	r3, #1
  4061a8:	4651      	mov	r1, sl
  4061aa:	7878      	ldrb	r0, [r7, #1]
  4061ac:	47a8      	blx	r5
  4061ae:	e7af      	b.n	406110 <dir_register+0x57c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  4061b0:	2804      	cmp	r0, #4
  4061b2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  4061b6:	9001      	str	r0, [sp, #4]
  4061b8:	f47f acf6 	bne.w	405ba8 <dir_register+0x14>
		dp->fn[NSFLAG] = sn[NSFLAG];
  4061bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  4061c0:	6827      	ldr	r7, [r4, #0]
  4061c2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  4061c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061c8:	e78b      	b.n	4060e2 <dir_register+0x54e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
  4061ca:	3e01      	subs	r6, #1
  4061cc:	9d02      	ldr	r5, [sp, #8]
  4061ce:	d14f      	bne.n	406270 <dir_register+0x6dc>
		res = move_window(fs, dp->sect);
  4061d0:	69a7      	ldr	r7, [r4, #24]
	if (sect != fs->winsect) {	/* Window offset changed? */
  4061d2:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
  4061d6:	4297      	cmp	r7, r2
  4061d8:	d017      	beq.n	40620a <dir_register+0x676>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4061da:	f89b 3003 	ldrb.w	r3, [fp, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4061de:	f10b 0634 	add.w	r6, fp, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4061e2:	2b00      	cmp	r3, #0
  4061e4:	f040 81dc 	bne.w	4065a0 <dir_register+0xa0c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4061e8:	4631      	mov	r1, r6
  4061ea:	2301      	movs	r3, #1
  4061ec:	463a      	mov	r2, r7
  4061ee:	f89b 0001 	ldrb.w	r0, [fp, #1]
  4061f2:	4e1a      	ldr	r6, [pc, #104]	; (40625c <dir_register+0x6c8>)
  4061f4:	47b0      	blx	r6
  4061f6:	b130      	cbz	r0, 406206 <dir_register+0x672>
			fs->winsect = sect;
  4061f8:	f04f 33ff 	mov.w	r3, #4294967295
  4061fc:	2201      	movs	r2, #1
  4061fe:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
  406202:	9201      	str	r2, [sp, #4]
  406204:	e4d0      	b.n	405ba8 <dir_register+0x14>
  406206:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
  40620a:	2220      	movs	r2, #32
  40620c:	4b17      	ldr	r3, [pc, #92]	; (40626c <dir_register+0x6d8>)
  40620e:	2100      	movs	r1, #0
  406210:	69e0      	ldr	r0, [r4, #28]
  406212:	4798      	blx	r3
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
  406214:	69e3      	ldr	r3, [r4, #28]
  406216:	f104 0224 	add.w	r2, r4, #36	; 0x24
  40621a:	4293      	cmp	r3, r2
  40621c:	d203      	bcs.n	406226 <dir_register+0x692>
  40621e:	1d1a      	adds	r2, r3, #4
  406220:	4295      	cmp	r5, r2
  406222:	f0c0 820b 	bcc.w	40663c <dir_register+0xaa8>
			*d++ = *s++;
  406226:	6a22      	ldr	r2, [r4, #32]
  406228:	601a      	str	r2, [r3, #0]
  40622a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40622c:	605a      	str	r2, [r3, #4]
  40622e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  406232:	721a      	strb	r2, [r3, #8]
  406234:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
  406238:	725a      	strb	r2, [r3, #9]
  40623a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  40623e:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
  406240:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
  406242:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  406246:	69e1      	ldr	r1, [r4, #28]
  406248:	f003 0318 	and.w	r3, r3, #24
  40624c:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
  40624e:	f88b 2003 	strb.w	r2, [fp, #3]
  406252:	e4a9      	b.n	405ba8 <dir_register+0x14>
  406254:	004053d1 	.word	0x004053d1
  406258:	004050f9 	.word	0x004050f9
  40625c:	004078c5 	.word	0x004078c5
  406260:	4ec4ec4f 	.word	0x4ec4ec4f
  406264:	00404b2d 	.word	0x00404b2d
  406268:	004078e9 	.word	0x004078e9
  40626c:	0040a555 	.word	0x0040a555
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
  406270:	6921      	ldr	r1, [r4, #16]
  406272:	4620      	mov	r0, r4
  406274:	4bed      	ldr	r3, [pc, #948]	; (40662c <dir_register+0xa98>)
  406276:	eba1 1146 	sub.w	r1, r1, r6, lsl #5
  40627a:	4798      	blx	r3
		if (res == FR_OK) {
  40627c:	2800      	cmp	r0, #0
  40627e:	f040 818c 	bne.w	40659a <dir_register+0xa06>
		sum = (sum >> 1) + (sum << 7) + *dir++;
  406282:	f894 2020 	ldrb.w	r2, [r4, #32]
  406286:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
  40628a:	01d3      	lsls	r3, r2, #7
  40628c:	f894 e022 	ldrb.w	lr, [r4, #34]	; 0x22
  406290:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
  406294:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
  406298:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  40629c:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
  4062a0:	185a      	adds	r2, r3, r1
  4062a2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4062a6:	f8df a390 	ldr.w	sl, [pc, #912]	; 406638 <dir_register+0xaa4>
		sum = (sum >> 1) + (sum << 7) + *dir++;
  4062aa:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4062ae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4062b2:	fa5e f283 	uxtab	r2, lr, r3
  4062b6:	f894 e027 	ldrb.w	lr, [r4, #39]	; 0x27
  4062ba:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4062be:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4062c2:	fa57 f283 	uxtab	r2, r7, r3
  4062c6:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
  4062ca:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4062ce:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4062d2:	fa50 f283 	uxtab	r2, r0, r3
  4062d6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
  4062da:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4062de:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4062e2:	fa51 f283 	uxtab	r2, r1, r3
  4062e6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
  4062ea:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4062ee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4062f2:	fa5c f283 	uxtab	r2, ip, r3
  4062f6:	f3c2 0346 	ubfx	r3, r2, #1, #7
  4062fa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  4062fe:	fa5e f283 	uxtab	r2, lr, r3
  406302:	f3c2 0346 	ubfx	r3, r2, #1, #7
  406306:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  40630a:	fa57 f283 	uxtab	r2, r7, r3
  40630e:	f3c2 0346 	ubfx	r3, r2, #1, #7
  406312:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  406316:	fa50 f383 	uxtab	r3, r0, r3
  40631a:	f3c3 0246 	ubfx	r2, r3, #1, #7
  40631e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
  406322:	fa51 f183 	uxtab	r1, r1, r3
  406326:	b2cb      	uxtb	r3, r1
  406328:	9302      	str	r3, [sp, #8]
  40632a:	e040      	b.n	4063ae <dir_register+0x81a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  40632c:	3201      	adds	r2, #1
  40632e:	f830 8012 	ldrh.w	r8, [r0, r2, lsl #1]
  406332:	0052      	lsls	r2, r2, #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406334:	f108 3cff 	add.w	ip, r8, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  406338:	ea4f 2918 	mov.w	r9, r8, lsr #8
  40633c:	f883 8003 	strb.w	r8, [r3, #3]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406340:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406344:	f883 9004 	strb.w	r9, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406348:	458c      	cmp	ip, r1
  40634a:	d978      	bls.n	40643e <dir_register+0x8aa>
	*ptr++ = (BYTE)val; val >>= 8;
  40634c:	22ff      	movs	r2, #255	; 0xff
  40634e:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
  406350:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
  406352:	22ff      	movs	r2, #255	; 0xff
  406354:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
  406356:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
  406358:	22ff      	movs	r2, #255	; 0xff
  40635a:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
  40635c:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
  40635e:	22ff      	movs	r2, #255	; 0xff
  406360:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
  406362:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
  406364:	22ff      	movs	r2, #255	; 0xff
  406366:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
  406368:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
  40636a:	22ff      	movs	r2, #255	; 0xff
  40636c:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
  40636e:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
  406370:	22ff      	movs	r2, #255	; 0xff
  406372:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
  406374:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
  406376:	22ff      	movs	r2, #255	; 0xff
  406378:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
  40637a:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
  40637c:	22ff      	movs	r2, #255	; 0xff
  40637e:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
  406380:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
  406382:	22ff      	movs	r2, #255	; 0xff
  406384:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
  406386:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
  406388:	22ff      	movs	r2, #255	; 0xff
  40638a:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
  40638c:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
  40638e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
				fs->wflag = 1;
  406392:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  406394:	701f      	strb	r7, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
  406396:	2100      	movs	r1, #0
  406398:	4620      	mov	r0, r4
				fs->wflag = 1;
  40639a:	f88b 2003 	strb.w	r2, [fp, #3]
				res = dir_next(dp, 0);	/* Next entry */
  40639e:	4ba4      	ldr	r3, [pc, #656]	; (406630 <dir_register+0xa9c>)
  4063a0:	4798      	blx	r3
			} while (res == FR_OK && --nent);
  4063a2:	2800      	cmp	r0, #0
  4063a4:	f040 80f9 	bne.w	40659a <dir_register+0xa06>
  4063a8:	3e01      	subs	r6, #1
  4063aa:	f43f af11 	beq.w	4061d0 <dir_register+0x63c>
				res = move_window(fs, dp->sect);
  4063ae:	f8d4 8018 	ldr.w	r8, [r4, #24]
	if (sect != fs->winsect) {	/* Window offset changed? */
  4063b2:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
  4063b6:	4590      	cmp	r8, r2
  4063b8:	d012      	beq.n	4063e0 <dir_register+0x84c>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4063ba:	f89b 3003 	ldrb.w	r3, [fp, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4063be:	f10b 0734 	add.w	r7, fp, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4063c2:	2b00      	cmp	r3, #0
  4063c4:	f040 8111 	bne.w	4065ea <dir_register+0xa56>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4063c8:	4639      	mov	r1, r7
  4063ca:	2301      	movs	r3, #1
  4063cc:	4642      	mov	r2, r8
  4063ce:	f89b 0001 	ldrb.w	r0, [fp, #1]
  4063d2:	4f98      	ldr	r7, [pc, #608]	; (406634 <dir_register+0xaa0>)
  4063d4:	47b8      	blx	r7
  4063d6:	2800      	cmp	r0, #0
  4063d8:	f47f af0e 	bne.w	4061f8 <dir_register+0x664>
			fs->winsect = sect;
  4063dc:	f8cb 8030 	str.w	r8, [fp, #48]	; 0x30
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
  4063e0:	b2f7      	uxtb	r7, r6
  4063e2:	f8db 000c 	ldr.w	r0, [fp, #12]
  4063e6:	69e3      	ldr	r3, [r4, #28]
	dir[LDIR_Type] = 0;
  4063e8:	f04f 0e00 	mov.w	lr, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
  4063ec:	1e7a      	subs	r2, r7, #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4063ee:	f04f 080f 	mov.w	r8, #15
	dir[LDIR_Chksum] = sum;			/* Set checksum */
  4063f2:	f89d 1008 	ldrb.w	r1, [sp, #8]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
  4063f6:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4063fa:	f883 800b 	strb.w	r8, [r3, #11]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
  4063fe:	7359      	strb	r1, [r3, #13]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406400:	f64f 71fd 	movw	r1, #65533	; 0xfffd
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
  406404:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	dir[LDIR_Type] = 0;
  406408:	f883 e00c 	strb.w	lr, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
  40640c:	f883 e01a 	strb.w	lr, [r3, #26]
	*ptr++ = (BYTE)val;
  406410:	f883 e01b 	strb.w	lr, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406414:	ea4f 0e42 	mov.w	lr, r2, lsl #1
  406418:	f830 9012 	ldrh.w	r9, [r0, r2, lsl #1]
  40641c:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  406420:	ea4f 2819 	mov.w	r8, r9, lsr #8
  406424:	f883 9001 	strb.w	r9, [r3, #1]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406428:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  40642c:	f883 8002 	strb.w	r8, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406430:	458c      	cmp	ip, r1
  406432:	f67f af7b 	bls.w	40632c <dir_register+0x798>
	*ptr++ = (BYTE)val; val >>= 8;
  406436:	22ff      	movs	r2, #255	; 0xff
  406438:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
  40643a:	711a      	strb	r2, [r3, #4]
  40643c:	e786      	b.n	40634c <dir_register+0x7b8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  40643e:	4402      	add	r2, r0
  406440:	f8b2 9002 	ldrh.w	r9, [r2, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406444:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  406448:	ea4f 2819 	mov.w	r8, r9, lsr #8
  40644c:	f883 9005 	strb.w	r9, [r3, #5]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406450:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406454:	f883 8006 	strb.w	r8, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406458:	458c      	cmp	ip, r1
  40645a:	f63f af7a 	bhi.w	406352 <dir_register+0x7be>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  40645e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406462:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  406466:	ea4f 2819 	mov.w	r8, r9, lsr #8
  40646a:	f883 9007 	strb.w	r9, [r3, #7]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40646e:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406472:	f883 8008 	strb.w	r8, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406476:	458c      	cmp	ip, r1
  406478:	f63f af6e 	bhi.w	406358 <dir_register+0x7c4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  40647c:	f8b2 9006 	ldrh.w	r9, [r2, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406480:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  406484:	ea4f 2819 	mov.w	r8, r9, lsr #8
  406488:	f883 9009 	strb.w	r9, [r3, #9]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40648c:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406490:	f883 800a 	strb.w	r8, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406494:	458c      	cmp	ip, r1
  406496:	f63f af62 	bhi.w	40635e <dir_register+0x7ca>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  40649a:	f8b2 9008 	ldrh.w	r9, [r2, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40649e:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  4064a2:	ea4f 2819 	mov.w	r8, r9, lsr #8
  4064a6:	f883 900e 	strb.w	r9, [r3, #14]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064aa:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  4064ae:	f883 800f 	strb.w	r8, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064b2:	458c      	cmp	ip, r1
  4064b4:	f63f af56 	bhi.w	406364 <dir_register+0x7d0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  4064b8:	f8b2 900a 	ldrh.w	r9, [r2, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064bc:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  4064c0:	ea4f 2819 	mov.w	r8, r9, lsr #8
  4064c4:	f883 9010 	strb.w	r9, [r3, #16]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064c8:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  4064cc:	f883 8011 	strb.w	r8, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064d0:	458c      	cmp	ip, r1
  4064d2:	f63f af4a 	bhi.w	40636a <dir_register+0x7d6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  4064d6:	f8b2 900c 	ldrh.w	r9, [r2, #12]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064da:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  4064de:	ea4f 2819 	mov.w	r8, r9, lsr #8
  4064e2:	f883 9012 	strb.w	r9, [r3, #18]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064e6:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  4064ea:	f883 8013 	strb.w	r8, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064ee:	458c      	cmp	ip, r1
  4064f0:	f63f af3e 	bhi.w	406370 <dir_register+0x7dc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  4064f4:	f8b2 900e 	ldrh.w	r9, [r2, #14]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  4064f8:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  4064fc:	ea4f 2819 	mov.w	r8, r9, lsr #8
  406500:	f883 9014 	strb.w	r9, [r3, #20]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406504:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406508:	f883 8015 	strb.w	r8, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40650c:	458c      	cmp	ip, r1
  40650e:	f63f af32 	bhi.w	406376 <dir_register+0x7e2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406512:	f8b2 9010 	ldrh.w	r9, [r2, #16]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406516:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  40651a:	ea4f 2819 	mov.w	r8, r9, lsr #8
  40651e:	f883 9016 	strb.w	r9, [r3, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406522:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406526:	f883 8017 	strb.w	r8, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40652a:	458c      	cmp	ip, r1
  40652c:	f63f af26 	bhi.w	40637c <dir_register+0x7e8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406530:	f8b2 9012 	ldrh.w	r9, [r2, #18]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406534:	f64f 71fd 	movw	r1, #65533	; 0xfffd
  406538:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  40653c:	ea4f 2819 	mov.w	r8, r9, lsr #8
  406540:	f883 9018 	strb.w	r9, [r3, #24]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406544:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406548:	f883 8019 	strb.w	r8, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40654c:	458c      	cmp	ip, r1
  40654e:	f63f af18 	bhi.w	406382 <dir_register+0x7ee>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406552:	f8b2 9014 	ldrh.w	r9, [r2, #20]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406556:	f109 3cff 	add.w	ip, r9, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  40655a:	ea4f 2819 	mov.w	r8, r9, lsr #8
  40655e:	f883 901c 	strb.w	r9, [r3, #28]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406562:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
  406566:	f883 801d 	strb.w	r8, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  40656a:	458c      	cmp	ip, r1
  40656c:	f63f af0c 	bhi.w	406388 <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
  406570:	f8b2 c016 	ldrh.w	ip, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406574:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
  406578:	ea4f 281c 	mov.w	r8, ip, lsr #8
  40657c:	f883 c01e 	strb.w	ip, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406580:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
  406582:	f883 801f 	strb.w	r8, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
  406586:	428a      	cmp	r2, r1
  406588:	f63f af01 	bhi.w	40638e <dir_register+0x7fa>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
  40658c:	eb00 020e 	add.w	r2, r0, lr
  406590:	8b52      	ldrh	r2, [r2, #26]
  406592:	2a00      	cmp	r2, #0
  406594:	f43f aefb 	beq.w	40638e <dir_register+0x7fa>
  406598:	e6fb      	b.n	406392 <dir_register+0x7fe>
				res = dir_next(dp, 0);	/* Next entry */
  40659a:	9001      	str	r0, [sp, #4]
  40659c:	f7ff bb04 	b.w	405ba8 <dir_register+0x14>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4065a0:	2301      	movs	r3, #1
  4065a2:	f89b 0001 	ldrb.w	r0, [fp, #1]
  4065a6:	4631      	mov	r1, r6
  4065a8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 406638 <dir_register+0xaa4>
  4065ac:	47c0      	blx	r8
  4065ae:	2800      	cmp	r0, #0
  4065b0:	f47f adb8 	bne.w	406124 <dir_register+0x590>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4065b4:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
  4065b8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  4065bc:	f8db 201c 	ldr.w	r2, [fp, #28]
  4065c0:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  4065c2:	f88b 0003 	strb.w	r0, [fp, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4065c6:	4293      	cmp	r3, r2
  4065c8:	f4bf ae0e 	bcs.w	4061e8 <dir_register+0x654>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  4065cc:	f89b 3002 	ldrb.w	r3, [fp, #2]
  4065d0:	2b02      	cmp	r3, #2
  4065d2:	f47f ae09 	bne.w	4061e8 <dir_register+0x654>
  4065d6:	440a      	add	r2, r1
  4065d8:	2301      	movs	r3, #1
  4065da:	4631      	mov	r1, r6
  4065dc:	f89b 0001 	ldrb.w	r0, [fp, #1]
  4065e0:	47c0      	blx	r8
  4065e2:	e601      	b.n	4061e8 <dir_register+0x654>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
  4065e4:	4690      	mov	r8, r2
  4065e6:	f7ff baf4 	b.w	405bd2 <dir_register+0x3e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4065ea:	2301      	movs	r3, #1
  4065ec:	f89b 0001 	ldrb.w	r0, [fp, #1]
  4065f0:	4639      	mov	r1, r7
  4065f2:	47d0      	blx	sl
  4065f4:	2800      	cmp	r0, #0
  4065f6:	f47f ad95 	bne.w	406124 <dir_register+0x590>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  4065fa:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
  4065fe:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  406602:	f8db 201c 	ldr.w	r2, [fp, #28]
  406606:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  406608:	f88b 0003 	strb.w	r0, [fp, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40660c:	4293      	cmp	r3, r2
  40660e:	f4bf aedb 	bcs.w	4063c8 <dir_register+0x834>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  406612:	f89b 3002 	ldrb.w	r3, [fp, #2]
  406616:	2b02      	cmp	r3, #2
  406618:	f47f aed6 	bne.w	4063c8 <dir_register+0x834>
  40661c:	440a      	add	r2, r1
  40661e:	2301      	movs	r3, #1
  406620:	4639      	mov	r1, r7
  406622:	f89b 0001 	ldrb.w	r0, [fp, #1]
  406626:	47d0      	blx	sl
  406628:	e6ce      	b.n	4063c8 <dir_register+0x834>
  40662a:	bf00      	nop
  40662c:	004050f9 	.word	0x004050f9
  406630:	00404b2d 	.word	0x00404b2d
  406634:	004078c5 	.word	0x004078c5
  406638:	004078e9 	.word	0x004078e9
			*d++ = *s++;
  40663c:	f894 2020 	ldrb.w	r2, [r4, #32]
  406640:	701a      	strb	r2, [r3, #0]
  406642:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  406646:	705a      	strb	r2, [r3, #1]
  406648:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
  40664c:	709a      	strb	r2, [r3, #2]
  40664e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
  406652:	70da      	strb	r2, [r3, #3]
  406654:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
  406658:	711a      	strb	r2, [r3, #4]
  40665a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
  40665e:	715a      	strb	r2, [r3, #5]
  406660:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
  406664:	719a      	strb	r2, [r3, #6]
  406666:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  40666a:	71da      	strb	r2, [r3, #7]
  40666c:	e5df      	b.n	40622e <dir_register+0x69a>
  40666e:	bf00      	nop

00406670 <file_mount>:
FRESULT file_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
  406670:	b510      	push	{r4, lr}
  406672:	b082      	sub	sp, #8
  406674:	9001      	str	r0, [sp, #4]
  406676:	9100      	str	r1, [sp, #0]
	if (!tp) return vol;	/* Invalid path name? */
  406678:	b321      	cbz	r1, 4066c4 <file_mount+0x54>
  40667a:	460c      	mov	r4, r1
  40667c:	e001      	b.n	406682 <file_mount+0x12>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
  40667e:	2b3a      	cmp	r3, #58	; 0x3a
  406680:	d003      	beq.n	40668a <file_mount+0x1a>
  406682:	f814 3b01 	ldrb.w	r3, [r4], #1
  406686:	2b1f      	cmp	r3, #31
  406688:	d8f9      	bhi.n	40667e <file_mount+0xe>
	if (tc == ':') {	/* DOS/Windows style volume ID? */
  40668a:	2b3a      	cmp	r3, #58	; 0x3a
  40668c:	d016      	beq.n	4066bc <file_mount+0x4c>


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];					/* Pointer to fs object */
  40668e:	4b10      	ldr	r3, [pc, #64]	; (4066d0 <file_mount+0x60>)
  406690:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204

	if (cfs) {
  406694:	b109      	cbz	r1, 40669a <file_mount+0x2a>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
  406696:	2000      	movs	r0, #0
  406698:	7008      	strb	r0, [r1, #0]
	}

	if (fs) {
  40669a:	9901      	ldr	r1, [sp, #4]
  40669c:	b109      	cbz	r1, 4066a2 <file_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
  40669e:	2000      	movs	r0, #0
  4066a0:	7008      	strb	r0, [r1, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
  4066a2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
  4066a6:	b912      	cbnz	r2, 4066ae <file_mount+0x3e>
  4066a8:	4610      	mov	r0, r2

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
  4066aa:	b002      	add	sp, #8
  4066ac:	bd10      	pop	{r4, pc}
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
  4066ae:	2200      	movs	r2, #0
  4066b0:	a901      	add	r1, sp, #4
  4066b2:	4b08      	ldr	r3, [pc, #32]	; (4066d4 <file_mount+0x64>)
  4066b4:	4668      	mov	r0, sp
  4066b6:	4798      	blx	r3
}
  4066b8:	b002      	add	sp, #8
  4066ba:	bd10      	pop	{r4, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
  4066bc:	f811 3b02 	ldrb.w	r3, [r1], #2
  4066c0:	428c      	cmp	r4, r1
  4066c2:	d002      	beq.n	4066ca <file_mount+0x5a>
	if (vol < 0) return FR_INVALID_DRIVE;
  4066c4:	200b      	movs	r0, #11
}
  4066c6:	b002      	add	sp, #8
  4066c8:	bd10      	pop	{r4, pc}
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
  4066ca:	2b30      	cmp	r3, #48	; 0x30
  4066cc:	d0df      	beq.n	40668e <file_mount+0x1e>
  4066ce:	e7f9      	b.n	4066c4 <file_mount+0x54>
  4066d0:	204021ec 	.word	0x204021ec
  4066d4:	00403c39 	.word	0x00403c39

004066d8 <file_open>:
FRESULT file_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  4066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4066dc:	b090      	sub	sp, #64	; 0x40
  4066de:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
  4066e0:	b180      	cbz	r0, 406704 <file_open+0x2c>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
  4066e2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
  4066e6:	4604      	mov	r4, r0
  4066e8:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, mode);
  4066ea:	a903      	add	r1, sp, #12
  4066ec:	a801      	add	r0, sp, #4
  4066ee:	4b85      	ldr	r3, [pc, #532]	; (406904 <file_open+0x22c>)
  4066f0:	463a      	mov	r2, r7
  4066f2:	4798      	blx	r3
	if (res == FR_OK) {
  4066f4:	4606      	mov	r6, r0
  4066f6:	b150      	cbz	r0, 40670e <file_open+0x36>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
  4066f8:	2300      	movs	r3, #0
  4066fa:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
  4066fc:	4630      	mov	r0, r6
  4066fe:	b010      	add	sp, #64	; 0x40
  406700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fp) return FR_INVALID_OBJECT;
  406704:	2609      	movs	r6, #9
}
  406706:	4630      	mov	r0, r6
  406708:	b010      	add	sp, #64	; 0x40
  40670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
  40670e:	9a03      	ldr	r2, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
  406710:	a804      	add	r0, sp, #16
  406712:	9901      	ldr	r1, [sp, #4]
  406714:	4b7c      	ldr	r3, [pc, #496]	; (406908 <file_open+0x230>)
		dj.obj.fs = fs;
  406716:	9204      	str	r2, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
  406718:	4798      	blx	r3
		if (res == FR_OK) {
  40671a:	b980      	cbnz	r0, 40673e <file_open+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
  40671c:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
  406720:	2b00      	cmp	r3, #0
  406722:	f2c0 8087 	blt.w	406834 <file_open+0x15c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406726:	f015 0f1c 	tst.w	r5, #28
  40672a:	d068      	beq.n	4067fe <file_open+0x126>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  40672c:	f89d 3016 	ldrb.w	r3, [sp, #22]
  406730:	f013 0f11 	tst.w	r3, #17
  406734:	d16b      	bne.n	40680e <file_open+0x136>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
  406736:	076d      	lsls	r5, r5, #29
  406738:	d50d      	bpl.n	406756 <file_open+0x7e>
  40673a:	2608      	movs	r6, #8
  40673c:	e7dc      	b.n	4066f8 <file_open+0x20>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40673e:	f015 0f1c 	tst.w	r5, #28
  406742:	d05a      	beq.n	4067fa <file_open+0x122>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
  406744:	2804      	cmp	r0, #4
  406746:	d158      	bne.n	4067fa <file_open+0x122>
					res = dir_register(&dj);
  406748:	a804      	add	r0, sp, #16
  40674a:	4b70      	ldr	r3, [pc, #448]	; (40690c <file_open+0x234>)
  40674c:	4798      	blx	r3
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
  40674e:	2800      	cmp	r0, #0
  406750:	d153      	bne.n	4067fa <file_open+0x122>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
  406752:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
  406756:	0738      	lsls	r0, r7, #28
  406758:	d471      	bmi.n	40683e <file_open+0x166>
  40675a:	f8dd 900c 	ldr.w	r9, [sp, #12]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
  40675e:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
			fp->dir_ptr = dj.dir;
  406762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
  406764:	6222      	str	r2, [r4, #32]
			fp->dir_ptr = dj.dir;
  406766:	6263      	str	r3, [r4, #36]	; 0x24
	if (fs->fs_type == FS_FAT32) {
  406768:	f899 2000 	ldrb.w	r2, [r9]
	rv = rv << 8 | ptr[0];
  40676c:	7ed9      	ldrb	r1, [r3, #27]
  40676e:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
  406770:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
  406772:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
  406776:	d056      	beq.n	406826 <file_open+0x14e>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
  406778:	60a5      	str	r5, [r4, #8]
			fp->err = 0;			/* Clear error flag */
  40677a:	f04f 0e00 	mov.w	lr, #0
	rv = rv << 8 | ptr[1];
  40677e:	7f5a      	ldrb	r2, [r3, #29]
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
  406780:	f104 0a28 	add.w	sl, r4, #40	; 0x28
	rv = rv << 8 | ptr[2];
  406784:	f8b3 c01e 	ldrh.w	ip, [r3, #30]
  406788:	4671      	mov	r1, lr
	rv = rv << 8 | ptr[0];
  40678a:	f893 801c 	ldrb.w	r8, [r3, #28]
  40678e:	4650      	mov	r0, sl
	rv = rv << 8 | ptr[1];
  406790:	ea42 230c 	orr.w	r3, r2, ip, lsl #8
			fp->obj.id = fs->id;
  406794:	f8b9 2006 	ldrh.w	r2, [r9, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
  406798:	f8c4 9000 	str.w	r9, [r4]
	rv = rv << 8 | ptr[0];
  40679c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			fp->obj.id = fs->id;
  4067a0:	80a2      	strh	r2, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
  4067a2:	7427      	strb	r7, [r4, #16]
  4067a4:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
  4067a8:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->err = 0;			/* Clear error flag */
  4067ac:	f884 e011 	strb.w	lr, [r4, #17]
			fp->sect = 0;			/* Invalidate current data sector */
  4067b0:	f8c4 e01c 	str.w	lr, [r4, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
  4067b4:	f8c4 e014 	str.w	lr, [r4, #20]
  4067b8:	4b55      	ldr	r3, [pc, #340]	; (406910 <file_open+0x238>)
  4067ba:	4798      	blx	r3
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
  4067bc:	06b9      	lsls	r1, r7, #26
  4067be:	d59d      	bpl.n	4066fc <file_open+0x24>
  4067c0:	f1b8 0f00 	cmp.w	r8, #0
  4067c4:	d09a      	beq.n	4066fc <file_open+0x24>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
  4067c6:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
  4067ca:	f8c4 8014 	str.w	r8, [r4, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
  4067ce:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
  4067d0:	4547      	cmp	r7, r8
  4067d2:	d276      	bcs.n	4068c2 <file_open+0x1ea>
  4067d4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 406924 <file_open+0x24c>
					clst = get_fat(&fp->obj, clst);
  4067d8:	4629      	mov	r1, r5
  4067da:	6820      	ldr	r0, [r4, #0]
  4067dc:	47c8      	blx	r9
					if (clst <= 1) res = FR_INT_ERR;
  4067de:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
  4067e0:	4605      	mov	r5, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
  4067e2:	eba8 0807 	sub.w	r8, r8, r7
					if (clst <= 1) res = FR_INT_ERR;
  4067e6:	d914      	bls.n	406812 <file_open+0x13a>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
  4067e8:	1c42      	adds	r2, r0, #1
  4067ea:	d001      	beq.n	4067f0 <file_open+0x118>
  4067ec:	4547      	cmp	r7, r8
  4067ee:	d3f3      	bcc.n	4067d8 <file_open+0x100>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
  4067f0:	1c6b      	adds	r3, r5, #1
				fp->clust = clst;
  4067f2:	61a5      	str	r5, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
  4067f4:	d166      	bne.n	4068c4 <file_open+0x1ec>
  4067f6:	e080      	b.n	4068fa <file_open+0x222>
				res = FR_INVALID_NAME;
  4067f8:	2006      	movs	r0, #6
						res = FR_INT_ERR;
  4067fa:	4606      	mov	r6, r0
  4067fc:	e77c      	b.n	4066f8 <file_open+0x20>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
  4067fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
  406802:	06d9      	lsls	r1, r3, #27
  406804:	d451      	bmi.n	4068aa <file_open+0x1d2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
  406806:	07aa      	lsls	r2, r5, #30
  406808:	d506      	bpl.n	406818 <file_open+0x140>
  40680a:	07db      	lsls	r3, r3, #31
  40680c:	d504      	bpl.n	406818 <file_open+0x140>
					res = FR_DENIED;
  40680e:	2607      	movs	r6, #7
  406810:	e772      	b.n	4066f8 <file_open+0x20>
				fp->clust = clst;
  406812:	61a0      	str	r0, [r4, #24]
					if (clst <= 1) res = FR_INT_ERR;
  406814:	2602      	movs	r6, #2
  406816:	e76f      	b.n	4066f8 <file_open+0x20>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
  406818:	0728      	lsls	r0, r5, #28
  40681a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  40681e:	d59e      	bpl.n	40675e <file_open+0x86>
  406820:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  406824:	e79b      	b.n	40675e <file_open+0x86>
	rv = rv << 8 | ptr[0];
  406826:	7d59      	ldrb	r1, [r3, #21]
  406828:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
  40682a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40682e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  406832:	e7a1      	b.n	406778 <file_open+0xa0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406834:	f015 0f1c 	tst.w	r5, #28
  406838:	d1de      	bne.n	4067f8 <file_open+0x120>
				res = FR_INVALID_NAME;
  40683a:	2606      	movs	r6, #6
  40683c:	e75c      	b.n	4066f8 <file_open+0x20>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
  40683e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  406842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
  406844:	f899 2000 	ldrb.w	r2, [r9]
	rv = rv << 8 | ptr[0];
  406848:	7ed9      	ldrb	r1, [r3, #27]
  40684a:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
  40684c:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
  40684e:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
  406852:	d02f      	beq.n	4068b4 <file_open+0x1dc>
	*ptr++ = (BYTE)val; val >>= 8;
  406854:	482f      	ldr	r0, [pc, #188]	; (406914 <file_open+0x23c>)
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
  406856:	2120      	movs	r1, #32
	*ptr++ = (BYTE)val; val >>= 8;
  406858:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
  40685a:	f8c3 000e 	str.w	r0, [r3, #14]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
  40685e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406860:	72d9      	strb	r1, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
  406862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
  406864:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
  406866:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
  406868:	f899 1000 	ldrb.w	r1, [r9]
  40686c:	2903      	cmp	r1, #3
  40686e:	d01e      	beq.n	4068ae <file_open+0x1d6>
					st_dword(dj.dir + DIR_FileSize, 0);
  406870:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
  406872:	2200      	movs	r2, #0
					fs->wflag = 1;
  406874:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
  406876:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
  406878:	f889 3003 	strb.w	r3, [r9, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
  40687c:	2d00      	cmp	r5, #0
  40687e:	d0cf      	beq.n	406820 <file_open+0x148>
						res = remove_chain(&dj.obj, cl, 0);
  406880:	a804      	add	r0, sp, #16
  406882:	4629      	mov	r1, r5
  406884:	4b24      	ldr	r3, [pc, #144]	; (406918 <file_open+0x240>)
						sc = fs->winsect;
  406886:	f8d9 8030 	ldr.w	r8, [r9, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
  40688a:	4798      	blx	r3
						if (res == FR_OK) {
  40688c:	2800      	cmp	r0, #0
  40688e:	d1b4      	bne.n	4067fa <file_open+0x122>
							res = move_window(fs, sc);
  406890:	4641      	mov	r1, r8
  406892:	9803      	ldr	r0, [sp, #12]
  406894:	4b21      	ldr	r3, [pc, #132]	; (40691c <file_open+0x244>)
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
  406896:	3d01      	subs	r5, #1
							res = move_window(fs, sc);
  406898:	4798      	blx	r3
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
  40689a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  40689e:	f8c9 5010 	str.w	r5, [r9, #16]
		if (res == FR_OK) {
  4068a2:	2800      	cmp	r0, #0
  4068a4:	d0bc      	beq.n	406820 <file_open+0x148>
						res = FR_INT_ERR;
  4068a6:	4606      	mov	r6, r0
  4068a8:	e726      	b.n	4066f8 <file_open+0x20>
					res = FR_NO_FILE;
  4068aa:	2604      	movs	r6, #4
  4068ac:	e724      	b.n	4066f8 <file_open+0x20>
	*ptr++ = (BYTE)val; val >>= 8;
  4068ae:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
  4068b0:	755a      	strb	r2, [r3, #21]
  4068b2:	e7dd      	b.n	406870 <file_open+0x198>
	rv = rv << 8 | ptr[0];
  4068b4:	7d59      	ldrb	r1, [r3, #21]
  4068b6:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
  4068b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4068bc:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  4068c0:	e7c8      	b.n	406854 <file_open+0x17c>
				fp->clust = clst;
  4068c2:	61a5      	str	r5, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
  4068c4:	f3c8 0308 	ubfx	r3, r8, #0, #9
  4068c8:	2b00      	cmp	r3, #0
  4068ca:	f43f af17 	beq.w	4066fc <file_open+0x24>
					sc = clst2sect(fs, clst);
  4068ce:	9803      	ldr	r0, [sp, #12]
	clst -= 2;		/* Cluster number is origin from 2 */
  4068d0:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4068d2:	6983      	ldr	r3, [r0, #24]
  4068d4:	3b02      	subs	r3, #2
  4068d6:	429d      	cmp	r5, r3
  4068d8:	d211      	bcs.n	4068fe <file_open+0x226>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  4068da:	8942      	ldrh	r2, [r0, #10]
  4068dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4068de:	fb05 3202 	mla	r2, r5, r2, r3
					if (sc == 0) {
  4068e2:	b162      	cbz	r2, 4068fe <file_open+0x226>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
  4068e4:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
  4068e8:	4651      	mov	r1, sl
  4068ea:	2301      	movs	r3, #1
  4068ec:	4d0c      	ldr	r5, [pc, #48]	; (406920 <file_open+0x248>)
						fp->sect = sc + (DWORD)(ofs / SS(fs));
  4068ee:	61e2      	str	r2, [r4, #28]
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
  4068f0:	7840      	ldrb	r0, [r0, #1]
  4068f2:	47a8      	blx	r5
  4068f4:	2800      	cmp	r0, #0
  4068f6:	f43f af01 	beq.w	4066fc <file_open+0x24>
  4068fa:	2601      	movs	r6, #1
  4068fc:	e6fc      	b.n	4066f8 <file_open+0x20>
						res = FR_INT_ERR;
  4068fe:	2602      	movs	r6, #2
  406900:	e6fa      	b.n	4066f8 <file_open+0x20>
  406902:	bf00      	nop
  406904:	00403c39 	.word	0x00403c39
  406908:	00405745 	.word	0x00405745
  40690c:	00405b95 	.word	0x00405b95
  406910:	0040a555 	.word	0x0040a555
  406914:	4e6f0000 	.word	0x4e6f0000
  406918:	004042a5 	.word	0x004042a5
  40691c:	00403a31 	.word	0x00403a31
  406920:	004078c5 	.word	0x004078c5
  406924:	00404551 	.word	0x00404551

00406928 <file_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
  406928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
  40692c:	2400      	movs	r4, #0
{
  40692e:	b08b      	sub	sp, #44	; 0x2c
	*br = 0;	/* Clear read byte counter */
  406930:	601c      	str	r4, [r3, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  406932:	b118      	cbz	r0, 40693c <file_read+0x14>
  406934:	6804      	ldr	r4, [r0, #0]
  406936:	b10c      	cbz	r4, 40693c <file_read+0x14>
  406938:	7825      	ldrb	r5, [r4, #0]
  40693a:	b92d      	cbnz	r5, 406948 <file_read+0x20>
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
  40693c:	f04f 0a09 	mov.w	sl, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
  406940:	4650      	mov	r0, sl
  406942:	b00b      	add	sp, #44	; 0x2c
  406944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  406948:	8886      	ldrh	r6, [r0, #4]
  40694a:	88e5      	ldrh	r5, [r4, #6]
  40694c:	42ae      	cmp	r6, r5
  40694e:	d1f5      	bne.n	40693c <file_read+0x14>
  406950:	9302      	str	r3, [sp, #8]
  406952:	4680      	mov	r8, r0
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
  406954:	4bca      	ldr	r3, [pc, #808]	; (406c80 <file_read+0x358>)
  406956:	4689      	mov	r9, r1
  406958:	7860      	ldrb	r0, [r4, #1]
  40695a:	4615      	mov	r5, r2
  40695c:	4798      	blx	r3
  40695e:	07c1      	lsls	r1, r0, #31
  406960:	d4ec      	bmi.n	40693c <file_read+0x14>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
  406962:	f898 a011 	ldrb.w	sl, [r8, #17]
  406966:	f1ba 0f00 	cmp.w	sl, #0
  40696a:	d1e9      	bne.n	406940 <file_read+0x18>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
  40696c:	f898 3010 	ldrb.w	r3, [r8, #16]
  406970:	07da      	lsls	r2, r3, #31
  406972:	d405      	bmi.n	406980 <file_read+0x58>
  406974:	f04f 0a07 	mov.w	sl, #7
}
  406978:	4650      	mov	r0, sl
  40697a:	b00b      	add	sp, #44	; 0x2c
  40697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->obj.objsize - fp->fptr;
  406980:	f8d8 0014 	ldr.w	r0, [r8, #20]
  406984:	f8d8 300c 	ldr.w	r3, [r8, #12]
  406988:	1a1b      	subs	r3, r3, r0
  40698a:	42ab      	cmp	r3, r5
  40698c:	bf28      	it	cs
  40698e:	462b      	movcs	r3, r5
  406990:	469b      	mov	fp, r3
	for ( ;  btr;								/* Repeat until btr bytes read */
  406992:	2b00      	cmp	r3, #0
  406994:	d0d4      	beq.n	406940 <file_read+0x18>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
  406996:	4643      	mov	r3, r8
  406998:	f8cd a014 	str.w	sl, [sp, #20]
  40699c:	f853 5b28 	ldr.w	r5, [r3], #40
  4069a0:	9301      	str	r3, [sp, #4]
  4069a2:	425b      	negs	r3, r3
  4069a4:	46aa      	mov	sl, r5
  4069a6:	f003 0303 	and.w	r3, r3, #3
  4069aa:	4619      	mov	r1, r3
  4069ac:	9306      	str	r3, [sp, #24]
  4069ae:	f5c3 73fe 	rsb	r3, r3, #508	; 0x1fc
  4069b2:	f5c1 7200 	rsb	r2, r1, #512	; 0x200
  4069b6:	089b      	lsrs	r3, r3, #2
  4069b8:	9209      	str	r2, [sp, #36]	; 0x24
  4069ba:	3301      	adds	r3, #1
  4069bc:	9308      	str	r3, [sp, #32]
  4069be:	009b      	lsls	r3, r3, #2
  4069c0:	9307      	str	r3, [sp, #28]
  4069c2:	e04c      	b.n	406a5e <file_read+0x136>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
  4069c4:	f8ba 600a 	ldrh.w	r6, [sl, #10]
  4069c8:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
  4069ca:	ea16 2650 	ands.w	r6, r6, r0, lsr #9
  4069ce:	f040 80a9 	bne.w	406b24 <file_read+0x1fc>
				if (fp->fptr == 0) {			/* On the top of the file? */
  4069d2:	2800      	cmp	r0, #0
  4069d4:	f040 80d3 	bne.w	406b7e <file_read+0x256>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
  4069d8:	f8d8 0008 	ldr.w	r0, [r8, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
  4069dc:	2801      	cmp	r0, #1
  4069de:	f240 8144 	bls.w	406c6a <file_read+0x342>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
  4069e2:	1c43      	adds	r3, r0, #1
  4069e4:	f000 80c6 	beq.w	406b74 <file_read+0x24c>
				fp->clust = clst;				/* Update current cluster */
  4069e8:	f8c8 0018 	str.w	r0, [r8, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4069ec:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;		/* Cluster number is origin from 2 */
  4069f0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4069f2:	3b02      	subs	r3, #2
  4069f4:	4298      	cmp	r0, r3
  4069f6:	f080 8138 	bcs.w	406c6a <file_read+0x342>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  4069fa:	f8ba 300a 	ldrh.w	r3, [sl, #10]
  4069fe:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
  406a02:	fb00 f103 	mul.w	r1, r0, r3
  406a06:	9203      	str	r2, [sp, #12]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
  406a08:	1857      	adds	r7, r2, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  406a0a:	9104      	str	r1, [sp, #16]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
  406a0c:	f000 812d 	beq.w	406c6a <file_read+0x342>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
  406a10:	ea5f 245b 	movs.w	r4, fp, lsr #9
			sect += csect;
  406a14:	4437      	add	r7, r6
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
  406a16:	f000 8088 	beq.w	406b2a <file_read+0x202>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
  406a1a:	1932      	adds	r2, r6, r4
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
  406a1c:	4649      	mov	r1, r9
  406a1e:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
  406a22:	429a      	cmp	r2, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
  406a24:	4d97      	ldr	r5, [pc, #604]	; (406c84 <file_read+0x35c>)
  406a26:	463a      	mov	r2, r7
					cc = fs->csize - csect;
  406a28:	bf88      	it	hi
  406a2a:	1b9c      	subhi	r4, r3, r6
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
  406a2c:	4623      	mov	r3, r4
  406a2e:	47a8      	blx	r5
  406a30:	2800      	cmp	r0, #0
  406a32:	f040 809f 	bne.w	406b74 <file_read+0x24c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
  406a36:	f998 3010 	ldrsb.w	r3, [r8, #16]
  406a3a:	2b00      	cmp	r3, #0
  406a3c:	f2c0 80b5 	blt.w	406baa <file_read+0x282>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
  406a40:	0263      	lsls	r3, r4, #9
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
  406a42:	9902      	ldr	r1, [sp, #8]
	for ( ;  btr;								/* Repeat until btr bytes read */
  406a44:	ebbb 0b03 	subs.w	fp, fp, r3
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
  406a48:	4499      	add	r9, r3
  406a4a:	680a      	ldr	r2, [r1, #0]
  406a4c:	441a      	add	r2, r3
  406a4e:	600a      	str	r2, [r1, #0]
  406a50:	f8d8 0014 	ldr.w	r0, [r8, #20]
  406a54:	4418      	add	r0, r3
  406a56:	f8c8 0014 	str.w	r0, [r8, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
  406a5a:	f000 8103 	beq.w	406c64 <file_read+0x33c>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
  406a5e:	f3c0 0208 	ubfx	r2, r0, #0, #9
  406a62:	2a00      	cmp	r2, #0
  406a64:	d0ae      	beq.n	4069c4 <file_read+0x9c>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
  406a66:	9d01      	ldr	r5, [sp, #4]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
  406a68:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
  406a6c:	1d11      	adds	r1, r2, #4
  406a6e:	f109 0404 	add.w	r4, r9, #4
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
  406a72:	4628      	mov	r0, r5
  406a74:	455b      	cmp	r3, fp
  406a76:	4429      	add	r1, r5
  406a78:	4410      	add	r0, r2
  406a7a:	bf28      	it	cs
  406a7c:	465b      	movcs	r3, fp
  406a7e:	42a0      	cmp	r0, r4
  406a80:	bf38      	it	cc
  406a82:	4589      	cmpcc	r9, r1
  406a84:	d36c      	bcc.n	406b60 <file_read+0x238>
  406a86:	2b0b      	cmp	r3, #11
  406a88:	d96a      	bls.n	406b60 <file_read+0x238>
  406a8a:	4241      	negs	r1, r0
  406a8c:	f011 0103 	ands.w	r1, r1, #3
  406a90:	d062      	beq.n	406b58 <file_read+0x230>
			*d++ = *s++;
  406a92:	7807      	ldrb	r7, [r0, #0]
  406a94:	2901      	cmp	r1, #1
  406a96:	f109 0501 	add.w	r5, r9, #1
  406a9a:	f100 0601 	add.w	r6, r0, #1
		} while (--cnt);
  406a9e:	f103 34ff 	add.w	r4, r3, #4294967295
			*d++ = *s++;
  406aa2:	f889 7000 	strb.w	r7, [r9]
  406aa6:	d011      	beq.n	406acc <file_read+0x1a4>
  406aa8:	7847      	ldrb	r7, [r0, #1]
  406aaa:	2903      	cmp	r1, #3
  406aac:	f109 0502 	add.w	r5, r9, #2
  406ab0:	f100 0602 	add.w	r6, r0, #2
		} while (--cnt);
  406ab4:	f1a3 0402 	sub.w	r4, r3, #2
			*d++ = *s++;
  406ab8:	f889 7001 	strb.w	r7, [r9, #1]
  406abc:	d106      	bne.n	406acc <file_read+0x1a4>
  406abe:	7887      	ldrb	r7, [r0, #2]
  406ac0:	1cc6      	adds	r6, r0, #3
  406ac2:	f109 0503 	add.w	r5, r9, #3
		} while (--cnt);
  406ac6:	1edc      	subs	r4, r3, #3
			*d++ = *s++;
  406ac8:	f889 7002 	strb.w	r7, [r9, #2]
  406acc:	eba3 0e01 	sub.w	lr, r3, r1
  406ad0:	eb02 0c01 	add.w	ip, r2, r1
  406ad4:	9a01      	ldr	r2, [sp, #4]
  406ad6:	4449      	add	r1, r9
  406ad8:	f1ae 0004 	sub.w	r0, lr, #4
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
  406adc:	2700      	movs	r7, #0
  406ade:	4462      	add	r2, ip
  406ae0:	9303      	str	r3, [sp, #12]
  406ae2:	0880      	lsrs	r0, r0, #2
  406ae4:	3001      	adds	r0, #1
  406ae6:	ea4f 0c80 	mov.w	ip, r0, lsl #2
  406aea:	3701      	adds	r7, #1
			*d++ = *s++;
  406aec:	f852 3b04 	ldr.w	r3, [r2], #4
  406af0:	42b8      	cmp	r0, r7
  406af2:	f841 3b04 	str.w	r3, [r1], #4
  406af6:	d8f8      	bhi.n	406aea <file_read+0x1c2>
  406af8:	45e6      	cmp	lr, ip
  406afa:	9b03      	ldr	r3, [sp, #12]
  406afc:	eba4 040c 	sub.w	r4, r4, ip
  406b00:	eb05 020c 	add.w	r2, r5, ip
  406b04:	eb06 010c 	add.w	r1, r6, ip
  406b08:	d09b      	beq.n	406a42 <file_read+0x11a>
  406b0a:	f816 6020 	ldrb.w	r6, [r6, r0, lsl #2]
		} while (--cnt);
  406b0e:	2c01      	cmp	r4, #1
			*d++ = *s++;
  406b10:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		} while (--cnt);
  406b14:	d095      	beq.n	406a42 <file_read+0x11a>
			*d++ = *s++;
  406b16:	7848      	ldrb	r0, [r1, #1]
		} while (--cnt);
  406b18:	2c02      	cmp	r4, #2
			*d++ = *s++;
  406b1a:	7050      	strb	r0, [r2, #1]
		} while (--cnt);
  406b1c:	d091      	beq.n	406a42 <file_read+0x11a>
			*d++ = *s++;
  406b1e:	7889      	ldrb	r1, [r1, #2]
  406b20:	7091      	strb	r1, [r2, #2]
  406b22:	e78e      	b.n	406a42 <file_read+0x11a>
  406b24:	f8d8 0018 	ldr.w	r0, [r8, #24]
  406b28:	e760      	b.n	4069ec <file_read+0xc4>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
  406b2a:	f8d8 201c 	ldr.w	r2, [r8, #28]
  406b2e:	4297      	cmp	r7, r2
  406b30:	d00b      	beq.n	406b4a <file_read+0x222>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
  406b32:	f998 3010 	ldrsb.w	r3, [r8, #16]
  406b36:	2b00      	cmp	r3, #0
  406b38:	db28      	blt.n	406b8c <file_read+0x264>
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
  406b3a:	2301      	movs	r3, #1
  406b3c:	463a      	mov	r2, r7
  406b3e:	9901      	ldr	r1, [sp, #4]
  406b40:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406b44:	4c4f      	ldr	r4, [pc, #316]	; (406c84 <file_read+0x35c>)
  406b46:	47a0      	blx	r4
  406b48:	b9a0      	cbnz	r0, 406b74 <file_read+0x24c>
  406b4a:	f8d8 2014 	ldr.w	r2, [r8, #20]
			fp->sect = sect;
  406b4e:	f8c8 701c 	str.w	r7, [r8, #28]
  406b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
  406b56:	e786      	b.n	406a66 <file_read+0x13e>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
  406b58:	4606      	mov	r6, r0
  406b5a:	464d      	mov	r5, r9
  406b5c:	461c      	mov	r4, r3
  406b5e:	e7b5      	b.n	406acc <file_read+0x1a4>
  406b60:	f109 32ff 	add.w	r2, r9, #4294967295
  406b64:	18c4      	adds	r4, r0, r3
			*d++ = *s++;
  406b66:	f810 1b01 	ldrb.w	r1, [r0], #1
		} while (--cnt);
  406b6a:	42a0      	cmp	r0, r4
			*d++ = *s++;
  406b6c:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
  406b70:	d1f9      	bne.n	406b66 <file_read+0x23e>
  406b72:	e766      	b.n	406a42 <file_read+0x11a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
  406b74:	f04f 0a01 	mov.w	sl, #1
  406b78:	f888 a011 	strb.w	sl, [r8, #17]
  406b7c:	e6e0      	b.n	406940 <file_read+0x18>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
  406b7e:	f8d8 1018 	ldr.w	r1, [r8, #24]
  406b82:	f8d8 0000 	ldr.w	r0, [r8]
  406b86:	4b40      	ldr	r3, [pc, #256]	; (406c88 <file_read+0x360>)
  406b88:	4798      	blx	r3
  406b8a:	e727      	b.n	4069dc <file_read+0xb4>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
  406b8c:	2301      	movs	r3, #1
  406b8e:	9901      	ldr	r1, [sp, #4]
  406b90:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406b94:	4c3d      	ldr	r4, [pc, #244]	; (406c8c <file_read+0x364>)
  406b96:	47a0      	blx	r4
  406b98:	2800      	cmp	r0, #0
  406b9a:	d1eb      	bne.n	406b74 <file_read+0x24c>
					fp->flag &= (BYTE)~FA_DIRTY;
  406b9c:	f898 3010 	ldrb.w	r3, [r8, #16]
  406ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406ba4:	f888 3010 	strb.w	r3, [r8, #16]
  406ba8:	e7c7      	b.n	406b3a <file_read+0x212>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
  406baa:	f8d8 301c 	ldr.w	r3, [r8, #28]
  406bae:	1bdf      	subs	r7, r3, r7
  406bb0:	42bc      	cmp	r4, r7
  406bb2:	f67f af45 	bls.w	406a40 <file_read+0x118>
  406bb6:	9a03      	ldr	r2, [sp, #12]
  406bb8:	f108 012c 	add.w	r1, r8, #44	; 0x2c
  406bbc:	9804      	ldr	r0, [sp, #16]
  406bbe:	1a9b      	subs	r3, r3, r2
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
  406bc0:	eb09 2247 	add.w	r2, r9, r7, lsl #9
  406bc4:	1b9b      	subs	r3, r3, r6
  406bc6:	1a1b      	subs	r3, r3, r0
  406bc8:	025b      	lsls	r3, r3, #9
  406bca:	eb09 0003 	add.w	r0, r9, r3
  406bce:	4281      	cmp	r1, r0
  406bd0:	d904      	bls.n	406bdc <file_read+0x2b4>
  406bd2:	1d19      	adds	r1, r3, #4
  406bd4:	9801      	ldr	r0, [sp, #4]
  406bd6:	4449      	add	r1, r9
  406bd8:	4288      	cmp	r0, r1
  406bda:	d359      	bcc.n	406c90 <file_read+0x368>
  406bdc:	9e06      	ldr	r6, [sp, #24]
  406bde:	2e00      	cmp	r6, #0
  406be0:	d048      	beq.n	406c74 <file_read+0x34c>
			*d++ = *s++;
  406be2:	f898 1028 	ldrb.w	r1, [r8, #40]	; 0x28
  406be6:	2e01      	cmp	r6, #1
  406be8:	f102 0001 	add.w	r0, r2, #1
  406bec:	f108 0529 	add.w	r5, r8, #41	; 0x29
  406bf0:	7011      	strb	r1, [r2, #0]
  406bf2:	d05d      	beq.n	406cb0 <file_read+0x388>
  406bf4:	f898 1029 	ldrb.w	r1, [r8, #41]	; 0x29
  406bf8:	2e03      	cmp	r6, #3
  406bfa:	f102 0002 	add.w	r0, r2, #2
  406bfe:	f108 052a 	add.w	r5, r8, #42	; 0x2a
  406c02:	7051      	strb	r1, [r2, #1]
  406c04:	d14f      	bne.n	406ca6 <file_read+0x37e>
  406c06:	f898 102a 	ldrb.w	r1, [r8, #42]	; 0x2a
  406c0a:	f108 052b 	add.w	r5, r8, #43	; 0x2b
  406c0e:	f240 17fd 	movw	r7, #509	; 0x1fd
  406c12:	3203      	adds	r2, #3
  406c14:	f802 1c01 	strb.w	r1, [r2, #-1]
  406c18:	4630      	mov	r0, r6
  406c1a:	4601      	mov	r1, r0
  406c1c:	4403      	add	r3, r0
  406c1e:	f8dd e020 	ldr.w	lr, [sp, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
  406c22:	2000      	movs	r0, #0
  406c24:	3128      	adds	r1, #40	; 0x28
  406c26:	444b      	add	r3, r9
  406c28:	4441      	add	r1, r8
  406c2a:	3001      	adds	r0, #1
			*d++ = *s++;
  406c2c:	f851 6b04 	ldr.w	r6, [r1], #4
  406c30:	4586      	cmp	lr, r0
  406c32:	f843 6b04 	str.w	r6, [r3], #4
  406c36:	d8f8      	bhi.n	406c2a <file_read+0x302>
  406c38:	9e07      	ldr	r6, [sp, #28]
  406c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
  406c3c:	1bbf      	subs	r7, r7, r6
  406c3e:	1993      	adds	r3, r2, r6
  406c40:	4286      	cmp	r6, r0
  406c42:	eb05 0106 	add.w	r1, r5, r6
  406c46:	f43f aefb 	beq.w	406a40 <file_read+0x118>
  406c4a:	5da8      	ldrb	r0, [r5, r6]
		} while (--cnt);
  406c4c:	2f01      	cmp	r7, #1
			*d++ = *s++;
  406c4e:	5590      	strb	r0, [r2, r6]
		} while (--cnt);
  406c50:	f43f aef6 	beq.w	406a40 <file_read+0x118>
			*d++ = *s++;
  406c54:	784a      	ldrb	r2, [r1, #1]
		} while (--cnt);
  406c56:	2f02      	cmp	r7, #2
			*d++ = *s++;
  406c58:	705a      	strb	r2, [r3, #1]
		} while (--cnt);
  406c5a:	f43f aef1 	beq.w	406a40 <file_read+0x118>
			*d++ = *s++;
  406c5e:	788a      	ldrb	r2, [r1, #2]
  406c60:	709a      	strb	r2, [r3, #2]
  406c62:	e6ed      	b.n	406a40 <file_read+0x118>
  406c64:	f8dd a014 	ldr.w	sl, [sp, #20]
  406c68:	e66a      	b.n	406940 <file_read+0x18>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
  406c6a:	f04f 0a02 	mov.w	sl, #2
  406c6e:	f888 a011 	strb.w	sl, [r8, #17]
  406c72:	e665      	b.n	406940 <file_read+0x18>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
  406c74:	9d01      	ldr	r5, [sp, #4]
  406c76:	f44f 7700 	mov.w	r7, #512	; 0x200
  406c7a:	4630      	mov	r0, r6
  406c7c:	e7cd      	b.n	406c1a <file_read+0x2f2>
  406c7e:	bf00      	nop
  406c80:	00407879 	.word	0x00407879
  406c84:	004078c5 	.word	0x004078c5
  406c88:	00404551 	.word	0x00404551
  406c8c:	004078e9 	.word	0x004078e9
  406c90:	4603      	mov	r3, r0
  406c92:	3a01      	subs	r2, #1
  406c94:	f508 700a 	add.w	r0, r8, #552	; 0x228
			*d++ = *s++;
  406c98:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
  406c9c:	4283      	cmp	r3, r0
			*d++ = *s++;
  406c9e:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
  406ca2:	d1f9      	bne.n	406c98 <file_read+0x370>
  406ca4:	e6cc      	b.n	406a40 <file_read+0x118>
			*d++ = *s++;
  406ca6:	4602      	mov	r2, r0
  406ca8:	f44f 77ff 	mov.w	r7, #510	; 0x1fe
  406cac:	4630      	mov	r0, r6
  406cae:	e7b4      	b.n	406c1a <file_read+0x2f2>
  406cb0:	4602      	mov	r2, r0
  406cb2:	f240 17ff 	movw	r7, #511	; 0x1ff
  406cb6:	4630      	mov	r0, r6
  406cb8:	e7af      	b.n	406c1a <file_read+0x2f2>
  406cba:	bf00      	nop

00406cbc <file_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  406cbc:	b140      	cbz	r0, 406cd0 <file_close+0x14>
/*-----------------------------------------------------------------------*/

FRESULT file_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
  406cbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  406cc2:	6803      	ldr	r3, [r0, #0]
  406cc4:	b10b      	cbz	r3, 406cca <file_close+0xe>
  406cc6:	781a      	ldrb	r2, [r3, #0]
  406cc8:	b922      	cbnz	r2, 406cd4 <file_close+0x18>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
  406cca:	2009      	movs	r0, #9
  406ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cd0:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
  406cd2:	4770      	bx	lr
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  406cd4:	8881      	ldrh	r1, [r0, #4]
  406cd6:	88da      	ldrh	r2, [r3, #6]
  406cd8:	4291      	cmp	r1, r2
  406cda:	d1f6      	bne.n	406cca <file_close+0xe>
  406cdc:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
  406cde:	f8df 9128 	ldr.w	r9, [pc, #296]	; 406e08 <file_close+0x14c>
  406ce2:	7858      	ldrb	r0, [r3, #1]
  406ce4:	47c8      	blx	r9
  406ce6:	07c0      	lsls	r0, r0, #31
  406ce8:	d4ef      	bmi.n	406cca <file_close+0xe>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
  406cea:	7c23      	ldrb	r3, [r4, #16]
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
  406cec:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
  406cee:	065a      	lsls	r2, r3, #25
  406cf0:	d546      	bpl.n	406d80 <file_close+0xc4>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
  406cf2:	0619      	lsls	r1, r3, #24
  406cf4:	d455      	bmi.n	406da2 <file_close+0xe6>
				res = move_window(fs, fp->dir_sect);
  406cf6:	6a27      	ldr	r7, [r4, #32]
	if (sect != fs->winsect) {	/* Window offset changed? */
  406cf8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  406cfa:	4297      	cmp	r7, r2
  406cfc:	d012      	beq.n	406d24 <file_close+0x68>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  406cfe:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  406d00:	f105 0834 	add.w	r8, r5, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  406d04:	2b00      	cmp	r3, #0
  406d06:	d159      	bne.n	406dbc <file_close+0x100>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  406d08:	4641      	mov	r1, r8
  406d0a:	2301      	movs	r3, #1
  406d0c:	463a      	mov	r2, r7
  406d0e:	7868      	ldrb	r0, [r5, #1]
  406d10:	4e39      	ldr	r6, [pc, #228]	; (406df8 <file_close+0x13c>)
  406d12:	47b0      	blx	r6
  406d14:	b128      	cbz	r0, 406d22 <file_close+0x66>
			fs->winsect = sect;
  406d16:	f04f 33ff 	mov.w	r3, #4294967295
  406d1a:	2001      	movs	r0, #1
  406d1c:	632b      	str	r3, [r5, #48]	; 0x30
}
  406d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			fs->winsect = sect;
  406d22:	632f      	str	r7, [r5, #48]	; 0x30
					dir = fp->dir_ptr;
  406d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
  406d26:	7ada      	ldrb	r2, [r3, #11]
  406d28:	f042 0220 	orr.w	r2, r2, #32
  406d2c:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
  406d2e:	68a2      	ldr	r2, [r4, #8]
  406d30:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
  406d32:	f3c2 2007 	ubfx	r0, r2, #8, #8
  406d36:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
  406d38:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
  406d3a:	7809      	ldrb	r1, [r1, #0]
  406d3c:	2903      	cmp	r1, #3
  406d3e:	d056      	beq.n	406dee <file_close+0x132>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
  406d40:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
  406d42:	2100      	movs	r1, #0
  406d44:	4f2d      	ldr	r7, [pc, #180]	; (406dfc <file_close+0x140>)
  406d46:	0a10      	lsrs	r0, r2, #8
  406d48:	f362 0107 	bfi	r1, r2, #0, #8
  406d4c:	f8c3 7016 	str.w	r7, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
  406d50:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
  406d52:	f360 210f 	bfi	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
  406d56:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
  406d58:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val; val >>= 8;
  406d5a:	f367 4117 	bfi	r1, r7, #16, #8
					fs->wflag = 1;
  406d5e:	2701      	movs	r7, #1
	*ptr++ = (BYTE)val; val >>= 8;
  406d60:	7498      	strb	r0, [r3, #18]
	*ptr++ = (BYTE)val; val >>= 8;
  406d62:	f362 611f 	bfi	r1, r2, #24, #8
	*ptr++ = (BYTE)val;
  406d66:	74d8      	strb	r0, [r3, #19]
					res = sync_fs(fs);					/* Restore it to the directory */
  406d68:	4a25      	ldr	r2, [pc, #148]	; (406e00 <file_close+0x144>)
  406d6a:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
  406d6c:	61d9      	str	r1, [r3, #28]
					fs->wflag = 1;
  406d6e:	70ef      	strb	r7, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
  406d70:	4790      	blx	r2
					fp->flag &= (BYTE)~FA_MODIFIED;
  406d72:	7c23      	ldrb	r3, [r4, #16]
  406d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406d78:	7423      	strb	r3, [r4, #16]
	if (res == FR_OK)
  406d7a:	2800      	cmp	r0, #0
  406d7c:	d1cf      	bne.n	406d1e <file_close+0x62>
  406d7e:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  406d80:	2d00      	cmp	r5, #0
  406d82:	d0a2      	beq.n	406cca <file_close+0xe>
  406d84:	782b      	ldrb	r3, [r5, #0]
  406d86:	2b00      	cmp	r3, #0
  406d88:	d09f      	beq.n	406cca <file_close+0xe>
  406d8a:	88a2      	ldrh	r2, [r4, #4]
  406d8c:	88eb      	ldrh	r3, [r5, #6]
  406d8e:	429a      	cmp	r2, r3
  406d90:	d19b      	bne.n	406cca <file_close+0xe>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
  406d92:	7868      	ldrb	r0, [r5, #1]
  406d94:	47c8      	blx	r9
  406d96:	f010 0001 	ands.w	r0, r0, #1
  406d9a:	d196      	bne.n	406cca <file_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
  406d9c:	6020      	str	r0, [r4, #0]
  406d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
  406da2:	2301      	movs	r3, #1
  406da4:	69e2      	ldr	r2, [r4, #28]
  406da6:	f104 0128 	add.w	r1, r4, #40	; 0x28
  406daa:	7868      	ldrb	r0, [r5, #1]
  406dac:	4f15      	ldr	r7, [pc, #84]	; (406e04 <file_close+0x148>)
  406dae:	47b8      	blx	r7
  406db0:	b9d0      	cbnz	r0, 406de8 <file_close+0x12c>
				fp->flag &= (BYTE)~FA_DIRTY;
  406db2:	7c23      	ldrb	r3, [r4, #16]
  406db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  406db8:	7423      	strb	r3, [r4, #16]
  406dba:	e79c      	b.n	406cf6 <file_close+0x3a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  406dbc:	2301      	movs	r3, #1
  406dbe:	7868      	ldrb	r0, [r5, #1]
  406dc0:	4641      	mov	r1, r8
  406dc2:	4e10      	ldr	r6, [pc, #64]	; (406e04 <file_close+0x148>)
  406dc4:	47b0      	blx	r6
  406dc6:	b978      	cbnz	r0, 406de8 <file_close+0x12c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  406dc8:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  406dcc:	69ea      	ldr	r2, [r5, #28]
  406dce:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  406dd0:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  406dd2:	4293      	cmp	r3, r2
  406dd4:	d298      	bcs.n	406d08 <file_close+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  406dd6:	78ab      	ldrb	r3, [r5, #2]
  406dd8:	2b02      	cmp	r3, #2
  406dda:	d195      	bne.n	406d08 <file_close+0x4c>
  406ddc:	440a      	add	r2, r1
  406dde:	2301      	movs	r3, #1
  406de0:	4641      	mov	r1, r8
  406de2:	7868      	ldrb	r0, [r5, #1]
  406de4:	47b0      	blx	r6
  406de6:	e78f      	b.n	406d08 <file_close+0x4c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
  406de8:	2001      	movs	r0, #1
  406dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
  406dee:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
  406df0:	0a11      	lsrs	r1, r2, #8
  406df2:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
  406df4:	7559      	strb	r1, [r3, #21]
  406df6:	e7a3      	b.n	406d40 <file_close+0x84>
  406df8:	004078c5 	.word	0x004078c5
  406dfc:	4e6f0000 	.word	0x4e6f0000
  406e00:	00403a9d 	.word	0x00403a9d
  406e04:	004078e9 	.word	0x004078e9
  406e08:	00407879 	.word	0x00407879

00406e0c <file_opendir>:
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
  406e0c:	2800      	cmp	r0, #0
  406e0e:	d047      	beq.n	406ea0 <file_opendir+0x94>
{
  406e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e14:	460e      	mov	r6, r1
  406e16:	4604      	mov	r4, r0
	if (!tp) return vol;	/* Invalid path name? */
  406e18:	2900      	cmp	r1, #0
  406e1a:	d03c      	beq.n	406e96 <file_opendir+0x8a>
  406e1c:	460a      	mov	r2, r1
  406e1e:	e001      	b.n	406e24 <file_opendir+0x18>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
  406e20:	2b3a      	cmp	r3, #58	; 0x3a
  406e22:	d003      	beq.n	406e2c <file_opendir+0x20>
  406e24:	f812 3b01 	ldrb.w	r3, [r2], #1
  406e28:	2b1f      	cmp	r3, #31
  406e2a:	d8f9      	bhi.n	406e20 <file_opendir+0x14>
	if (tc == ':') {	/* DOS/Windows style volume ID? */
  406e2c:	2b3a      	cmp	r3, #58	; 0x3a
  406e2e:	d02f      	beq.n	406e90 <file_opendir+0x84>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
  406e30:	4fb2      	ldr	r7, [pc, #712]	; (4070fc <file_opendir+0x2f0>)
  406e32:	f8d7 5204 	ldr.w	r5, [r7, #516]	; 0x204
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
  406e36:	2d00      	cmp	r5, #0
  406e38:	d034      	beq.n	406ea4 <file_opendir+0x98>
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
  406e3a:	782b      	ldrb	r3, [r5, #0]
  406e3c:	2b00      	cmp	r3, #0
  406e3e:	d036      	beq.n	406eae <file_opendir+0xa2>
		stat = disk_status(fs->pdrv);
  406e40:	7868      	ldrb	r0, [r5, #1]
  406e42:	4baf      	ldr	r3, [pc, #700]	; (407100 <file_opendir+0x2f4>)
  406e44:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
  406e46:	07c2      	lsls	r2, r0, #31
  406e48:	d431      	bmi.n	406eae <file_opendir+0xa2>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
	if (res == FR_OK) {
		dp->obj.fs = fs;
  406e4a:	6025      	str	r5, [r4, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
  406e4c:	4631      	mov	r1, r6
  406e4e:	4620      	mov	r0, r4
  406e50:	4bac      	ldr	r3, [pc, #688]	; (407104 <file_opendir+0x2f8>)
  406e52:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  406e54:	2800      	cmp	r0, #0
  406e56:	d138      	bne.n	406eca <file_opendir+0xbe>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
  406e58:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
  406e5c:	2b00      	cmp	r3, #0
  406e5e:	db0c      	blt.n	406e7a <file_opendir+0x6e>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
  406e60:	79a3      	ldrb	r3, [r4, #6]
  406e62:	06db      	lsls	r3, r3, #27
  406e64:	d533      	bpl.n	406ece <file_opendir+0xc2>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
  406e66:	69e2      	ldr	r2, [r4, #28]
	if (fs->fs_type == FS_FAT32) {
  406e68:	7829      	ldrb	r1, [r5, #0]
	rv = rv << 8 | ptr[0];
  406e6a:	7ed0      	ldrb	r0, [r2, #27]
  406e6c:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
  406e6e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
  406e70:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
  406e74:	f000 812a 	beq.w	4070cc <file_opendir+0x2c0>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
  406e78:	60a3      	str	r3, [r4, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dp->obj.id = fs->id;
  406e7a:	88ea      	ldrh	r2, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
  406e7c:	2100      	movs	r1, #0
  406e7e:	4620      	mov	r0, r4
  406e80:	4ba1      	ldr	r3, [pc, #644]	; (407108 <file_opendir+0x2fc>)
				dp->obj.id = fs->id;
  406e82:	80a2      	strh	r2, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
  406e84:	4798      	blx	r3
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  406e86:	2804      	cmp	r0, #4
  406e88:	d021      	beq.n	406ece <file_opendir+0xc2>
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
  406e8a:	b928      	cbnz	r0, 406e98 <file_opendir+0x8c>

	LEAVE_FF(fs, res);
}
  406e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
  406e90:	1cb3      	adds	r3, r6, #2
  406e92:	429a      	cmp	r2, r3
  406e94:	d01d      	beq.n	406ed2 <file_opendir+0xc6>
	if (vol < 0) return FR_INVALID_DRIVE;
  406e96:	200b      	movs	r0, #11
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
  406e98:	2300      	movs	r3, #0
  406e9a:	6023      	str	r3, [r4, #0]
  406e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp) return FR_INVALID_OBJECT;
  406ea0:	2009      	movs	r0, #9
  406ea2:	4770      	bx	lr
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
  406ea4:	2300      	movs	r3, #0
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
  406ea6:	200c      	movs	r0, #12
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
  406ea8:	6023      	str	r3, [r4, #0]
  406eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the filesystem object */
  406eae:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  406eb0:	4a96      	ldr	r2, [pc, #600]	; (40710c <file_opendir+0x300>)
	fs->fs_type = 0;					/* Clear the filesystem object */
  406eb2:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  406eb4:	4618      	mov	r0, r3
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
  406eb6:	706b      	strb	r3, [r5, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  406eb8:	4790      	blx	r2
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
  406eba:	f010 0101 	ands.w	r1, r0, #1
  406ebe:	d00d      	beq.n	406edc <file_opendir+0xd0>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
  406ec0:	2300      	movs	r3, #0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
  406ec2:	2003      	movs	r0, #3
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
  406ec4:	6023      	str	r3, [r4, #0]
  406ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  406eca:	2804      	cmp	r0, #4
  406ecc:	d1e4      	bne.n	406e98 <file_opendir+0x8c>
					res = FR_NO_PATH;
  406ece:	2005      	movs	r0, #5
  406ed0:	e7e2      	b.n	406e98 <file_opendir+0x8c>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
  406ed2:	7833      	ldrb	r3, [r6, #0]
  406ed4:	2b30      	cmp	r3, #48	; 0x30
  406ed6:	d1de      	bne.n	406e96 <file_opendir+0x8a>
  406ed8:	4616      	mov	r6, r2
  406eda:	e7a9      	b.n	406e30 <file_opendir+0x24>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
  406edc:	4628      	mov	r0, r5
  406ede:	f8df 8234 	ldr.w	r8, [pc, #564]	; 407114 <file_opendir+0x308>
  406ee2:	47c0      	blx	r8
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
  406ee4:	2802      	cmp	r0, #2
  406ee6:	d005      	beq.n	406ef4 <file_opendir+0xe8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  406ee8:	2804      	cmp	r0, #4
  406eea:	d03e      	beq.n	406f6a <file_opendir+0x15e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
  406eec:	2801      	cmp	r0, #1
  406eee:	d942      	bls.n	406f76 <file_opendir+0x16a>
  406ef0:	200d      	movs	r0, #13
  406ef2:	e7d1      	b.n	406e98 <file_opendir+0x8c>
	rv = rv << 8 | ptr[2];
  406ef4:	f8b5 a21c 	ldrh.w	sl, [r5, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
  406ef8:	f895 321b 	ldrb.w	r3, [r5, #539]	; 0x21b
	rv = rv << 8 | ptr[2];
  406efc:	f8b5 e1fc 	ldrh.w	lr, [r5, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
  406f00:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
  406f04:	f895 11fb 	ldrb.w	r1, [r5, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
  406f08:	f895 a21a 	ldrb.w	sl, [r5, #538]	; 0x21a
	rv = rv << 8 | ptr[2];
  406f0c:	f8b5 b20c 	ldrh.w	fp, [r5, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
  406f10:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	rv = rv << 8 | ptr[2];
  406f14:	f8b5 922c 	ldrh.w	r9, [r5, #556]	; 0x22c
	rv = rv << 8 | ptr[0];
  406f18:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
	rv = rv << 8 | ptr[1];
  406f1c:	f895 020b 	ldrb.w	r0, [r5, #523]	; 0x20b
  406f20:	f895 222b 	ldrb.w	r2, [r5, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
  406f24:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
  406f28:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  406f2c:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
	rv = rv << 8 | ptr[0];
  406f30:	f895 b20a 	ldrb.w	fp, [r5, #522]	; 0x20a
  406f34:	f895 922a 	ldrb.w	r9, [r5, #554]	; 0x22a
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  406f38:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
  406f3c:	ea4b 2b00 	orr.w	fp, fp, r0, lsl #8
  406f40:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  406f44:	d113      	bne.n	406f6e <file_opendir+0x162>
  406f46:	f1bb 0f00 	cmp.w	fp, #0
  406f4a:	f040 80ae 	bne.w	4070aa <file_opendir+0x29e>
  406f4e:	f1ba 0f00 	cmp.w	sl, #0
  406f52:	f040 80b4 	bne.w	4070be <file_opendir+0x2b2>
  406f56:	f1b9 0f00 	cmp.w	r9, #0
  406f5a:	d0c9      	beq.n	406ef0 <file_opendir+0xe4>
  406f5c:	4649      	mov	r1, r9
  406f5e:	4628      	mov	r0, r5
  406f60:	47c0      	blx	r8
	} while (part == 0 && fmt >= 2 && ++i < 4);
  406f62:	2801      	cmp	r0, #1
  406f64:	d907      	bls.n	406f76 <file_opendir+0x16a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  406f66:	2804      	cmp	r0, #4
  406f68:	d1c2      	bne.n	406ef0 <file_opendir+0xe4>
  406f6a:	2001      	movs	r0, #1
  406f6c:	e794      	b.n	406e98 <file_opendir+0x8c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  406f6e:	4628      	mov	r0, r5
  406f70:	47c0      	blx	r8
	} while (part == 0 && fmt >= 2 && ++i < 4);
  406f72:	2801      	cmp	r0, #1
  406f74:	d8e7      	bhi.n	406f46 <file_opendir+0x13a>
	rv = rv << 8 | ptr[0];
  406f76:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
  406f7a:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
  406f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
  406f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406f86:	d1b3      	bne.n	406ef0 <file_opendir+0xe4>
	rv = rv << 8 | ptr[0];
  406f88:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
  406f8c:	f895 004a 	ldrb.w	r0, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
  406f90:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
  406f94:	d109      	bne.n	406faa <file_opendir+0x19e>
	rv = rv << 8 | ptr[2];
  406f96:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
  406f9a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
	rv = rv << 8 | ptr[0];
  406f9e:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
	rv = rv << 8 | ptr[1];
  406fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
  406fa6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
  406faa:	f895 8044 	ldrb.w	r8, [r5, #68]	; 0x44
		fs->fsize = fasize;
  406fae:	61e8      	str	r0, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
  406fb0:	f108 33ff 	add.w	r3, r8, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
  406fb4:	f885 8002 	strb.w	r8, [r5, #2]
	bsect = fs->winsect;					/* Volume location */
  406fb8:	6b29      	ldr	r1, [r5, #48]	; 0x30
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
  406fba:	2b01      	cmp	r3, #1
  406fbc:	d898      	bhi.n	406ef0 <file_opendir+0xe4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
  406fbe:	f895 9041 	ldrb.w	r9, [r5, #65]	; 0x41
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
  406fc2:	fb00 f808 	mul.w	r8, r0, r8
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
  406fc6:	fa1f f389 	uxth.w	r3, r9
  406fca:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  406fcc:	2b00      	cmp	r3, #0
  406fce:	d08f      	beq.n	406ef0 <file_opendir+0xe4>
  406fd0:	f109 33ff 	add.w	r3, r9, #4294967295
  406fd4:	ea13 0f09 	tst.w	r3, r9
  406fd8:	d18a      	bne.n	406ef0 <file_opendir+0xe4>
	rv = rv << 8 | ptr[0];
  406fda:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
  406fde:	f895 c045 	ldrb.w	ip, [r5, #69]	; 0x45
  406fe2:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
  406fe6:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
  406fea:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
  406fee:	f47f af7f 	bne.w	406ef0 <file_opendir+0xe4>
	rv = rv << 8 | ptr[0];
  406ff2:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
  406ff6:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
  406ffa:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  406ffe:	d109      	bne.n	407014 <file_opendir+0x208>
	rv = rv << 8 | ptr[2];
  407000:	f8b5 e056 	ldrh.w	lr, [r5, #86]	; 0x56
	rv = rv << 8 | ptr[1];
  407004:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
	rv = rv << 8 | ptr[0];
  407008:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
	rv = rv << 8 | ptr[1];
  40700c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	rv = rv << 8 | ptr[0];
  407010:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	rv = rv << 8 | ptr[0];
  407014:	f895 e043 	ldrb.w	lr, [r5, #67]	; 0x43
  407018:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
  40701c:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
  407020:	f43f af66 	beq.w	406ef0 <file_opendir+0xe4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
  407024:	eb02 1e1c 	add.w	lr, r2, ip, lsr #4
  407028:	44c6      	add	lr, r8
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
  40702a:	459e      	cmp	lr, r3
  40702c:	f63f af60 	bhi.w	406ef0 <file_opendir+0xe4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
  407030:	eba3 030e 	sub.w	r3, r3, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  407034:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 407118 <file_opendir+0x30c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
  407038:	fbb3 f3f9 	udiv	r3, r3, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40703c:	f103 39ff 	add.w	r9, r3, #4294967295
  407040:	45d1      	cmp	r9, sl
  407042:	f63f af55 	bhi.w	406ef0 <file_opendir+0xe4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
  407046:	f64f 79f5 	movw	r9, #65525	; 0xfff5
  40704a:	454b      	cmp	r3, r9
  40704c:	d866      	bhi.n	40711c <file_opendir+0x310>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
  40704e:	f640 79f5 	movw	r9, #4085	; 0xff5
  407052:	454b      	cmp	r3, r9
  407054:	d841      	bhi.n	4070da <file_opendir+0x2ce>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  407056:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  407058:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
  40705a:	448e      	add	lr, r1
		fs->volbase = bsect;							/* Volume start sector */
  40705c:	6229      	str	r1, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  40705e:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  407060:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
  407062:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  407066:	f1bc 0f00 	cmp.w	ip, #0
  40706a:	f43f af41 	beq.w	406ef0 <file_opendir+0xe4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  40706e:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
  407072:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  407076:	4442      	add	r2, r8
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  407078:	2101      	movs	r1, #1
  40707a:	eb03 035e 	add.w	r3, r3, lr, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  40707e:	62aa      	str	r2, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  407080:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  407084:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
  407088:	f4ff af32 	bcc.w	406ef0 <file_opendir+0xe4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  40708c:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
  407090:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  407092:	616b      	str	r3, [r5, #20]
  407094:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
  407096:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* Volume mount ID */
  407098:	883b      	ldrh	r3, [r7, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
  40709a:	4a1d      	ldr	r2, [pc, #116]	; (407110 <file_opendir+0x304>)
	fs->id = ++Fsid;		/* Volume mount ID */
  40709c:	3301      	adds	r3, #1
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
  40709e:	7029      	strb	r1, [r5, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
  4070a0:	60ea      	str	r2, [r5, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
  4070a2:	b29b      	uxth	r3, r3
  4070a4:	803b      	strh	r3, [r7, #0]
  4070a6:	80eb      	strh	r3, [r5, #6]
  4070a8:	e6cf      	b.n	406e4a <file_opendir+0x3e>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4070aa:	4659      	mov	r1, fp
  4070ac:	4628      	mov	r0, r5
  4070ae:	47c0      	blx	r8
	} while (part == 0 && fmt >= 2 && ++i < 4);
  4070b0:	2801      	cmp	r0, #1
  4070b2:	f67f af60 	bls.w	406f76 <file_opendir+0x16a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4070b6:	f1ba 0f00 	cmp.w	sl, #0
  4070ba:	f43f af4c 	beq.w	406f56 <file_opendir+0x14a>
  4070be:	4651      	mov	r1, sl
  4070c0:	4628      	mov	r0, r5
  4070c2:	47c0      	blx	r8
	} while (part == 0 && fmt >= 2 && ++i < 4);
  4070c4:	2801      	cmp	r0, #1
  4070c6:	f63f af46 	bhi.w	406f56 <file_opendir+0x14a>
  4070ca:	e754      	b.n	406f76 <file_opendir+0x16a>
	rv = rv << 8 | ptr[0];
  4070cc:	7d51      	ldrb	r1, [r2, #21]
  4070ce:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
  4070d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4070d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4070d8:	e6ce      	b.n	406e78 <file_opendir+0x6c>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  4070da:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  4070dc:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
  4070de:	448e      	add	lr, r1
		fs->volbase = bsect;							/* Volume start sector */
  4070e0:	6229      	str	r1, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  4070e2:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  4070e4:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
  4070e6:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4070ea:	f1bc 0f00 	cmp.w	ip, #0
  4070ee:	f43f aeff 	beq.w	406ef0 <file_opendir+0xe4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  4070f2:	4442      	add	r2, r8
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4070f4:	005b      	lsls	r3, r3, #1
  4070f6:	2102      	movs	r1, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  4070f8:	62aa      	str	r2, [r5, #40]	; 0x28
  4070fa:	e7c1      	b.n	407080 <file_opendir+0x274>
  4070fc:	204021ec 	.word	0x204021ec
  407100:	00407879 	.word	0x00407879
  407104:	00405745 	.word	0x00405745
  407108:	004050f9 	.word	0x004050f9
  40710c:	0040789d 	.word	0x0040789d
  407110:	204021f0 	.word	0x204021f0
  407114:	00403b91 	.word	0x00403b91
  407118:	0ffffff4 	.word	0x0ffffff4
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  40711c:	440a      	add	r2, r1
	rv = rv << 8 | ptr[0];
  40711e:	f895 805f 	ldrb.w	r8, [r5, #95]	; 0x5f
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  407122:	3302      	adds	r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
  407124:	448e      	add	lr, r1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  407126:	626a      	str	r2, [r5, #36]	; 0x24
	rv = rv << 8 | ptr[0];
  407128:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  40712c:	61ab      	str	r3, [r5, #24]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
  40712e:	ea52 2208 	orrs.w	r2, r2, r8, lsl #8
		fs->database = bsect + sysect;					/* Data start sector */
  407132:	f8c5 e02c 	str.w	lr, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
  407136:	6229      	str	r1, [r5, #32]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
  407138:	f47f aeda 	bne.w	406ef0 <file_opendir+0xe4>
  40713c:	f1bc 0f00 	cmp.w	ip, #0
  407140:	f47f aed6 	bne.w	406ef0 <file_opendir+0xe4>
	rv = rv << 8 | ptr[2];
  407144:	f8b5 c062 	ldrh.w	ip, [r5, #98]	; 0x62
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
  407148:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[1];
  40714a:	f895 e061 	ldrb.w	lr, [r5, #97]	; 0x61
	rv = rv << 8 | ptr[0];
  40714e:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  407152:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
  407156:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  40715a:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
	rv = rv << 8 | ptr[0];
  40715e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
  407162:	62aa      	str	r2, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  407164:	f4ff aec4 	bcc.w	406ef0 <file_opendir+0xe4>
	rv = rv << 8 | ptr[0];
  407168:	f895 e065 	ldrb.w	lr, [r5, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  40716c:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
  407170:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		fs->fsi_flag = 0x80;
  407174:	2080      	movs	r0, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  407176:	616a      	str	r2, [r5, #20]
	rv = rv << 8 | ptr[0];
  407178:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  40717c:	612a      	str	r2, [r5, #16]
		fs->fsi_flag = 0x80;
  40717e:	7128      	strb	r0, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
  407180:	2b01      	cmp	r3, #1
  407182:	d001      	beq.n	407188 <file_opendir+0x37c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  407184:	2103      	movs	r1, #3
  407186:	e787      	b.n	407098 <file_opendir+0x28c>
			&& move_window(fs, bsect + 1) == FR_OK)
  407188:	3101      	adds	r1, #1
  40718a:	4628      	mov	r0, r5
  40718c:	4b1f      	ldr	r3, [pc, #124]	; (40720c <file_opendir+0x400>)
  40718e:	4798      	blx	r3
  407190:	2800      	cmp	r0, #0
  407192:	d1f7      	bne.n	407184 <file_opendir+0x378>
	rv = rv << 8 | ptr[0];
  407194:	f895 1233 	ldrb.w	r1, [r5, #563]	; 0x233
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
  407198:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
  40719c:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
  4071a0:	7128      	strb	r0, [r5, #4]
	rv = rv << 8 | ptr[0];
  4071a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
  4071a6:	4293      	cmp	r3, r2
  4071a8:	d1ec      	bne.n	407184 <file_opendir+0x378>
	rv = rv << 8 | ptr[2];
  4071aa:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
	rv = rv << 8 | ptr[1];
  4071ac:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
	rv = rv << 8 | ptr[0];
  4071b0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	rv = rv << 8 | ptr[1];
  4071b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
  4071b8:	4915      	ldr	r1, [pc, #84]	; (407210 <file_opendir+0x404>)
	rv = rv << 8 | ptr[0];
  4071ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
  4071be:	428b      	cmp	r3, r1
  4071c0:	d1e0      	bne.n	407184 <file_opendir+0x378>
	rv = rv << 8 | ptr[2];
  4071c2:	f8b5 121a 	ldrh.w	r1, [r5, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
  4071c6:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
	rv = rv << 8 | ptr[0];
  4071ca:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
	rv = rv << 8 | ptr[1];
  4071ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  4071d2:	4910      	ldr	r1, [pc, #64]	; (407214 <file_opendir+0x408>)
	rv = rv << 8 | ptr[0];
  4071d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  4071d8:	428b      	cmp	r3, r1
  4071da:	d1d3      	bne.n	407184 <file_opendir+0x378>
	rv = rv << 8 | ptr[1];
  4071dc:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
  4071e0:	2103      	movs	r1, #3
	rv = rv << 8 | ptr[1];
  4071e2:	f895 3221 	ldrb.w	r3, [r5, #545]	; 0x221
	rv = rv << 8 | ptr[2];
  4071e6:	f8b5 e21e 	ldrh.w	lr, [r5, #542]	; 0x21e
  4071ea:	f8b5 0222 	ldrh.w	r0, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
  4071ee:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
	rv = rv << 8 | ptr[0];
  4071f2:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
  4071f6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
  4071fa:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
  4071fe:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
  407202:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
  407206:	616a      	str	r2, [r5, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
  407208:	612b      	str	r3, [r5, #16]
  40720a:	e745      	b.n	407098 <file_opendir+0x28c>
  40720c:	00403a31 	.word	0x00403a31
  407210:	41615252 	.word	0x41615252
  407214:	61417272 	.word	0x61417272

00407218 <file_readdir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  407218:	b118      	cbz	r0, 407222 <file_readdir+0xa>
  40721a:	6803      	ldr	r3, [r0, #0]
  40721c:	b10b      	cbz	r3, 407222 <file_readdir+0xa>
  40721e:	781a      	ldrb	r2, [r3, #0]
  407220:	b90a      	cbnz	r2, 407226 <file_readdir+0xe>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  407222:	2009      	movs	r0, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
  407224:	4770      	bx	lr
{
  407226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
  40722a:	88da      	ldrh	r2, [r3, #6]
  40722c:	8884      	ldrh	r4, [r0, #4]
  40722e:	4294      	cmp	r4, r2
  407230:	d002      	beq.n	407238 <file_readdir+0x20>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  407232:	2009      	movs	r0, #9
  407234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407238:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
  40723a:	7858      	ldrb	r0, [r3, #1]
  40723c:	4b2c      	ldr	r3, [pc, #176]	; (4072f0 <file_readdir+0xd8>)
  40723e:	460d      	mov	r5, r1
  407240:	4798      	blx	r3
  407242:	f010 0101 	ands.w	r1, r0, #1
  407246:	d1f4      	bne.n	407232 <file_readdir+0x1a>
		if (!fno) {
  407248:	b31d      	cbz	r5, 407292 <file_readdir+0x7a>
			res = DIR_READ_FILE(dp);		/* Read an item */
  40724a:	4620      	mov	r0, r4
  40724c:	4b29      	ldr	r3, [pc, #164]	; (4072f4 <file_readdir+0xdc>)
  40724e:	4798      	blx	r3
			if (res == FR_OK) {				/* A valid entry is found */
  407250:	f010 0ffb 	tst.w	r0, #251	; 0xfb
  407254:	d001      	beq.n	40725a <file_readdir+0x42>
}
  407256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				get_fileinfo(dp, fno);		/* Get the object information */
  40725a:	4629      	mov	r1, r5
  40725c:	4620      	mov	r0, r4
  40725e:	4b26      	ldr	r3, [pc, #152]	; (4072f8 <file_readdir+0xe0>)
  407260:	4798      	blx	r3
	ofs = dp->dptr + SZDIRE;	/* Next entry */
  407262:	6925      	ldr	r5, [r4, #16]
  407264:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  407266:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
  40726a:	d20e      	bcs.n	40728a <file_readdir+0x72>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  40726c:	69a0      	ldr	r0, [r4, #24]
  40726e:	2800      	cmp	r0, #0
  407270:	d0f1      	beq.n	407256 <file_readdir+0x3e>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  407272:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
  407276:	6826      	ldr	r6, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  407278:	bb57      	cbnz	r7, 4072d0 <file_readdir+0xb8>
		dp->sect++;				/* Next sector */
  40727a:	3001      	adds	r0, #1
		if (dp->clust == 0) {	/* Static table */
  40727c:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
  40727e:	61a0      	str	r0, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
  407280:	b969      	cbnz	r1, 40729e <file_readdir+0x86>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
  407282:	8933      	ldrh	r3, [r6, #8]
  407284:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
  407288:	d822      	bhi.n	4072d0 <file_readdir+0xb8>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  40728a:	2000      	movs	r0, #0
  40728c:	61a0      	str	r0, [r4, #24]
  40728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
  407292:	4629      	mov	r1, r5
  407294:	4620      	mov	r0, r4
  407296:	4b19      	ldr	r3, [pc, #100]	; (4072fc <file_readdir+0xe4>)
}
  407298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
  40729c:	4718      	bx	r3
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
  40729e:	8973      	ldrh	r3, [r6, #10]
  4072a0:	3b01      	subs	r3, #1
  4072a2:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
  4072a6:	d113      	bne.n	4072d0 <file_readdir+0xb8>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
  4072a8:	4630      	mov	r0, r6
  4072aa:	4b15      	ldr	r3, [pc, #84]	; (407300 <file_readdir+0xe8>)
  4072ac:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  4072ae:	2801      	cmp	r0, #1
  4072b0:	d915      	bls.n	4072de <file_readdir+0xc6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4072b2:	1c43      	adds	r3, r0, #1
  4072b4:	d018      	beq.n	4072e8 <file_readdir+0xd0>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
  4072b6:	69b3      	ldr	r3, [r6, #24]
  4072b8:	4298      	cmp	r0, r3
  4072ba:	d2e6      	bcs.n	40728a <file_readdir+0x72>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4072bc:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
  4072be:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
  4072c0:	6160      	str	r0, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4072c2:	429a      	cmp	r2, r3
  4072c4:	d20e      	bcs.n	4072e4 <file_readdir+0xcc>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  4072c6:	8973      	ldrh	r3, [r6, #10]
  4072c8:	6af1      	ldr	r1, [r6, #44]	; 0x2c
  4072ca:	fb02 1303 	mla	r3, r2, r3, r1
				dp->sect = clst2sect(fs, clst);
  4072ce:	61a3      	str	r3, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  4072d0:	3634      	adds	r6, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
  4072d2:	6125      	str	r5, [r4, #16]
	return FR_OK;
  4072d4:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  4072d6:	443e      	add	r6, r7
  4072d8:	61e6      	str	r6, [r4, #28]
  4072da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  4072de:	2002      	movs	r0, #2
  4072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  4072e4:	4643      	mov	r3, r8
  4072e6:	e7f2      	b.n	4072ce <file_readdir+0xb6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4072e8:	2001      	movs	r0, #1
	LEAVE_FF(fs, res);
  4072ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4072ee:	bf00      	nop
  4072f0:	00407879 	.word	0x00407879
  4072f4:	00404c0d 	.word	0x00404c0d
  4072f8:	004036c1 	.word	0x004036c1
  4072fc:	004050f9 	.word	0x004050f9
  407300:	00404551 	.word	0x00404551

00407304 <file_unlink>:
	if (!tp) return vol;	/* Invalid path name? */
  407304:	2800      	cmp	r0, #0
  407306:	f000 821b 	beq.w	407740 <file_unlink+0x43c>
  40730a:	4602      	mov	r2, r0
/*-----------------------------------------------------------------------*/

FRESULT file_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
  40730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407310:	4605      	mov	r5, r0
  407312:	b09d      	sub	sp, #116	; 0x74
  407314:	e001      	b.n	40731a <file_unlink+0x16>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
  407316:	2b3a      	cmp	r3, #58	; 0x3a
  407318:	d003      	beq.n	407322 <file_unlink+0x1e>
  40731a:	f812 3b01 	ldrb.w	r3, [r2], #1
  40731e:	2b1f      	cmp	r3, #31
  407320:	d8f9      	bhi.n	407316 <file_unlink+0x12>
	if (tc == ':') {	/* DOS/Windows style volume ID? */
  407322:	2b3a      	cmp	r3, #58	; 0x3a
  407324:	d01b      	beq.n	40735e <file_unlink+0x5a>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
  407326:	4eb7      	ldr	r6, [pc, #732]	; (407604 <file_unlink+0x300>)
  407328:	f8d6 4204 	ldr.w	r4, [r6, #516]	; 0x204
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
  40732c:	b1fc      	cbz	r4, 40736e <file_unlink+0x6a>
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
  40732e:	7823      	ldrb	r3, [r4, #0]
  407330:	b95b      	cbnz	r3, 40734a <file_unlink+0x46>
	fs->fs_type = 0;					/* Clear the filesystem object */
  407332:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  407334:	4ab4      	ldr	r2, [pc, #720]	; (407608 <file_unlink+0x304>)
	fs->fs_type = 0;					/* Clear the filesystem object */
  407336:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  407338:	4618      	mov	r0, r3
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
  40733a:	7063      	strb	r3, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
  40733c:	4790      	blx	r2
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
  40733e:	07c7      	lsls	r7, r0, #31
  407340:	d519      	bpl.n	407376 <file_unlink+0x72>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
  407342:	2003      	movs	r0, #3
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
  407344:	b01d      	add	sp, #116	; 0x74
  407346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stat = disk_status(fs->pdrv);
  40734a:	7860      	ldrb	r0, [r4, #1]
  40734c:	4baf      	ldr	r3, [pc, #700]	; (40760c <file_unlink+0x308>)
  40734e:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
  407350:	07c2      	lsls	r2, r0, #31
  407352:	d4ee      	bmi.n	407332 <file_unlink+0x2e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
  407354:	0743      	lsls	r3, r0, #29
  407356:	f140 80ec 	bpl.w	407532 <file_unlink+0x22e>
				return FR_WRITE_PROTECTED;
  40735a:	200a      	movs	r0, #10
  40735c:	e7f2      	b.n	407344 <file_unlink+0x40>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
  40735e:	1cab      	adds	r3, r5, #2
  407360:	429a      	cmp	r2, r3
  407362:	f000 81d8 	beq.w	407716 <file_unlink+0x412>
	if (vol < 0) return FR_INVALID_DRIVE;
  407366:	200b      	movs	r0, #11
}
  407368:	b01d      	add	sp, #116	; 0x74
  40736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
  40736e:	200c      	movs	r0, #12
}
  407370:	b01d      	add	sp, #116	; 0x74
  407372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
  407376:	f010 0104 	ands.w	r1, r0, #4
  40737a:	d1ee      	bne.n	40735a <file_unlink+0x56>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
  40737c:	4620      	mov	r0, r4
  40737e:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 407620 <file_unlink+0x31c>
  407382:	47c8      	blx	r9
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
  407384:	2802      	cmp	r0, #2
  407386:	f040 818d 	bne.w	4076a4 <file_unlink+0x3a0>
	rv = rv << 8 | ptr[2];
  40738a:	f8b4 821c 	ldrh.w	r8, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
  40738e:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[2];
  407392:	f8b4 722c 	ldrh.w	r7, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
  407396:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
  40739a:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[2];
  40739e:	f8b4 e1fc 	ldrh.w	lr, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
  4073a2:	f894 31fb 	ldrb.w	r3, [r4, #507]	; 0x1fb
  4073a6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
	rv = rv << 8 | ptr[0];
  4073aa:	f894 821a 	ldrb.w	r8, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[2];
  4073ae:	f8b4 a20c 	ldrh.w	sl, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
  4073b2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  4073b6:	f894 020b 	ldrb.w	r0, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
  4073ba:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
  4073be:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
  4073c2:	f894 21fa 	ldrb.w	r2, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
  4073c6:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
	rv = rv << 8 | ptr[0];
  4073ca:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
  4073ce:	f894 a20a 	ldrb.w	sl, [r4, #522]	; 0x20a
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4073d2:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
	rv = rv << 8 | ptr[0];
  4073d6:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4073da:	d003      	beq.n	4073e4 <file_unlink+0xe0>
  4073dc:	4620      	mov	r0, r4
  4073de:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
  4073e0:	2801      	cmp	r0, #1
  4073e2:	d909      	bls.n	4073f8 <file_unlink+0xf4>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4073e4:	f1ba 0f00 	cmp.w	sl, #0
  4073e8:	f000 8163 	beq.w	4076b2 <file_unlink+0x3ae>
  4073ec:	4651      	mov	r1, sl
  4073ee:	4620      	mov	r0, r4
  4073f0:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
  4073f2:	2801      	cmp	r0, #1
  4073f4:	f200 815d 	bhi.w	4076b2 <file_unlink+0x3ae>
	rv = rv << 8 | ptr[0];
  4073f8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  4073fc:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  407400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
  407404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407408:	f040 8151 	bne.w	4076ae <file_unlink+0x3aa>
	rv = rv << 8 | ptr[0];
  40740c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
  407410:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
  407414:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  407418:	d109      	bne.n	40742e <file_unlink+0x12a>
	rv = rv << 8 | ptr[2];
  40741a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
  40741e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
  407422:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
  407426:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
  40742a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
  40742e:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
		fs->fsize = fasize;
  407432:	61e2      	str	r2, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
  407434:	f10c 33ff 	add.w	r3, ip, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
  407438:	f884 c002 	strb.w	ip, [r4, #2]
	bsect = fs->winsect;					/* Volume location */
  40743c:	6b21      	ldr	r1, [r4, #48]	; 0x30
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
  40743e:	2b01      	cmp	r3, #1
  407440:	f200 8135 	bhi.w	4076ae <file_unlink+0x3aa>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
  407444:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
  407448:	fb02 fc0c 	mul.w	ip, r2, ip
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
  40744c:	fa1f f388 	uxth.w	r3, r8
  407450:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  407452:	2b00      	cmp	r3, #0
  407454:	f000 812b 	beq.w	4076ae <file_unlink+0x3aa>
  407458:	f108 33ff 	add.w	r3, r8, #4294967295
  40745c:	ea13 0f08 	tst.w	r3, r8
  407460:	f040 8125 	bne.w	4076ae <file_unlink+0x3aa>
	rv = rv << 8 | ptr[0];
  407464:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  407468:	f894 e045 	ldrb.w	lr, [r4, #69]	; 0x45
  40746c:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
  407470:	f01e 0f0f 	tst.w	lr, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
  407474:	f8a4 e008 	strh.w	lr, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
  407478:	f040 8119 	bne.w	4076ae <file_unlink+0x3aa>
	rv = rv << 8 | ptr[0];
  40747c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
  407480:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
  407484:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  407488:	d109      	bne.n	40749e <file_unlink+0x19a>
	rv = rv << 8 | ptr[2];
  40748a:	f8b4 7056 	ldrh.w	r7, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
  40748e:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
  407492:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
  407496:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	rv = rv << 8 | ptr[0];
  40749a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
  40749e:	f894 7043 	ldrb.w	r7, [r4, #67]	; 0x43
  4074a2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
  4074a6:	ea50 2007 	orrs.w	r0, r0, r7, lsl #8
  4074aa:	f000 8100 	beq.w	4076ae <file_unlink+0x3aa>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
  4074ae:	eb00 171e 	add.w	r7, r0, lr, lsr #4
  4074b2:	4467      	add	r7, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
  4074b4:	429f      	cmp	r7, r3
  4074b6:	f200 80fa 	bhi.w	4076ae <file_unlink+0x3aa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
  4074ba:	1bdb      	subs	r3, r3, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4074bc:	f8df 9164 	ldr.w	r9, [pc, #356]	; 407624 <file_unlink+0x320>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
  4074c0:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  4074c4:	f103 38ff 	add.w	r8, r3, #4294967295
  4074c8:	45c8      	cmp	r8, r9
  4074ca:	f200 80f0 	bhi.w	4076ae <file_unlink+0x3aa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
  4074ce:	f64f 78f5 	movw	r8, #65525	; 0xfff5
  4074d2:	4543      	cmp	r3, r8
  4074d4:	f200 8149 	bhi.w	40776a <file_unlink+0x466>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
  4074d8:	f640 78f5 	movw	r8, #4085	; 0xff5
  4074dc:	4543      	cmp	r3, r8
  4074de:	f200 8135 	bhi.w	40774c <file_unlink+0x448>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  4074e2:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  4074e4:	4408      	add	r0, r1
		fs->database = bsect + sysect;					/* Data start sector */
  4074e6:	440f      	add	r7, r1
		fs->volbase = bsect;							/* Volume start sector */
  4074e8:	6221      	str	r1, [r4, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  4074ea:	61a3      	str	r3, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  4074ec:	6260      	str	r0, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
  4074ee:	62e7      	str	r7, [r4, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4074f0:	f1be 0f00 	cmp.w	lr, #0
  4074f4:	f000 80db 	beq.w	4076ae <file_unlink+0x3aa>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  4074f8:	eb03 0743 	add.w	r7, r3, r3, lsl #1
  4074fc:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  407500:	4460      	add	r0, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  407502:	2101      	movs	r1, #1
  407504:	eb03 0357 	add.w	r3, r3, r7, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  407508:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  40750a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40750e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  407512:	f0c0 80cc 	bcc.w	4076ae <file_unlink+0x3aa>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  407516:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
  40751a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  40751c:	6163      	str	r3, [r4, #20]
  40751e:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
  407520:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* Volume mount ID */
  407522:	8833      	ldrh	r3, [r6, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
  407524:	4a3a      	ldr	r2, [pc, #232]	; (407610 <file_unlink+0x30c>)
	fs->id = ++Fsid;		/* Volume mount ID */
  407526:	3301      	adds	r3, #1
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
  407528:	7021      	strb	r1, [r4, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
  40752a:	60e2      	str	r2, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
  40752c:	b29b      	uxth	r3, r3
  40752e:	8033      	strh	r3, [r6, #0]
  407530:	80e3      	strh	r3, [r4, #6]
		dj.obj.fs = fs;
  407532:	f10d 0970 	add.w	r9, sp, #112	; 0x70
		res = follow_path(&dj, path);		/* Follow the file path */
  407536:	4629      	mov	r1, r5
  407538:	4b36      	ldr	r3, [pc, #216]	; (407614 <file_unlink+0x310>)
		dj.obj.fs = fs;
  40753a:	f849 4d60 	str.w	r4, [r9, #-96]!
		res = follow_path(&dj, path);		/* Follow the file path */
  40753e:	4648      	mov	r0, r9
  407540:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
  407542:	2800      	cmp	r0, #0
  407544:	f47f aefe 	bne.w	407344 <file_unlink+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {
  407548:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
  40754c:	2b00      	cmp	r3, #0
  40754e:	f2c0 80a7 	blt.w	4076a0 <file_unlink+0x39c>
				if (dj.obj.attr & AM_RDO) {
  407552:	f89d 3016 	ldrb.w	r3, [sp, #22]
  407556:	07d8      	lsls	r0, r3, #31
  407558:	d501      	bpl.n	40755e <file_unlink+0x25a>
					res = FR_DENIED;		/* Cannot remove R/O object */
  40755a:	2007      	movs	r0, #7
  40755c:	e6f2      	b.n	407344 <file_unlink+0x40>
					dclst = ld_clust(fs, dj.dir);
  40755e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
  407560:	7821      	ldrb	r1, [r4, #0]
	rv = rv << 8 | ptr[0];
  407562:	7ed5      	ldrb	r5, [r2, #27]
  407564:	7e90      	ldrb	r0, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
  407566:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
  407568:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  40756c:	9000      	str	r0, [sp, #0]
	if (fs->fs_type == FS_FAT32) {
  40756e:	f000 80c9 	beq.w	407704 <file_unlink+0x400>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
  407572:	06d9      	lsls	r1, r3, #27
  407574:	f100 80b1 	bmi.w	4076da <file_unlink+0x3d6>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
  407578:	990f      	ldr	r1, [sp, #60]	; 0x3c
	FATFS *fs = dp->obj.fs;
  40757a:	9e04      	ldr	r6, [sp, #16]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
  40757c:	1c4b      	adds	r3, r1, #1
	DWORD last = dp->dptr;
  40757e:	f8dd a020 	ldr.w	sl, [sp, #32]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
  407582:	d005      	beq.n	407590 <file_unlink+0x28c>
  407584:	4648      	mov	r0, r9
  407586:	4b24      	ldr	r3, [pc, #144]	; (407618 <file_unlink+0x314>)
  407588:	4798      	blx	r3
	if (res == FR_OK) {
  40758a:	2800      	cmp	r0, #0
  40758c:	f47f aeda 	bne.w	407344 <file_unlink+0x40>
  407590:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  407594:	9401      	str	r4, [sp, #4]
  407596:	f8df b090 	ldr.w	fp, [pc, #144]	; 407628 <file_unlink+0x324>
  40759a:	4644      	mov	r4, r8
	if (sect != fs->winsect) {	/* Window offset changed? */
  40759c:	6b32      	ldr	r2, [r6, #48]	; 0x30
  40759e:	4294      	cmp	r4, r2
  4075a0:	d011      	beq.n	4075c6 <file_unlink+0x2c2>
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4075a2:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  4075a4:	f106 0534 	add.w	r5, r6, #52	; 0x34
	if (fs->wflag) {	/* Is the disk access window dirty? */
  4075a8:	2b00      	cmp	r3, #0
  4075aa:	d162      	bne.n	407672 <file_unlink+0x36e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
  4075ac:	4629      	mov	r1, r5
  4075ae:	2301      	movs	r3, #1
  4075b0:	4622      	mov	r2, r4
  4075b2:	7870      	ldrb	r0, [r6, #1]
  4075b4:	4d19      	ldr	r5, [pc, #100]	; (40761c <file_unlink+0x318>)
  4075b6:	47a8      	blx	r5
  4075b8:	b120      	cbz	r0, 4075c4 <file_unlink+0x2c0>
			fs->winsect = sect;
  4075ba:	f04f 33ff 	mov.w	r3, #4294967295
  4075be:	6333      	str	r3, [r6, #48]	; 0x30
	if (vol < 0) return FR_INVALID_DRIVE;
  4075c0:	2001      	movs	r0, #1
  4075c2:	e6bf      	b.n	407344 <file_unlink+0x40>
			fs->winsect = sect;
  4075c4:	6334      	str	r4, [r6, #48]	; 0x30
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
  4075c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4075c8:	22e5      	movs	r2, #229	; 0xe5
			fs->wflag = 1;
  4075ca:	2501      	movs	r5, #1
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
  4075cc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
  4075ce:	70f5      	strb	r5, [r6, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
  4075d0:	9f08      	ldr	r7, [sp, #32]
  4075d2:	45ba      	cmp	sl, r7
  4075d4:	f240 80a5 	bls.w	407722 <file_unlink+0x41e>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
  4075d8:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
  4075da:	455f      	cmp	r7, fp
  4075dc:	d80e      	bhi.n	4075fc <file_unlink+0x2f8>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
  4075de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4075e0:	b164      	cbz	r4, 4075fc <file_unlink+0x2f8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  4075e2:	f3c7 0208 	ubfx	r2, r7, #0, #9
	FATFS *fs = dp->obj.fs;
  4075e6:	9b04      	ldr	r3, [sp, #16]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
  4075e8:	2a00      	cmp	r2, #0
  4075ea:	d13d      	bne.n	407668 <file_unlink+0x364>
		dp->sect++;				/* Next sector */
  4075ec:	442c      	add	r4, r5
		if (dp->clust == 0) {	/* Static table */
  4075ee:	9909      	ldr	r1, [sp, #36]	; 0x24
		dp->sect++;				/* Next sector */
  4075f0:	940a      	str	r4, [sp, #40]	; 0x28
		if (dp->clust == 0) {	/* Static table */
  4075f2:	b9d9      	cbnz	r1, 40762c <file_unlink+0x328>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
  4075f4:	8919      	ldrh	r1, [r3, #8]
  4075f6:	ebb1 1f57 	cmp.w	r1, r7, lsr #5
  4075fa:	d835      	bhi.n	407668 <file_unlink+0x364>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  4075fc:	2002      	movs	r0, #2
}
  4075fe:	b01d      	add	sp, #116	; 0x74
  407600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407604:	204021ec 	.word	0x204021ec
  407608:	0040789d 	.word	0x0040789d
  40760c:	00407879 	.word	0x00407879
  407610:	204021f0 	.word	0x204021f0
  407614:	00405745 	.word	0x00405745
  407618:	004050f9 	.word	0x004050f9
  40761c:	004078c5 	.word	0x004078c5
  407620:	00403b91 	.word	0x00403b91
  407624:	0ffffff4 	.word	0x0ffffff4
  407628:	001fffff 	.word	0x001fffff
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
  40762c:	8958      	ldrh	r0, [r3, #10]
  40762e:	3801      	subs	r0, #1
  407630:	ea10 2057 	ands.w	r0, r0, r7, lsr #9
  407634:	d118      	bne.n	407668 <file_unlink+0x364>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
  407636:	4618      	mov	r0, r3
  407638:	4c86      	ldr	r4, [pc, #536]	; (407854 <file_unlink+0x550>)
  40763a:	9203      	str	r2, [sp, #12]
  40763c:	9302      	str	r3, [sp, #8]
  40763e:	47a0      	blx	r4
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
  407640:	2801      	cmp	r0, #1
  407642:	d9db      	bls.n	4075fc <file_unlink+0x2f8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  407644:	1c42      	adds	r2, r0, #1
  407646:	d07f      	beq.n	407748 <file_unlink+0x444>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
  407648:	9b02      	ldr	r3, [sp, #8]
  40764a:	6999      	ldr	r1, [r3, #24]
  40764c:	4288      	cmp	r0, r1
  40764e:	d2d5      	bcs.n	4075fc <file_unlink+0x2f8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  407650:	3902      	subs	r1, #2
	clst -= 2;		/* Cluster number is origin from 2 */
  407652:	1e85      	subs	r5, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
  407654:	9009      	str	r0, [sp, #36]	; 0x24
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  407656:	428d      	cmp	r5, r1
  407658:	9a03      	ldr	r2, [sp, #12]
  40765a:	d273      	bcs.n	407744 <file_unlink+0x440>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
  40765c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
  407660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  407662:	fb05 1408 	mla	r4, r5, r8, r1
				dp->sect = clst2sect(fs, clst);
  407666:	940a      	str	r4, [sp, #40]	; 0x28
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  407668:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
  40766a:	9708      	str	r7, [sp, #32]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
  40766c:	4413      	add	r3, r2
  40766e:	930b      	str	r3, [sp, #44]	; 0x2c
  407670:	e794      	b.n	40759c <file_unlink+0x298>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
  407672:	2301      	movs	r3, #1
  407674:	7870      	ldrb	r0, [r6, #1]
  407676:	4629      	mov	r1, r5
  407678:	4f77      	ldr	r7, [pc, #476]	; (407858 <file_unlink+0x554>)
  40767a:	47b8      	blx	r7
  40767c:	2800      	cmp	r0, #0
  40767e:	d19f      	bne.n	4075c0 <file_unlink+0x2bc>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  407680:	6b31      	ldr	r1, [r6, #48]	; 0x30
  407682:	6a73      	ldr	r3, [r6, #36]	; 0x24
  407684:	69f2      	ldr	r2, [r6, #28]
  407686:	1acb      	subs	r3, r1, r3
			fs->wflag = 0;	/* Clear window dirty flag */
  407688:	70f0      	strb	r0, [r6, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
  40768a:	4293      	cmp	r3, r2
  40768c:	d28e      	bcs.n	4075ac <file_unlink+0x2a8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
  40768e:	78b3      	ldrb	r3, [r6, #2]
  407690:	2b02      	cmp	r3, #2
  407692:	d18b      	bne.n	4075ac <file_unlink+0x2a8>
  407694:	440a      	add	r2, r1
  407696:	2301      	movs	r3, #1
  407698:	4629      	mov	r1, r5
  40769a:	7870      	ldrb	r0, [r6, #1]
  40769c:	47b8      	blx	r7
  40769e:	e785      	b.n	4075ac <file_unlink+0x2a8>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
  4076a0:	2006      	movs	r0, #6
  4076a2:	e64f      	b.n	407344 <file_unlink+0x40>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  4076a4:	2804      	cmp	r0, #4
  4076a6:	d08b      	beq.n	4075c0 <file_unlink+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
  4076a8:	2801      	cmp	r0, #1
  4076aa:	f67f aea5 	bls.w	4073f8 <file_unlink+0xf4>
  4076ae:	200d      	movs	r0, #13
  4076b0:	e648      	b.n	407344 <file_unlink+0x40>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4076b2:	f1b8 0f00 	cmp.w	r8, #0
  4076b6:	d10a      	bne.n	4076ce <file_unlink+0x3ca>
  4076b8:	2f00      	cmp	r7, #0
  4076ba:	d0f8      	beq.n	4076ae <file_unlink+0x3aa>
  4076bc:	4639      	mov	r1, r7
  4076be:	4620      	mov	r0, r4
  4076c0:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
  4076c2:	2801      	cmp	r0, #1
  4076c4:	f67f ae98 	bls.w	4073f8 <file_unlink+0xf4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
  4076c8:	2804      	cmp	r0, #4
  4076ca:	d1f0      	bne.n	4076ae <file_unlink+0x3aa>
  4076cc:	e778      	b.n	4075c0 <file_unlink+0x2bc>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
  4076ce:	4641      	mov	r1, r8
  4076d0:	4620      	mov	r0, r4
  4076d2:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
  4076d4:	2801      	cmp	r0, #1
  4076d6:	d8ef      	bhi.n	4076b8 <file_unlink+0x3b4>
  4076d8:	e68e      	b.n	4073f8 <file_unlink+0xf4>
						sdj.obj.sclust = dclst;
  4076da:	9a00      	ldr	r2, [sp, #0]
						res = dir_sdi(&sdj, 0);
  4076dc:	2100      	movs	r1, #0
  4076de:	4b5f      	ldr	r3, [pc, #380]	; (40785c <file_unlink+0x558>)
  4076e0:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;				/* Open the sub-directory */
  4076e2:	9410      	str	r4, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
  4076e4:	9212      	str	r2, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
  4076e6:	4798      	blx	r3
						if (res == FR_OK) {
  4076e8:	2800      	cmp	r0, #0
  4076ea:	f47f ae2b 	bne.w	407344 <file_unlink+0x40>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
  4076ee:	4601      	mov	r1, r0
  4076f0:	4b5b      	ldr	r3, [pc, #364]	; (407860 <file_unlink+0x55c>)
  4076f2:	a810      	add	r0, sp, #64	; 0x40
  4076f4:	4798      	blx	r3
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
  4076f6:	2800      	cmp	r0, #0
  4076f8:	f43f af2f 	beq.w	40755a <file_unlink+0x256>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
  4076fc:	2804      	cmp	r0, #4
  4076fe:	f43f af3b 	beq.w	407578 <file_unlink+0x274>
  407702:	e61f      	b.n	407344 <file_unlink+0x40>
	rv = rv << 8 | ptr[0];
  407704:	7d51      	ldrb	r1, [r2, #21]
  407706:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
  407708:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  40770c:	9900      	ldr	r1, [sp, #0]
  40770e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  407712:	9200      	str	r2, [sp, #0]
  407714:	e72d      	b.n	407572 <file_unlink+0x26e>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
  407716:	782b      	ldrb	r3, [r5, #0]
  407718:	2b30      	cmp	r3, #48	; 0x30
  40771a:	f47f ae24 	bne.w	407366 <file_unlink+0x62>
  40771e:	4615      	mov	r5, r2
  407720:	e601      	b.n	407326 <file_unlink+0x22>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
  407722:	e89d 0018 	ldmia.w	sp, {r3, r4}
  407726:	b13b      	cbz	r3, 407738 <file_unlink+0x434>
  407728:	4619      	mov	r1, r3
					res = remove_chain(&dj.obj, dclst, 0);
  40772a:	4648      	mov	r0, r9
  40772c:	2200      	movs	r2, #0
  40772e:	4b4d      	ldr	r3, [pc, #308]	; (407864 <file_unlink+0x560>)
  407730:	4798      	blx	r3
				if (res == FR_OK) res = sync_fs(fs);
  407732:	2800      	cmp	r0, #0
  407734:	f47f ae06 	bne.w	407344 <file_unlink+0x40>
  407738:	4620      	mov	r0, r4
  40773a:	4b4b      	ldr	r3, [pc, #300]	; (407868 <file_unlink+0x564>)
  40773c:	4798      	blx	r3
  40773e:	e601      	b.n	407344 <file_unlink+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
  407740:	200b      	movs	r0, #11
  407742:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
  407744:	2400      	movs	r4, #0
  407746:	e78e      	b.n	407666 <file_unlink+0x362>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  407748:	4628      	mov	r0, r5
	LEAVE_FF(fs, res);
  40774a:	e5fb      	b.n	407344 <file_unlink+0x40>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  40774c:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  40774e:	4408      	add	r0, r1
		fs->database = bsect + sysect;					/* Data start sector */
  407750:	440f      	add	r7, r1
		fs->volbase = bsect;							/* Volume start sector */
  407752:	6221      	str	r1, [r4, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  407754:	61a3      	str	r3, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  407756:	6260      	str	r0, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
  407758:	62e7      	str	r7, [r4, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40775a:	f1be 0f00 	cmp.w	lr, #0
  40775e:	d0a6      	beq.n	4076ae <file_unlink+0x3aa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  407760:	4460      	add	r0, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  407762:	005b      	lsls	r3, r3, #1
  407764:	2102      	movs	r1, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
  407766:	62a0      	str	r0, [r4, #40]	; 0x28
  407768:	e6cf      	b.n	40750a <file_unlink+0x206>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  40776a:	4408      	add	r0, r1
	rv = rv << 8 | ptr[0];
  40776c:	f894 c05f 	ldrb.w	ip, [r4, #95]	; 0x5f
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  407770:	3302      	adds	r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
  407772:	440f      	add	r7, r1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
  407774:	6260      	str	r0, [r4, #36]	; 0x24
	rv = rv << 8 | ptr[0];
  407776:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
  40777a:	61a3      	str	r3, [r4, #24]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
  40777c:	ea50 200c 	orrs.w	r0, r0, ip, lsl #8
		fs->database = bsect + sysect;					/* Data start sector */
  407780:	62e7      	str	r7, [r4, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
  407782:	6221      	str	r1, [r4, #32]
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
  407784:	d193      	bne.n	4076ae <file_unlink+0x3aa>
  407786:	f1be 0f00 	cmp.w	lr, #0
  40778a:	d190      	bne.n	4076ae <file_unlink+0x3aa>
	rv = rv << 8 | ptr[2];
  40778c:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
  407790:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[1];
  407792:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
  407796:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  40779a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
  40779e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  4077a2:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
	rv = rv << 8 | ptr[0];
  4077a6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
  4077aa:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
  4077ac:	f4ff af7f 	bcc.w	4076ae <file_unlink+0x3aa>
	rv = rv << 8 | ptr[0];
  4077b0:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  4077b4:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
  4077b8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
  4077bc:	2080      	movs	r0, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  4077be:	6162      	str	r2, [r4, #20]
	rv = rv << 8 | ptr[0];
  4077c0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
  4077c4:	6122      	str	r2, [r4, #16]
		fs->fsi_flag = 0x80;
  4077c6:	7120      	strb	r0, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
  4077c8:	2b01      	cmp	r3, #1
  4077ca:	d001      	beq.n	4077d0 <file_unlink+0x4cc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  4077cc:	2103      	movs	r1, #3
  4077ce:	e6a8      	b.n	407522 <file_unlink+0x21e>
			&& move_window(fs, bsect + 1) == FR_OK)
  4077d0:	3101      	adds	r1, #1
  4077d2:	4620      	mov	r0, r4
  4077d4:	4b25      	ldr	r3, [pc, #148]	; (40786c <file_unlink+0x568>)
  4077d6:	4798      	blx	r3
  4077d8:	2800      	cmp	r0, #0
  4077da:	d1f7      	bne.n	4077cc <file_unlink+0x4c8>
	rv = rv << 8 | ptr[0];
  4077dc:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
  4077e0:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
  4077e4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
  4077e8:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
  4077ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
  4077ee:	4293      	cmp	r3, r2
  4077f0:	d1ec      	bne.n	4077cc <file_unlink+0x4c8>
	rv = rv << 8 | ptr[2];
  4077f2:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
  4077f4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
  4077f8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
  4077fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
  407800:	491b      	ldr	r1, [pc, #108]	; (407870 <file_unlink+0x56c>)
	rv = rv << 8 | ptr[0];
  407802:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
  407806:	428b      	cmp	r3, r1
  407808:	d1e0      	bne.n	4077cc <file_unlink+0x4c8>
	rv = rv << 8 | ptr[2];
  40780a:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
  40780e:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
  407812:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
  407816:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  40781a:	4916      	ldr	r1, [pc, #88]	; (407874 <file_unlink+0x570>)
	rv = rv << 8 | ptr[0];
  40781c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
  407820:	428b      	cmp	r3, r1
  407822:	d1d3      	bne.n	4077cc <file_unlink+0x4c8>
	rv = rv << 8 | ptr[1];
  407824:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
  407828:	2103      	movs	r1, #3
	rv = rv << 8 | ptr[1];
  40782a:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
  40782e:	f8b4 721e 	ldrh.w	r7, [r4, #542]	; 0x21e
  407832:	f8b4 0222 	ldrh.w	r0, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
  407836:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
	rv = rv << 8 | ptr[0];
  40783a:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
  40783e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
  407842:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
  407846:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  40784a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
  40784e:	6162      	str	r2, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
  407850:	6123      	str	r3, [r4, #16]
  407852:	e666      	b.n	407522 <file_unlink+0x21e>
  407854:	00404551 	.word	0x00404551
  407858:	004078e9 	.word	0x004078e9
  40785c:	004050f9 	.word	0x004050f9
  407860:	00404c0d 	.word	0x00404c0d
  407864:	004042a5 	.word	0x004042a5
  407868:	00403a9d 	.word	0x00403a9d
  40786c:	00403a31 	.word	0x00403a31
  407870:	41615252 	.word	0x41615252
  407874:	61417272 	.word	0x61417272

00407878 <disk_status>:

//--------------------------------------------------------------------------------------------------//


fatfs_status_t disk_status(uint8_t physical_drive)
{
  407878:	b508      	push	{r3, lr}
	uint8_t status = board_sd_card_get_status();
  40787a:	4b06      	ldr	r3, [pc, #24]	; (407894 <disk_status+0x1c>)
  40787c:	4798      	blx	r3
	
	if (status == 1)
  40787e:	2801      	cmp	r0, #1
  407880:	d001      	beq.n	407886 <disk_status+0xe>
			return FATFS_STATUS_NO_INIT;
		}
	}
	else
	{
		return FATFS_STATUS_NO_DISK;
  407882:	2002      	movs	r0, #2
	}
}
  407884:	bd08      	pop	{r3, pc}
		if (card.card_initialized == 1)
  407886:	4b04      	ldr	r3, [pc, #16]	; (407898 <disk_status+0x20>)
  407888:	7818      	ldrb	r0, [r3, #0]
			return FATFS_STATUS_OK;
  40788a:	f110 30ff 	adds.w	r0, r0, #4294967295
  40788e:	bf18      	it	ne
  407890:	2001      	movne	r0, #1
  407892:	bd08      	pop	{r3, pc}
  407894:	0040028d 	.word	0x0040028d
  407898:	20402774 	.word	0x20402774

0040789c <disk_initialize>:

//--------------------------------------------------------------------------------------------------//


fatfs_status_t disk_initialize(uint8_t physical_drive)
{
  40789c:	b508      	push	{r3, lr}
	if (board_sd_card_get_status() == 0)
  40789e:	4b06      	ldr	r3, [pc, #24]	; (4078b8 <disk_initialize+0x1c>)
  4078a0:	4798      	blx	r3
  4078a2:	b908      	cbnz	r0, 4078a8 <disk_initialize+0xc>
	{
		return FATFS_STATUS_NO_DISK;
  4078a4:	2002      	movs	r0, #2
		else 
		{
			return FATFS_STATUS_NO_INIT;
		}
	}
}
  4078a6:	bd08      	pop	{r3, pc}
		uint8_t status = sd_protocol_initialize(&card);
  4078a8:	4b04      	ldr	r3, [pc, #16]	; (4078bc <disk_initialize+0x20>)
  4078aa:	4805      	ldr	r0, [pc, #20]	; (4078c0 <disk_initialize+0x24>)
  4078ac:	4798      	blx	r3
		return FATFS_STATUS_NO_DISK;
  4078ae:	f110 30ff 	adds.w	r0, r0, #4294967295
  4078b2:	bf18      	it	ne
  4078b4:	2001      	movne	r0, #1
  4078b6:	bd08      	pop	{r3, pc}
  4078b8:	0040028d 	.word	0x0040028d
  4078bc:	004093ed 	.word	0x004093ed
  4078c0:	20402774 	.word	0x20402774

004078c4 <disk_read>:


fatfs_result_t disk_read(uint8_t physical_drive, uint8_t* data, uint32_t sector, uint32_t count)
{
	// First check if the section is supported on the card
	if (sector + count >= card.number_of_blocks)
  4078c4:	4806      	ldr	r0, [pc, #24]	; (4078e0 <disk_read+0x1c>)
{
  4078c6:	b538      	push	{r3, r4, r5, lr}
	if (sector + count >= card.number_of_blocks)
  4078c8:	18d5      	adds	r5, r2, r3
  4078ca:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4078cc:	42a5      	cmp	r5, r4
  4078ce:	d301      	bcc.n	4078d4 <disk_read+0x10>
	{
		return RES_PARERR;
  4078d0:	2004      	movs	r0, #4
		else 
		{
			return RES_OK;
		}
	}
}
  4078d2:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t status = sd_protocol_read(&card, data, sector, count);
  4078d4:	4c03      	ldr	r4, [pc, #12]	; (4078e4 <disk_read+0x20>)
  4078d6:	47a0      	blx	r4
		return RES_PARERR;
  4078d8:	fab0 f080 	clz	r0, r0
  4078dc:	0940      	lsrs	r0, r0, #5
  4078de:	bd38      	pop	{r3, r4, r5, pc}
  4078e0:	20402774 	.word	0x20402774
  4078e4:	00409675 	.word	0x00409675

004078e8 <disk_write>:


fatfs_result_t disk_write(uint8_t physical_drive, const uint8_t* data, uint32_t sector, uint32_t count)
{
	// First check if the section is supported on the card
	if (sector + count >= card.number_of_blocks)
  4078e8:	4806      	ldr	r0, [pc, #24]	; (407904 <disk_write+0x1c>)
{
  4078ea:	b538      	push	{r3, r4, r5, lr}
	if (sector + count >= card.number_of_blocks)
  4078ec:	18d5      	adds	r5, r2, r3
  4078ee:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4078f0:	42a5      	cmp	r5, r4
  4078f2:	d301      	bcc.n	4078f8 <disk_write+0x10>
	{
		return RES_PARERR;
  4078f4:	2004      	movs	r0, #4
		else
		{
			return RES_OK;
		}
	}
}
  4078f6:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t status = sd_protocol_write(&card, data, sector, count);
  4078f8:	4c03      	ldr	r4, [pc, #12]	; (407908 <disk_write+0x20>)
  4078fa:	47a0      	blx	r4
		return RES_PARERR;
  4078fc:	fab0 f080 	clz	r0, r0
  407900:	0940      	lsrs	r0, r0, #5
  407902:	bd38      	pop	{r3, r4, r5, pc}
  407904:	20402774 	.word	0x20402774
  407908:	004097d1 	.word	0x004097d1

0040790c <disk_ioctl>:
//--------------------------------------------------------------------------------------------------//


fatfs_result_t disk_ioctl(uint8_t physical_drive, uint8_t command, void* data)
{
	switch (command)
  40790c:	2901      	cmp	r1, #1
  40790e:	d007      	beq.n	407920 <disk_ioctl+0x14>
  407910:	d30b      	bcc.n	40792a <disk_ioctl+0x1e>
  407912:	2902      	cmp	r1, #2
  407914:	d107      	bne.n	407926 <disk_ioctl+0x1a>
				return RES_ERROR;
			}
		
		case GET_SECTOR_SIZE:
			// Return the sector size
			*((uint16_t *)data) = 512;
  407916:	f44f 7300 	mov.w	r3, #512	; 0x200
			return RES_OK;
  40791a:	2000      	movs	r0, #0
			*((uint16_t *)data) = 512;
  40791c:	8013      	strh	r3, [r2, #0]
			return RES_OK;
  40791e:	4770      	bx	lr
			if (card.card_initialized)
  407920:	4b05      	ldr	r3, [pc, #20]	; (407938 <disk_ioctl+0x2c>)
  407922:	7818      	ldrb	r0, [r3, #0]
  407924:	b918      	cbnz	r0, 40792e <disk_ioctl+0x22>
	}
	return RES_ERROR;
  407926:	2001      	movs	r0, #1
  407928:	4770      	bx	lr
			return RES_OK;
  40792a:	2000      	movs	r0, #0
  40792c:	4770      	bx	lr
				*((uint32_t *)data) = card.number_of_blocks;
  40792e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
				return RES_OK;
  407930:	2000      	movs	r0, #0
				*((uint32_t *)data) = card.number_of_blocks;
  407932:	6013      	str	r3, [r2, #0]
				return RES_OK;
  407934:	4770      	bx	lr
  407936:	bf00      	nop
  407938:	20402774 	.word	0x20402774

0040793c <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
  40793c:	287f      	cmp	r0, #127	; 0x7f
  40793e:	d919      	bls.n	407974 <ff_uni2oem+0x38>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
  407940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  407944:	d214      	bcs.n	407970 <ff_uni2oem+0x34>
  407946:	f240 13b5 	movw	r3, #437	; 0x1b5
  40794a:	4299      	cmp	r1, r3
  40794c:	d110      	bne.n	407970 <ff_uni2oem+0x34>
  40794e:	4a0b      	ldr	r2, [pc, #44]	; (40797c <ff_uni2oem+0x40>)
  407950:	2300      	movs	r3, #0
{
  407952:	b410      	push	{r4}
  407954:	e001      	b.n	40795a <ff_uni2oem+0x1e>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
  407956:	2b80      	cmp	r3, #128	; 0x80
  407958:	d00e      	beq.n	407978 <ff_uni2oem+0x3c>
  40795a:	f832 1b02 	ldrh.w	r1, [r2], #2
  40795e:	b29c      	uxth	r4, r3
  407960:	3301      	adds	r3, #1
  407962:	4288      	cmp	r0, r1
  407964:	d1f7      	bne.n	407956 <ff_uni2oem+0x1a>
  407966:	f104 0080 	add.w	r0, r4, #128	; 0x80
  40796a:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  40796c:	bc10      	pop	{r4}
  40796e:	4770      	bx	lr
	WCHAR c = 0;
  407970:	2000      	movs	r0, #0
  407972:	4770      	bx	lr
		c = (WCHAR)uni;
  407974:	b280      	uxth	r0, r0
  407976:	4770      	bx	lr
  407978:	2000      	movs	r0, #0
  40797a:	e7f7      	b.n	40796c <ff_uni2oem+0x30>
  40797c:	0040b050 	.word	0x0040b050

00407980 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
  407980:	287f      	cmp	r0, #127	; 0x7f
  407982:	d90c      	bls.n	40799e <ff_oem2uni+0x1e>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
			if (oem < 0x100) c = p[oem - 0x80];
  407984:	28ff      	cmp	r0, #255	; 0xff
  407986:	d809      	bhi.n	40799c <ff_oem2uni+0x1c>
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
  407988:	f240 13b5 	movw	r3, #437	; 0x1b5
			if (oem < 0x100) c = p[oem - 0x80];
  40798c:	4299      	cmp	r1, r3
  40798e:	d105      	bne.n	40799c <ff_oem2uni+0x1c>
  407990:	4b03      	ldr	r3, [pc, #12]	; (4079a0 <ff_oem2uni+0x20>)
  407992:	4a04      	ldr	r2, [pc, #16]	; (4079a4 <ff_oem2uni+0x24>)
  407994:	4403      	add	r3, r0
  407996:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  40799a:	4770      	bx	lr
	WCHAR c = 0;
  40799c:	2000      	movs	r0, #0
		}
	}

	return c;
}
  40799e:	4770      	bx	lr
  4079a0:	7fffff80 	.word	0x7fffff80
  4079a4:	0040b050 	.word	0x0040b050

004079a8 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
  4079a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  4079ac:	d226      	bcs.n	4079fc <ff_wtoupper+0x54>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
  4079ae:	4b24      	ldr	r3, [pc, #144]	; (407a40 <ff_wtoupper+0x98>)
  4079b0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
{
  4079b4:	b4f0      	push	{r4, r5, r6, r7}
		p = uc < 0x1000 ? cvt1 : cvt2;
  4079b6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  4079ba:	bf38      	it	cc
  4079bc:	4613      	movcc	r3, r2
		uc = (WORD)uni;
  4079be:	b286      	uxth	r6, r0
  4079c0:	3304      	adds	r3, #4
  4079c2:	e001      	b.n	4079c8 <ff_wtoupper+0x20>
  4079c4:	3304      	adds	r3, #4
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
  4079c6:	b1d2      	cbz	r2, 4079fe <ff_wtoupper+0x56>
			bc = *p++;								/* Get the block base */
  4079c8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
  4079cc:	461f      	mov	r7, r3
			if (bc == 0 || uc < bc) break;			/* Not matched? */
  4079ce:	b199      	cbz	r1, 4079f8 <ff_wtoupper+0x50>
  4079d0:	428e      	cmp	r6, r1
  4079d2:	d311      	bcc.n	4079f8 <ff_wtoupper+0x50>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
  4079d4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
  4079d8:	b2d4      	uxtb	r4, r2
  4079da:	0a12      	lsrs	r2, r2, #8
			if (uc < bc + nc) {	/* In the block? */
  4079dc:	1865      	adds	r5, r4, r1
  4079de:	42a8      	cmp	r0, r5
  4079e0:	daf0      	bge.n	4079c4 <ff_wtoupper+0x1c>
				switch (cmd) {
  4079e2:	2a08      	cmp	r2, #8
  4079e4:	d808      	bhi.n	4079f8 <ff_wtoupper+0x50>
  4079e6:	e8df f002 	tbb	[pc, r2]
  4079ea:	1511      	.short	0x1511
  4079ec:	24211e1b 	.word	0x24211e1b
  4079f0:	2705      	.short	0x2705
  4079f2:	0d          	.byte	0x0d
  4079f3:	00          	.byte	0x00
				case 6:	uc += 8; break;				/* Shift +8 */
  4079f4:	3608      	adds	r6, #8
  4079f6:	b2b6      	uxth	r6, r6
		}
		uni = uc;
  4079f8:	4630      	mov	r0, r6
	}

	return uni;
}
  4079fa:	bcf0      	pop	{r4, r5, r6, r7}
  4079fc:	4770      	bx	lr
			if (cmd == 0) p += nc;	/* Skip table if needed */
  4079fe:	eb07 0344 	add.w	r3, r7, r4, lsl #1
  407a02:	e7dd      	b.n	4079c0 <ff_wtoupper+0x18>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
  407a04:	f5a6 56e3 	sub.w	r6, r6, #7264	; 0x1c60
  407a08:	b2b6      	uxth	r6, r6
  407a0a:	e7f5      	b.n	4079f8 <ff_wtoupper+0x50>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
  407a0c:	1a40      	subs	r0, r0, r1
  407a0e:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
  407a12:	e7f1      	b.n	4079f8 <ff_wtoupper+0x50>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
  407a14:	1a71      	subs	r1, r6, r1
  407a16:	f001 0301 	and.w	r3, r1, #1
  407a1a:	1af6      	subs	r6, r6, r3
  407a1c:	b2b6      	uxth	r6, r6
  407a1e:	e7eb      	b.n	4079f8 <ff_wtoupper+0x50>
				case 2: uc -= 16; break;			/* Shift -16 */
  407a20:	3e10      	subs	r6, #16
  407a22:	b2b6      	uxth	r6, r6
  407a24:	e7e8      	b.n	4079f8 <ff_wtoupper+0x50>
				case 3:	uc -= 32; break;			/* Shift -32 */
  407a26:	3e20      	subs	r6, #32
  407a28:	b2b6      	uxth	r6, r6
  407a2a:	e7e5      	b.n	4079f8 <ff_wtoupper+0x50>
				case 4:	uc -= 48; break;			/* Shift -48 */
  407a2c:	3e30      	subs	r6, #48	; 0x30
  407a2e:	b2b6      	uxth	r6, r6
  407a30:	e7e2      	b.n	4079f8 <ff_wtoupper+0x50>
				case 5:	uc -= 26; break;			/* Shift -26 */
  407a32:	3e1a      	subs	r6, #26
  407a34:	b2b6      	uxth	r6, r6
  407a36:	e7df      	b.n	4079f8 <ff_wtoupper+0x50>
				case 7: uc -= 80; break;			/* Shift -80 */
  407a38:	3e50      	subs	r6, #80	; 0x50
  407a3a:	b2b6      	uxth	r6, r6
  407a3c:	e7dc      	b.n	4079f8 <ff_wtoupper+0x50>
  407a3e:	bf00      	nop
  407a40:	0040b150 	.word	0x0040b150
	...

00407a50 <PendSV_Handler>:
.thumb_func

PendSV_Handler:
	
	// Disable interrupts
	cpsid				i
  407a50:	b672      	cpsid	i

	// Load the process stack pointer into r0
	mrs					r0,					psp
  407a52:	f3ef 8009 	mrs	r0, PSP

	// Flush the instruction pipeline
	// This is specified in the Cortex-M7 datasheet
	isb
  407a56:	f3bf 8f6f 	isb	sy

	// Push register r4-r11 onto the process stack
	// using the store multiple decrement before instruction
	stmdb				r0!,				{r4-r11}
  407a5a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Get the pointer to the current thread r1 will hold a pointer
	// to the current thread structure
	ldr					r3,					=current_thread
  407a5e:	4b15      	ldr	r3, [pc, #84]	; (407ab4 <scheduler_start+0x38>)
	ldr					r1,					[r3]
  407a60:	6819      	ldr	r1, [r3, #0]

	// Store the stack pointer for the current running thread
	// since this might have changed
	str					r0,					[r1]
  407a62:	6008      	str	r0, [r1, #0]

	// Load the next thread into r1 and the next stack into r0
	ldr					r2,					=next_thread
  407a64:	4a14      	ldr	r2, [pc, #80]	; (407ab8 <scheduler_start+0x3c>)
	ldr					r1,					[r2]
  407a66:	6811      	ldr	r1, [r2, #0]
	ldr					r0,					[r1]
  407a68:	6808      	ldr	r0, [r1, #0]

	// Since we are operating with two thread pointers we must make
	// sure that the current pointer gets replaced by the next running thread
	str					r1,					[r3]
  407a6a:	6019      	str	r1, [r3, #0]

	// Pop the registers from stack
	// the stack frame will be restored automatically by the IRQ
	ldmia				r0!,				{r4-r11}
  407a6c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Move the R0 (current stack pointer) to the process stack pointer
	msr					psp,				r0
  407a70:	f380 8809 	msr	PSP, r0

	// Flush the instruction pipeline
	isb
  407a74:	f3bf 8f6f 	isb	sy

	// Reenable interrupt after context switch
	cpsie				i
  407a78:	b662      	cpsie	i

	bx					lr
  407a7a:	4770      	bx	lr

00407a7c <scheduler_start>:
.thumb_func

scheduler_start:
	
	// The first line loads a pointer to kernel current thread into r0
	ldr					r0,					=current_thread
  407a7c:	480d      	ldr	r0, [pc, #52]	; (407ab4 <scheduler_start+0x38>)
	ldr					r2,					[r0]
  407a7e:	6802      	ldr	r2, [r0, #0]
	ldr					r3,					[r2]
  407a80:	6813      	ldr	r3, [r2, #0]
	
	// Load the stack pointer into the PSP
	msr					psp,				r3
  407a82:	f383 8809 	msr	PSP, r3
	isb
  407a86:	f3bf 8f6f 	isb	sy

	// We are in thread mode so we can now switch the CPU stack
	movs				r0,					#2
  407a8a:	2002      	movs	r0, #2
	msr					control,			r0
  407a8c:	f380 8814 	msr	CONTROL, r0
	isb
  407a90:	f3bf 8f6f 	isb	sy

	// Pop the registers from the first thread stack
	pop					{r4-r11}
  407a94:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	pop					{r0-r3}
  407a98:	bc0f      	pop	{r0, r1, r2, r3}
	pop					{r12}
  407a9a:	f85d cb04 	ldr.w	ip, [sp], #4

	// We dont want the link register
	add					sp,					sp, #4
  407a9e:	b001      	add	sp, #4

	// We pop the address of the first thread to run
	// into the link register
	pop					{lr}
  407aa0:	f85d eb04 	ldr.w	lr, [sp], #4

	// We dont want the xPSR register
	add					sp,					sp, #4
  407aa4:	b001      	add	sp, #4

	// Reenable interrupt
	cpsie				i
  407aa6:	b662      	cpsie	i
	cpsie				f
  407aa8:	b661      	cpsie	f

	dsb
  407aaa:	f3bf 8f4f 	dsb	sy
	isb
  407aae:	f3bf 8f6f 	isb	sy

	bx					lr
  407ab2:	4770      	bx	lr
	ldr					r3,					=current_thread
  407ab4:	204027e8 	.word	0x204027e8
	ldr					r2,					=next_thread
  407ab8:	20402838 	.word	0x20402838

00407abc <SVCall_Handler>:
// appropriate function is called
.thumb_func

SVCall_Handler:

	tst				lr,							#4
  407abc:	f01e 0f04 	tst.w	lr, #4
	ite				eq
  407ac0:	bf0c      	ite	eq
	mrseq			r0,							msp
  407ac2:	f3ef 8008 	mrseq	r0, MSP
	mrsne			r0,							psp
  407ac6:	f3ef 8009 	mrsne	r0, PSP
	b				kernel_service_handler
  407aca:	f000 bf35 	b.w	408938 <kernel_service_handler>
	bx				lr
  407ace:	4770      	bx	lr

00407ad0 <delete_handler>:
//--------------------------------------------------------------------------------------------------//


void delete_handler(void)
{
	dynamic_memory_free(program_buffer);
  407ad0:	4a01      	ldr	r2, [pc, #4]	; (407ad8 <delete_handler+0x8>)
  407ad2:	4b02      	ldr	r3, [pc, #8]	; (407adc <delete_handler+0xc>)
  407ad4:	6810      	ldr	r0, [r2, #0]
  407ad6:	4718      	bx	r3
  407ad8:	204027c4 	.word	0x204027c4
  407adc:	00408ce9 	.word	0x00408ce9

00407ae0 <dynamic_loader_run>:

//--------------------------------------------------------------------------------------------------//


void dynamic_loader_run(uint32_t* data, uint32_t size)
{
  407ae0:	b570      	push	{r4, r5, r6, lr}
	// Skip the application entry
	data++;
	data++;
	
	// Get the offsets to the .GOT table
	uint8_t* start_got = program_start + *data++;
  407ae2:	6882      	ldr	r2, [r0, #8]
{
  407ae4:	b082      	sub	sp, #8
	uint8_t* end_got = program_start + *data++;
  407ae6:	68c5      	ldr	r5, [r0, #12]
	uint8_t* start_got = program_start + *data++;
  407ae8:	4402      	add	r2, r0
	
	// Get the offsets to the .GOT PLT table
	uint8_t* start_got_plt = program_start + *data++;
  407aea:	6903      	ldr	r3, [r0, #16]
	uint8_t* end_got = program_start + *data++;
  407aec:	4405      	add	r5, r0
	uint8_t* end_got_plt = program_start + *data++;
  407aee:	6944      	ldr	r4, [r0, #20]
	uint8_t* start_got_plt = program_start + *data++;
  407af0:	4403      	add	r3, r0
	
	
	// Resolve .GOT addressed by performing dynamic linking
	for (uint32_t* relocate_interator = (uint32_t *)start_got; relocate_interator < (uint32_t *)end_got; relocate_interator++)
  407af2:	42aa      	cmp	r2, r5
	uint8_t* end_got_plt = program_start + *data++;
  407af4:	4404      	add	r4, r0
	for (uint32_t* relocate_interator = (uint32_t *)start_got; relocate_interator < (uint32_t *)end_got; relocate_interator++)
  407af6:	d205      	bcs.n	407b04 <dynamic_loader_run+0x24>
	{
		// Add the global offset to each entry
		*relocate_interator += (uint32_t)program_start;
  407af8:	6811      	ldr	r1, [r2, #0]
  407afa:	4401      	add	r1, r0
  407afc:	f842 1b04 	str.w	r1, [r2], #4
	for (uint32_t* relocate_interator = (uint32_t *)start_got; relocate_interator < (uint32_t *)end_got; relocate_interator++)
  407b00:	4295      	cmp	r5, r2
  407b02:	d8f9      	bhi.n	407af8 <dynamic_loader_run+0x18>
	}
	
	// Resolve .GOT PLT addressed by performing dynamic linking
	for (uint32_t* relocate_interator = (uint32_t *)start_got_plt; relocate_interator < (uint32_t *)end_got_plt; relocate_interator++)
  407b04:	42a3      	cmp	r3, r4
  407b06:	d205      	bcs.n	407b14 <dynamic_loader_run+0x34>
	{
		// Add the global offset to each entry
		*relocate_interator += (uint32_t)program_start;
  407b08:	681a      	ldr	r2, [r3, #0]
  407b0a:	4402      	add	r2, r0
  407b0c:	f843 2b04 	str.w	r2, [r3], #4
	for (uint32_t* relocate_interator = (uint32_t *)start_got_plt; relocate_interator < (uint32_t *)end_got_plt; relocate_interator++)
  407b10:	429c      	cmp	r4, r3
  407b12:	d8f9      	bhi.n	407b08 <dynamic_loader_run+0x28>
	for (uint32_t i = 0; i < size; i++)
  407b14:	69c2      	ldr	r2, [r0, #28]
  407b16:	3a01      	subs	r2, #1
  407b18:	2a1f      	cmp	r2, #31
  407b1a:	d80b      	bhi.n	407b34 <dynamic_loader_run+0x54>
		if (*data++ == '\0')
  407b1c:	f890 1020 	ldrb.w	r1, [r0, #32]
  407b20:	f100 0321 	add.w	r3, r0, #33	; 0x21
  407b24:	b141      	cbz	r1, 407b38 <dynamic_loader_run+0x58>
  407b26:	441a      	add	r2, r3
  407b28:	e002      	b.n	407b30 <dynamic_loader_run+0x50>
  407b2a:	f813 1b01 	ldrb.w	r1, [r3], #1
  407b2e:	b119      	cbz	r1, 407b38 <dynamic_loader_run+0x58>
	for (uint32_t i = 0; i < size; i++)
  407b30:	429a      	cmp	r2, r3
  407b32:	d1fa      	bne.n	407b2a <dynamic_loader_run+0x4a>
}
  407b34:	b002      	add	sp, #8
  407b36:	bd70      	pop	{r4, r5, r6, pc}
  407b38:	4604      	mov	r4, r0
	uint8_t* program_entry = (uint8_t *)((uint8_t *)data + *(data + 1));
  407b3a:	6845      	ldr	r5, [r0, #4]
		scheduler_set_dynamic_loader_handler(delete_handler);
  407b3c:	4b09      	ldr	r3, [pc, #36]	; (407b64 <dynamic_loader_run+0x84>)
  407b3e:	480a      	ldr	r0, [pc, #40]	; (407b68 <dynamic_loader_run+0x88>)
	uint32_t stack_size = (uint32_t)(*data++);
  407b40:	69a6      	ldr	r6, [r4, #24]
		scheduler_set_dynamic_loader_handler(delete_handler);
  407b42:	4798      	blx	r3
	uint8_t* program_entry = (uint8_t *)((uint8_t *)data + *(data + 1));
  407b44:	1961      	adds	r1, r4, r5
		thread_s* tmp = thread_new(name, (thread_function)program_entry, NULL, THREAD_PRIORITY_NORMAL, stack_size);
  407b46:	f104 0020 	add.w	r0, r4, #32
  407b4a:	9600      	str	r6, [sp, #0]
  407b4c:	2302      	movs	r3, #2
  407b4e:	f041 0101 	orr.w	r1, r1, #1
  407b52:	2200      	movs	r2, #0
  407b54:	4c05      	ldr	r4, [pc, #20]	; (407b6c <dynamic_loader_run+0x8c>)
  407b56:	47a0      	blx	r4
		tmp->ID = 6969;
  407b58:	f641 3339 	movw	r3, #6969	; 0x1b39
  407b5c:	6043      	str	r3, [r0, #4]
}
  407b5e:	b002      	add	sp, #8
  407b60:	bd70      	pop	{r4, r5, r6, pc}
  407b62:	bf00      	nop
  407b64:	00408745 	.word	0x00408745
  407b68:	00407ad1 	.word	0x00407ad1
  407b6c:	00408985 	.word	0x00408985

00407b70 <USART0_Handler>:
// This USART handler is used for the fast programming interface.
// This interface will dynamically download a user program and run it immediately.
// Deleting of the program is not handled. This can be done by a hardware reset.

void USART0_Handler()
{
  407b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// The RXRDY flag is cleared upon read of RHR
	char data = (char)usart_read(USART0);
	
	if (fast_programming_state == FAST_PROGRAMMING_IDLE)
  407b72:	4c49      	ldr	r4, [pc, #292]	; (407c98 <USART0_Handler+0x128>)
	char data = (char)usart_read(USART0);
  407b74:	4b49      	ldr	r3, [pc, #292]	; (407c9c <USART0_Handler+0x12c>)
  407b76:	484a      	ldr	r0, [pc, #296]	; (407ca0 <USART0_Handler+0x130>)
  407b78:	4798      	blx	r3
	if (fast_programming_state == FAST_PROGRAMMING_IDLE)
  407b7a:	7823      	ldrb	r3, [r4, #0]
  407b7c:	b913      	cbnz	r3, 407b84 <USART0_Handler+0x14>
	{
		if (data == 'P')
  407b7e:	2850      	cmp	r0, #80	; 0x50
  407b80:	d032      	beq.n	407be8 <USART0_Handler+0x78>
  407b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			program_size = 0;
			program_index = 0;
			program_size_total = 0;
		}
	}
	else if (fast_programming_state == FAST_PROGRAMMING_SIZE)
  407b84:	7823      	ldrb	r3, [r4, #0]
  407b86:	2b01      	cmp	r3, #1
  407b88:	d00d      	beq.n	407ba6 <USART0_Handler+0x36>
		{
			fast_programming_state = FAST_PROGRAMMING_SIZE_PLUS;
			program_size_index = 0;
		}
	}
	else if (fast_programming_state == FAST_PROGRAMMING_SIZE_PLUS)
  407b8a:	7823      	ldrb	r3, [r4, #0]
  407b8c:	2b02      	cmp	r3, #2
  407b8e:	d03b      	beq.n	407c08 <USART0_Handler+0x98>
			program_buffer = (uint8_t *)dynamic_memory_new(DRAM_BANK_0, program_size_total + 255);
			
			fast_programming_state = FAST_PROGRAMMING_DATA;
		}
	}
	else if (fast_programming_state == FAST_PROGRAMMING_DATA)
  407b90:	7823      	ldrb	r3, [r4, #0]
  407b92:	2b03      	cmp	r3, #3
  407b94:	d019      	beq.n	407bca <USART0_Handler+0x5a>
		if (program_index >= program_size)
		{
			fast_programming_state = FAST_PROGRAMMING_CHECK;
		}
	}
	else if (fast_programming_state == FAST_PROGRAMMING_CHECK)
  407b96:	7823      	ldrb	r3, [r4, #0]
  407b98:	2b04      	cmp	r3, #4
  407b9a:	d1f2      	bne.n	407b82 <USART0_Handler+0x12>
	{
		if (data == 'P')
  407b9c:	2850      	cmp	r0, #80	; 0x50
  407b9e:	d04a      	beq.n	407c36 <USART0_Handler+0xc6>
			SCB_CleanDCache();
			
			dynamic_loader_run((uint32_t *)program_buffer, program_size);
		}
		
		fast_programming_state = FAST_PROGRAMMING_IDLE;
  407ba0:	2300      	movs	r3, #0
  407ba2:	7023      	strb	r3, [r4, #0]
	}
}
  407ba4:	e7ed      	b.n	407b82 <USART0_Handler+0x12>
		program_size |= (data << (8 * program_size_index++));
  407ba6:	4d3f      	ldr	r5, [pc, #252]	; (407ca4 <USART0_Handler+0x134>)
  407ba8:	4e3f      	ldr	r6, [pc, #252]	; (407ca8 <USART0_Handler+0x138>)
  407baa:	782b      	ldrb	r3, [r5, #0]
  407bac:	6831      	ldr	r1, [r6, #0]
  407bae:	00da      	lsls	r2, r3, #3
  407bb0:	3301      	adds	r3, #1
  407bb2:	4090      	lsls	r0, r2
  407bb4:	b2db      	uxtb	r3, r3
  407bb6:	4308      	orrs	r0, r1
		if (program_size_index >= 4)
  407bb8:	2b03      	cmp	r3, #3
		program_size |= (data << (8 * program_size_index++));
  407bba:	702b      	strb	r3, [r5, #0]
  407bbc:	6030      	str	r0, [r6, #0]
		if (program_size_index >= 4)
  407bbe:	d9e0      	bls.n	407b82 <USART0_Handler+0x12>
			fast_programming_state = FAST_PROGRAMMING_SIZE_PLUS;
  407bc0:	2202      	movs	r2, #2
			program_size_index = 0;
  407bc2:	2300      	movs	r3, #0
			fast_programming_state = FAST_PROGRAMMING_SIZE_PLUS;
  407bc4:	7022      	strb	r2, [r4, #0]
			program_size_index = 0;
  407bc6:	702b      	strb	r3, [r5, #0]
  407bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		program_buffer[program_index] = data;
  407bca:	4a38      	ldr	r2, [pc, #224]	; (407cac <USART0_Handler+0x13c>)
  407bcc:	4b38      	ldr	r3, [pc, #224]	; (407cb0 <USART0_Handler+0x140>)
		if (program_index >= program_size)
  407bce:	4936      	ldr	r1, [pc, #216]	; (407ca8 <USART0_Handler+0x138>)
		program_buffer[program_index] = data;
  407bd0:	681d      	ldr	r5, [r3, #0]
  407bd2:	6813      	ldr	r3, [r2, #0]
  407bd4:	54e8      	strb	r0, [r5, r3]
		program_index++;
  407bd6:	6813      	ldr	r3, [r2, #0]
		if (program_index >= program_size)
  407bd8:	6809      	ldr	r1, [r1, #0]
		program_index++;
  407bda:	3301      	adds	r3, #1
		if (program_index >= program_size)
  407bdc:	428b      	cmp	r3, r1
		program_index++;
  407bde:	6013      	str	r3, [r2, #0]
		if (program_index >= program_size)
  407be0:	d3cf      	bcc.n	407b82 <USART0_Handler+0x12>
			fast_programming_state = FAST_PROGRAMMING_CHECK;
  407be2:	2304      	movs	r3, #4
  407be4:	7023      	strb	r3, [r4, #0]
  407be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407be8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
			board_serial_print("Programming started\n");
  407bec:	4831      	ldr	r0, [pc, #196]	; (407cb4 <USART0_Handler+0x144>)
  407bee:	4b32      	ldr	r3, [pc, #200]	; (407cb8 <USART0_Handler+0x148>)
			fast_programming_state = FAST_PROGRAMMING_SIZE;
  407bf0:	2601      	movs	r6, #1
			board_serial_print("Programming started\n");
  407bf2:	4798      	blx	r3
			program_size_index = 0;
  407bf4:	482b      	ldr	r0, [pc, #172]	; (407ca4 <USART0_Handler+0x134>)
			program_size = 0;
  407bf6:	492c      	ldr	r1, [pc, #176]	; (407ca8 <USART0_Handler+0x138>)
			program_index = 0;
  407bf8:	4a2c      	ldr	r2, [pc, #176]	; (407cac <USART0_Handler+0x13c>)
			program_size_total = 0;
  407bfa:	4b30      	ldr	r3, [pc, #192]	; (407cbc <USART0_Handler+0x14c>)
			fast_programming_state = FAST_PROGRAMMING_SIZE;
  407bfc:	7026      	strb	r6, [r4, #0]
			program_size_index = 0;
  407bfe:	7005      	strb	r5, [r0, #0]
			program_size = 0;
  407c00:	600d      	str	r5, [r1, #0]
			program_index = 0;
  407c02:	6015      	str	r5, [r2, #0]
			program_size_total = 0;
  407c04:	601d      	str	r5, [r3, #0]
  407c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		program_size_total |= (data << (8 * program_size_index++));
  407c08:	4e26      	ldr	r6, [pc, #152]	; (407ca4 <USART0_Handler+0x134>)
  407c0a:	4d2c      	ldr	r5, [pc, #176]	; (407cbc <USART0_Handler+0x14c>)
  407c0c:	7833      	ldrb	r3, [r6, #0]
  407c0e:	682a      	ldr	r2, [r5, #0]
  407c10:	00d9      	lsls	r1, r3, #3
  407c12:	3301      	adds	r3, #1
  407c14:	4088      	lsls	r0, r1
  407c16:	b2db      	uxtb	r3, r3
  407c18:	4302      	orrs	r2, r0
		if (program_size_index >= 4)
  407c1a:	2b03      	cmp	r3, #3
		program_size_total |= (data << (8 * program_size_index++));
  407c1c:	7033      	strb	r3, [r6, #0]
  407c1e:	602a      	str	r2, [r5, #0]
		if (program_size_index >= 4)
  407c20:	d9af      	bls.n	407b82 <USART0_Handler+0x12>
			program_buffer = (uint8_t *)dynamic_memory_new(DRAM_BANK_0, program_size_total + 255);
  407c22:	f102 01ff 	add.w	r1, r2, #255	; 0xff
  407c26:	4b26      	ldr	r3, [pc, #152]	; (407cc0 <USART0_Handler+0x150>)
  407c28:	2001      	movs	r0, #1
  407c2a:	4798      	blx	r3
  407c2c:	4a20      	ldr	r2, [pc, #128]	; (407cb0 <USART0_Handler+0x140>)
			fast_programming_state = FAST_PROGRAMMING_DATA;
  407c2e:	2303      	movs	r3, #3
			program_buffer = (uint8_t *)dynamic_memory_new(DRAM_BANK_0, program_size_total + 255);
  407c30:	6010      	str	r0, [r2, #0]
			fast_programming_state = FAST_PROGRAMMING_DATA;
  407c32:	7023      	strb	r3, [r4, #0]
  407c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			board_serial_print("Programming success\n");
  407c36:	4823      	ldr	r0, [pc, #140]	; (407cc4 <USART0_Handler+0x154>)
  407c38:	4b1f      	ldr	r3, [pc, #124]	; (407cb8 <USART0_Handler+0x148>)
  407c3a:	4798      	blx	r3
     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  407c3c:	4d22      	ldr	r5, [pc, #136]	; (407cc8 <USART0_Handler+0x158>)
  407c3e:	2300      	movs	r3, #0
  407c40:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  407c44:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  407c48:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
  407c4c:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
  407c50:	f3c3 07c9 	ubfx	r7, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  407c54:	f3c3 334e 	ubfx	r3, r3, #13, #15
  407c58:	ea4f 7e87 	mov.w	lr, r7, lsl #30
  407c5c:	015e      	lsls	r6, r3, #5
  407c5e:	ea06 000c 	and.w	r0, r6, ip
{
  407c62:	4671      	mov	r1, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  407c64:	463a      	mov	r2, r7
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  407c66:	ea40 0301 	orr.w	r3, r0, r1
      } while (ways-- != 0U);
  407c6a:	3a01      	subs	r2, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  407c6c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  407c70:	f8c5 326c 	str.w	r3, [r5, #620]	; 0x26c
      } while (ways-- != 0U);
  407c74:	1c53      	adds	r3, r2, #1
  407c76:	d1f6      	bne.n	407c66 <USART0_Handler+0xf6>
  407c78:	3e20      	subs	r6, #32
    } while(sets-- != 0U);
  407c7a:	f116 0f20 	cmn.w	r6, #32
  407c7e:	d1ee      	bne.n	407c5e <USART0_Handler+0xee>
  407c80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407c84:	f3bf 8f6f 	isb	sy
			dynamic_loader_run((uint32_t *)program_buffer, program_size);
  407c88:	4a07      	ldr	r2, [pc, #28]	; (407ca8 <USART0_Handler+0x138>)
  407c8a:	4b09      	ldr	r3, [pc, #36]	; (407cb0 <USART0_Handler+0x140>)
  407c8c:	6811      	ldr	r1, [r2, #0]
  407c8e:	6818      	ldr	r0, [r3, #0]
  407c90:	4b0e      	ldr	r3, [pc, #56]	; (407ccc <USART0_Handler+0x15c>)
  407c92:	4798      	blx	r3
  407c94:	e784      	b.n	407ba0 <USART0_Handler+0x30>
  407c96:	bf00      	nop
  407c98:	204027cc 	.word	0x204027cc
  407c9c:	00403561 	.word	0x00403561
  407ca0:	40024000 	.word	0x40024000
  407ca4:	204027cd 	.word	0x204027cd
  407ca8:	204027d4 	.word	0x204027d4
  407cac:	204027c8 	.word	0x204027c8
  407cb0:	204027c4 	.word	0x204027c4
  407cb4:	0040b400 	.word	0x0040b400
  407cb8:	0040052d 	.word	0x0040052d
  407cbc:	204027d0 	.word	0x204027d0
  407cc0:	00408bfd 	.word	0x00408bfd
  407cc4:	0040b418 	.word	0x0040b418
  407cc8:	e000ed00 	.word	0xe000ed00
  407ccc:	00407ae1 	.word	0x00407ae1

00407cd0 <MemoryManagement_Handler>:
//--------------------------------------------------------------------------------------------------//


void MemoryManagement_Handler()
{
	uint32_t memory_fault_register = *(uint8_t *)0xE000ED28;
  407cd0:	4b0f      	ldr	r3, [pc, #60]	; (407d10 <MemoryManagement_Handler+0x40>)

	board_serial_print("Memory manage fault handler triggered\n\n");
  407cd2:	4810      	ldr	r0, [pc, #64]	; (407d14 <MemoryManagement_Handler+0x44>)
{
  407cd4:	b570      	push	{r4, r5, r6, lr}
	uint32_t memory_fault_register = *(uint8_t *)0xE000ED28;
  407cd6:	781d      	ldrb	r5, [r3, #0]
	board_serial_print("Memory manage fault handler triggered\n\n");
  407cd8:	4c0f      	ldr	r4, [pc, #60]	; (407d18 <MemoryManagement_Handler+0x48>)
  407cda:	47a0      	blx	r4

	board_serial_print("MMARVALID\t%d\n", (memory_fault_register & (1 << 7)) ? 1 : 0);
  407cdc:	480f      	ldr	r0, [pc, #60]	; (407d1c <MemoryManagement_Handler+0x4c>)
  407cde:	09e9      	lsrs	r1, r5, #7
  407ce0:	47a0      	blx	r4
	board_serial_print("MLSPERR\t%d\n", (memory_fault_register & (1 << 5)) ? 1 : 0);
  407ce2:	f3c5 1140 	ubfx	r1, r5, #5, #1
  407ce6:	480e      	ldr	r0, [pc, #56]	; (407d20 <MemoryManagement_Handler+0x50>)
  407ce8:	47a0      	blx	r4
	board_serial_print("MSTKERR\t%d\n", (memory_fault_register & (1 << 4)) ? 1 : 0);
  407cea:	f3c5 1100 	ubfx	r1, r5, #4, #1
  407cee:	480d      	ldr	r0, [pc, #52]	; (407d24 <MemoryManagement_Handler+0x54>)
  407cf0:	47a0      	blx	r4
	board_serial_print("MUNSTKERR\t%d\n", (memory_fault_register & (1 << 3)) ? 1 : 0);
  407cf2:	f3c5 01c0 	ubfx	r1, r5, #3, #1
  407cf6:	480c      	ldr	r0, [pc, #48]	; (407d28 <MemoryManagement_Handler+0x58>)
  407cf8:	47a0      	blx	r4
	board_serial_print("DACCVIOL\t%d\n", (memory_fault_register & (1 << 1)) ? 1 : 0);
  407cfa:	f3c5 0140 	ubfx	r1, r5, #1, #1
  407cfe:	480b      	ldr	r0, [pc, #44]	; (407d2c <MemoryManagement_Handler+0x5c>)
  407d00:	47a0      	blx	r4
	board_serial_print("IACCVIOL\t%d\n", (memory_fault_register & (1 << 0)) ? 1 : 0);
  407d02:	f005 0101 	and.w	r1, r5, #1
  407d06:	4623      	mov	r3, r4
  407d08:	4809      	ldr	r0, [pc, #36]	; (407d30 <MemoryManagement_Handler+0x60>)
}
  407d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	board_serial_print("IACCVIOL\t%d\n", (memory_fault_register & (1 << 0)) ? 1 : 0);
  407d0e:	4718      	bx	r3
  407d10:	e000ed28 	.word	0xe000ed28
  407d14:	0040b430 	.word	0x0040b430
  407d18:	0040052d 	.word	0x0040052d
  407d1c:	0040b458 	.word	0x0040b458
  407d20:	0040b468 	.word	0x0040b468
  407d24:	0040b474 	.word	0x0040b474
  407d28:	0040b480 	.word	0x0040b480
  407d2c:	0040b490 	.word	0x0040b490
  407d30:	0040b4a0 	.word	0x0040b4a0

00407d34 <BusFault_Handler>:
//--------------------------------------------------------------------------------------------------//


void BusFault_Handler()
{
	uint32_t bus_fault_register = *(uint8_t *)0xE002ED29;
  407d34:	4b11      	ldr	r3, [pc, #68]	; (407d7c <BusFault_Handler+0x48>)

	board_serial_print("Bus fault handler triggered\n\n");
  407d36:	4812      	ldr	r0, [pc, #72]	; (407d80 <BusFault_Handler+0x4c>)
{
  407d38:	b570      	push	{r4, r5, r6, lr}
	uint32_t bus_fault_register = *(uint8_t *)0xE002ED29;
  407d3a:	781d      	ldrb	r5, [r3, #0]
	board_serial_print("Bus fault handler triggered\n\n");
  407d3c:	4c11      	ldr	r4, [pc, #68]	; (407d84 <BusFault_Handler+0x50>)
  407d3e:	47a0      	blx	r4

	board_serial_print("BFARVALID\t%d\n", (bus_fault_register & (1 << 7)) ? 1 : 0);
  407d40:	4811      	ldr	r0, [pc, #68]	; (407d88 <BusFault_Handler+0x54>)
  407d42:	09e9      	lsrs	r1, r5, #7
  407d44:	47a0      	blx	r4
	board_serial_print("LSPERR\t%d\n", (bus_fault_register & (1 << 5)) ? 1 : 0);
  407d46:	f3c5 1140 	ubfx	r1, r5, #5, #1
  407d4a:	4810      	ldr	r0, [pc, #64]	; (407d8c <BusFault_Handler+0x58>)
  407d4c:	47a0      	blx	r4
	board_serial_print("STKERR\t%d\n", (bus_fault_register & (1 << 4)) ? 1 : 0);
  407d4e:	f3c5 1100 	ubfx	r1, r5, #4, #1
  407d52:	480f      	ldr	r0, [pc, #60]	; (407d90 <BusFault_Handler+0x5c>)
  407d54:	47a0      	blx	r4
	board_serial_print("UNSTKERR\t%d\n", (bus_fault_register & (1 << 3)) ? 1 : 0);
  407d56:	f3c5 01c0 	ubfx	r1, r5, #3, #1
  407d5a:	480e      	ldr	r0, [pc, #56]	; (407d94 <BusFault_Handler+0x60>)
  407d5c:	47a0      	blx	r4
	board_serial_print("IMPRECISERR\t%d\n", (bus_fault_register & (1 << 2)) ? 1 : 0);
  407d5e:	f3c5 0180 	ubfx	r1, r5, #2, #1
  407d62:	480d      	ldr	r0, [pc, #52]	; (407d98 <BusFault_Handler+0x64>)
  407d64:	47a0      	blx	r4
	board_serial_print("PRECISERR\t%d\n", (bus_fault_register & (1 << 1)) ? 1 : 0);
  407d66:	f3c5 0140 	ubfx	r1, r5, #1, #1
  407d6a:	480c      	ldr	r0, [pc, #48]	; (407d9c <BusFault_Handler+0x68>)
  407d6c:	47a0      	blx	r4
	board_serial_print("IBUSERR\t%d\n", (bus_fault_register & (1 << 0)) ? 1 : 0);
  407d6e:	f005 0101 	and.w	r1, r5, #1
  407d72:	4623      	mov	r3, r4
  407d74:	480a      	ldr	r0, [pc, #40]	; (407da0 <BusFault_Handler+0x6c>)
}
  407d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	board_serial_print("IBUSERR\t%d\n", (bus_fault_register & (1 << 0)) ? 1 : 0);
  407d7a:	4718      	bx	r3
  407d7c:	e002ed29 	.word	0xe002ed29
  407d80:	0040b4b0 	.word	0x0040b4b0
  407d84:	0040052d 	.word	0x0040052d
  407d88:	0040b4d0 	.word	0x0040b4d0
  407d8c:	0040b4e0 	.word	0x0040b4e0
  407d90:	0040b4ec 	.word	0x0040b4ec
  407d94:	0040b4f8 	.word	0x0040b4f8
  407d98:	0040b508 	.word	0x0040b508
  407d9c:	0040b518 	.word	0x0040b518
  407da0:	0040b528 	.word	0x0040b528

00407da4 <UsageFault_Handler>:
//--------------------------------------------------------------------------------------------------//


void UsageFault_Handler()
{
	uint32_t usage_fault_register = *(uint16_t *)0xE000ED2A;
  407da4:	4b10      	ldr	r3, [pc, #64]	; (407de8 <UsageFault_Handler+0x44>)

	board_serial_print("Usage fault handler triggered\n\n");
  407da6:	4811      	ldr	r0, [pc, #68]	; (407dec <UsageFault_Handler+0x48>)
{
  407da8:	b570      	push	{r4, r5, r6, lr}
	uint32_t usage_fault_register = *(uint16_t *)0xE000ED2A;
  407daa:	881d      	ldrh	r5, [r3, #0]
	board_serial_print("Usage fault handler triggered\n\n");
  407dac:	4c10      	ldr	r4, [pc, #64]	; (407df0 <UsageFault_Handler+0x4c>)
  407dae:	47a0      	blx	r4

	board_serial_print("DIVBYZERO\t\t%d\n", (usage_fault_register & (1 << 9)) ? 1 : 0);
  407db0:	f3c5 2140 	ubfx	r1, r5, #9, #1
  407db4:	480f      	ldr	r0, [pc, #60]	; (407df4 <UsageFault_Handler+0x50>)
  407db6:	47a0      	blx	r4
	board_serial_print("UNALIGNED\t\t%d\n", (usage_fault_register & (1 << 8)) ? 1 : 0);
  407db8:	f3c5 2100 	ubfx	r1, r5, #8, #1
  407dbc:	480e      	ldr	r0, [pc, #56]	; (407df8 <UsageFault_Handler+0x54>)
  407dbe:	47a0      	blx	r4
	board_serial_print("NOCP\t\t\t%d\n", (usage_fault_register & (1 << 3)) ? 1 : 0);
  407dc0:	f3c5 01c0 	ubfx	r1, r5, #3, #1
  407dc4:	480d      	ldr	r0, [pc, #52]	; (407dfc <UsageFault_Handler+0x58>)
  407dc6:	47a0      	blx	r4
	board_serial_print("INVPC\t\t\t%d\n", (usage_fault_register & (1 << 2)) ? 1 : 0);
  407dc8:	f3c5 0180 	ubfx	r1, r5, #2, #1
  407dcc:	480c      	ldr	r0, [pc, #48]	; (407e00 <UsageFault_Handler+0x5c>)
  407dce:	47a0      	blx	r4
	board_serial_print("INVSTATE\t\t%d\n", (usage_fault_register & (1 << 1)) ? 1 : 0);
  407dd0:	f3c5 0140 	ubfx	r1, r5, #1, #1
  407dd4:	480b      	ldr	r0, [pc, #44]	; (407e04 <UsageFault_Handler+0x60>)
  407dd6:	47a0      	blx	r4
	board_serial_print("UNDEFINESTR\t%d\n", (usage_fault_register & (1 << 0)) ? 1 : 0);
  407dd8:	f005 0101 	and.w	r1, r5, #1
  407ddc:	4623      	mov	r3, r4
  407dde:	480a      	ldr	r0, [pc, #40]	; (407e08 <UsageFault_Handler+0x64>)

}
  407de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	board_serial_print("UNDEFINESTR\t%d\n", (usage_fault_register & (1 << 0)) ? 1 : 0);
  407de4:	4718      	bx	r3
  407de6:	bf00      	nop
  407de8:	e000ed2a 	.word	0xe000ed2a
  407dec:	0040b534 	.word	0x0040b534
  407df0:	0040052d 	.word	0x0040052d
  407df4:	0040b554 	.word	0x0040b554
  407df8:	0040b564 	.word	0x0040b564
  407dfc:	0040b574 	.word	0x0040b574
  407e00:	0040b580 	.word	0x0040b580
  407e04:	0040b58c 	.word	0x0040b58c
  407e08:	0040b59c 	.word	0x0040b59c

00407e0c <HardFault_Handler>:

void HardFault_Handler()
{
	uint32_t usage_fault_register = *(uint16_t *)0xE000ED2A;
	uint32_t bus_fault_register = *(uint8_t *)0xE002ED29;
	uint32_t memory_fault_register = *(uint8_t *)0xE000ED28;
  407e0c:	4908      	ldr	r1, [pc, #32]	; (407e30 <HardFault_Handler+0x24>)
	uint32_t bus_fault_register = *(uint8_t *)0xE002ED29;
  407e0e:	4a09      	ldr	r2, [pc, #36]	; (407e34 <HardFault_Handler+0x28>)
	uint32_t usage_fault_register = *(uint16_t *)0xE000ED2A;
  407e10:	4b09      	ldr	r3, [pc, #36]	; (407e38 <HardFault_Handler+0x2c>)
	
	board_serial_print_register("\n\nBus: ", bus_fault_register);
  407e12:	480a      	ldr	r0, [pc, #40]	; (407e3c <HardFault_Handler+0x30>)
{
  407e14:	b570      	push	{r4, r5, r6, lr}
	uint32_t memory_fault_register = *(uint8_t *)0xE000ED28;
  407e16:	780e      	ldrb	r6, [r1, #0]
	uint32_t usage_fault_register = *(uint16_t *)0xE000ED2A;
  407e18:	881d      	ldrh	r5, [r3, #0]
	board_serial_print_register("\n\nBus: ", bus_fault_register);
  407e1a:	7811      	ldrb	r1, [r2, #0]
  407e1c:	4c08      	ldr	r4, [pc, #32]	; (407e40 <HardFault_Handler+0x34>)
  407e1e:	47a0      	blx	r4
	board_serial_print_register("Memory: ", memory_fault_register);
  407e20:	4631      	mov	r1, r6
  407e22:	4808      	ldr	r0, [pc, #32]	; (407e44 <HardFault_Handler+0x38>)
  407e24:	47a0      	blx	r4
	board_serial_print_register("Usage: ", usage_fault_register);
  407e26:	4629      	mov	r1, r5
  407e28:	4807      	ldr	r0, [pc, #28]	; (407e48 <HardFault_Handler+0x3c>)
  407e2a:	47a0      	blx	r4
  407e2c:	e7fe      	b.n	407e2c <HardFault_Handler+0x20>
  407e2e:	bf00      	nop
  407e30:	e000ed28 	.word	0xe000ed28
  407e34:	e002ed29 	.word	0xe002ed29
  407e38:	e000ed2a 	.word	0xe000ed2a
  407e3c:	0040b5ac 	.word	0x0040b5ac
  407e40:	00400c51 	.word	0x00400c51
  407e44:	0040b5b4 	.word	0x0040b5b4
  407e48:	0040b5c0 	.word	0x0040b5c0

00407e4c <kernel_startup>:

//--------------------------------------------------------------------------------------------------//


void kernel_startup(void)
{
  407e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Disable interrupt under system configuration
	interrupt_global_disable();
  407e50:	4b46      	ldr	r3, [pc, #280]	; (407f6c <kernel_startup+0x120>)
  407e52:	4798      	blx	r3
	// The kernel will pend the PendSV handler and perform a context
	// switch if the SysTick exception is executed. If this happens 
	// before the system and kernel is configured, the system will
	// crash. Therefor we must disable interrupt and SysTick until
	// right before we launch the scheduler.
	systick_disable();
  407e54:	4b46      	ldr	r3, [pc, #280]	; (407f70 <kernel_startup+0x124>)
  407e56:	4798      	blx	r3
	
	
	// Disable watchdog
	watchdog_disable();
  407e58:	4b46      	ldr	r3, [pc, #280]	; (407f74 <kernel_startup+0x128>)
  407e5a:	4798      	blx	r3
	
	
	// Set flash wait states before boosting the clock
	flash_set_wait_states(FLASH_NUMBER_OF_WAIT_STATES);
  407e5c:	200a      	movs	r0, #10
  407e5e:	4b46      	ldr	r3, [pc, #280]	; (407f78 <kernel_startup+0x12c>)
  407e60:	4798      	blx	r3
	
	
	// Configure the clock network
	clock_sources_config(CLOCK_SOURCE_CRYSTAL, CLOCK_CRYSTAL_STARTUP_TIME);
  407e62:	213e      	movs	r1, #62	; 0x3e
  407e64:	2000      	movs	r0, #0
  407e66:	4b45      	ldr	r3, [pc, #276]	; (407f7c <kernel_startup+0x130>)
  407e68:	4798      	blx	r3
	clock_main_clock_config(CLOCK_SOURCE_CRYSTAL);
  407e6a:	2000      	movs	r0, #0
  407e6c:	4b44      	ldr	r3, [pc, #272]	; (407f80 <kernel_startup+0x134>)
  407e6e:	4798      	blx	r3
	clock_pll_config(CLOCK_PLLA_MULTIPLIER, CLOCK_PLLA_DIVISION, CLOCK_PLLA_STARTUP_TIME);
  407e70:	223f      	movs	r2, #63	; 0x3f
  407e72:	2101      	movs	r1, #1
  407e74:	2019      	movs	r0, #25
  407e76:	4b43      	ldr	r3, [pc, #268]	; (407f84 <kernel_startup+0x138>)
  407e78:	4798      	blx	r3
	clock_master_clock_config(CLOCK_MASTER_CLOCK_SOURCE_PLLA_CLOCK, CLOCK_MASTER_CLOCK_PRESCALER_1, CLOCK_MASTER_CLOCK_DIVISION_DIV_2);
  407e7a:	2201      	movs	r2, #1
  407e7c:	2100      	movs	r1, #0
  407e7e:	2002      	movs	r0, #2
  407e80:	4b41      	ldr	r3, [pc, #260]	; (407f88 <kernel_startup+0x13c>)
  407e82:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
  407e84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407e88:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  407e8c:	483f      	ldr	r0, [pc, #252]	; (407f8c <kernel_startup+0x140>)
  407e8e:	2200      	movs	r2, #0
  407e90:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  407e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407e98:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  407e9c:	6943      	ldr	r3, [r0, #20]
  407e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  407ea2:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  407ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407ea8:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  407eac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  407eb0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  407eb4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  407eb8:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  407ebc:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  407ec0:	f3c3 334e 	ubfx	r3, r3, #13, #15
  407ec4:	07b7      	lsls	r7, r6, #30
  407ec6:	015d      	lsls	r5, r3, #5
  407ec8:	ea05 040e 	and.w	r4, r5, lr
{
  407ecc:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  407ece:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  407ed0:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
  407ed4:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  407ed6:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  407eda:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
  407ede:	1c53      	adds	r3, r2, #1
  407ee0:	d1f6      	bne.n	407ed0 <kernel_startup+0x84>
  407ee2:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  407ee4:	f115 0f20 	cmn.w	r5, #32
  407ee8:	d1ee      	bne.n	407ec8 <kernel_startup+0x7c>
  407eea:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  407eee:	6943      	ldr	r3, [r0, #20]
  407ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  407ef4:	6143      	str	r3, [r0, #20]
  407ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407efa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  407efe:	2300      	movs	r3, #0
  407f00:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  407f04:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  407f08:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  407f0c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
  407f10:	4c1e      	ldr	r4, [pc, #120]	; (407f8c <kernel_startup+0x140>)
  407f12:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  407f16:	f3c3 334e 	ubfx	r3, r3, #13, #15
  407f1a:	07b7      	lsls	r7, r6, #30
  407f1c:	015d      	lsls	r5, r3, #5
  407f1e:	ea05 000e 	and.w	r0, r5, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  407f22:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  407f24:	4632      	mov	r2, r6
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
  407f26:	ea40 0301 	orr.w	r3, r0, r1
      } while (ways-- != 0U);
  407f2a:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
  407f2c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  407f30:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
  407f34:	1c53      	adds	r3, r2, #1
  407f36:	d1f6      	bne.n	407f26 <kernel_startup+0xda>
  407f38:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  407f3a:	f115 0f20 	cmn.w	r5, #32
  407f3e:	d1ee      	bne.n	407f1e <kernel_startup+0xd2>
  407f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407f44:	f3bf 8f6f 	isb	sy
	SCB_CleanInvalidateDCache();
	
	
	// Start the dynamic memory
	// WARNING: Hard fault will occur if the dynamic memory is not configured
	dram_config();
  407f48:	4b11      	ldr	r3, [pc, #68]	; (407f90 <kernel_startup+0x144>)
  407f4a:	4798      	blx	r3
	dynamic_memory_config();
  407f4c:	4b11      	ldr	r3, [pc, #68]	; (407f94 <kernel_startup+0x148>)
  407f4e:	4798      	blx	r3
	
	
	// Configure the DMA core
	dma_config();
  407f50:	4b11      	ldr	r3, [pc, #68]	; (407f98 <kernel_startup+0x14c>)
  407f52:	4798      	blx	r3
	//
	// The serial programming are used for programming and runtime stats printing.
	// It is multiplexed with the display lines and must be deactivated is display is used.
	//
	// The UART is used for mouse / keyboard interface until the USB stack is done
	board_serial_config();
  407f54:	4b11      	ldr	r3, [pc, #68]	; (407f9c <kernel_startup+0x150>)
  407f56:	4798      	blx	r3
	board_serial_programming_config();
  407f58:	4b11      	ldr	r3, [pc, #68]	; (407fa0 <kernel_startup+0x154>)
  407f5a:	4798      	blx	r3
	
	
	// Configure the on board button
	board_button_config();
  407f5c:	4b11      	ldr	r3, [pc, #68]	; (407fa4 <kernel_startup+0x158>)
  407f5e:	4798      	blx	r3
	// Start the graphics core	
	//graphics_driver_config();

	
	// Now we start up the kernel and its components
	thread_config();
  407f60:	4b11      	ldr	r3, [pc, #68]	; (407fa8 <kernel_startup+0x15c>)
  407f62:	4798      	blx	r3
	
	
	// Starts the whole files system in its own thread
	file_system_command_line_config();
  407f64:	4b11      	ldr	r3, [pc, #68]	; (407fac <kernel_startup+0x160>)
}
  407f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	file_system_command_line_config();
  407f6a:	4718      	bx	r3
  407f6c:	004031b1 	.word	0x004031b1
  407f70:	00403259 	.word	0x00403259
  407f74:	00403695 	.word	0x00403695
  407f78:	004029e9 	.word	0x004029e9
  407f7c:	00402235 	.word	0x00402235
  407f80:	004022d1 	.word	0x004022d1
  407f84:	00402329 	.word	0x00402329
  407f88:	0040238d 	.word	0x0040238d
  407f8c:	e000ed00 	.word	0xe000ed00
  407f90:	004026e9 	.word	0x004026e9
  407f94:	00408b75 	.word	0x00408b75
  407f98:	004024a1 	.word	0x004024a1
  407f9c:	00400365 	.word	0x00400365
  407fa0:	00400e01 	.word	0x00400e01
  407fa4:	004001d5 	.word	0x004001d5
  407fa8:	00408abd 	.word	0x00408abd
  407fac:	00401969 	.word	0x00401969

00407fb0 <list_insert_first>:


void list_insert_first(list_node_s* list_item, list_s* list)
{
	// Check if the size is zero
	if (list->size == 0)
  407fb0:	890b      	ldrh	r3, [r1, #8]
{
  407fb2:	b570      	push	{r4, r5, r6, lr}
  407fb4:	460d      	mov	r5, r1
  407fb6:	4604      	mov	r4, r0
	if (list->size == 0)
  407fb8:	b1eb      	cbz	r3, 407ff6 <list_insert_first+0x46>
  407fba:	680b      	ldr	r3, [r1, #0]
	if (list->first == NULL)
  407fbc:	b123      	cbz	r3, 407fc8 <list_insert_first+0x18>
		if (list_item == list_iterator)
  407fbe:	429c      	cmp	r4, r3
  407fc0:	d020      	beq.n	408004 <list_insert_first+0x54>
		list_iterator = list_iterator->next;
  407fc2:	681b      	ldr	r3, [r3, #0]
	while (list_iterator != NULL)
  407fc4:	2b00      	cmp	r3, #0
  407fc6:	d1fa      	bne.n	407fbe <list_insert_first+0xe>
	if (list->first == NULL)
  407fc8:	2001      	movs	r0, #1
		list_item->prev = NULL;
	}
	else
	{
		// Search the list to make sure it do not exist
		check(kernel_list_search(list_item, list) == 0);
  407fca:	2244      	movs	r2, #68	; 0x44
  407fcc:	490e      	ldr	r1, [pc, #56]	; (408008 <list_insert_first+0x58>)
  407fce:	4e0f      	ldr	r6, [pc, #60]	; (40800c <list_insert_first+0x5c>)
  407fd0:	47b0      	blx	r6
		
		// Update the list item pointers
		list_item->next = list->first;
  407fd2:	682b      	ldr	r3, [r5, #0]
		list_item->prev = NULL;
  407fd4:	2100      	movs	r1, #0
		
		// Link backwards from first node
		check(list->first->prev == NULL);
  407fd6:	224b      	movs	r2, #75	; 0x4b
		list_item->next = list->first;
  407fd8:	6023      	str	r3, [r4, #0]
		list_item->prev = NULL;
  407fda:	6061      	str	r1, [r4, #4]
		check(list->first->prev == NULL);
  407fdc:	6858      	ldr	r0, [r3, #4]
  407fde:	490a      	ldr	r1, [pc, #40]	; (408008 <list_insert_first+0x58>)
  407fe0:	fab0 f080 	clz	r0, r0
  407fe4:	0940      	lsrs	r0, r0, #5
  407fe6:	47b0      	blx	r6
  407fe8:	892b      	ldrh	r3, [r5, #8]
		list->first->prev = list_item;
  407fea:	682a      	ldr	r2, [r5, #0]
		// Update the first pointer
		list->first = list_item;
	}
	
	// Increment the size
	list->size++;
  407fec:	3301      	adds	r3, #1
		list->first->prev = list_item;
  407fee:	6054      	str	r4, [r2, #4]
		list->first = list_item;
  407ff0:	602c      	str	r4, [r5, #0]
	list->size++;
  407ff2:	812b      	strh	r3, [r5, #8]
  407ff4:	bd70      	pop	{r4, r5, r6, pc}
		list->first = list_item;
  407ff6:	6028      	str	r0, [r5, #0]
		list->last = list_item;
  407ff8:	6068      	str	r0, [r5, #4]
		list_item->next = NULL;
  407ffa:	6003      	str	r3, [r0, #0]
		list_item->prev = NULL;
  407ffc:	6043      	str	r3, [r0, #4]
	list->size++;
  407ffe:	3301      	adds	r3, #1
  408000:	812b      	strh	r3, [r5, #8]
  408002:	bd70      	pop	{r4, r5, r6, pc}
		if (list_item == list_iterator)
  408004:	2000      	movs	r0, #0
  408006:	e7e0      	b.n	407fca <list_insert_first+0x1a>
  408008:	0040b5c8 	.word	0x0040b5c8
  40800c:	00402219 	.word	0x00402219

00408010 <list_insert_last>:


void list_insert_last(list_node_s* list_item, list_s* list)
{
	// Check if the size is zero
	if (list->size == 0)
  408010:	890b      	ldrh	r3, [r1, #8]
{
  408012:	b570      	push	{r4, r5, r6, lr}
  408014:	460d      	mov	r5, r1
  408016:	4604      	mov	r4, r0
	if (list->size == 0)
  408018:	b1eb      	cbz	r3, 408056 <list_insert_last+0x46>
  40801a:	680b      	ldr	r3, [r1, #0]
	if (list->first == NULL)
  40801c:	b123      	cbz	r3, 408028 <list_insert_last+0x18>
		if (list_item == list_iterator)
  40801e:	429c      	cmp	r4, r3
  408020:	d020      	beq.n	408064 <list_insert_last+0x54>
		list_iterator = list_iterator->next;
  408022:	681b      	ldr	r3, [r3, #0]
	while (list_iterator != NULL)
  408024:	2b00      	cmp	r3, #0
  408026:	d1fa      	bne.n	40801e <list_insert_last+0xe>
	if (list->first == NULL)
  408028:	2001      	movs	r0, #1
		list_item->prev = NULL;
	}
	else
	{
		// Search the list to make sure it do not exist
		check(kernel_list_search(list_item, list) == 0);
  40802a:	226a      	movs	r2, #106	; 0x6a
  40802c:	490e      	ldr	r1, [pc, #56]	; (408068 <list_insert_last+0x58>)
  40802e:	4e0f      	ldr	r6, [pc, #60]	; (40806c <list_insert_last+0x5c>)
  408030:	47b0      	blx	r6
		
		// Update the list item pointers
		list_item->next = NULL;
		list_item->prev = list->last;
  408032:	686b      	ldr	r3, [r5, #4]
		list_item->next = NULL;
  408034:	2100      	movs	r1, #0
		
		// Link backwards from first node
		check(list->last->next == NULL);
  408036:	2271      	movs	r2, #113	; 0x71
		list_item->next = NULL;
  408038:	6021      	str	r1, [r4, #0]
		check(list->last->next == NULL);
  40803a:	6818      	ldr	r0, [r3, #0]
  40803c:	490a      	ldr	r1, [pc, #40]	; (408068 <list_insert_last+0x58>)
  40803e:	fab0 f080 	clz	r0, r0
		list_item->prev = list->last;
  408042:	6063      	str	r3, [r4, #4]
		check(list->last->next == NULL);
  408044:	0940      	lsrs	r0, r0, #5
  408046:	47b0      	blx	r6
  408048:	892b      	ldrh	r3, [r5, #8]
		list->last->next = list_item;
  40804a:	686a      	ldr	r2, [r5, #4]
		// Update the first pointer
		list->last = list_item;
	}
	
	// Increment the size
	list->size++;
  40804c:	3301      	adds	r3, #1
		list->last->next = list_item;
  40804e:	6014      	str	r4, [r2, #0]
		list->last = list_item;
  408050:	606c      	str	r4, [r5, #4]
	list->size++;
  408052:	812b      	strh	r3, [r5, #8]
  408054:	bd70      	pop	{r4, r5, r6, pc}
		list->first = list_item;
  408056:	6028      	str	r0, [r5, #0]
		list->last = list_item;
  408058:	6068      	str	r0, [r5, #4]
		list_item->next = NULL;
  40805a:	6003      	str	r3, [r0, #0]
		list_item->prev = NULL;
  40805c:	6043      	str	r3, [r0, #4]
	list->size++;
  40805e:	3301      	adds	r3, #1
  408060:	812b      	strh	r3, [r5, #8]
  408062:	bd70      	pop	{r4, r5, r6, pc}
		if (list_item == list_iterator)
  408064:	2000      	movs	r0, #0
  408066:	e7e0      	b.n	40802a <list_insert_last+0x1a>
  408068:	0040b5c8 	.word	0x0040b5c8
  40806c:	00402219 	.word	0x00402219

00408070 <list_insert_delay>:


void list_insert_delay(list_node_s* list_item, list_s* list)
{
	// Check if the size if zero
	if (list->size == 0)
  408070:	890b      	ldrh	r3, [r1, #8]
  408072:	2b00      	cmp	r3, #0
  408074:	d032      	beq.n	4080dc <list_insert_delay+0x6c>
  408076:	680b      	ldr	r3, [r1, #0]
{
  408078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list->first == NULL)
  40807c:	b123      	cbz	r3, 408088 <list_insert_delay+0x18>
		if (list_item == list_iterator)
  40807e:	4298      	cmp	r0, r3
  408080:	d033      	beq.n	4080ea <list_insert_delay+0x7a>
		list_iterator = list_iterator->next;
  408082:	681b      	ldr	r3, [r3, #0]
	while (list_iterator != NULL)
  408084:	2b00      	cmp	r3, #0
  408086:	d1fa      	bne.n	40807e <list_insert_delay+0xe>
	if (list->first == NULL)
  408088:	2301      	movs	r3, #1
  40808a:	460d      	mov	r5, r1
  40808c:	4604      	mov	r4, r0
		list->size = 1;
	}
	else
	{
		// Search the list to make sure it do not exist
		check(kernel_list_search(list_item, list) == 0);
  40808e:	2292      	movs	r2, #146	; 0x92
  408090:	4618      	mov	r0, r3
  408092:	4941      	ldr	r1, [pc, #260]	; (408198 <list_insert_delay+0x128>)
  408094:	4e41      	ldr	r6, [pc, #260]	; (40819c <list_insert_delay+0x12c>)
  408096:	47b0      	blx	r6
		
		// Check the tick value
		uint32_t tmp_value = list_item->value;
		
		if (tmp_value <= list->first->value)
  408098:	682f      	ldr	r7, [r5, #0]
  40809a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
  40809e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  4080a2:	2100      	movs	r1, #0
  4080a4:	428b      	cmp	r3, r1
  4080a6:	bf08      	it	eq
  4080a8:	4282      	cmpeq	r2, r0
  4080aa:	d22a      	bcs.n	408102 <list_insert_delay+0x92>
			// Insert at the beginning
			list_insert_first(list_item, list);
			
			// Increment handled
		}
		else if (tmp_value >= list->last->value)
  4080ac:	686b      	ldr	r3, [r5, #4]
  4080ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  4080b2:	4299      	cmp	r1, r3
  4080b4:	bf08      	it	eq
  4080b6:	4290      	cmpeq	r0, r2
  4080b8:	d306      	bcc.n	4080c8 <list_insert_delay+0x58>
  4080ba:	e042      	b.n	408142 <list_insert_delay+0xd2>
			
			// Iterate though the list
			while (list_iterator != NULL)
			{
				// Check tick against the following item
				if (tmp_value < list_iterator->value)
  4080bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  4080c0:	4299      	cmp	r1, r3
  4080c2:	bf08      	it	eq
  4080c4:	4290      	cmpeq	r0, r2
  4080c6:	d312      	bcc.n	4080ee <list_insert_delay+0x7e>
					list->size++;
					
					return;
				}
				
				list_iterator = list_iterator->next;
  4080c8:	683f      	ldr	r7, [r7, #0]
			while (list_iterator != NULL)
  4080ca:	2f00      	cmp	r7, #0
  4080cc:	d1f6      	bne.n	4080bc <list_insert_delay+0x4c>
			}
			
			// Should not reach here
			check(0);
  4080ce:	4633      	mov	r3, r6
  4080d0:	22c1      	movs	r2, #193	; 0xc1
  4080d2:	4931      	ldr	r1, [pc, #196]	; (408198 <list_insert_delay+0x128>)
  4080d4:	2000      	movs	r0, #0
		}
	}
}
  4080d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			check(0);
  4080da:	4718      	bx	r3
		list->size = 1;
  4080dc:	2201      	movs	r2, #1
		list->first = list_item;
  4080de:	6008      	str	r0, [r1, #0]
		list->last = list_item;
  4080e0:	6048      	str	r0, [r1, #4]
		list_item->next = NULL;
  4080e2:	6003      	str	r3, [r0, #0]
		list_item->prev = NULL;
  4080e4:	6043      	str	r3, [r0, #4]
		list->size = 1;
  4080e6:	810a      	strh	r2, [r1, #8]
  4080e8:	4770      	bx	lr
		if (list_item == list_iterator)
  4080ea:	2300      	movs	r3, #0
  4080ec:	e7cd      	b.n	40808a <list_insert_delay+0x1a>
					list->size++;
  4080ee:	892b      	ldrh	r3, [r5, #8]
					list_node_s* prev_item = list_iterator->prev;
  4080f0:	687a      	ldr	r2, [r7, #4]
					list->size++;
  4080f2:	3301      	adds	r3, #1
					list_item->next = list_iterator;
  4080f4:	6027      	str	r7, [r4, #0]
					list_iterator->prev = list_item;
  4080f6:	607c      	str	r4, [r7, #4]
					prev_item->next = list_item;
  4080f8:	6014      	str	r4, [r2, #0]
					list_item->prev = prev_item;
  4080fa:	6062      	str	r2, [r4, #4]
					list->size++;
  4080fc:	812b      	strh	r3, [r5, #8]
					return;
  4080fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (list->size == 0)
  408102:	892b      	ldrh	r3, [r5, #8]
  408104:	2b00      	cmp	r3, #0
  408106:	d03b      	beq.n	408180 <list_insert_delay+0x110>
		if (list_item == list_iterator)
  408108:	42bc      	cmp	r4, r7
  40810a:	d041      	beq.n	408190 <list_insert_delay+0x120>
		list_iterator = list_iterator->next;
  40810c:	683b      	ldr	r3, [r7, #0]
	while (list_iterator != NULL)
  40810e:	b123      	cbz	r3, 40811a <list_insert_delay+0xaa>
		if (list_item == list_iterator)
  408110:	429c      	cmp	r4, r3
  408112:	d03d      	beq.n	408190 <list_insert_delay+0x120>
		list_iterator = list_iterator->next;
  408114:	681b      	ldr	r3, [r3, #0]
	while (list_iterator != NULL)
  408116:	2b00      	cmp	r3, #0
  408118:	d1fa      	bne.n	408110 <list_insert_delay+0xa0>
  40811a:	2001      	movs	r0, #1
		check(kernel_list_search(list_item, list) == 0);
  40811c:	2244      	movs	r2, #68	; 0x44
  40811e:	491e      	ldr	r1, [pc, #120]	; (408198 <list_insert_delay+0x128>)
  408120:	47b0      	blx	r6
		list_item->next = list->first;
  408122:	682b      	ldr	r3, [r5, #0]
		list_item->prev = NULL;
  408124:	2100      	movs	r1, #0
		check(list->first->prev == NULL);
  408126:	224b      	movs	r2, #75	; 0x4b
		list_item->next = list->first;
  408128:	6023      	str	r3, [r4, #0]
		list_item->prev = NULL;
  40812a:	6061      	str	r1, [r4, #4]
		check(list->first->prev == NULL);
  40812c:	6858      	ldr	r0, [r3, #4]
  40812e:	491a      	ldr	r1, [pc, #104]	; (408198 <list_insert_delay+0x128>)
  408130:	fab0 f080 	clz	r0, r0
  408134:	0940      	lsrs	r0, r0, #5
  408136:	47b0      	blx	r6
		list->first->prev = list_item;
  408138:	682a      	ldr	r2, [r5, #0]
  40813a:	892b      	ldrh	r3, [r5, #8]
  40813c:	6054      	str	r4, [r2, #4]
		list->first = list_item;
  40813e:	602c      	str	r4, [r5, #0]
  408140:	e022      	b.n	408188 <list_insert_delay+0x118>
	if (list->size == 0)
  408142:	892b      	ldrh	r3, [r5, #8]
  408144:	b1e3      	cbz	r3, 408180 <list_insert_delay+0x110>
		if (list_item == list_iterator)
  408146:	42bc      	cmp	r4, r7
  408148:	d024      	beq.n	408194 <list_insert_delay+0x124>
		list_iterator = list_iterator->next;
  40814a:	683b      	ldr	r3, [r7, #0]
	while (list_iterator != NULL)
  40814c:	b123      	cbz	r3, 408158 <list_insert_delay+0xe8>
		if (list_item == list_iterator)
  40814e:	429c      	cmp	r4, r3
  408150:	d020      	beq.n	408194 <list_insert_delay+0x124>
		list_iterator = list_iterator->next;
  408152:	681b      	ldr	r3, [r3, #0]
	while (list_iterator != NULL)
  408154:	2b00      	cmp	r3, #0
  408156:	d1fa      	bne.n	40814e <list_insert_delay+0xde>
  408158:	2001      	movs	r0, #1
		check(kernel_list_search(list_item, list) == 0);
  40815a:	226a      	movs	r2, #106	; 0x6a
  40815c:	490e      	ldr	r1, [pc, #56]	; (408198 <list_insert_delay+0x128>)
  40815e:	47b0      	blx	r6
		list_item->prev = list->last;
  408160:	686b      	ldr	r3, [r5, #4]
		list_item->next = NULL;
  408162:	2100      	movs	r1, #0
		check(list->last->next == NULL);
  408164:	2271      	movs	r2, #113	; 0x71
		list_item->next = NULL;
  408166:	6021      	str	r1, [r4, #0]
		check(list->last->next == NULL);
  408168:	6818      	ldr	r0, [r3, #0]
  40816a:	490b      	ldr	r1, [pc, #44]	; (408198 <list_insert_delay+0x128>)
  40816c:	fab0 f080 	clz	r0, r0
		list_item->prev = list->last;
  408170:	6063      	str	r3, [r4, #4]
		check(list->last->next == NULL);
  408172:	0940      	lsrs	r0, r0, #5
  408174:	47b0      	blx	r6
		list->last->next = list_item;
  408176:	686a      	ldr	r2, [r5, #4]
  408178:	892b      	ldrh	r3, [r5, #8]
  40817a:	6014      	str	r4, [r2, #0]
		list->last = list_item;
  40817c:	606c      	str	r4, [r5, #4]
  40817e:	e003      	b.n	408188 <list_insert_delay+0x118>
		list->first = list_item;
  408180:	602c      	str	r4, [r5, #0]
		list->last = list_item;
  408182:	606c      	str	r4, [r5, #4]
		list_item->next = NULL;
  408184:	6023      	str	r3, [r4, #0]
		list_item->prev = NULL;
  408186:	6063      	str	r3, [r4, #4]
	list->size++;
  408188:	3301      	adds	r3, #1
  40818a:	812b      	strh	r3, [r5, #8]
  40818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (list_item == list_iterator)
  408190:	2000      	movs	r0, #0
  408192:	e7c3      	b.n	40811c <list_insert_delay+0xac>
  408194:	2000      	movs	r0, #0
  408196:	e7e0      	b.n	40815a <list_insert_delay+0xea>
  408198:	0040b5c8 	.word	0x0040b5c8
  40819c:	00402219 	.word	0x00402219

004081a0 <list_remove_first>:

//--------------------------------------------------------------------------------------------------//


uint8_t list_remove_first(list_s* list)
{
  4081a0:	b538      	push	{r3, r4, r5, lr}
	if (list->size == 0)
  4081a2:	8903      	ldrh	r3, [r0, #8]
  4081a4:	b1e3      	cbz	r3, 4081e0 <list_remove_first+0x40>
	{
		// Nothing to remove
		return 0;
	}
	else if (list->size == 1)
  4081a6:	2b01      	cmp	r3, #1
  4081a8:	d01c      	beq.n	4081e4 <list_remove_first+0x44>
  4081aa:	4604      	mov	r4, r0
		list->size = 0;
	}
	else
	{
		// Remove the first element
		check(list->first != NULL);
  4081ac:	6800      	ldr	r0, [r0, #0]
  4081ae:	4d12      	ldr	r5, [pc, #72]	; (4081f8 <list_remove_first+0x58>)
  4081b0:	22e0      	movs	r2, #224	; 0xe0
  4081b2:	3000      	adds	r0, #0
  4081b4:	4911      	ldr	r1, [pc, #68]	; (4081fc <list_remove_first+0x5c>)
  4081b6:	bf18      	it	ne
  4081b8:	2001      	movne	r0, #1
  4081ba:	47a8      	blx	r5
		check(list->last != NULL);
  4081bc:	6860      	ldr	r0, [r4, #4]
  4081be:	22e1      	movs	r2, #225	; 0xe1
  4081c0:	490e      	ldr	r1, [pc, #56]	; (4081fc <list_remove_first+0x5c>)
  4081c2:	3000      	adds	r0, #0
  4081c4:	bf18      	it	ne
  4081c6:	2001      	movne	r0, #1
  4081c8:	47a8      	blx	r5
		// Update the first pointer
		list->first = list->first->next;
  4081ca:	6823      	ldr	r3, [r4, #0]
		list->first->prev->next = NULL;
		
		// Remove the backward link from the new first item
		list->first->prev = NULL;
		
		list->size--;
  4081cc:	8922      	ldrh	r2, [r4, #8]
		list->first->prev->next = NULL;
  4081ce:	2000      	movs	r0, #0
		list->first = list->first->next;
  4081d0:	6819      	ldr	r1, [r3, #0]
	}
	
	return 1;
  4081d2:	2301      	movs	r3, #1
		list->size--;
  4081d4:	3a01      	subs	r2, #1
		list->first->prev->next = NULL;
  4081d6:	684d      	ldr	r5, [r1, #4]
		list->first = list->first->next;
  4081d8:	6021      	str	r1, [r4, #0]
		list->first->prev->next = NULL;
  4081da:	6028      	str	r0, [r5, #0]
		list->first->prev = NULL;
  4081dc:	6048      	str	r0, [r1, #4]
		list->size--;
  4081de:	8122      	strh	r2, [r4, #8]
}
  4081e0:	4618      	mov	r0, r3
  4081e2:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
	}
	else if (list->size == 1)
	{
		// Remove the only element present
		list->first->next = NULL;
  4081e4:	2200      	movs	r2, #0
  4081e6:	6801      	ldr	r1, [r0, #0]
  4081e8:	600a      	str	r2, [r1, #0]
		list->first->prev = NULL;
  4081ea:	604a      	str	r2, [r1, #4]
		
		// Update the list first and last element
		list->first = NULL;
  4081ec:	6002      	str	r2, [r0, #0]
		list->last = NULL;
  4081ee:	6042      	str	r2, [r0, #4]
		
		list->size = 0;
  4081f0:	8102      	strh	r2, [r0, #8]
}
  4081f2:	4618      	mov	r0, r3
  4081f4:	bd38      	pop	{r3, r4, r5, pc}
  4081f6:	bf00      	nop
  4081f8:	00402219 	.word	0x00402219
  4081fc:	0040b5c8 	.word	0x0040b5c8

00408200 <list_remove_last>:
	if (list->size == 0)
  408200:	8903      	ldrh	r3, [r0, #8]
  408202:	b1b3      	cbz	r3, 408232 <list_remove_last+0x32>
	else if (list->size == 1)
  408204:	2b01      	cmp	r3, #1
  408206:	d00d      	beq.n	408224 <list_remove_last+0x24>
	}
	else
	{
		// Remove the last element
		list->last = list->last->prev;
  408208:	6842      	ldr	r2, [r0, #4]
		
		// Remove the forward link from the first element
		list->last->next->prev = NULL;
  40820a:	2100      	movs	r1, #0
		list->last = list->last->prev;
  40820c:	6852      	ldr	r2, [r2, #4]
{
  40820e:	b430      	push	{r4, r5}
		list->last->next->prev = NULL;
  408210:	6815      	ldr	r5, [r2, #0]
		
		// Remove the backward link from the new first item
		list->last->next = NULL;
		
		list->size--;
  408212:	1e5c      	subs	r4, r3, #1
	}
	
	return 1;
  408214:	2301      	movs	r3, #1
		list->last = list->last->prev;
  408216:	6042      	str	r2, [r0, #4]
		list->last->next->prev = NULL;
  408218:	6069      	str	r1, [r5, #4]
		list->last->next = NULL;
  40821a:	6011      	str	r1, [r2, #0]
		list->size--;
  40821c:	8104      	strh	r4, [r0, #8]
}
  40821e:	4618      	mov	r0, r3
  408220:	bc30      	pop	{r4, r5}
  408222:	4770      	bx	lr
		list->first->next = NULL;
  408224:	2200      	movs	r2, #0
  408226:	6801      	ldr	r1, [r0, #0]
  408228:	600a      	str	r2, [r1, #0]
		list->first->prev = NULL;
  40822a:	604a      	str	r2, [r1, #4]
		list->first = NULL;
  40822c:	6002      	str	r2, [r0, #0]
		list->last = NULL;
  40822e:	6042      	str	r2, [r0, #4]
		list->size = 0;
  408230:	8102      	strh	r2, [r0, #8]
}
  408232:	4618      	mov	r0, r3
  408234:	4770      	bx	lr
  408236:	bf00      	nop

00408238 <list_remove_item>:

//--------------------------------------------------------------------------------------------------//


uint8_t list_remove_item(list_node_s* list_item, list_s* list)
{
  408238:	4602      	mov	r2, r0
	if (list->size == 0)
  40823a:	8908      	ldrh	r0, [r1, #8]
  40823c:	b170      	cbz	r0, 40825c <list_remove_item+0x24>
	{
		return 0;
	}
	else if (list_item == list->first)
  40823e:	680b      	ldr	r3, [r1, #0]
  408240:	4293      	cmp	r3, r2
{
  408242:	b570      	push	{r4, r5, r6, lr}
	else if (list_item == list->first)
  408244:	d017      	beq.n	408276 <list_remove_item+0x3e>
	{
		return list_remove_first(list);
	}
	else if (list_item == list->last)
  408246:	684c      	ldr	r4, [r1, #4]
  408248:	42a2      	cmp	r2, r4
  40824a:	d102      	bne.n	408252 <list_remove_item+0x1a>
  40824c:	e031      	b.n	4082b2 <list_remove_item+0x7a>
		list_node_s* list_iterator = list->first->next;
		
		while (list_iterator != list->last)
		{
			// Check for a match
			if (list_item == list_iterator)
  40824e:	429a      	cmp	r2, r3
  408250:	d005      	beq.n	40825e <list_remove_item+0x26>
		list_node_s* list_iterator = list->first->next;
  408252:	681b      	ldr	r3, [r3, #0]
		while (list_iterator != list->last)
  408254:	429c      	cmp	r4, r3
  408256:	d1fa      	bne.n	40824e <list_remove_item+0x16>
		return 0;
  408258:	2000      	movs	r0, #0
			list_iterator = list_iterator->next;
		}
		
		return 0;
	}
}
  40825a:	bd70      	pop	{r4, r5, r6, pc}
  40825c:	4770      	bx	lr
				list_item->next->prev = list_item->prev;
  40825e:	6856      	ldr	r6, [r2, #4]
				list->size--;
  408260:	1e43      	subs	r3, r0, #1
				list_item->next->prev = list_item->prev;
  408262:	6815      	ldr	r5, [r2, #0]
				list_item->next = NULL;
  408264:	2400      	movs	r4, #0
				return 1;
  408266:	2001      	movs	r0, #1
				list_item->next->prev = list_item->prev;
  408268:	606e      	str	r6, [r5, #4]
				list_item->prev->next = list_item->next;
  40826a:	6856      	ldr	r6, [r2, #4]
  40826c:	6035      	str	r5, [r6, #0]
				list_item->next = NULL;
  40826e:	6014      	str	r4, [r2, #0]
				list_item->prev = NULL;
  408270:	6054      	str	r4, [r2, #4]
				list->size--;
  408272:	810b      	strh	r3, [r1, #8]
				return 1;
  408274:	bd70      	pop	{r4, r5, r6, pc}
	else if (list->size == 1)
  408276:	2801      	cmp	r0, #1
  408278:	d027      	beq.n	4082ca <list_remove_item+0x92>
		check(list->first != NULL);
  40827a:	1c18      	adds	r0, r3, #0
  40827c:	460c      	mov	r4, r1
  40827e:	4d16      	ldr	r5, [pc, #88]	; (4082d8 <list_remove_item+0xa0>)
  408280:	f04f 02e0 	mov.w	r2, #224	; 0xe0
  408284:	bf18      	it	ne
  408286:	2001      	movne	r0, #1
  408288:	4914      	ldr	r1, [pc, #80]	; (4082dc <list_remove_item+0xa4>)
  40828a:	47a8      	blx	r5
		check(list->last != NULL);
  40828c:	6860      	ldr	r0, [r4, #4]
  40828e:	22e1      	movs	r2, #225	; 0xe1
  408290:	4912      	ldr	r1, [pc, #72]	; (4082dc <list_remove_item+0xa4>)
  408292:	3000      	adds	r0, #0
  408294:	bf18      	it	ne
  408296:	2001      	movne	r0, #1
  408298:	47a8      	blx	r5
		list->first = list->first->next;
  40829a:	6822      	ldr	r2, [r4, #0]
		list->size--;
  40829c:	8923      	ldrh	r3, [r4, #8]
		list->first->prev->next = NULL;
  40829e:	2100      	movs	r1, #0
		list->first = list->first->next;
  4082a0:	6812      	ldr	r2, [r2, #0]
		return list_remove_first(list);
  4082a2:	2001      	movs	r0, #1
		list->size--;
  4082a4:	3b01      	subs	r3, #1
		list->first->prev->next = NULL;
  4082a6:	6855      	ldr	r5, [r2, #4]
		list->first = list->first->next;
  4082a8:	6022      	str	r2, [r4, #0]
		list->first->prev->next = NULL;
  4082aa:	6029      	str	r1, [r5, #0]
		list->first->prev = NULL;
  4082ac:	6051      	str	r1, [r2, #4]
		list->size--;
  4082ae:	8123      	strh	r3, [r4, #8]
  4082b0:	bd70      	pop	{r4, r5, r6, pc}
	else if (list->size == 1)
  4082b2:	2801      	cmp	r0, #1
  4082b4:	d009      	beq.n	4082ca <list_remove_item+0x92>
		list->last = list->last->prev;
  4082b6:	6852      	ldr	r2, [r2, #4]
		list->size--;
  4082b8:	1e43      	subs	r3, r0, #1
		list->last->next->prev = NULL;
  4082ba:	2400      	movs	r4, #0
		return list_remove_last(list);
  4082bc:	2001      	movs	r0, #1
		list->last->next->prev = NULL;
  4082be:	6815      	ldr	r5, [r2, #0]
		list->last = list->last->prev;
  4082c0:	604a      	str	r2, [r1, #4]
		list->last->next->prev = NULL;
  4082c2:	606c      	str	r4, [r5, #4]
		list->last->next = NULL;
  4082c4:	6014      	str	r4, [r2, #0]
		list->size--;
  4082c6:	810b      	strh	r3, [r1, #8]
  4082c8:	bd70      	pop	{r4, r5, r6, pc}
		list->first->next = NULL;
  4082ca:	2200      	movs	r2, #0
  4082cc:	601a      	str	r2, [r3, #0]
		list->first->prev = NULL;
  4082ce:	605a      	str	r2, [r3, #4]
		list->first = NULL;
  4082d0:	600a      	str	r2, [r1, #0]
		list->last = NULL;
  4082d2:	604a      	str	r2, [r1, #4]
		list->size = 0;
  4082d4:	810a      	strh	r2, [r1, #8]
  4082d6:	bd70      	pop	{r4, r5, r6, pc}
  4082d8:	00402219 	.word	0x00402219
  4082dc:	0040b5c8 	.word	0x0040b5c8

004082e0 <kernel_launch>:

//--------------------------------------------------------------------------------------------------//


void kernel_launch(void)
{
  4082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Configure the SysTick timer
	systick_config();
  4082e4:	4b1a      	ldr	r3, [pc, #104]	; (408350 <kernel_launch+0x70>)
	systick_set_reload_value(300000000 / KERNEL_TICK_FREQUENCY);
	
	
	systick_divider = 300000000 / KERNEL_TICK_FREQUENCY / 1000;
  4082e6:	f44f 7796 	mov.w	r7, #300	; 0x12c
	systick_config();
  4082ea:	4798      	blx	r3
	systick_set_reload_value(300000000 / KERNEL_TICK_FREQUENCY);
  4082ec:	4819      	ldr	r0, [pc, #100]	; (408354 <kernel_launch+0x74>)
  4082ee:	4b1a      	ldr	r3, [pc, #104]	; (408358 <kernel_launch+0x78>)
	
	// Start the scheduler
	scheduler_status = SCHEDULER_STATUS_RUNNING;
  4082f0:	2500      	movs	r5, #0
	systick_set_reload_value(300000000 / KERNEL_TICK_FREQUENCY);
  4082f2:	4798      	blx	r3
	systick_divider = 300000000 / KERNEL_TICK_FREQUENCY / 1000;
  4082f4:	4e19      	ldr	r6, [pc, #100]	; (40835c <kernel_launch+0x7c>)
	scheduler_status = SCHEDULER_STATUS_RUNNING;
  4082f6:	4c1a      	ldr	r4, [pc, #104]	; (408360 <kernel_launch+0x80>)
	
	
	// Update the kernel tick and tick to wake
	kernel_tick = 0;
  4082f8:	2200      	movs	r2, #0
	// Set the tick to wake variable to not trigger
	kernel_tick_to_wake = 0xffffffffffffffff;
	
	
	// Set the current thread to point to the first thread to run
	if (running_queue.last != NULL)
  4082fa:	481a      	ldr	r0, [pc, #104]	; (408364 <kernel_launch+0x84>)
	kernel_tick = 0;
  4082fc:	2300      	movs	r3, #0
	scheduler_status = SCHEDULER_STATUS_RUNNING;
  4082fe:	7025      	strb	r5, [r4, #0]
	systick_divider = 300000000 / KERNEL_TICK_FREQUENCY / 1000;
  408300:	6037      	str	r7, [r6, #0]
	kernel_tick_to_wake = 0xffffffffffffffff;
  408302:	f04f 36ff 	mov.w	r6, #4294967295
  408306:	f04f 37ff 	mov.w	r7, #4294967295
	kernel_tick = 0;
  40830a:	f8df e078 	ldr.w	lr, [pc, #120]	; 408384 <kernel_launch+0xa4>
	kernel_statistics_timer = 0;
  40830e:	4d16      	ldr	r5, [pc, #88]	; (408368 <kernel_launch+0x88>)
	kernel_tick_to_wake = 0xffffffffffffffff;
  408310:	4c16      	ldr	r4, [pc, #88]	; (40836c <kernel_launch+0x8c>)
	if (running_queue.last != NULL)
  408312:	6841      	ldr	r1, [r0, #4]
	kernel_tick = 0;
  408314:	e9ce 2300 	strd	r2, r3, [lr]
	kernel_statistics_timer = 0;
  408318:	e9c5 2300 	strd	r2, r3, [r5]
	kernel_tick_to_wake = 0xffffffffffffffff;
  40831c:	e9c4 6700 	strd	r6, r7, [r4]
	if (running_queue.last != NULL)
  408320:	b189      	cbz	r1, 408346 <kernel_launch+0x66>
	{
		current_thread = running_queue.last->object;
  408322:	6909      	ldr	r1, [r1, #16]
  408324:	4a12      	ldr	r2, [pc, #72]	; (408370 <kernel_launch+0x90>)
		
		list_remove_last(&running_queue);
  408326:	4b13      	ldr	r3, [pc, #76]	; (408374 <kernel_launch+0x94>)
		current_thread = running_queue.last->object;
  408328:	6011      	str	r1, [r2, #0]
		list_remove_last(&running_queue);
  40832a:	4798      	blx	r3
	// Under normal operation the SysTick exception should have the highest priority
	// and the PendSV should have the lowest. In debug mode this will make the system
	// crash. This is because the SysTick exception handler will print things to the
	// screen, and therefore not return within the new time slice. This means that
	// the scheduler runs several times without a context-switch.
	interrupt_enable_peripheral_interrupt(SysTick_IRQn, IRQ_LEVEL_0);
  40832c:	4c12      	ldr	r4, [pc, #72]	; (408378 <kernel_launch+0x98>)
  40832e:	2100      	movs	r1, #0
  408330:	f04f 30ff 	mov.w	r0, #4294967295
  408334:	47a0      	blx	r4
	interrupt_enable_peripheral_interrupt(PendSV_IRQn, IRQ_LEVEL_7);
  408336:	2107      	movs	r1, #7
  408338:	f06f 0001 	mvn.w	r0, #1
  40833c:	47a0      	blx	r4
	
	
	// This configures the kernels context switch mechanism
	// That includes configuring the new program stack
	scheduler_start();
  40833e:	4b0f      	ldr	r3, [pc, #60]	; (40837c <kernel_launch+0x9c>)
}
  408340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	scheduler_start();
  408344:	4718      	bx	r3
		current_thread = idle_thread;
  408346:	4a0e      	ldr	r2, [pc, #56]	; (408380 <kernel_launch+0xa0>)
  408348:	4b09      	ldr	r3, [pc, #36]	; (408370 <kernel_launch+0x90>)
  40834a:	6812      	ldr	r2, [r2, #0]
  40834c:	601a      	str	r2, [r3, #0]
  40834e:	e7ed      	b.n	40832c <kernel_launch+0x4c>
  408350:	00403229 	.word	0x00403229
  408354:	000493e0 	.word	0x000493e0
  408358:	00403285 	.word	0x00403285
  40835c:	20402824 	.word	0x20402824
  408360:	20402828 	.word	0x20402828
  408364:	20402848 	.word	0x20402848
  408368:	20402800 	.word	0x20402800
  40836c:	20402858 	.word	0x20402858
  408370:	204027e8 	.word	0x204027e8
  408374:	00408201 	.word	0x00408201
  408378:	00403145 	.word	0x00403145
  40837c:	00407a7d 	.word	0x00407a7d
  408380:	20402820 	.word	0x20402820
  408384:	20402830 	.word	0x20402830

00408388 <reschedule>:

//--------------------------------------------------------------------------------------------------//


void reschedule(void)
{
  408388:	b570      	push	{r4, r5, r6, lr}
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  40838a:	4b0c      	ldr	r3, [pc, #48]	; (4083bc <reschedule+0x34>)
	reschedule_pending = 1;
  40838c:	2601      	movs	r6, #1
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  40838e:	4798      	blx	r3
  408390:	4b0b      	ldr	r3, [pc, #44]	; (4083c0 <reschedule+0x38>)
  408392:	2100      	movs	r1, #0
  408394:	4a0b      	ldr	r2, [pc, #44]	; (4083c4 <reschedule+0x3c>)
  408396:	681b      	ldr	r3, [r3, #0]
	reschedule_pending = 1;
  408398:	4d0b      	ldr	r5, [pc, #44]	; (4083c8 <reschedule+0x40>)
	
	// Not sure is this is a good idea, since it might fuck up the timing
	systick_set_counter_value(0);
  40839a:	4c0c      	ldr	r4, [pc, #48]	; (4083cc <reschedule+0x44>)
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  40839c:	6051      	str	r1, [r2, #4]
	reschedule_pending = 1;
  40839e:	702e      	strb	r6, [r5, #0]
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  4083a0:	fbb0 f3f3 	udiv	r3, r0, r3
  4083a4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
	systick_set_counter_value(0);
  4083a8:	4608      	mov	r0, r1
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  4083aa:	6013      	str	r3, [r2, #0]
	systick_set_counter_value(0);
  4083ac:	47a0      	blx	r4
	
	// Since the scheduling algorithm is called in the SysTick exception rather than
	// in the PendSV exception we pend the SysTick handler instead of the PendSV handler. 
	SCB->ICSR |= (1 << SCB_ICSR_PENDSTSET_Pos);
  4083ae:	4a08      	ldr	r2, [pc, #32]	; (4083d0 <reschedule+0x48>)
  4083b0:	6853      	ldr	r3, [r2, #4]
  4083b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  4083b6:	6053      	str	r3, [r2, #4]
  4083b8:	bd70      	pop	{r4, r5, r6, pc}
  4083ba:	bf00      	nop
  4083bc:	004032d5 	.word	0x004032d5
  4083c0:	20402824 	.word	0x20402824
  4083c4:	204027f8 	.word	0x204027f8
  4083c8:	204027e4 	.word	0x204027e4
  4083cc:	004032ad 	.word	0x004032ad
  4083d0:	e000ed00 	.word	0xe000ed00

004083d4 <thread_delay>:
	// a context switch inside here
	suspend_scheduler();
	
	
	// Calculate the right tick to wake
	uint32_t tmp = kernel_tick + ticks * 1000;
  4083d4:	4914      	ldr	r1, [pc, #80]	; (408428 <thread_delay+0x54>)
  4083d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	
	
	// Write the value to the thread control block
	current_thread->tick_to_wake = tmp;
  4083da:	4b14      	ldr	r3, [pc, #80]	; (40842c <thread_delay+0x58>)
	uint32_t tmp = kernel_tick + ticks * 1000;
  4083dc:	6809      	ldr	r1, [r1, #0]
	current_thread->tick_to_wake = tmp;
  4083de:	681b      	ldr	r3, [r3, #0]
	uint32_t tmp = kernel_tick + ticks * 1000;
  4083e0:	fb02 1000 	mla	r0, r2, r0, r1
	current_thread->list_node.value = tmp;
	
	
	// Update the next list to place the thread in
	current_thread->next_list = &delay_queue;
  4083e4:	4912      	ldr	r1, [pc, #72]	; (408430 <thread_delay+0x5c>)


void resume_scheduler(void)
{
	(void)scheduler_status;
	scheduler_status = SCHEDULER_STATUS_RUNNING;
  4083e6:	4a13      	ldr	r2, [pc, #76]	; (408434 <thread_delay+0x60>)
{
  4083e8:	b570      	push	{r4, r5, r6, lr}
	current_thread->tick_to_wake = tmp;
  4083ea:	2400      	movs	r4, #0
	current_thread->next_list = &delay_queue;
  4083ec:	6459      	str	r1, [r3, #68]	; 0x44
	current_thread->tick_to_wake = tmp;
  4083ee:	6598      	str	r0, [r3, #88]	; 0x58
	reschedule_pending = 1;
  4083f0:	2601      	movs	r6, #1
	current_thread->list_node.value = tmp;
  4083f2:	6198      	str	r0, [r3, #24]
	current_thread->tick_to_wake = tmp;
  4083f4:	65dc      	str	r4, [r3, #92]	; 0x5c
	current_thread->list_node.value = tmp;
  4083f6:	61dc      	str	r4, [r3, #28]
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  4083f8:	4b0f      	ldr	r3, [pc, #60]	; (408438 <thread_delay+0x64>)
	scheduler_status = SCHEDULER_STATUS_RUNNING;
  4083fa:	7014      	strb	r4, [r2, #0]
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  4083fc:	4798      	blx	r3
  4083fe:	4b0f      	ldr	r3, [pc, #60]	; (40843c <thread_delay+0x68>)
  408400:	4a0f      	ldr	r2, [pc, #60]	; (408440 <thread_delay+0x6c>)
  408402:	681b      	ldr	r3, [r3, #0]
	reschedule_pending = 1;
  408404:	4d0f      	ldr	r5, [pc, #60]	; (408444 <thread_delay+0x70>)
	systick_set_counter_value(0);
  408406:	4910      	ldr	r1, [pc, #64]	; (408448 <thread_delay+0x74>)
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  408408:	6054      	str	r4, [r2, #4]
	reschedule_pending = 1;
  40840a:	702e      	strb	r6, [r5, #0]
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  40840c:	fbb0 f3f3 	udiv	r3, r0, r3
  408410:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
	systick_set_counter_value(0);
  408414:	4620      	mov	r0, r4
	reschedule_runtime = 1000 - systick_get_counter_value() / systick_divider;
  408416:	6013      	str	r3, [r2, #0]
	systick_set_counter_value(0);
  408418:	4788      	blx	r1
	SCB->ICSR |= (1 << SCB_ICSR_PENDSTSET_Pos);
  40841a:	4a0c      	ldr	r2, [pc, #48]	; (40844c <thread_delay+0x78>)
  40841c:	6853      	ldr	r3, [r2, #4]
  40841e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  408422:	6053      	str	r3, [r2, #4]
  408424:	bd70      	pop	{r4, r5, r6, pc}
  408426:	bf00      	nop
  408428:	20402830 	.word	0x20402830
  40842c:	204027e8 	.word	0x204027e8
  408430:	20402814 	.word	0x20402814
  408434:	20402828 	.word	0x20402828
  408438:	004032d5 	.word	0x004032d5
  40843c:	20402824 	.word	0x20402824
  408440:	204027f8 	.word	0x204027f8
  408444:	204027e4 	.word	0x204027e4
  408448:	004032ad 	.word	0x004032ad
  40844c:	e000ed00 	.word	0xe000ed00

00408450 <round_robin_scheduler>:
	if (likely(scheduler_status == SCHEDULER_STATUS_RUNNING))
  408450:	4b66      	ldr	r3, [pc, #408]	; (4085ec <round_robin_scheduler+0x19c>)
  408452:	781b      	ldrb	r3, [r3, #0]
  408454:	2b00      	cmp	r3, #0
  408456:	f040 8099 	bne.w	40858c <round_robin_scheduler+0x13c>
{
  40845a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (current_thread != idle_thread)
  40845e:	4d64      	ldr	r5, [pc, #400]	; (4085f0 <round_robin_scheduler+0x1a0>)
{
  408460:	b083      	sub	sp, #12
		if (current_thread != idle_thread)
  408462:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 408630 <round_robin_scheduler+0x1e0>
  408466:	6828      	ldr	r0, [r5, #0]
  408468:	f8db 3000 	ldr.w	r3, [fp]
  40846c:	4298      	cmp	r0, r3
  40846e:	d078      	beq.n	408562 <round_robin_scheduler+0x112>
			if (current_thread->next_list != NULL)
  408470:	6c44      	ldr	r4, [r0, #68]	; 0x44
  408472:	2c00      	cmp	r4, #0
  408474:	d07a      	beq.n	40856c <round_robin_scheduler+0x11c>
				if (current_thread->next_list == &delay_queue)
  408476:	4b5f      	ldr	r3, [pc, #380]	; (4085f4 <round_robin_scheduler+0x1a4>)
  408478:	429c      	cmp	r4, r3
  40847a:	f000 8088 	beq.w	40858e <round_robin_scheduler+0x13e>
  40847e:	4b5e      	ldr	r3, [pc, #376]	; (4085f8 <round_robin_scheduler+0x1a8>)
					list_insert_first(&(current_thread->list_node), current_thread->next_list);
  408480:	4621      	mov	r1, r4
  408482:	3010      	adds	r0, #16
  408484:	461e      	mov	r6, r3
  408486:	9301      	str	r3, [sp, #4]
  408488:	4b5c      	ldr	r3, [pc, #368]	; (4085fc <round_robin_scheduler+0x1ac>)
  40848a:	4798      	blx	r3
  40848c:	e9d6 8900 	ldrd	r8, r9, [r6]
				current_thread->next_list = NULL;
  408490:	682b      	ldr	r3, [r5, #0]
  408492:	2200      	movs	r2, #0
  408494:	645a      	str	r2, [r3, #68]	; 0x44
		if (kernel_tick_to_wake <= kernel_tick)
  408496:	4b5a      	ldr	r3, [pc, #360]	; (408600 <round_robin_scheduler+0x1b0>)
  408498:	e9d3 2300 	ldrd	r2, r3, [r3]
  40849c:	454b      	cmp	r3, r9
  40849e:	bf08      	it	eq
  4084a0:	4542      	cmpeq	r2, r8
  4084a2:	d217      	bcs.n	4084d4 <round_robin_scheduler+0x84>
		if (running_queue.last == NULL)
  4084a4:	4857      	ldr	r0, [pc, #348]	; (408604 <round_robin_scheduler+0x1b4>)
  4084a6:	6843      	ldr	r3, [r0, #4]
  4084a8:	b17b      	cbz	r3, 4084ca <round_robin_scheduler+0x7a>
			next_thread = running_queue.last->object;
  4084aa:	691a      	ldr	r2, [r3, #16]
  4084ac:	4c56      	ldr	r4, [pc, #344]	; (408608 <round_robin_scheduler+0x1b8>)
			list_remove_last(&running_queue);
  4084ae:	4b57      	ldr	r3, [pc, #348]	; (40860c <round_robin_scheduler+0x1bc>)
			next_thread = running_queue.last->object;
  4084b0:	6022      	str	r2, [r4, #0]
			list_remove_last(&running_queue);
  4084b2:	4798      	blx	r3
  4084b4:	6821      	ldr	r1, [r4, #0]
		next_thread->context_switches++;
  4084b6:	e9d1 231e 	ldrd	r2, r3, [r1, #120]	; 0x78
  4084ba:	3201      	adds	r2, #1
  4084bc:	f143 0300 	adc.w	r3, r3, #0
  4084c0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
  4084c4:	b003      	add	sp, #12
  4084c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			next_thread = idle_thread;
  4084ca:	f8db 1000 	ldr.w	r1, [fp]
  4084ce:	4b4e      	ldr	r3, [pc, #312]	; (408608 <round_robin_scheduler+0x1b8>)
  4084d0:	6019      	str	r1, [r3, #0]
  4084d2:	e7f0      	b.n	4084b6 <round_robin_scheduler+0x66>
	list_node_s* list_iterator = delay_queue.first;
  4084d4:	4e47      	ldr	r6, [pc, #284]	; (4085f4 <round_robin_scheduler+0x1a4>)
	check(((thread_s *)(delay_queue.first->object))->tick_to_wake <= kernel_tick_to_wake);
  4084d6:	f44f 72bb 	mov.w	r2, #374	; 0x176
	list_node_s* list_iterator = delay_queue.first;
  4084da:	6835      	ldr	r5, [r6, #0]
	check(((thread_s *)(delay_queue.first->object))->tick_to_wake <= kernel_tick_to_wake);
  4084dc:	692b      	ldr	r3, [r5, #16]
  4084de:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
  4084e2:	4b4b      	ldr	r3, [pc, #300]	; (408610 <round_robin_scheduler+0x1c0>)
  4084e4:	4589      	cmp	r9, r1
  4084e6:	494b      	ldr	r1, [pc, #300]	; (408614 <round_robin_scheduler+0x1c4>)
  4084e8:	bf08      	it	eq
  4084ea:	4580      	cmpeq	r8, r0
  4084ec:	bf2c      	ite	cs
  4084ee:	2001      	movcs	r0, #1
  4084f0:	2000      	movcc	r0, #0
  4084f2:	4798      	blx	r3
	for (i = 0; i < delay_queue.size; i++)
  4084f4:	8937      	ldrh	r7, [r6, #8]
  4084f6:	b367      	cbz	r7, 408552 <round_robin_scheduler+0x102>
		if (((thread_s *)(list_iterator->object))->tick_to_wake > kernel_tick_to_wake)
  4084f8:	9a01      	ldr	r2, [sp, #4]
  4084fa:	692b      	ldr	r3, [r5, #16]
  4084fc:	e9d2 0100 	ldrd	r0, r1, [r2]
  408500:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  408504:	4299      	cmp	r1, r3
  408506:	bf08      	it	eq
  408508:	4290      	cmpeq	r0, r2
  40850a:	d322      	bcc.n	408552 <round_robin_scheduler+0x102>
  40850c:	2400      	movs	r4, #0
  40850e:	e006      	b.n	40851e <round_robin_scheduler+0xce>
  408510:	692b      	ldr	r3, [r5, #16]
  408512:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  408516:	4299      	cmp	r1, r3
  408518:	bf08      	it	eq
  40851a:	4290      	cmpeq	r0, r2
  40851c:	d304      	bcc.n	408528 <round_robin_scheduler+0xd8>
	for (i = 0; i < delay_queue.size; i++)
  40851e:	3401      	adds	r4, #1
		list_iterator = list_iterator->next;
  408520:	682d      	ldr	r5, [r5, #0]
	for (i = 0; i < delay_queue.size; i++)
  408522:	b2a4      	uxth	r4, r4
  408524:	42a7      	cmp	r7, r4
  408526:	d1f3      	bne.n	408510 <round_robin_scheduler+0xc0>
		if (((thread_s *)(list_iterator->object))->tick_to_wake > kernel_tick_to_wake)
  408528:	f04f 0a00 	mov.w	sl, #0
  40852c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 408634 <round_robin_scheduler+0x1e4>
		list_remove_first(&delay_queue);
  408530:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4085f4 <round_robin_scheduler+0x1a4>
		list_node_s* tmp = delay_queue.first;
  408534:	6837      	ldr	r7, [r6, #0]
  408536:	f10a 0a01 	add.w	sl, sl, #1
		list_remove_first(&delay_queue);
  40853a:	4b37      	ldr	r3, [pc, #220]	; (408618 <round_robin_scheduler+0x1c8>)
  40853c:	4640      	mov	r0, r8
  40853e:	4798      	blx	r3
		list_insert_last(tmp, &running_queue);
  408540:	4930      	ldr	r1, [pc, #192]	; (408604 <round_robin_scheduler+0x1b4>)
  408542:	4638      	mov	r0, r7
  408544:	47c8      	blx	r9
	for (uint16_t k = 0; k < i; k++)
  408546:	fa1f f28a 	uxth.w	r2, sl
  40854a:	4294      	cmp	r4, r2
  40854c:	d8f2      	bhi.n	408534 <round_robin_scheduler+0xe4>
	if (list_iterator == NULL)
  40854e:	2d00      	cmp	r5, #0
  408550:	d02a      	beq.n	4085a8 <round_robin_scheduler+0x158>
		kernel_tick_to_wake = ((thread_s *)(delay_queue.first->object))->tick_to_wake;
  408552:	6833      	ldr	r3, [r6, #0]
  408554:	9901      	ldr	r1, [sp, #4]
  408556:	691b      	ldr	r3, [r3, #16]
  408558:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  40855c:	e9c1 2300 	strd	r2, r3, [r1]
  408560:	e7a0      	b.n	4084a4 <round_robin_scheduler+0x54>
  408562:	4b25      	ldr	r3, [pc, #148]	; (4085f8 <round_robin_scheduler+0x1a8>)
  408564:	9301      	str	r3, [sp, #4]
  408566:	e9d3 8900 	ldrd	r8, r9, [r3]
  40856a:	e794      	b.n	408496 <round_robin_scheduler+0x46>
				if (unlikely(current_thread->state == THREAD_STATE_EXIT_PENDING))
  40856c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
  408570:	f003 0303 	and.w	r3, r3, #3
  408574:	2b01      	cmp	r3, #1
  408576:	d01f      	beq.n	4085b8 <round_robin_scheduler+0x168>
  408578:	4b1f      	ldr	r3, [pc, #124]	; (4085f8 <round_robin_scheduler+0x1a8>)
					list_insert_first(&(current_thread->list_node), &running_queue);
  40857a:	3010      	adds	r0, #16
  40857c:	4921      	ldr	r1, [pc, #132]	; (408604 <round_robin_scheduler+0x1b4>)
  40857e:	461c      	mov	r4, r3
  408580:	9301      	str	r3, [sp, #4]
  408582:	4b1e      	ldr	r3, [pc, #120]	; (4085fc <round_robin_scheduler+0x1ac>)
  408584:	4798      	blx	r3
  408586:	e9d4 8900 	ldrd	r8, r9, [r4]
  40858a:	e784      	b.n	408496 <round_robin_scheduler+0x46>
  40858c:	4770      	bx	lr
					list_insert_delay(&(current_thread->list_node), &delay_queue);
  40858e:	4b23      	ldr	r3, [pc, #140]	; (40861c <round_robin_scheduler+0x1cc>)
  408590:	3010      	adds	r0, #16
  408592:	4621      	mov	r1, r4
  408594:	4798      	blx	r3
					kernel_tick_to_wake = ((thread_s *)(delay_queue.first->object))->tick_to_wake;
  408596:	6823      	ldr	r3, [r4, #0]
  408598:	4a17      	ldr	r2, [pc, #92]	; (4085f8 <round_robin_scheduler+0x1a8>)
  40859a:	691b      	ldr	r3, [r3, #16]
  40859c:	9201      	str	r2, [sp, #4]
  40859e:	e9d3 8916 	ldrd	r8, r9, [r3, #88]	; 0x58
  4085a2:	e9c2 8900 	strd	r8, r9, [r2]
  4085a6:	e773      	b.n	408490 <round_robin_scheduler+0x40>
		kernel_tick_to_wake = 0xffffffffffffffff;
  4085a8:	f04f 32ff 	mov.w	r2, #4294967295
  4085ac:	f04f 33ff 	mov.w	r3, #4294967295
  4085b0:	9901      	ldr	r1, [sp, #4]
  4085b2:	e9c1 2300 	strd	r2, r3, [r1]
  4085b6:	e775      	b.n	4084a4 <round_robin_scheduler+0x54>
					if (current_thread->ID == 6969)
  4085b8:	6842      	ldr	r2, [r0, #4]
  4085ba:	f641 3339 	movw	r3, #6969	; 0x1b39
  4085be:	429a      	cmp	r2, r3
  4085c0:	d00c      	beq.n	4085dc <round_robin_scheduler+0x18c>
  4085c2:	4a0d      	ldr	r2, [pc, #52]	; (4085f8 <round_robin_scheduler+0x1a8>)
					list_remove_item(&(current_thread->thread_list), &thread_list);
  4085c4:	3028      	adds	r0, #40	; 0x28
  4085c6:	4916      	ldr	r1, [pc, #88]	; (408620 <round_robin_scheduler+0x1d0>)
  4085c8:	4614      	mov	r4, r2
  4085ca:	4b16      	ldr	r3, [pc, #88]	; (408624 <round_robin_scheduler+0x1d4>)
  4085cc:	9201      	str	r2, [sp, #4]
  4085ce:	4798      	blx	r3
					dynamic_memory_free(current_thread);
  4085d0:	6828      	ldr	r0, [r5, #0]
  4085d2:	4b15      	ldr	r3, [pc, #84]	; (408628 <round_robin_scheduler+0x1d8>)
  4085d4:	4798      	blx	r3
  4085d6:	e9d4 8900 	ldrd	r8, r9, [r4]
  4085da:	e75c      	b.n	408496 <round_robin_scheduler+0x46>
						if (fast_program_interface_delete != NULL)
  4085dc:	4b13      	ldr	r3, [pc, #76]	; (40862c <round_robin_scheduler+0x1dc>)
  4085de:	681b      	ldr	r3, [r3, #0]
  4085e0:	2b00      	cmp	r3, #0
  4085e2:	d0ee      	beq.n	4085c2 <round_robin_scheduler+0x172>
							fast_program_interface_delete();
  4085e4:	4798      	blx	r3
  4085e6:	6828      	ldr	r0, [r5, #0]
  4085e8:	e7eb      	b.n	4085c2 <round_robin_scheduler+0x172>
  4085ea:	bf00      	nop
  4085ec:	20402828 	.word	0x20402828
  4085f0:	204027e8 	.word	0x204027e8
  4085f4:	20402814 	.word	0x20402814
  4085f8:	20402858 	.word	0x20402858
  4085fc:	00407fb1 	.word	0x00407fb1
  408600:	20402830 	.word	0x20402830
  408604:	20402848 	.word	0x20402848
  408608:	20402838 	.word	0x20402838
  40860c:	00408201 	.word	0x00408201
  408610:	00402219 	.word	0x00402219
  408614:	0040b5e0 	.word	0x0040b5e0
  408618:	004081a1 	.word	0x004081a1
  40861c:	00408071 	.word	0x00408071
  408620:	20402808 	.word	0x20402808
  408624:	00408239 	.word	0x00408239
  408628:	00408ce9 	.word	0x00408ce9
  40862c:	2040283c 	.word	0x2040283c
  408630:	20402820 	.word	0x20402820
  408634:	00408011 	.word	0x00408011

00408638 <SysTick_Handler>:
	if (reschedule_pending)
  408638:	482f      	ldr	r0, [pc, #188]	; (4086f8 <SysTick_Handler+0xc0>)
{
  40863a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (reschedule_pending)
  40863c:	7803      	ldrb	r3, [r0, #0]
  40863e:	2b00      	cmp	r3, #0
  408640:	d026      	beq.n	408690 <SysTick_Handler+0x58>
		current_thread->thread_time.new_window_time += reschedule_runtime;
  408642:	4b2e      	ldr	r3, [pc, #184]	; (4086fc <SysTick_Handler+0xc4>)
		reschedule_pending = 0;
  408644:	2500      	movs	r5, #0
		kernel_tick += reschedule_runtime;
  408646:	4c2e      	ldr	r4, [pc, #184]	; (408700 <SysTick_Handler+0xc8>)
		current_thread->thread_time.new_window_time += reschedule_runtime;
  408648:	681b      	ldr	r3, [r3, #0]
		kernel_tick += reschedule_runtime;
  40864a:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 40871c <SysTick_Handler+0xe4>
		current_thread->thread_time.new_window_time += reschedule_runtime;
  40864e:	6f59      	ldr	r1, [r3, #116]	; 0x74
		reschedule_pending = 0;
  408650:	7005      	strb	r5, [r0, #0]
		kernel_runtime_tick += reschedule_runtime;
  408652:	4a2c      	ldr	r2, [pc, #176]	; (408704 <SysTick_Handler+0xcc>)
		kernel_tick += reschedule_runtime;
  408654:	e9d4 6700 	ldrd	r6, r7, [r4]
  408658:	e9de 4500 	ldrd	r4, r5, [lr]
		current_thread->thread_time.new_window_time += reschedule_runtime;
  40865c:	4431      	add	r1, r6
		kernel_tick += reschedule_runtime;
  40865e:	19a4      	adds	r4, r4, r6
		current_thread->thread_time.new_window_time += reschedule_runtime;
  408660:	6759      	str	r1, [r3, #116]	; 0x74
		kernel_tick += reschedule_runtime;
  408662:	417d      	adcs	r5, r7
		kernel_runtime_tick += reschedule_runtime;
  408664:	e9d2 0100 	ldrd	r0, r1, [r2]
  408668:	1980      	adds	r0, r0, r6
  40866a:	4179      	adcs	r1, r7
	if (kernel_runtime_tick >= 1000000)
  40866c:	2700      	movs	r7, #0
  40866e:	4e26      	ldr	r6, [pc, #152]	; (408708 <SysTick_Handler+0xd0>)
  408670:	428f      	cmp	r7, r1
  408672:	bf08      	it	eq
  408674:	4286      	cmpeq	r6, r0
  408676:	e9c2 0100 	strd	r0, r1, [r2]
  40867a:	e9ce 4500 	strd	r4, r5, [lr]
  40867e:	d31d      	bcc.n	4086bc <SysTick_Handler+0x84>
	round_robin_scheduler();
  408680:	4b22      	ldr	r3, [pc, #136]	; (40870c <SysTick_Handler+0xd4>)
  408682:	4798      	blx	r3
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
  408684:	4a22      	ldr	r2, [pc, #136]	; (408710 <SysTick_Handler+0xd8>)
  408686:	6853      	ldr	r3, [r2, #4]
  408688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  40868c:	6053      	str	r3, [r2, #4]
  40868e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		current_thread->thread_time.new_window_time += 1000;
  408690:	4b1a      	ldr	r3, [pc, #104]	; (4086fc <SysTick_Handler+0xc4>)
		kernel_tick += 1000;
  408692:	f8df e088 	ldr.w	lr, [pc, #136]	; 40871c <SysTick_Handler+0xe4>
		current_thread->thread_time.new_window_time += 1000;
  408696:	681b      	ldr	r3, [r3, #0]
		kernel_runtime_tick += 1000;
  408698:	4a1a      	ldr	r2, [pc, #104]	; (408704 <SysTick_Handler+0xcc>)
		current_thread->thread_time.new_window_time += 1000;
  40869a:	6f5e      	ldr	r6, [r3, #116]	; 0x74
		kernel_tick += 1000;
  40869c:	e9de 4500 	ldrd	r4, r5, [lr]
		kernel_runtime_tick += 1000;
  4086a0:	e9d2 0100 	ldrd	r0, r1, [r2]
		kernel_tick += 1000;
  4086a4:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
		current_thread->thread_time.new_window_time += 1000;
  4086a8:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
		kernel_tick += 1000;
  4086ac:	f145 0500 	adc.w	r5, r5, #0
		kernel_runtime_tick += 1000;
  4086b0:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
		current_thread->thread_time.new_window_time += 1000;
  4086b4:	675e      	str	r6, [r3, #116]	; 0x74
		kernel_runtime_tick += 1000;
  4086b6:	f141 0100 	adc.w	r1, r1, #0
  4086ba:	e7d7      	b.n	40866c <SysTick_Handler+0x34>
	idle_thread->thread_time.window_time = idle_thread->thread_time.new_window_time;
  4086bc:	4915      	ldr	r1, [pc, #84]	; (408714 <SysTick_Handler+0xdc>)
	idle_thread->thread_time.new_window_time = 0;
  4086be:	2000      	movs	r0, #0
	idle_thread->thread_time.window_time = idle_thread->thread_time.new_window_time;
  4086c0:	6809      	ldr	r1, [r1, #0]
  4086c2:	6f4c      	ldr	r4, [r1, #116]	; 0x74
	if (current_thread != idle_thread)
  4086c4:	4299      	cmp	r1, r3
	idle_thread->thread_time.new_window_time = 0;
  4086c6:	6748      	str	r0, [r1, #116]	; 0x74
	idle_thread->thread_time.window_time = idle_thread->thread_time.new_window_time;
  4086c8:	670c      	str	r4, [r1, #112]	; 0x70
	if (current_thread != idle_thread)
  4086ca:	d002      	beq.n	4086d2 <SysTick_Handler+0x9a>
		current_thread->thread_time.window_time = current_thread->thread_time.new_window_time;
  4086cc:	6f59      	ldr	r1, [r3, #116]	; 0x74
		current_thread->thread_time.new_window_time = 0;
  4086ce:	6758      	str	r0, [r3, #116]	; 0x74
		current_thread->thread_time.window_time = current_thread->thread_time.new_window_time;
  4086d0:	6719      	str	r1, [r3, #112]	; 0x70
	if (thread_list.size > 0)
  4086d2:	4b11      	ldr	r3, [pc, #68]	; (408718 <SysTick_Handler+0xe0>)
  4086d4:	8919      	ldrh	r1, [r3, #8]
  4086d6:	b149      	cbz	r1, 4086ec <SysTick_Handler+0xb4>
		list_iterate(list_node, &thread_list)
  4086d8:	681b      	ldr	r3, [r3, #0]
  4086da:	b13b      	cbz	r3, 4086ec <SysTick_Handler+0xb4>
			((thread_s *)(list_node->object))->thread_time.new_window_time = 0;
  4086dc:	2400      	movs	r4, #0
			((thread_s *)(list_node->object))->thread_time.window_time = ((thread_s *)(list_node->object))->thread_time.new_window_time;
  4086de:	6919      	ldr	r1, [r3, #16]
		list_iterate(list_node, &thread_list)
  4086e0:	681b      	ldr	r3, [r3, #0]
			((thread_s *)(list_node->object))->thread_time.window_time = ((thread_s *)(list_node->object))->thread_time.new_window_time;
  4086e2:	6f48      	ldr	r0, [r1, #116]	; 0x74
			((thread_s *)(list_node->object))->thread_time.new_window_time = 0;
  4086e4:	674c      	str	r4, [r1, #116]	; 0x74
			((thread_s *)(list_node->object))->thread_time.window_time = ((thread_s *)(list_node->object))->thread_time.new_window_time;
  4086e6:	6708      	str	r0, [r1, #112]	; 0x70
		list_iterate(list_node, &thread_list)
  4086e8:	2b00      	cmp	r3, #0
  4086ea:	d1f8      	bne.n	4086de <SysTick_Handler+0xa6>
		kernel_runtime_tick = 0;
  4086ec:	2000      	movs	r0, #0
  4086ee:	2100      	movs	r1, #0
  4086f0:	e9c2 0100 	strd	r0, r1, [r2]
  4086f4:	e7c4      	b.n	408680 <SysTick_Handler+0x48>
  4086f6:	bf00      	nop
  4086f8:	204027e4 	.word	0x204027e4
  4086fc:	204027e8 	.word	0x204027e8
  408700:	204027f8 	.word	0x204027f8
  408704:	20402840 	.word	0x20402840
  408708:	000f423f 	.word	0x000f423f
  40870c:	00408451 	.word	0x00408451
  408710:	e000ed00 	.word	0xe000ed00
  408714:	20402820 	.word	0x20402820
  408718:	20402808 	.word	0x20402808
  40871c:	20402830 	.word	0x20402830

00408720 <scheduler_current_thread_to_queue>:
	current_thread->next_list = list;
  408720:	4b01      	ldr	r3, [pc, #4]	; (408728 <scheduler_current_thread_to_queue+0x8>)
  408722:	681b      	ldr	r3, [r3, #0]
  408724:	6458      	str	r0, [r3, #68]	; 0x44
  408726:	4770      	bx	lr
  408728:	204027e8 	.word	0x204027e8

0040872c <suspend_scheduler>:
	scheduler_status = SCHEDULER_STATUS_SUSPENDED;
  40872c:	4b01      	ldr	r3, [pc, #4]	; (408734 <suspend_scheduler+0x8>)
  40872e:	2201      	movs	r2, #1
  408730:	701a      	strb	r2, [r3, #0]
  408732:	4770      	bx	lr
  408734:	20402828 	.word	0x20402828

00408738 <resume_scheduler>:
	scheduler_status = SCHEDULER_STATUS_RUNNING;
  408738:	4b01      	ldr	r3, [pc, #4]	; (408740 <resume_scheduler+0x8>)
  40873a:	2200      	movs	r2, #0
  40873c:	701a      	strb	r2, [r3, #0]
  40873e:	4770      	bx	lr
  408740:	20402828 	.word	0x20402828

00408744 <scheduler_set_dynamic_loader_handler>:
//--------------------------------------------------------------------------------------------------//


void scheduler_set_dynamic_loader_handler(void (*handler)(void))
{
	fast_program_interface_delete = handler;
  408744:	4b01      	ldr	r3, [pc, #4]	; (40874c <scheduler_set_dynamic_loader_handler+0x8>)
  408746:	6018      	str	r0, [r3, #0]
  408748:	4770      	bx	lr
  40874a:	bf00      	nop
  40874c:	2040283c 	.word	0x2040283c

00408750 <print_runtime_statistics>:

//--------------------------------------------------------------------------------------------------//


void print_runtime_statistics(void)
{
  408750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	thread_s* tmp_thread;
	
	board_serial_programming_print("Runtimes\tStack\tCPU\n");
  408754:	4861      	ldr	r0, [pc, #388]	; (4088dc <print_runtime_statistics+0x18c>)
{
  408756:	b083      	sub	sp, #12
	board_serial_programming_print("Runtimes\tStack\tCPU\n");
  408758:	4c61      	ldr	r4, [pc, #388]	; (4088e0 <print_runtime_statistics+0x190>)
	uint32_t tot;
	
	use = dynamic_memory_get_used_size(DRAM_BANK_0);
	tot = dynamic_memory_get_total_size(DRAM_BANK_0);
	
	k = 100 * use / tot;
  40875a:	f04f 0864 	mov.w	r8, #100	; 0x64
	board_serial_programming_print("Runtimes\tStack\tCPU\n");
  40875e:	47a0      	blx	r4
	int32_t cpu_usage = 1000000 - idle_thread->thread_time.window_time;
  408760:	4b60      	ldr	r3, [pc, #384]	; (4088e4 <print_runtime_statistics+0x194>)
  408762:	4961      	ldr	r1, [pc, #388]	; (4088e8 <print_runtime_statistics+0x198>)
  408764:	681b      	ldr	r3, [r3, #0]
	char k = cpu_usage / 10000;
  408766:	4f61      	ldr	r7, [pc, #388]	; (4088ec <print_runtime_statistics+0x19c>)
	int32_t cpu_usage = 1000000 - idle_thread->thread_time.window_time;
  408768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	board_serial_programming_print("\t\t\t");
  40876a:	4861      	ldr	r0, [pc, #388]	; (4088f0 <print_runtime_statistics+0x1a0>)
	int32_t cpu_usage = 1000000 - idle_thread->thread_time.window_time;
  40876c:	1ac9      	subs	r1, r1, r3
	board_serial_programming_write_percent(k, cpu_usage / 1000 - (k * 10));
  40876e:	4e61      	ldr	r6, [pc, #388]	; (4088f4 <print_runtime_statistics+0x1a4>)
  408770:	4d61      	ldr	r5, [pc, #388]	; (4088f8 <print_runtime_statistics+0x1a8>)
	char k = cpu_usage / 10000;
  408772:	ea4f 7be1 	mov.w	fp, r1, asr #31
  408776:	fb87 3701 	smull	r3, r7, r7, r1
  40877a:	9101      	str	r1, [sp, #4]
	board_serial_programming_print("\t\t\t");
  40877c:	47a0      	blx	r4
	char k = cpu_usage / 10000;
  40877e:	ebcb 3727 	rsb	r7, fp, r7, asr #12
	board_serial_programming_write_percent(k, cpu_usage / 1000 - (k * 10));
  408782:	9901      	ldr	r1, [sp, #4]
	use = dynamic_memory_get_used_size(DRAM_BANK_0);
  408784:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 408928 <print_runtime_statistics+0x1d8>
	char k = cpu_usage / 10000;
  408788:	b2ff      	uxtb	r7, r7
	board_serial_programming_write_percent(k, cpu_usage / 1000 - (k * 10));
  40878a:	fb86 3101 	smull	r3, r1, r6, r1
	tot = dynamic_memory_get_total_size(DRAM_BANK_0);
  40878e:	f8df 919c 	ldr.w	r9, [pc, #412]	; 40892c <print_runtime_statistics+0x1dc>
	board_serial_programming_write_percent(k, cpu_usage / 1000 - (k * 10));
  408792:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
  408796:	4638      	mov	r0, r7
  408798:	ebcb 11a1 	rsb	r1, fp, r1, asr #6
  40879c:	ebc7 0783 	rsb	r7, r7, r3, lsl #2
  4087a0:	eb01 0147 	add.w	r1, r1, r7, lsl #1
  4087a4:	b2c9      	uxtb	r1, r1
  4087a6:	47a8      	blx	r5
	board_serial_programming_print(" : CPU");
  4087a8:	4854      	ldr	r0, [pc, #336]	; (4088fc <print_runtime_statistics+0x1ac>)
  4087aa:	47a0      	blx	r4
	use = dynamic_memory_get_used_size(DRAM_BANK_0);
  4087ac:	2001      	movs	r0, #1
  4087ae:	47d0      	blx	sl
  4087b0:	4607      	mov	r7, r0
	tot = dynamic_memory_get_total_size(DRAM_BANK_0);
  4087b2:	2001      	movs	r0, #1
  4087b4:	47c8      	blx	r9
	k = 100 * use / tot;
  4087b6:	fb08 f307 	mul.w	r3, r8, r7
	tot = dynamic_memory_get_total_size(DRAM_BANK_0);
  4087ba:	4683      	mov	fp, r0
	uint32_t l = (100 * use) % tot;
	
	board_serial_programming_print("\t\t");
  4087bc:	4850      	ldr	r0, [pc, #320]	; (408900 <print_runtime_statistics+0x1b0>)
	uint32_t l = (100 * use) % tot;
  4087be:	fbb3 f2fb 	udiv	r2, r3, fp
  4087c2:	fb0b 3712 	mls	r7, fp, r2, r3
  4087c6:	9201      	str	r2, [sp, #4]
	board_serial_programming_print("\t\t");
  4087c8:	47a0      	blx	r4
	board_serial_programming_write_percent(k, 100 * l / tot);
  4087ca:	fb08 f307 	mul.w	r3, r8, r7
  4087ce:	9a01      	ldr	r2, [sp, #4]
  4087d0:	fbb3 f1fb 	udiv	r1, r3, fp
  4087d4:	b2d0      	uxtb	r0, r2
  4087d6:	b2c9      	uxtb	r1, r1
  4087d8:	47a8      	blx	r5
	board_serial_programming_print("DRAM Bank 0");
  4087da:	484a      	ldr	r0, [pc, #296]	; (408904 <print_runtime_statistics+0x1b4>)
  4087dc:	47a0      	blx	r4
	
	use = dynamic_memory_get_used_size(DRAM_BANK_1);
  4087de:	2002      	movs	r0, #2
  4087e0:	47d0      	blx	sl
  4087e2:	4607      	mov	r7, r0
	tot = dynamic_memory_get_total_size(DRAM_BANK_1);
  4087e4:	2002      	movs	r0, #2
  4087e6:	47c8      	blx	r9
	
	k = 100 * use / tot;
  4087e8:	fb08 f307 	mul.w	r3, r8, r7
	tot = dynamic_memory_get_total_size(DRAM_BANK_1);
  4087ec:	4683      	mov	fp, r0
	l = (100 * use) % tot;
	
	board_serial_programming_print("\t\t");
  4087ee:	4844      	ldr	r0, [pc, #272]	; (408900 <print_runtime_statistics+0x1b0>)
	l = (100 * use) % tot;
  4087f0:	fbb3 f2fb 	udiv	r2, r3, fp
  4087f4:	fb0b 3712 	mls	r7, fp, r2, r3
  4087f8:	9201      	str	r2, [sp, #4]
	board_serial_programming_print("\t\t");
  4087fa:	47a0      	blx	r4
	board_serial_programming_write_percent(k, 100 * l / tot);
  4087fc:	fb08 f307 	mul.w	r3, r8, r7
  408800:	9a01      	ldr	r2, [sp, #4]
  408802:	fbb3 f1fb 	udiv	r1, r3, fp
  408806:	b2d0      	uxtb	r0, r2
  408808:	b2c9      	uxtb	r1, r1
  40880a:	47a8      	blx	r5
	board_serial_programming_print("DRAM Bank 1");
  40880c:	483e      	ldr	r0, [pc, #248]	; (408908 <print_runtime_statistics+0x1b8>)
  40880e:	47a0      	blx	r4
	
	use = dynamic_memory_get_used_size(SRAM);
  408810:	2000      	movs	r0, #0
  408812:	47d0      	blx	sl
  408814:	4607      	mov	r7, r0
	tot = dynamic_memory_get_total_size(SRAM);
  408816:	2000      	movs	r0, #0
  408818:	47c8      	blx	r9
	
	k = 100 * use / tot;
  40881a:	fb08 f307 	mul.w	r3, r8, r7
	tot = dynamic_memory_get_total_size(SRAM);
  40881e:	4681      	mov	r9, r0
	l = (100 * use) % tot;
	
	board_serial_programming_print("\t\t");
  408820:	4837      	ldr	r0, [pc, #220]	; (408900 <print_runtime_statistics+0x1b0>)
	l = (100 * use) % tot;
  408822:	fbb3 faf9 	udiv	sl, r3, r9
  408826:	fb09 371a 	mls	r7, r9, sl, r3
	board_serial_programming_print("\t\t");
  40882a:	47a0      	blx	r4
	board_serial_programming_write_percent(k, 100 * l / tot);
  40882c:	fa5f f08a 	uxtb.w	r0, sl
  408830:	fb08 f807 	mul.w	r8, r8, r7
  408834:	fbb8 f1f9 	udiv	r1, r8, r9
  408838:	b2c9      	uxtb	r1, r1
  40883a:	47a8      	blx	r5
	board_serial_programming_print("SRAM");
  40883c:	4833      	ldr	r0, [pc, #204]	; (40890c <print_runtime_statistics+0x1bc>)
  40883e:	47a0      	blx	r4
	
	board_serial_programming_print("\n");
  408840:	4833      	ldr	r0, [pc, #204]	; (408910 <print_runtime_statistics+0x1c0>)
  408842:	47a0      	blx	r4
	
	if (thread_list.size != 0)
  408844:	4b33      	ldr	r3, [pc, #204]	; (408914 <print_runtime_statistics+0x1c4>)
  408846:	891a      	ldrh	r2, [r3, #8]
  408848:	2a00      	cmp	r2, #0
  40884a:	d040      	beq.n	4088ce <print_runtime_statistics+0x17e>
	{
		list_node_s* node;
		
		list_iterate(node, &thread_list)
  40884c:	f8d3 a000 	ldr.w	sl, [r3]
  408850:	f1ba 0f00 	cmp.w	sl, #0
  408854:	d03b      	beq.n	4088ce <print_runtime_statistics+0x17e>
		{
			tmp_thread = (thread_s *)(node->object);
			
			board_serial_programming_print("%d\t\t", (uint32_t)tmp_thread->context_switches);
  408856:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 408930 <print_runtime_statistics+0x1e0>
			k = used_stack * 100 / tmp_thread->stack_size;
			l = (used_stack * 100) % tmp_thread->stack_size;
			board_serial_programming_write_percent(k, 10 * l / tmp_thread->stack_size);
			board_serial_programming_print("\t");
			
			uint8_t tmp = tmp_thread->thread_time.window_time / 10000;
  40885a:	4f2f      	ldr	r7, [pc, #188]	; (408918 <print_runtime_statistics+0x1c8>)
			tmp_thread = (thread_s *)(node->object);
  40885c:	f8da 9010 	ldr.w	r9, [sl, #16]
			board_serial_programming_print("%d\t\t", (uint32_t)tmp_thread->context_switches);
  408860:	4640      	mov	r0, r8
  408862:	f8d9 1078 	ldr.w	r1, [r9, #120]	; 0x78
  408866:	47a0      	blx	r4
			uint32_t used_stack = tmp_thread->stack_size - ((uint32_t)tmp_thread->stack_pointer - (uint32_t)tmp_thread->stack_base);
  408868:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
  40886c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
			k = used_stack * 100 / tmp_thread->stack_size;
  408870:	2364      	movs	r3, #100	; 0x64
			uint32_t used_stack = tmp_thread->stack_size - ((uint32_t)tmp_thread->stack_pointer - (uint32_t)tmp_thread->stack_base);
  408872:	f8d9 0000 	ldr.w	r0, [r9]
  408876:	4472      	add	r2, lr
  408878:	1a10      	subs	r0, r2, r0
			k = used_stack * 100 / tmp_thread->stack_size;
  40887a:	fb03 f300 	mul.w	r3, r3, r0
			l = (used_stack * 100) % tmp_thread->stack_size;
  40887e:	fbb3 f0fe 	udiv	r0, r3, lr
  408882:	fb0e 3310 	mls	r3, lr, r0, r3
			board_serial_programming_write_percent(k, 10 * l / tmp_thread->stack_size);
  408886:	b2c0      	uxtb	r0, r0
  408888:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40888c:	0049      	lsls	r1, r1, #1
  40888e:	fbb1 f1fe 	udiv	r1, r1, lr
  408892:	b2c9      	uxtb	r1, r1
  408894:	47a8      	blx	r5
			board_serial_programming_print("\t");
  408896:	4821      	ldr	r0, [pc, #132]	; (40891c <print_runtime_statistics+0x1cc>)
  408898:	47a0      	blx	r4
			uint8_t tmp = tmp_thread->thread_time.window_time / 10000;
  40889a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  40889e:	fba7 2003 	umull	r2, r0, r7, r3
			board_serial_programming_write_percent(tmp, tmp_thread->thread_time.window_time / 1000 - (tmp * 10));
  4088a2:	fba6 2303 	umull	r2, r3, r6, r3
			uint8_t tmp = tmp_thread->thread_time.window_time / 10000;
  4088a6:	f3c0 3047 	ubfx	r0, r0, #13, #8
			board_serial_programming_write_percent(tmp, tmp_thread->thread_time.window_time / 1000 - (tmp * 10));
  4088aa:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  4088ae:	0049      	lsls	r1, r1, #1
  4088b0:	ebc1 1193 	rsb	r1, r1, r3, lsr #6
  4088b4:	b2c9      	uxtb	r1, r1
  4088b6:	47a8      	blx	r5
			board_serial_programming_print(" : %s", tmp_thread->name);
  4088b8:	f109 0180 	add.w	r1, r9, #128	; 0x80
  4088bc:	4818      	ldr	r0, [pc, #96]	; (408920 <print_runtime_statistics+0x1d0>)
  4088be:	47a0      	blx	r4
			board_serial_programming_print("\n");
  4088c0:	4813      	ldr	r0, [pc, #76]	; (408910 <print_runtime_statistics+0x1c0>)
  4088c2:	47a0      	blx	r4
		list_iterate(node, &thread_list)
  4088c4:	f8da a000 	ldr.w	sl, [sl]
  4088c8:	f1ba 0f00 	cmp.w	sl, #0
  4088cc:	d1c6      	bne.n	40885c <print_runtime_statistics+0x10c>
		}
	}

	board_serial_programming_print("\n\n");
  4088ce:	4815      	ldr	r0, [pc, #84]	; (408924 <print_runtime_statistics+0x1d4>)
  4088d0:	4623      	mov	r3, r4
}
  4088d2:	b003      	add	sp, #12
  4088d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	board_serial_programming_print("\n\n");
  4088d8:	4718      	bx	r3
  4088da:	bf00      	nop
  4088dc:	0040b628 	.word	0x0040b628
  4088e0:	00400fbd 	.word	0x00400fbd
  4088e4:	20402820 	.word	0x20402820
  4088e8:	000f4240 	.word	0x000f4240
  4088ec:	68db8bad 	.word	0x68db8bad
  4088f0:	0040b63c 	.word	0x0040b63c
  4088f4:	10624dd3 	.word	0x10624dd3
  4088f8:	00401885 	.word	0x00401885
  4088fc:	0040b640 	.word	0x0040b640
  408900:	0040addc 	.word	0x0040addc
  408904:	0040b648 	.word	0x0040b648
  408908:	0040b654 	.word	0x0040b654
  40890c:	0040b660 	.word	0x0040b660
  408910:	0040b4cc 	.word	0x0040b4cc
  408914:	20402808 	.word	0x20402808
  408918:	d1b71759 	.word	0xd1b71759
  40891c:	0040ade8 	.word	0x0040ade8
  408920:	0040b670 	.word	0x0040b670
  408924:	0040bcec 	.word	0x0040bcec
  408928:	00408dbd 	.word	0x00408dbd
  40892c:	00408dad 	.word	0x00408dad
  408930:	0040b668 	.word	0x0040b668

00408934 <syscall_sleep>:
//--------------------------------------------------------------------------------------------------//


void SYSCALL_NOINLINE syscall_sleep(uint32_t ticks)
{
	SYSCALL(SYSCALL_DELAY);
  408934:	df01      	svc	1
  408936:	4770      	bx	lr

00408938 <kernel_service_handler>:
// the system, and the kernel functionality

void kernel_service_handler(uint32_t* svc_argv)
{
	// Extract the SVC number from the parameter list
	uint32_t svc_number = ((char *)svc_argv[6])[-2];
  408938:	6983      	ldr	r3, [r0, #24]

	switch (svc_number)
  40893a:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  40893e:	2b01      	cmp	r3, #1
  408940:	d005      	beq.n	40894e <kernel_service_handler+0x16>
  408942:	2b0a      	cmp	r3, #10
  408944:	d102      	bne.n	40894c <kernel_service_handler+0x14>
		case SYSCALL_DELAY:
			thread_delay((uint32_t)svc_argv[0]);
			break;
		
		case SYSCALL_PRINT:
			board_serial_print((char*)svc_argv[0]);
  408946:	6800      	ldr	r0, [r0, #0]
  408948:	4b02      	ldr	r3, [pc, #8]	; (408954 <kernel_service_handler+0x1c>)
  40894a:	4718      	bx	r3
  40894c:	4770      	bx	lr
			thread_delay((uint32_t)svc_argv[0]);
  40894e:	6800      	ldr	r0, [r0, #0]
  408950:	4b01      	ldr	r3, [pc, #4]	; (408958 <kernel_service_handler+0x20>)
  408952:	4718      	bx	r3
  408954:	0040052d 	.word	0x0040052d
  408958:	004083d5 	.word	0x004083d5

0040895c <round_robin_idle_thread>:

//--------------------------------------------------------------------------------------------------//


static void round_robin_idle_thread(void* param)
{
  40895c:	e7fe      	b.n	40895c <round_robin_idle_thread>
  40895e:	bf00      	nop

00408960 <kernel_delete_thread>:
{
  408960:	b508      	push	{r3, lr}
	current_thread->state = THREAD_STATE_EXIT_PENDING;
  408962:	4b06      	ldr	r3, [pc, #24]	; (40897c <kernel_delete_thread+0x1c>)
  408964:	2001      	movs	r0, #1
	reschedule();
  408966:	4906      	ldr	r1, [pc, #24]	; (408980 <kernel_delete_thread+0x20>)
	current_thread->state = THREAD_STATE_EXIT_PENDING;
  408968:	681b      	ldr	r3, [r3, #0]
  40896a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  40896e:	f360 0201 	bfi	r2, r0, #0, #2
  408972:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	reschedule();
  408976:	4788      	blx	r1
  408978:	e7fe      	b.n	408978 <kernel_delete_thread+0x18>
  40897a:	bf00      	nop
  40897c:	204027e8 	.word	0x204027e8
  408980:	00408389 	.word	0x00408389

00408984 <thread_new>:
{
  408984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408988:	9d08      	ldr	r5, [sp, #32]
  40898a:	4604      	mov	r4, r0
	suspend_scheduler();
  40898c:	4840      	ldr	r0, [pc, #256]	; (408a90 <thread_new+0x10c>)
{
  40898e:	4688      	mov	r8, r1
	thread_s* new_thread = (thread_s*)dynamic_memory_new(DRAM_BANK_0, sizeof(thread_s) + stack_size * sizeof(uint32_t));
  408990:	3528      	adds	r5, #40	; 0x28
{
  408992:	4691      	mov	r9, r2
  408994:	461f      	mov	r7, r3
	suspend_scheduler();
  408996:	4780      	blx	r0
	thread_s* new_thread = (thread_s*)dynamic_memory_new(DRAM_BANK_0, sizeof(thread_s) + stack_size * sizeof(uint32_t));
  408998:	00ad      	lsls	r5, r5, #2
  40899a:	2001      	movs	r0, #1
  40899c:	4b3d      	ldr	r3, [pc, #244]	; (408a94 <thread_new+0x110>)
  40899e:	4629      	mov	r1, r5
  4089a0:	4798      	blx	r3
  4089a2:	4606      	mov	r6, r0
	new_thread->stack_base = (uint32_t *)((uint8_t *)new_thread + sizeof(thread_s));
  4089a4:	30a0      	adds	r0, #160	; 0xa0
  4089a6:	64b0      	str	r0, [r6, #72]	; 0x48
	if ((new_thread == NULL) || (new_thread->stack_base == NULL))
  4089a8:	2800      	cmp	r0, #0
  4089aa:	d06a      	beq.n	408a82 <thread_new+0xfe>
	new_thread->stack_pointer = new_thread->stack_base + stack_size - 1;
  4089ac:	f1a5 03a4 	sub.w	r3, r5, #164	; 0xa4
	*stack_pointer-- = (uint32_t)KERNEL_THREAD_xPSR;
  4089b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	*stack_pointer = (uint32_t)kernel_delete_thread;
  4089b4:	f8df c100 	ldr.w	ip, [pc, #256]	; 408ab8 <thread_new+0x134>
  4089b8:	1e61      	subs	r1, r4, #1
	new_thread->stack_pointer = new_thread->stack_base + stack_size - 1;
  4089ba:	4403      	add	r3, r0
	new_thread->stack_pointer = thread_stack_init(new_thread->stack_pointer, thread_func, thread_parameter);
  4089bc:	4630      	mov	r0, r6
  4089be:	341f      	adds	r4, #31
	stack_pointer -= 8;
  4089c0:	f1a3 0e40 	sub.w	lr, r3, #64	; 0x40
	*stack_pointer-- = (uint32_t)thread_func;
  4089c4:	f843 8c08 	str.w	r8, [r3, #-8]
	*stack_pointer = (uint32_t)param;
  4089c8:	f843 9c20 	str.w	r9, [r3, #-32]
	*stack_pointer-- = (uint32_t)KERNEL_THREAD_xPSR;
  4089cc:	f843 2c04 	str.w	r2, [r3, #-4]
	*stack_pointer = (uint32_t)kernel_delete_thread;
  4089d0:	f843 cc0c 	str.w	ip, [r3, #-12]
	new_thread->stack_pointer = thread_stack_init(new_thread->stack_pointer, thread_func, thread_parameter);
  4089d4:	f840 eb7f 	str.w	lr, [r0], #127
  4089d8:	e003      	b.n	4089e2 <thread_new+0x5e>
	for (uint32_t i = 0; i < KERNEL_THREAD_MAX_NAME_LENGTH; i++)
  4089da:	42a1      	cmp	r1, r4
		new_thread->name[i] = *thread_name++;
  4089dc:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (uint32_t i = 0; i < KERNEL_THREAD_MAX_NAME_LENGTH; i++)
  4089e0:	d003      	beq.n	4089ea <thread_new+0x66>
		if (*thread_name == '\0')
  4089e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  4089e6:	2a00      	cmp	r2, #0
  4089e8:	d1f7      	bne.n	4089da <thread_new+0x56>
	new_thread->state = THREAD_STATE_RUNNING;
  4089ea:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
  4089ee:	2102      	movs	r1, #2
	if (idle_thread == NULL)
  4089f0:	4a29      	ldr	r2, [pc, #164]	; (408a98 <thread_new+0x114>)
	new_thread->stack_size = 4 * stack_size;
  4089f2:	3da0      	subs	r5, #160	; 0xa0
	new_thread->state = THREAD_STATE_RUNNING;
  4089f4:	f361 0301 	bfi	r3, r1, #0, #2
	new_thread->priority = priority;
  4089f8:	f886 7050 	strb.w	r7, [r6, #80]	; 0x50
	if (idle_thread == NULL)
  4089fc:	6811      	ldr	r1, [r2, #0]
	new_thread->stack_size = 4 * stack_size;
  4089fe:	64f5      	str	r5, [r6, #76]	; 0x4c
	new_thread->state = THREAD_STATE_RUNNING;
  408a00:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	if (idle_thread == NULL)
  408a04:	2900      	cmp	r1, #0
  408a06:	d039      	beq.n	408a7c <thread_new+0xf8>
		new_thread->current_list = &running_queue;
  408a08:	4b24      	ldr	r3, [pc, #144]	; (408a9c <thread_new+0x118>)
		new_thread->next_list = NULL;
  408a0a:	2200      	movs	r2, #0
		list_insert_first(&(new_thread->list_node), &running_queue);
  408a0c:	f106 0010 	add.w	r0, r6, #16
		new_thread->list_node.object = new_thread;
  408a10:	6236      	str	r6, [r6, #32]
		list_insert_first(&(new_thread->list_node), &running_queue);
  408a12:	4619      	mov	r1, r3
		new_thread->thread_list.object = new_thread;
  408a14:	63b6      	str	r6, [r6, #56]	; 0x38
		new_thread->current_list = &running_queue;
  408a16:	6433      	str	r3, [r6, #64]	; 0x40
		new_thread->next_list = NULL;
  408a18:	6472      	str	r2, [r6, #68]	; 0x44
		list_insert_first(&(new_thread->list_node), &running_queue);
  408a1a:	4c21      	ldr	r4, [pc, #132]	; (408aa0 <thread_new+0x11c>)
  408a1c:	47a0      	blx	r4
		list_insert_first(&(new_thread->thread_list), &thread_list);
  408a1e:	4921      	ldr	r1, [pc, #132]	; (408aa4 <thread_new+0x120>)
  408a20:	f106 0028 	add.w	r0, r6, #40	; 0x28
  408a24:	47a0      	blx	r4
     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  408a26:	4c20      	ldr	r4, [pc, #128]	; (408aa8 <thread_new+0x124>)
  408a28:	2300      	movs	r3, #0
  408a2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  408a2e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  408a32:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  408a36:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
  408a3a:	f3c3 07c9 	ubfx	r7, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  408a3e:	f3c3 334e 	ubfx	r3, r3, #13, #15
  408a42:	ea4f 7e87 	mov.w	lr, r7, lsl #30
  408a46:	015d      	lsls	r5, r3, #5
  408a48:	ea05 000c 	and.w	r0, r5, ip
{
  408a4c:	4671      	mov	r1, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  408a4e:	463a      	mov	r2, r7
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  408a50:	ea40 0301 	orr.w	r3, r0, r1
      } while (ways-- != 0U);
  408a54:	3a01      	subs	r2, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  408a56:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  408a5a:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
      } while (ways-- != 0U);
  408a5e:	1c53      	adds	r3, r2, #1
  408a60:	d1f6      	bne.n	408a50 <thread_new+0xcc>
  408a62:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  408a64:	f115 0f20 	cmn.w	r5, #32
  408a68:	d1ee      	bne.n	408a48 <thread_new+0xc4>
  408a6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  408a6e:	f3bf 8f6f 	isb	sy
	resume_scheduler();
  408a72:	4b0e      	ldr	r3, [pc, #56]	; (408aac <thread_new+0x128>)
  408a74:	4798      	blx	r3
}
  408a76:	4630      	mov	r0, r6
  408a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		new_thread->next = new_thread;
  408a7c:	60b6      	str	r6, [r6, #8]
		idle_thread = new_thread;
  408a7e:	6016      	str	r6, [r2, #0]
  408a80:	e7d1      	b.n	408a26 <thread_new+0xa2>
		check(0);
  408a82:	2248      	movs	r2, #72	; 0x48
  408a84:	490a      	ldr	r1, [pc, #40]	; (408ab0 <thread_new+0x12c>)
  408a86:	4b0b      	ldr	r3, [pc, #44]	; (408ab4 <thread_new+0x130>)
		return NULL;
  408a88:	4606      	mov	r6, r0
		check(0);
  408a8a:	4798      	blx	r3
		return NULL;
  408a8c:	e7f3      	b.n	408a76 <thread_new+0xf2>
  408a8e:	bf00      	nop
  408a90:	0040872d 	.word	0x0040872d
  408a94:	00408bfd 	.word	0x00408bfd
  408a98:	20402820 	.word	0x20402820
  408a9c:	20402848 	.word	0x20402848
  408aa0:	00407fb1 	.word	0x00407fb1
  408aa4:	20402808 	.word	0x20402808
  408aa8:	e000ed00 	.word	0xe000ed00
  408aac:	00408739 	.word	0x00408739
  408ab0:	0040b678 	.word	0x0040b678
  408ab4:	00402219 	.word	0x00402219
  408ab8:	00408961 	.word	0x00408961

00408abc <thread_config>:
{
  408abc:	b510      	push	{r4, lr}
	interrupt_global_disable();
  408abe:	4b06      	ldr	r3, [pc, #24]	; (408ad8 <thread_config+0x1c>)
{
  408ac0:	b082      	sub	sp, #8
	interrupt_global_disable();
  408ac2:	4798      	blx	r3
	thread_new("Idle", round_robin_idle_thread, NULL, THREAD_PRIORITY_NORMAL, KERNEL_IDLE_THREAD_STACK_SIZE);
  408ac4:	2164      	movs	r1, #100	; 0x64
  408ac6:	2302      	movs	r3, #2
  408ac8:	2200      	movs	r2, #0
  408aca:	9100      	str	r1, [sp, #0]
  408acc:	4c03      	ldr	r4, [pc, #12]	; (408adc <thread_config+0x20>)
  408ace:	4904      	ldr	r1, [pc, #16]	; (408ae0 <thread_config+0x24>)
  408ad0:	4804      	ldr	r0, [pc, #16]	; (408ae4 <thread_config+0x28>)
  408ad2:	47a0      	blx	r4
}
  408ad4:	b002      	add	sp, #8
  408ad6:	bd10      	pop	{r4, pc}
  408ad8:	004031b1 	.word	0x004031b1
  408adc:	00408985 	.word	0x00408985
  408ae0:	0040895d 	.word	0x0040895d
  408ae4:	0040b694 	.word	0x0040b694

00408ae8 <dynamic_memory_insert_block>:

//--------------------------------------------------------------------------------------------------//


static void dynamic_memory_insert_block(Dynamic_memory_section memory_section, dynamic_memory_descriptor* block)
{
  408ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Retrieve the right memory section
	Dynamic_memory_section_s* current_section = dynamic_memory_sections[memory_section];
  408aea:	4b1f      	ldr	r3, [pc, #124]	; (408b68 <dynamic_memory_insert_block+0x80>)
{
  408aec:	460c      	mov	r4, r1
	Dynamic_memory_section_s* current_section = dynamic_memory_sections[memory_section];
  408aee:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	
	// Check that the block is passed right
	check((block < current_section->end_descriptor) && (block >= current_section->start_descriptor));
  408af2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  408af4:	428b      	cmp	r3, r1
  408af6:	d91f      	bls.n	408b38 <dynamic_memory_insert_block+0x50>
  408af8:	6c28      	ldr	r0, [r5, #64]	; 0x40
  408afa:	4281      	cmp	r1, r0
  408afc:	bf34      	ite	cc
  408afe:	2000      	movcc	r0, #0
  408b00:	2001      	movcs	r0, #1
  408b02:	22b2      	movs	r2, #178	; 0xb2
  408b04:	4919      	ldr	r1, [pc, #100]	; (408b6c <dynamic_memory_insert_block+0x84>)
  408b06:	4b1a      	ldr	r3, [pc, #104]	; (408b70 <dynamic_memory_insert_block+0x88>)
  408b08:	4798      	blx	r3
	
	// Make a iterator
	dynamic_memory_descriptor* block_iterator;
	
	for (block_iterator = current_section->start_descriptor; block_iterator->next < block; block_iterator = block_iterator->next)
  408b0a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  408b0c:	e000      	b.n	408b10 <dynamic_memory_insert_block+0x28>
  408b0e:	461a      	mov	r2, r3
  408b10:	6813      	ldr	r3, [r2, #0]
  408b12:	429c      	cmp	r4, r3
  408b14:	d8fb      	bhi.n	408b0e <dynamic_memory_insert_block+0x26>
	// block_iterator->next points to the memory block after the insertion
	// Create a pointer to the inserted block address
	uint8_t* addr = (uint8_t *) block_iterator;
	
	uint32_t acctual_block_size = MEMORY_GET_RAW_SIZE(block->size);
	uint32_t acctual_block_iterator_size = MEMORY_GET_RAW_SIZE(block_iterator->size);
  408b16:	6857      	ldr	r7, [r2, #4]
	uint32_t acctual_block_size = MEMORY_GET_RAW_SIZE(block->size);
  408b18:	6866      	ldr	r6, [r4, #4]
	uint32_t acctual_block_iterator_size = MEMORY_GET_RAW_SIZE(block_iterator->size);
  408b1a:	f027 4070 	bic.w	r0, r7, #4026531840	; 0xf0000000
	uint32_t acctual_block_size = MEMORY_GET_RAW_SIZE(block->size);
  408b1e:	f026 4170 	bic.w	r1, r6, #4026531840	; 0xf0000000
	
	// The algorithm rely on the fact that every element in the list contains free memory
	// We therefore have to check whether the previous free block overlaps with the new block
	// In this case the block will be combined 
	if ((addr + acctual_block_iterator_size) == ((uint8_t *)block))
  408b22:	4410      	add	r0, r2
  408b24:	4284      	cmp	r4, r0
  408b26:	d009      	beq.n	408b3c <dynamic_memory_insert_block+0x54>
	
	addr = (uint8_t *) block;
	
	acctual_block_size = MEMORY_GET_RAW_SIZE(block->size);
	
	if ((addr + acctual_block_size) == ((uint8_t *)block_iterator->next))
  408b28:	4421      	add	r1, r4
  408b2a:	428b      	cmp	r3, r1
  408b2c:	d00e      	beq.n	408b4c <dynamic_memory_insert_block+0x64>
		block->next = block_iterator->next;
	}
	
	// Last, if the inserted memory was not merged with the previous block
	// make the previous block point to the inserted block
	if (block != block_iterator)
  408b2e:	4294      	cmp	r4, r2
		block->next = block_iterator->next;
  408b30:	6023      	str	r3, [r4, #0]
	{
		block_iterator->next = block;
  408b32:	bf18      	it	ne
  408b34:	6014      	strne	r4, [r2, #0]
  408b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b38:	2000      	movs	r0, #0
  408b3a:	e7e2      	b.n	408b02 <dynamic_memory_insert_block+0x1a>
		block_iterator->size += acctual_block_size;
  408b3c:	19ce      	adds	r6, r1, r7
  408b3e:	4614      	mov	r4, r2
  408b40:	f026 4170 	bic.w	r1, r6, #4026531840	; 0xf0000000
  408b44:	6056      	str	r6, [r2, #4]
	if ((addr + acctual_block_size) == ((uint8_t *)block_iterator->next))
  408b46:	4421      	add	r1, r4
  408b48:	428b      	cmp	r3, r1
  408b4a:	d1f0      	bne.n	408b2e <dynamic_memory_insert_block+0x46>
		if (block_iterator->next != current_section->end_descriptor)
  408b4c:	6c69      	ldr	r1, [r5, #68]	; 0x44
  408b4e:	428b      	cmp	r3, r1
  408b50:	d0ed      	beq.n	408b2e <dynamic_memory_insert_block+0x46>
	if (block != block_iterator)
  408b52:	4294      	cmp	r4, r2
			block->next = block_iterator->next->next;
  408b54:	e893 0003 	ldmia.w	r3, {r0, r1}
			block->size += MEMORY_GET_RAW_SIZE(block_iterator->next->size);
  408b58:	f021 4370 	bic.w	r3, r1, #4026531840	; 0xf0000000
			block->next = block_iterator->next->next;
  408b5c:	6020      	str	r0, [r4, #0]
			block->size += MEMORY_GET_RAW_SIZE(block_iterator->next->size);
  408b5e:	441e      	add	r6, r3
  408b60:	6066      	str	r6, [r4, #4]
		block_iterator->next = block;
  408b62:	bf18      	it	ne
  408b64:	6014      	strne	r4, [r2, #0]
  408b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b68:	20400004 	.word	0x20400004
  408b6c:	0040b69c 	.word	0x0040b69c
  408b70:	00402219 	.word	0x00402219

00408b74 <dynamic_memory_config>:
{
  408b74:	b5f0      	push	{r4, r5, r6, r7, lr}
	Dynamic_memory_section_s* it = dynamic_memory_sections[section_counter];
  408b76:	4e1e      	ldr	r6, [pc, #120]	; (408bf0 <dynamic_memory_config+0x7c>)
			*start++ = 0x00;
  408b78:	2000      	movs	r0, #0
	it->start_address = (uint32_t)(&_sheap);
  408b7a:	4c1e      	ldr	r4, [pc, #120]	; (408bf4 <dynamic_memory_config+0x80>)
		it->end_descriptor->size = MEMORY_SET_BLOCK_USED(it->end_descriptor->size);
  408b7c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	Dynamic_memory_section_s* it = dynamic_memory_sections[section_counter];
  408b80:	f856 1b04 	ldr.w	r1, [r6], #4
	it->end_address = (uint32_t)(&_eheap);
  408b84:	4a1c      	ldr	r2, [pc, #112]	; (408bf8 <dynamic_memory_config+0x84>)
	it->start_address = (uint32_t)(&_sheap);
  408b86:	620c      	str	r4, [r1, #32]
	it->end_address = (uint32_t)(&_eheap);
  408b88:	624a      	str	r2, [r1, #36]	; 0x24
		while (start != stop)
  408b8a:	4294      	cmp	r4, r2
		volatile uint8_t* start = (volatile uint8_t *)it->start_address;
  408b8c:	4623      	mov	r3, r4
		while (start != stop)
  408b8e:	d005      	beq.n	408b9c <dynamic_memory_config+0x28>
			*start++ = 0x00;
  408b90:	7018      	strb	r0, [r3, #0]
  408b92:	3301      	adds	r3, #1
		while (start != stop)
  408b94:	429a      	cmp	r2, r3
  408b96:	d1fb      	bne.n	408b90 <dynamic_memory_config+0x1c>
  408b98:	6a0c      	ldr	r4, [r1, #32]
  408b9a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
		if (it->start_address & (it->allignment - 1))
  408b9c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  408b9e:	1e5d      	subs	r5, r3, #1
  408ba0:	4225      	tst	r5, r4
  408ba2:	d005      	beq.n	408bb0 <dynamic_memory_config+0x3c>
			it->start_address = ((it->start_address + it->allignment - 1) & ~(it->allignment - 1));
  408ba4:	442c      	add	r4, r5
  408ba6:	f1c3 0e00 	rsb	lr, r3, #0
  408baa:	ea04 040e 	and.w	r4, r4, lr
  408bae:	620c      	str	r4, [r1, #32]
		if (it->end_address & (it->allignment - 1))
  408bb0:	4215      	tst	r5, r2
  408bb2:	d001      	beq.n	408bb8 <dynamic_memory_config+0x44>
			it->end_address &= ~(it->allignment - 1);
  408bb4:	425b      	negs	r3, r3
  408bb6:	401a      	ands	r2, r3
		it->end_address -= memory_descriptor_size;
  408bb8:	f1a2 0308 	sub.w	r3, r2, #8
		it->start_descriptor = &it->start_descriptor_object;
  408bbc:	f101 0c38 	add.w	ip, r1, #56	; 0x38
		it->start_descriptor->next = (dynamic_memory_descriptor *)it->start_address;
  408bc0:	638c      	str	r4, [r1, #56]	; 0x38
		it->total_memory = it->end_address - it->start_address;
  408bc2:	1b1d      	subs	r5, r3, r4
		it->end_address -= memory_descriptor_size;
  408bc4:	624b      	str	r3, [r1, #36]	; 0x24
		it->end_descriptor = (dynamic_memory_descriptor *)it->end_address;
  408bc6:	644b      	str	r3, [r1, #68]	; 0x44
		it->total_memory = it->end_address - it->start_address;
  408bc8:	628d      	str	r5, [r1, #40]	; 0x28
		it->start_descriptor->next->size = MEMORY_SET_BLOCK_FREE(it->start_descriptor->next->size);
  408bca:	f025 4e00 	bic.w	lr, r5, #2147483648	; 0x80000000
		it->free_memory = it->total_memory;
  408bce:	62cd      	str	r5, [r1, #44]	; 0x2c
		it->start_descriptor = &it->start_descriptor_object;
  408bd0:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
		it->start_descriptor->next->next = it->end_descriptor;
  408bd4:	6023      	str	r3, [r4, #0]
		it->start_descriptor->next->size = MEMORY_SET_BLOCK_FREE(it->start_descriptor->next->size);
  408bd6:	6b8c      	ldr	r4, [r1, #56]	; 0x38
		it = dynamic_memory_sections[++section_counter];
  408bd8:	f856 1b04 	ldr.w	r1, [r6], #4
		it->start_descriptor->next->size = MEMORY_SET_BLOCK_FREE(it->start_descriptor->next->size);
  408bdc:	f8c4 e004 	str.w	lr, [r4, #4]
		it->end_descriptor->size = MEMORY_SET_BLOCK_USED(it->end_descriptor->size);
  408be0:	e902 0081 	stmdb	r2, {r0, r7}
	while (it != NULL)
  408be4:	b111      	cbz	r1, 408bec <dynamic_memory_config+0x78>
  408be6:	6a0c      	ldr	r4, [r1, #32]
  408be8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  408bea:	e7ce      	b.n	408b8a <dynamic_memory_config+0x16>
  408bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408bee:	bf00      	nop
  408bf0:	20400004 	.word	0x20400004
  408bf4:	20402888 	.word	0x20402888
  408bf8:	20452888 	.word	0x20452888

00408bfc <dynamic_memory_new>:

//--------------------------------------------------------------------------------------------------//


void* dynamic_memory_new(Dynamic_memory_section memory_section, uint32_t size)
{
  408bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Pointer to iterators
	dynamic_memory_descriptor* block_iterator_previous;
	dynamic_memory_descriptor* block_iterator_current;
	
	// Pointer to the memory section
	Dynamic_memory_section_s* current_section = dynamic_memory_sections[memory_section];
  408c00:	4b34      	ldr	r3, [pc, #208]	; (408cd4 <dynamic_memory_new+0xd8>)
{
  408c02:	4607      	mov	r7, r0
	
	// void pointer that the function will return
	void* return_value = NULL;
	
	// Check that the size is greater than zero
	check(size != 0);
  408c04:	1c08      	adds	r0, r1, #0
  408c06:	460d      	mov	r5, r1
	Dynamic_memory_section_s* current_section = dynamic_memory_sections[memory_section];
  408c08:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
	check(size != 0);
  408c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
  408c10:	bf18      	it	ne
  408c12:	2001      	movne	r0, #1
  408c14:	4930      	ldr	r1, [pc, #192]	; (408cd8 <dynamic_memory_new+0xdc>)
  408c16:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 408ce4 <dynamic_memory_new+0xe8>
  408c1a:	47c8      	blx	r9
	
	// Make sure the size requested is greater than the minimum value
	if (size < current_section->minimum_block_size)
  408c1c:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
	// First add the size of the descriptor and add alignment padding
	size += memory_descriptor_size;
	
	
	// Make sure the size has the required alignment
	if (size & (current_section->allignment - 1))
  408c20:	6b73      	ldr	r3, [r6, #52]	; 0x34
  408c22:	4555      	cmp	r5, sl
  408c24:	f103 30ff 	add.w	r0, r3, #4294967295
  408c28:	bf38      	it	cc
  408c2a:	4655      	movcc	r5, sl
	size += memory_descriptor_size;
  408c2c:	3508      	adds	r5, #8
	if (size & (current_section->allignment - 1))
  408c2e:	4205      	tst	r5, r0
  408c30:	d002      	beq.n	408c38 <dynamic_memory_new+0x3c>
	{
		size = ((size + current_section->allignment - 1) & ~(current_section->allignment - 1));
  408c32:	4405      	add	r5, r0
  408c34:	425b      	negs	r3, r3
  408c36:	401d      	ands	r5, r3
	// Now the correct size of the block to be allocated is determined. This size
	// includes the memory descriptor in the start
	
	// If there is enough bytes remaining in the heap section
	// The free memory size holds the number of free bytes. That is not include
	if (size < current_section->free_memory)
  408c38:	f8d6 e02c 	ldr.w	lr, [r6, #44]	; 0x2c
  408c3c:	4575      	cmp	r5, lr
  408c3e:	d246      	bcs.n	408cce <dynamic_memory_new+0xd2>
	{
		// Iterate through list and try to find a match
		block_iterator_previous = current_section->start_descriptor;
  408c40:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
		block_iterator_current = current_section->start_descriptor->next;
  408c44:	f8dc 4000 	ldr.w	r4, [ip]
		
		while ((MEMORY_GET_RAW_SIZE(block_iterator_current->size) < size) && (block_iterator_current->next != NULL))
  408c48:	e003      	b.n	408c52 <dynamic_memory_new+0x56>
  408c4a:	6823      	ldr	r3, [r4, #0]
  408c4c:	b133      	cbz	r3, 408c5c <dynamic_memory_new+0x60>
  408c4e:	46a4      	mov	ip, r4
  408c50:	461c      	mov	r4, r3
  408c52:	6862      	ldr	r2, [r4, #4]
  408c54:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
  408c58:	428d      	cmp	r5, r1
  408c5a:	d8f6      	bhi.n	408c4a <dynamic_memory_new+0x4e>
		
		// After the while loop the block_iterator_current points to the memory block
		// that is large enough to hold the requested size.
		
		// Check that the block is not the end block 
		if (block_iterator_current != current_section->end_descriptor)
  408c5c:	6c73      	ldr	r3, [r6, #68]	; 0x44
  408c5e:	429c      	cmp	r4, r3
  408c60:	d035      	beq.n	408cce <dynamic_memory_new+0xd2>
			
			
			// Take out the available block of the linked list
			block_iterator_previous->next = block_iterator_current->next;
			
			if ((MEMORY_GET_RAW_SIZE(block_iterator_current->size) - size) >= (current_section->minimum_block_size + memory_descriptor_size))
  408c62:	1b49      	subs	r1, r1, r5
  408c64:	f10a 0a08 	add.w	sl, sl, #8
			block_iterator_previous->next = block_iterator_current->next;
  408c68:	6823      	ldr	r3, [r4, #0]
			return_value = ((void *)(((uint8_t *)block_iterator_current) + memory_descriptor_size));
  408c6a:	f104 0808 	add.w	r8, r4, #8
			if ((MEMORY_GET_RAW_SIZE(block_iterator_current->size) - size) >= (current_section->minimum_block_size + memory_descriptor_size))
  408c6e:	4551      	cmp	r1, sl
			block_iterator_previous->next = block_iterator_current->next;
  408c70:	f8cc 3000 	str.w	r3, [ip]
			if ((MEMORY_GET_RAW_SIZE(block_iterator_current->size) - size) >= (current_section->minimum_block_size + memory_descriptor_size))
  408c74:	d213      	bcs.n	408c9e <dynamic_memory_new+0xa2>
			block_iterator_current->size = MEMORY_SET_BLOCK_USED(block_iterator_current->size);
			
			// In order to free the memory just by the pointer we need to
			// add some information in order to know what memory section
			// it belongs to
			block_iterator_current->size = MEMORY_SET_SECTION(block_iterator_current->size, memory_section);
  408c76:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
			current_section->free_memory -= size;
  408c7a:	ebae 0305 	sub.w	r3, lr, r5
			block_iterator_current->next = NULL;
  408c7e:	2100      	movs	r1, #0
			block_iterator_current->size = MEMORY_SET_SECTION(block_iterator_current->size, memory_section);
  408c80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
			current_section->free_memory -= size;
  408c84:	62f3      	str	r3, [r6, #44]	; 0x2c
			block_iterator_current->size = MEMORY_SET_SECTION(block_iterator_current->size, memory_section);
  408c86:	e884 0006 	stmia.w	r4, {r1, r2}
	}
	
	uint8_t* tmp = (uint8_t *)return_value;
	
	// Fill memory with zeros
	for (uint32_t i = 0; i < (size - 8); i++)
  408c8a:	f1b5 0208 	subs.w	r2, r5, #8
  408c8e:	d003      	beq.n	408c98 <dynamic_memory_new+0x9c>
  408c90:	2100      	movs	r1, #0
  408c92:	4640      	mov	r0, r8
  408c94:	4b11      	ldr	r3, [pc, #68]	; (408cdc <dynamic_memory_new+0xe0>)
  408c96:	4798      	blx	r3
	{
		*tmp++ = 0;
	}
	
	return return_value;
}
  408c98:	4640      	mov	r0, r8
  408c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dynamic_memory_descriptor* block_to_insert = ((dynamic_memory_descriptor *)(((uint8_t *)block_iterator_current) + size));
  408c9e:	eb04 0a05 	add.w	sl, r4, r5
				check((((uint32_t)block_to_insert) & (current_section->allignment - 1)) == 0);
  408ca2:	f44f 729d 	mov.w	r2, #314	; 0x13a
  408ca6:	490c      	ldr	r1, [pc, #48]	; (408cd8 <dynamic_memory_new+0xdc>)
  408ca8:	ea1a 0f00 	tst.w	sl, r0
  408cac:	bf0c      	ite	eq
  408cae:	2001      	moveq	r0, #1
  408cb0:	2000      	movne	r0, #0
  408cb2:	47c8      	blx	r9
				block_to_insert->size = block_iterator_current->size - size;
  408cb4:	6863      	ldr	r3, [r4, #4]
				dynamic_memory_insert_block(memory_section, block_to_insert);
  408cb6:	4a0a      	ldr	r2, [pc, #40]	; (408ce0 <dynamic_memory_new+0xe4>)
  408cb8:	4651      	mov	r1, sl
				block_to_insert->size = block_iterator_current->size - size;
  408cba:	1b5b      	subs	r3, r3, r5
				dynamic_memory_insert_block(memory_section, block_to_insert);
  408cbc:	4638      	mov	r0, r7
				block_to_insert->size = block_iterator_current->size - size;
  408cbe:	f8ca 3004 	str.w	r3, [sl, #4]
				block_iterator_current->size = size;
  408cc2:	6065      	str	r5, [r4, #4]
				dynamic_memory_insert_block(memory_section, block_to_insert);
  408cc4:	4790      	blx	r2
  408cc6:	f8d6 e02c 	ldr.w	lr, [r6, #44]	; 0x2c
  408cca:	6862      	ldr	r2, [r4, #4]
  408ccc:	e7d3      	b.n	408c76 <dynamic_memory_new+0x7a>
	void* return_value = NULL;
  408cce:	f04f 0800 	mov.w	r8, #0
  408cd2:	e7da      	b.n	408c8a <dynamic_memory_new+0x8e>
  408cd4:	20400004 	.word	0x20400004
  408cd8:	0040b69c 	.word	0x0040b69c
  408cdc:	0040a555 	.word	0x0040a555
  408ce0:	00408ae9 	.word	0x00408ae9
  408ce4:	00402219 	.word	0x00402219

00408ce8 <dynamic_memory_free>:
void dynamic_memory_free(void* memory_object)
{
	dynamic_memory_descriptor* block;
	
	// Check if the object pointed to is not zero
	if (memory_object != NULL)
  408ce8:	2800      	cmp	r0, #0
  408cea:	d04f      	beq.n	408d8c <dynamic_memory_free+0xa4>
  408cec:	4601      	mov	r1, r0
{
  408cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		memory_object = (void *)((uint8_t *)memory_object - memory_descriptor_size);
		
		// Cast the address to a memory object
		block = (dynamic_memory_descriptor *)memory_object;
		
		if (block->next == NULL)
  408cf2:	f850 5c08 	ldr.w	r5, [r0, #-8]
  408cf6:	b13d      	cbz	r5, 408d08 <dynamic_memory_free+0x20>
				check(0);
			}
		}
		else
		{
			check(0);
  408cf8:	f44f 72cc 	mov.w	r2, #408	; 0x198
  408cfc:	4926      	ldr	r1, [pc, #152]	; (408d98 <dynamic_memory_free+0xb0>)
  408cfe:	2000      	movs	r0, #0
  408d00:	4b26      	ldr	r3, [pc, #152]	; (408d9c <dynamic_memory_free+0xb4>)
	}
	else
	{
		check(0);
	}
}
  408d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			check(0);
  408d06:	4718      	bx	r3
			if (MEMORY_IS_BLOCK_USED(block->size))
  408d08:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408d0c:	2b00      	cmp	r3, #0
  408d0e:	db07      	blt.n	408d20 <dynamic_memory_free+0x38>
				check(0);
  408d10:	4628      	mov	r0, r5
  408d12:	f240 1293 	movw	r2, #403	; 0x193
  408d16:	4920      	ldr	r1, [pc, #128]	; (408d98 <dynamic_memory_free+0xb0>)
  408d18:	4b20      	ldr	r3, [pc, #128]	; (408d9c <dynamic_memory_free+0xb4>)
}
  408d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				check(0);
  408d1e:	4718      	bx	r3
				Dynamic_memory_section sect = MEMORY_GET_SECTION(block->size);
  408d20:	f3c3 7002 	ubfx	r0, r3, #28, #3
				dynamic_memory_sections[sect]->free_memory += MEMORY_GET_RAW_SIZE(block->size);
  408d24:	4a1e      	ldr	r2, [pc, #120]	; (408da0 <dynamic_memory_free+0xb8>)
  408d26:	f023 4670 	bic.w	r6, r3, #4026531840	; 0xf0000000
				block->size = MEMORY_SET_BLOCK_FREE(block->size);
  408d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				dynamic_memory_sections[sect]->free_memory += MEMORY_GET_RAW_SIZE(block->size);
  408d2e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
				dynamic_memory_insert_block(sect, block);
  408d32:	3908      	subs	r1, #8
				block->size = MEMORY_SET_BLOCK_FREE(block->size);
  408d34:	604b      	str	r3, [r1, #4]
				dynamic_memory_sections[sect]->free_memory += MEMORY_GET_RAW_SIZE(block->size);
  408d36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
				dynamic_memory_insert_block(sect, block);
  408d38:	4c1a      	ldr	r4, [pc, #104]	; (408da4 <dynamic_memory_free+0xbc>)
				dynamic_memory_sections[sect]->free_memory += MEMORY_GET_RAW_SIZE(block->size);
  408d3a:	4433      	add	r3, r6
  408d3c:	62d3      	str	r3, [r2, #44]	; 0x2c
				dynamic_memory_insert_block(sect, block);
  408d3e:	47a0      	blx	r4
     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  408d40:	4c19      	ldr	r4, [pc, #100]	; (408da8 <dynamic_memory_free+0xc0>)
  408d42:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  408d46:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  408d4a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  408d4e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  408d52:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  408d56:	f3c3 334e 	ubfx	r3, r3, #13, #15
  408d5a:	07b7      	lsls	r7, r6, #30
  408d5c:	015d      	lsls	r5, r3, #5
  408d5e:	ea05 000e 	and.w	r0, r5, lr
{
  408d62:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  408d64:	4632      	mov	r2, r6
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  408d66:	ea40 0301 	orr.w	r3, r0, r1
      } while (ways-- != 0U);
  408d6a:	3a01      	subs	r2, #1
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  408d6c:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  408d70:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
      } while (ways-- != 0U);
  408d74:	1c53      	adds	r3, r2, #1
  408d76:	d1f6      	bne.n	408d66 <dynamic_memory_free+0x7e>
  408d78:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  408d7a:	f115 0f20 	cmn.w	r5, #32
  408d7e:	d1ee      	bne.n	408d5e <dynamic_memory_free+0x76>
  408d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  408d84:	f3bf 8f6f 	isb	sy
  408d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		check(0);
  408d8c:	f240 129d 	movw	r2, #413	; 0x19d
  408d90:	4901      	ldr	r1, [pc, #4]	; (408d98 <dynamic_memory_free+0xb0>)
  408d92:	4b02      	ldr	r3, [pc, #8]	; (408d9c <dynamic_memory_free+0xb4>)
  408d94:	4718      	bx	r3
  408d96:	bf00      	nop
  408d98:	0040b69c 	.word	0x0040b69c
  408d9c:	00402219 	.word	0x00402219
  408da0:	20400004 	.word	0x20400004
  408da4:	00408ae9 	.word	0x00408ae9
  408da8:	e000ed00 	.word	0xe000ed00

00408dac <dynamic_memory_get_total_size>:
//--------------------------------------------------------------------------------------------------//


uint32_t dynamic_memory_get_total_size(Dynamic_memory_section memory_section)
{
	uint32_t tmp = dynamic_memory_sections[memory_section]->total_memory;
  408dac:	4b02      	ldr	r3, [pc, #8]	; (408db8 <dynamic_memory_get_total_size+0xc>)
  408dae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	
	return tmp;
}
  408db2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  408db4:	4770      	bx	lr
  408db6:	bf00      	nop
  408db8:	20400004 	.word	0x20400004

00408dbc <dynamic_memory_get_used_size>:
//--------------------------------------------------------------------------------------------------//


uint32_t dynamic_memory_get_used_size(Dynamic_memory_section memory_section)
{
	uint32_t tmp_total = dynamic_memory_sections[memory_section]->total_memory;
  408dbc:	4b03      	ldr	r3, [pc, #12]	; (408dcc <dynamic_memory_get_used_size+0x10>)
  408dbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint32_t tmp_free = dynamic_memory_sections[memory_section]->free_memory;
	
	return (tmp_total - tmp_free);
  408dc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  408dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  408dc6:	1ac0      	subs	r0, r0, r3
  408dc8:	4770      	bx	lr
  408dca:	bf00      	nop
  408dcc:	20400004 	.word	0x20400004

00408dd0 <sd_protocol_send_cmd_2>:
//--------------------------------------------------------------------------------------------------//


uint8_t sd_protocol_send_cmd_2(sd_card* card)
{
	if (hsmci_send_command(HSMCI, 2 | SD_PROTOCOL_RESPONSE_2 | HSMCI_CMDR_OPDCMD_OPENDRAIN, 0, CHECK_CRC) == HSMCI_ERROR)
  408dd0:	2300      	movs	r3, #0
  408dd2:	f641 0182 	movw	r1, #6274	; 0x1882
{
  408dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (hsmci_send_command(HSMCI, 2 | SD_PROTOCOL_RESPONSE_2 | HSMCI_CMDR_OPDCMD_OPENDRAIN, 0, CHECK_CRC) == HSMCI_ERROR)
  408dd8:	461a      	mov	r2, r3
{
  408dda:	b08b      	sub	sp, #44	; 0x2c
  408ddc:	4604      	mov	r4, r0
	if (hsmci_send_command(HSMCI, 2 | SD_PROTOCOL_RESPONSE_2 | HSMCI_CMDR_OPDCMD_OPENDRAIN, 0, CHECK_CRC) == HSMCI_ERROR)
  408dde:	4d29      	ldr	r5, [pc, #164]	; (408e84 <sd_protocol_send_cmd_2+0xb4>)
  408de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408de4:	47a8      	blx	r5
  408de6:	2801      	cmp	r0, #1
  408de8:	d044      	beq.n	408e74 <sd_protocol_send_cmd_2+0xa4>
		return 0;
	}
	
	uint8_t cid_raw[16];
	
	hsmci_read_136_bit_response_register_extended(HSMCI, cid_raw);
  408dea:	a901      	add	r1, sp, #4
  408dec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408df0:	4b25      	ldr	r3, [pc, #148]	; (408e88 <sd_protocol_send_cmd_2+0xb8>)
	
	card->card_identification = sd_protocol_cid_decode(cid_raw);
  408df2:	ae05      	add	r6, sp, #20
	hsmci_read_136_bit_response_register_extended(HSMCI, cid_raw);
  408df4:	4798      	blx	r3
	cid.application_id[count] = '\0';
	
	cid.manifacturer_id = raw_rata[15];
	cid.revision = raw_rata[7];
	cid.serial_number = (raw_rata[3]) | (raw_rata[4] << 8) | (raw_rata[5] << 16) | (raw_rata[6] << 24);
	cid.manifacturer_date = (raw_rata[1]) | ((raw_rata[2] & 0b1111) << 8);
  408df6:	f89d 3006 	ldrb.w	r3, [sp, #6]
  408dfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
	card->card_identification = sd_protocol_cid_decode(cid_raw);
  408dfe:	2100      	movs	r1, #0
	cid.manifacturer_date = (raw_rata[1]) | ((raw_rata[2] & 0b1111) << 8);
  408e00:	021b      	lsls	r3, r3, #8
		cid.name[count++] = (char)raw_rata[i];
  408e02:	f89d 0010 	ldrb.w	r0, [sp, #16]
  408e06:	f89d 700e 	ldrb.w	r7, [sp, #14]
	return 1;
  408e0a:	2501      	movs	r5, #1
	cid.manifacturer_date = (raw_rata[1]) | ((raw_rata[2] & 0b1111) << 8);
  408e0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
	
	return cid;
  408e10:	f88d 0018 	strb.w	r0, [sp, #24]
		cid.name[count++] = (char)raw_rata[i];
  408e14:	f89d 000d 	ldrb.w	r0, [sp, #13]
	card->card_identification = sd_protocol_cid_decode(cid_raw);
  408e18:	3404      	adds	r4, #4
	cid.manifacturer_date = (raw_rata[1]) | ((raw_rata[2] & 0b1111) << 8);
  408e1a:	4313      	orrs	r3, r2
		cid.name[count++] = (char)raw_rata[i];
  408e1c:	f89d 200c 	ldrb.w	r2, [sp, #12]
	return cid;
  408e20:	f88d 701a 	strb.w	r7, [sp, #26]
  408e24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		cid.application_id[count++] = (char)raw_rata[i];
  408e28:	f89d 3012 	ldrb.w	r3, [sp, #18]
	return cid;
  408e2c:	f88d 001b 	strb.w	r0, [sp, #27]
  408e30:	f88d 201c 	strb.w	r2, [sp, #28]
	cid.revision = raw_rata[7];
  408e34:	f89d 000b 	ldrb.w	r0, [sp, #11]
  408e38:	f8dd 2007 	ldr.w	r2, [sp, #7]
	return cid;
  408e3c:	f88d 3015 	strb.w	r3, [sp, #21]
		cid.name[count++] = (char)raw_rata[i];
  408e40:	f89d e00f 	ldrb.w	lr, [sp, #15]
	return cid;
  408e44:	f89d 3013 	ldrb.w	r3, [sp, #19]
		cid.application_id[count++] = (char)raw_rata[i];
  408e48:	f89d 7011 	ldrb.w	r7, [sp, #17]
	return cid;
  408e4c:	f88d e019 	strb.w	lr, [sp, #25]
  408e50:	f88d 7016 	strb.w	r7, [sp, #22]
  408e54:	f88d 001e 	strb.w	r0, [sp, #30]
  408e58:	9208      	str	r2, [sp, #32]
  408e5a:	f88d 3014 	strb.w	r3, [sp, #20]
	card->card_identification = sd_protocol_cid_decode(cid_raw);
  408e5e:	f88d 1017 	strb.w	r1, [sp, #23]
  408e62:	f88d 101d 	strb.w	r1, [sp, #29]
  408e66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  408e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  408e6a:	6833      	ldr	r3, [r6, #0]
}
  408e6c:	4628      	mov	r0, r5
	card->card_identification = sd_protocol_cid_decode(cid_raw);
  408e6e:	6023      	str	r3, [r4, #0]
}
  408e70:	b00b      	add	sp, #44	; 0x2c
  408e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
  408e74:	2500      	movs	r5, #0
		board_serial_print("[  FAIL ]\tCMD2\n");
  408e76:	4805      	ldr	r0, [pc, #20]	; (408e8c <sd_protocol_send_cmd_2+0xbc>)
  408e78:	4b05      	ldr	r3, [pc, #20]	; (408e90 <sd_protocol_send_cmd_2+0xc0>)
  408e7a:	4798      	blx	r3
}
  408e7c:	4628      	mov	r0, r5
  408e7e:	b00b      	add	sp, #44	; 0x2c
  408e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e82:	bf00      	nop
  408e84:	00402e31 	.word	0x00402e31
  408e88:	00402ddd 	.word	0x00402ddd
  408e8c:	0040b740 	.word	0x0040b740
  408e90:	0040052d 	.word	0x0040052d

00408e94 <sd_protocol_send_cmd_7>:
	if (hsmci_send_command(HSMCI, 7 | SD_PROTOCOL_RESPONSE_1b, (uint32_t)card->relative_card_address << 16, CHECK_CRC) == HSMCI_ERROR)
  408e94:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
  408e96:	2300      	movs	r3, #0
  408e98:	f241 01c7 	movw	r1, #4295	; 0x10c7
  408e9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408ea0:	0412      	lsls	r2, r2, #16
{
  408ea2:	b510      	push	{r4, lr}
	if (hsmci_send_command(HSMCI, 7 | SD_PROTOCOL_RESPONSE_1b, (uint32_t)card->relative_card_address << 16, CHECK_CRC) == HSMCI_ERROR)
  408ea4:	4c05      	ldr	r4, [pc, #20]	; (408ebc <sd_protocol_send_cmd_7+0x28>)
  408ea6:	47a0      	blx	r4
  408ea8:	2801      	cmp	r0, #1
  408eaa:	d001      	beq.n	408eb0 <sd_protocol_send_cmd_7+0x1c>
	return 1;
  408eac:	2001      	movs	r0, #1
}
  408eae:	bd10      	pop	{r4, pc}
		board_serial_print("[  FAIL ]\tCMD7\n");
  408eb0:	4803      	ldr	r0, [pc, #12]	; (408ec0 <sd_protocol_send_cmd_7+0x2c>)
  408eb2:	4b04      	ldr	r3, [pc, #16]	; (408ec4 <sd_protocol_send_cmd_7+0x30>)
  408eb4:	4798      	blx	r3
		return 0;
  408eb6:	2000      	movs	r0, #0
  408eb8:	bd10      	pop	{r4, pc}
  408eba:	bf00      	nop
  408ebc:	00402e31 	.word	0x00402e31
  408ec0:	0040b77c 	.word	0x0040b77c
  408ec4:	0040052d 	.word	0x0040052d

00408ec8 <sd_protocol_send_acmd_6>:
	if(hsmci_send_command(HSMCI, 55 | SD_PROTOCOL_RESPONSE_1, (uint32_t)card->relative_card_address << 16, CHECK_CRC) == HSMCI_ERROR)
  408ec8:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
  408eca:	2300      	movs	r3, #0
  408ecc:	f241 0177 	movw	r1, #4215	; 0x1077
  408ed0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408ed4:	0412      	lsls	r2, r2, #16
{
  408ed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(hsmci_send_command(HSMCI, 55 | SD_PROTOCOL_RESPONSE_1, (uint32_t)card->relative_card_address << 16, CHECK_CRC) == HSMCI_ERROR)
  408eda:	4c1d      	ldr	r4, [pc, #116]	; (408f50 <sd_protocol_send_acmd_6+0x88>)
  408edc:	47a0      	blx	r4
  408ede:	2801      	cmp	r0, #1
  408ee0:	d015      	beq.n	408f0e <sd_protocol_send_acmd_6+0x46>
	if (hsmci_send_command(HSMCI, 6 | SD_PROTOCOL_RESPONSE_1, 0b10, CHECK_CRC) == HSMCI_ERROR)
  408ee2:	2300      	movs	r3, #0
  408ee4:	2202      	movs	r2, #2
  408ee6:	f241 0146 	movw	r1, #4166	; 0x1046
  408eea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408eee:	47a0      	blx	r4
  408ef0:	2801      	cmp	r0, #1
  408ef2:	d00c      	beq.n	408f0e <sd_protocol_send_acmd_6+0x46>
	uint32_t status = hsmci_read_48_bit_response_register(HSMCI);
  408ef4:	4b17      	ldr	r3, [pc, #92]	; (408f54 <sd_protocol_send_acmd_6+0x8c>)
  408ef6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408efa:	4798      	blx	r3
	if (status & (0b1111111111111 << 19))
  408efc:	4b16      	ldr	r3, [pc, #88]	; (408f58 <sd_protocol_send_acmd_6+0x90>)
	uint32_t status = hsmci_read_48_bit_response_register(HSMCI);
  408efe:	4607      	mov	r7, r0
	if (status & (0b1111111111111 << 19))
  408f00:	4003      	ands	r3, r0
  408f02:	b93b      	cbnz	r3, 408f14 <sd_protocol_send_acmd_6+0x4c>
	return 1;
  408f04:	2001      	movs	r0, #1
  408f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	board_serial_print("\n");
  408f0a:	4814      	ldr	r0, [pc, #80]	; (408f5c <sd_protocol_send_acmd_6+0x94>)
  408f0c:	47b0      	blx	r6
		return 0;
  408f0e:	2000      	movs	r0, #0
  408f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	board_serial_print(description);
  408f14:	4812      	ldr	r0, [pc, #72]	; (408f60 <sd_protocol_send_acmd_6+0x98>)
	board_serial_print(" : 0b");
  408f16:	251f      	movs	r5, #31
	board_serial_print(description);
  408f18:	4e12      	ldr	r6, [pc, #72]	; (408f64 <sd_protocol_send_acmd_6+0x9c>)
	board_serial_print(" : 0b");
  408f1a:	2400      	movs	r4, #0
			board_serial_print("1");
  408f1c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 408f6c <sd_protocol_send_acmd_6+0xa4>
	board_serial_print(description);
  408f20:	47b0      	blx	r6
			board_serial_print("0");
  408f22:	f8df 904c 	ldr.w	r9, [pc, #76]	; 408f70 <sd_protocol_send_acmd_6+0xa8>
			board_serial_print(" ");
  408f26:	f8df 804c 	ldr.w	r8, [pc, #76]	; 408f74 <sd_protocol_send_acmd_6+0xac>
	board_serial_print(" : 0b");
  408f2a:	480f      	ldr	r0, [pc, #60]	; (408f68 <sd_protocol_send_acmd_6+0xa0>)
  408f2c:	47b0      	blx	r6
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  408f2e:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < number_of_bits; i++)
  408f30:	3401      	adds	r4, #1
			board_serial_print("0");
  408f32:	4648      	mov	r0, r9
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  408f34:	40ab      	lsls	r3, r5
	for (uint8_t i = 0; i < number_of_bits; i++)
  408f36:	b2e4      	uxtb	r4, r4
  408f38:	3d01      	subs	r5, #1
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  408f3a:	423b      	tst	r3, r7
			board_serial_print("1");
  408f3c:	bf18      	it	ne
  408f3e:	4650      	movne	r0, sl
  408f40:	47b0      	blx	r6
	for (uint8_t i = 0; i < number_of_bits; i++)
  408f42:	2c20      	cmp	r4, #32
			board_serial_print(" ");
  408f44:	4640      	mov	r0, r8
	for (uint8_t i = 0; i < number_of_bits; i++)
  408f46:	d0e0      	beq.n	408f0a <sd_protocol_send_acmd_6+0x42>
		if ((i % 8 == 0) && (i != 0))
  408f48:	0763      	lsls	r3, r4, #29
  408f4a:	d1f0      	bne.n	408f2e <sd_protocol_send_acmd_6+0x66>
			board_serial_print(" ");
  408f4c:	47b0      	blx	r6
  408f4e:	e7ee      	b.n	408f2e <sd_protocol_send_acmd_6+0x66>
  408f50:	00402e31 	.word	0x00402e31
  408f54:	00402dd9 	.word	0x00402dd9
  408f58:	fff80000 	.word	0xfff80000
  408f5c:	0040b4cc 	.word	0x0040b4cc
  408f60:	0040b78c 	.word	0x0040b78c
  408f64:	0040052d 	.word	0x0040052d
  408f68:	0040b79c 	.word	0x0040b79c
  408f6c:	0040b7a8 	.word	0x0040b7a8
  408f70:	0040b7a4 	.word	0x0040b7a4
  408f74:	0040b810 	.word	0x0040b810

00408f78 <sd_protocol_send_acmd_51>:
{
  408f78:	b5f0      	push	{r4, r5, r6, r7, lr}
  408f7a:	4606      	mov	r6, r0
  408f7c:	b087      	sub	sp, #28
	if(hsmci_send_command(HSMCI, 55 | SD_PROTOCOL_RESPONSE_1, (uint32_t)card->relative_card_address << 16, CHECK_CRC) == HSMCI_ERROR)
  408f7e:	2300      	movs	r3, #0
  408f80:	f241 0177 	movw	r1, #4215	; 0x1077
  408f84:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
  408f86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408f8a:	4c19      	ldr	r4, [pc, #100]	; (408ff0 <sd_protocol_send_acmd_51+0x78>)
  408f8c:	0412      	lsls	r2, r2, #16
  408f8e:	47a0      	blx	r4
  408f90:	2801      	cmp	r0, #1
  408f92:	d024      	beq.n	408fde <sd_protocol_send_acmd_51+0x66>
	if (hsmci_send_addressed_data_transfer_command(HSMCI, 51 | SD_PROTOCOL_RESPONSE_1 | 
  408f94:	2500      	movs	r5, #0
  408f96:	2401      	movs	r4, #1
  408f98:	2308      	movs	r3, #8
  408f9a:	4916      	ldr	r1, [pc, #88]	; (408ff4 <sd_protocol_send_acmd_51+0x7c>)
  408f9c:	9502      	str	r5, [sp, #8]
  408f9e:	462a      	mov	r2, r5
  408fa0:	9501      	str	r5, [sp, #4]
  408fa2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408fa6:	9400      	str	r4, [sp, #0]
  408fa8:	4f13      	ldr	r7, [pc, #76]	; (408ff8 <sd_protocol_send_acmd_51+0x80>)
  408faa:	47b8      	blx	r7
  408fac:	42a0      	cmp	r0, r4
  408fae:	d019      	beq.n	408fe4 <sd_protocol_send_acmd_51+0x6c>
	hsmci_read_data_register_reverse(HSMCI, scr, 2);
  408fb0:	2202      	movs	r2, #2
  408fb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  408fb6:	4b11      	ldr	r3, [pc, #68]	; (408ffc <sd_protocol_send_acmd_51+0x84>)
  408fb8:	a904      	add	r1, sp, #16
  408fba:	4798      	blx	r3
	uint8_t version = (scr[7] & 0b1111);
  408fbc:	f89d 3017 	ldrb.w	r3, [sp, #23]
	if (((scr[6] >> 2) & 0b1) == 0b1)
  408fc0:	f89d 2016 	ldrb.w	r2, [sp, #22]
  408fc4:	4620      	mov	r0, r4
	if (version > 0)
  408fc6:	f013 030f 	ands.w	r3, r3, #15
  408fca:	f3c2 0280 	ubfx	r2, r2, #2, #1
  408fce:	bf18      	it	ne
  408fd0:	2301      	movne	r3, #1
  408fd2:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
  408fd6:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
}
  408fda:	b007      	add	sp, #28
  408fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
  408fde:	2000      	movs	r0, #0
}
  408fe0:	b007      	add	sp, #28
  408fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		board_serial_print("[  FAIL ]\tCMD51 error\n");
  408fe4:	4806      	ldr	r0, [pc, #24]	; (409000 <sd_protocol_send_acmd_51+0x88>)
  408fe6:	4b07      	ldr	r3, [pc, #28]	; (409004 <sd_protocol_send_acmd_51+0x8c>)
  408fe8:	4798      	blx	r3
		return 0;
  408fea:	4628      	mov	r0, r5
  408fec:	e7f5      	b.n	408fda <sd_protocol_send_acmd_51+0x62>
  408fee:	bf00      	nop
  408ff0:	00402e31 	.word	0x00402e31
  408ff4:	00251073 	.word	0x00251073
  408ff8:	00402ecd 	.word	0x00402ecd
  408ffc:	00402d7d 	.word	0x00402d7d
  409000:	0040b7ac 	.word	0x0040b7ac
  409004:	0040052d 	.word	0x0040052d

00409008 <sd_protocol_send_cmd_6>:
{	
  409008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	card->bus_speed = 25000000;
  40900c:	4b38      	ldr	r3, [pc, #224]	; (4090f0 <sd_protocol_send_cmd_6+0xe8>)
{	
  40900e:	b094      	sub	sp, #80	; 0x50
	card->high_speed_support = 0;
  409010:	2500      	movs	r5, #0
	if (hsmci_send_addressed_data_transfer_command(	HSMCI, 6 | SD_PROTOCOL_RESPONSE_1 | HSMCI_CMDR_TRTYP_SINGLE | SD_PROTOCOL_ADDRESSED_DATA_TRANSFER_READ,
  409012:	f04f 0801 	mov.w	r8, #1
	card->bus_speed = 25000000;
  409016:	6443      	str	r3, [r0, #68]	; 0x44
  409018:	2240      	movs	r2, #64	; 0x40
	card->high_speed_support = 0;
  40901a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  40901e:	4629      	mov	r1, r5
  409020:	4b34      	ldr	r3, [pc, #208]	; (4090f4 <sd_protocol_send_cmd_6+0xec>)
{	
  409022:	4607      	mov	r7, r0
  409024:	a804      	add	r0, sp, #16
	if (hsmci_send_addressed_data_transfer_command(	HSMCI, 6 | SD_PROTOCOL_RESPONSE_1 | HSMCI_CMDR_TRTYP_SINGLE | SD_PROTOCOL_ADDRESSED_DATA_TRANSFER_READ,
  409026:	4c34      	ldr	r4, [pc, #208]	; (4090f8 <sd_protocol_send_cmd_6+0xf0>)
  409028:	4798      	blx	r3
  40902a:	9502      	str	r5, [sp, #8]
  40902c:	9501      	str	r5, [sp, #4]
  40902e:	2340      	movs	r3, #64	; 0x40
  409030:	f8cd 8000 	str.w	r8, [sp]
  409034:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  409038:	4930      	ldr	r1, [pc, #192]	; (4090fc <sd_protocol_send_cmd_6+0xf4>)
  40903a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40903e:	47a0      	blx	r4
  409040:	4540      	cmp	r0, r8
  409042:	d023      	beq.n	40908c <sd_protocol_send_cmd_6+0x84>
	hsmci_read_data_register_reverse(HSMCI, data_buffer, 16);
  409044:	2210      	movs	r2, #16
  409046:	a904      	add	r1, sp, #16
  409048:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40904c:	4b2c      	ldr	r3, [pc, #176]	; (409100 <sd_protocol_send_cmd_6+0xf8>)
  40904e:	4798      	blx	r3
	uint32_t resp = hsmci_read_48_bit_response_register(HSMCI);
  409050:	4b2c      	ldr	r3, [pc, #176]	; (409104 <sd_protocol_send_cmd_6+0xfc>)
  409052:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409056:	4798      	blx	r3
	uint8_t function_group_1_function_status = (data_buffer[47] & 0b1111);	
  409058:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
	uint16_t function_group_1_busy_status = (data_buffer[35] << 8) | data_buffer[34];
  40905c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
	uint32_t resp = hsmci_read_48_bit_response_register(HSMCI);
  409060:	4606      	mov	r6, r0
	uint16_t function_group_1_busy_status = (data_buffer[35] << 8) | data_buffer[34];
  409062:	f89d 4032 	ldrb.w	r4, [sp, #50]	; 0x32
	if (function_group_1_function_status == 0xf)
  409066:	f003 030f 	and.w	r3, r3, #15
	uint16_t function_group_1_busy_status = (data_buffer[35] << 8) | data_buffer[34];
  40906a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	if (function_group_1_function_status == 0xf)
  40906e:	2b0f      	cmp	r3, #15
	uint16_t function_group_1_busy_status = (data_buffer[35] << 8) | data_buffer[34];
  409070:	b224      	sxth	r4, r4
	if (function_group_1_function_status == 0xf)
  409072:	d037      	beq.n	4090e4 <sd_protocol_send_cmd_6+0xdc>
	if (function_group_1_busy_status)
  409074:	b974      	cbnz	r4, 409094 <sd_protocol_send_cmd_6+0x8c>
	if ((resp & SD_PROTOCOL_RESPONSE_1_ERROR_MASK))
  409076:	4b24      	ldr	r3, [pc, #144]	; (409108 <sd_protocol_send_cmd_6+0x100>)
  409078:	4003      	ands	r3, r0
  40907a:	b993      	cbnz	r3, 4090a2 <sd_protocol_send_cmd_6+0x9a>
	card->bus_speed = 50000000;
  40907c:	4b23      	ldr	r3, [pc, #140]	; (40910c <sd_protocol_send_cmd_6+0x104>)
	return 1;
  40907e:	4640      	mov	r0, r8
	card->high_speed_support = 1;
  409080:	f887 8042 	strb.w	r8, [r7, #66]	; 0x42
	card->bus_speed = 50000000;
  409084:	647b      	str	r3, [r7, #68]	; 0x44
}
  409086:	b014      	add	sp, #80	; 0x50
  409088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
  40908c:	4628      	mov	r0, r5
}
  40908e:	b014      	add	sp, #80	; 0x50
  409090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		board_serial_print("[  FAIL ]\tCard is busy during CMD6\n");
  409094:	481e      	ldr	r0, [pc, #120]	; (409110 <sd_protocol_send_cmd_6+0x108>)
  409096:	4b1f      	ldr	r3, [pc, #124]	; (409114 <sd_protocol_send_cmd_6+0x10c>)
  409098:	4798      	blx	r3
		return 0;
  40909a:	4628      	mov	r0, r5
}
  40909c:	b014      	add	sp, #80	; 0x50
  40909e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	board_serial_print(description);
  4090a2:	481d      	ldr	r0, [pc, #116]	; (409118 <sd_protocol_send_cmd_6+0x110>)
	board_serial_print(" : 0b");
  4090a4:	251f      	movs	r5, #31
	board_serial_print(description);
  4090a6:	4f1b      	ldr	r7, [pc, #108]	; (409114 <sd_protocol_send_cmd_6+0x10c>)
			board_serial_print("1");
  4090a8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 409128 <sd_protocol_send_cmd_6+0x120>
	board_serial_print(description);
  4090ac:	47b8      	blx	r7
			board_serial_print("0");
  4090ae:	f8df 907c 	ldr.w	r9, [pc, #124]	; 40912c <sd_protocol_send_cmd_6+0x124>
			board_serial_print(" ");
  4090b2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 409130 <sd_protocol_send_cmd_6+0x128>
	board_serial_print(" : 0b");
  4090b6:	4819      	ldr	r0, [pc, #100]	; (40911c <sd_protocol_send_cmd_6+0x114>)
  4090b8:	47b8      	blx	r7
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  4090ba:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < number_of_bits; i++)
  4090bc:	3401      	adds	r4, #1
			board_serial_print("0");
  4090be:	4648      	mov	r0, r9
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  4090c0:	40ab      	lsls	r3, r5
	for (uint8_t i = 0; i < number_of_bits; i++)
  4090c2:	b2e4      	uxtb	r4, r4
  4090c4:	3d01      	subs	r5, #1
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  4090c6:	4233      	tst	r3, r6
			board_serial_print("1");
  4090c8:	bf18      	it	ne
  4090ca:	4650      	movne	r0, sl
  4090cc:	47b8      	blx	r7
	for (uint8_t i = 0; i < number_of_bits; i++)
  4090ce:	2c20      	cmp	r4, #32
			board_serial_print(" ");
  4090d0:	4640      	mov	r0, r8
	for (uint8_t i = 0; i < number_of_bits; i++)
  4090d2:	d003      	beq.n	4090dc <sd_protocol_send_cmd_6+0xd4>
		if ((i % 8 == 0) && (i != 0))
  4090d4:	0763      	lsls	r3, r4, #29
  4090d6:	d1f0      	bne.n	4090ba <sd_protocol_send_cmd_6+0xb2>
			board_serial_print(" ");
  4090d8:	47b8      	blx	r7
  4090da:	e7ee      	b.n	4090ba <sd_protocol_send_cmd_6+0xb2>
	board_serial_print("\n");
  4090dc:	4810      	ldr	r0, [pc, #64]	; (409120 <sd_protocol_send_cmd_6+0x118>)
  4090de:	47b8      	blx	r7
		return 0;
  4090e0:	2000      	movs	r0, #0
  4090e2:	e7d0      	b.n	409086 <sd_protocol_send_cmd_6+0x7e>
		board_serial_print("[WARNING]\tHigh speed error\n");
  4090e4:	480f      	ldr	r0, [pc, #60]	; (409124 <sd_protocol_send_cmd_6+0x11c>)
  4090e6:	4b0b      	ldr	r3, [pc, #44]	; (409114 <sd_protocol_send_cmd_6+0x10c>)
  4090e8:	4798      	blx	r3
		return 1;
  4090ea:	4640      	mov	r0, r8
  4090ec:	e7cb      	b.n	409086 <sd_protocol_send_cmd_6+0x7e>
  4090ee:	bf00      	nop
  4090f0:	017d7840 	.word	0x017d7840
  4090f4:	0040a555 	.word	0x0040a555
  4090f8:	00402ecd 	.word	0x00402ecd
  4090fc:	00051046 	.word	0x00051046
  409100:	00402d7d 	.word	0x00402d7d
  409104:	00402dd9 	.word	0x00402dd9
  409108:	fff80000 	.word	0xfff80000
  40910c:	02faf080 	.word	0x02faf080
  409110:	0040b7e0 	.word	0x0040b7e0
  409114:	0040052d 	.word	0x0040052d
  409118:	0040b804 	.word	0x0040b804
  40911c:	0040b79c 	.word	0x0040b79c
  409120:	0040b4cc 	.word	0x0040b4cc
  409124:	0040b7c4 	.word	0x0040b7c4
  409128:	0040b7a8 	.word	0x0040b7a8
  40912c:	0040b7a4 	.word	0x0040b7a4
  409130:	0040b810 	.word	0x0040b810

00409134 <sd_protocol_csd_decode_version_2_0>:
{
  409134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	csd.c_size							= (((uint32_t)raw_data[8] & 0x3F) << 16) | ((uint32_t)raw_data[7] << 8) | raw_data[6];
  409138:	7a0a      	ldrb	r2, [r1, #8]
  40913a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
  40913e:	0412      	lsls	r2, r2, #16
	csd.erase_block_enable				= ((raw_data[5] >> 6) & 0b1);
  409140:	f891 e005 	ldrb.w	lr, [r1, #5]
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  409144:	7a8f      	ldrb	r7, [r1, #10]
	csd.c_size							= (((uint32_t)raw_data[8] & 0x3F) << 16) | ((uint32_t)raw_data[7] << 8) | raw_data[6];
  409146:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
	csd.write_protection_group_enable	= ((raw_data[3] >> 7) & 0b1);
  40914a:	78cc      	ldrb	r4, [r1, #3]
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  40914c:	ea4f 064e 	mov.w	r6, lr, lsl #1
	csd.erase_block_enable				= ((raw_data[5] >> 6) & 0b1);
  409150:	f3ce 1e80 	ubfx	lr, lr, #6, #1
	csd.c_size							= (((uint32_t)raw_data[8] & 0x3F) << 16) | ((uint32_t)raw_data[7] << 8) | raw_data[6];
  409154:	ea42 020c 	orr.w	r2, r2, ip
	csd.csd_structure					= ((raw_data[15] >> 6) & 0b11);
  409158:	f891 800f 	ldrb.w	r8, [r1, #15]
	return csd;
  40915c:	f880 e010 	strb.w	lr, [r0, #16]
	csd.write_protection_group_enable	= ((raw_data[3] >> 7) & 0b1);
  409160:	ea4f 1cd4 	mov.w	ip, r4, lsr #7
	return csd;
  409164:	60c2      	str	r2, [r0, #12]
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  409166:	093a      	lsrs	r2, r7, #4
	csd.read_block_length				= (raw_data[10] & 0b1111);
  409168:	f007 070f 	and.w	r7, r7, #15
	csd.write_speed_factor				= ((raw_data[3] >> 2) & 0b111);
  40916c:	f3c4 0e82 	ubfx	lr, r4, #2, #3
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  409170:	00a5      	lsls	r5, r4, #2
	csd.taac							= raw_data[14];
  409172:	7b8c      	ldrb	r4, [r1, #14]
	return csd;
  409174:	7187      	strb	r7, [r0, #6]
	csd.csd_structure					= ((raw_data[15] >> 6) & 0b11);
  409176:	ea4f 1898 	mov.w	r8, r8, lsr #6
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  40917a:	7acf      	ldrb	r7, [r1, #11]
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  40917c:	f006 067e 	and.w	r6, r6, #126	; 0x7e
	return csd;
  409180:	7044      	strb	r4, [r0, #1]
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  409182:	f005 050c 	and.w	r5, r5, #12
	csd.nsac							= raw_data[13];
  409186:	7b4c      	ldrb	r4, [r1, #13]
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  409188:	ea42 1707 	orr.w	r7, r2, r7, lsl #4
	csd.read_block_partial				= ((raw_data[9] >> 7) & 0b1);
  40918c:	7a4a      	ldrb	r2, [r1, #9]
	return csd;
  40918e:	f880 8000 	strb.w	r8, [r0]
  409192:	7084      	strb	r4, [r0, #2]
	csd.read_block_partial				= ((raw_data[9] >> 7) & 0b1);
  409194:	09d4      	lsrs	r4, r2, #7
	csd.transfer_speed					= raw_data[12];
  409196:	f891 800c 	ldrb.w	r8, [r1, #12]
	return csd;
  40919a:	8087      	strh	r7, [r0, #4]
	csd.read_block_misaligned			= ((raw_data[9] >> 5) & 0b1);
  40919c:	f3c2 1740 	ubfx	r7, r2, #5, #1
	return csd;
  4091a0:	f880 8003 	strb.w	r8, [r0, #3]
	csd.write_block_misaligned			= ((raw_data[9] >> 6) & 0b1);
  4091a4:	f3c2 1880 	ubfx	r8, r2, #6, #1
	return csd;
  4091a8:	71c4      	strb	r4, [r0, #7]
	csd.dsr_implemented					= ((raw_data[9] >> 4) & 0b1);
  4091aa:	f3c2 1400 	ubfx	r4, r2, #4, #1
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  4091ae:	790a      	ldrb	r2, [r1, #4]
	return csd;
  4091b0:	f880 8008 	strb.w	r8, [r0, #8]
  4091b4:	7247      	strb	r7, [r0, #9]
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  4091b6:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  4091ba:	788f      	ldrb	r7, [r1, #2]
	csd.write_protection_group_size		= (raw_data[4] & 0b1111111);
  4091bc:	f002 087f 	and.w	r8, r2, #127	; 0x7f
	csd.file_format_group				= ((raw_data[1] >> 7) & 0b1);
  4091c0:	784a      	ldrb	r2, [r1, #1]
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  4091c2:	ea45 1597 	orr.w	r5, r5, r7, lsr #6
	return csd;
  4091c6:	7284      	strb	r4, [r0, #10]
	csd.file_format_group				= ((raw_data[1] >> 7) & 0b1);
  4091c8:	ea4f 19d2 	mov.w	r9, r2, lsr #7
	return csd;
  4091cc:	7446      	strb	r6, [r0, #17]
	csd.permanent_write_protection		= ((raw_data[1] >> 5) & 0b1);
  4091ce:	f3c2 1440 	ubfx	r4, r2, #5, #1
	csd.copy_flag						= ((raw_data[1] >> 6) & 0b1);
  4091d2:	f3c2 1680 	ubfx	r6, r2, #6, #1
	csd.temporarily_write_protection	= ((raw_data[1] >> 4) & 0b1);
  4091d6:	f3c2 1100 	ubfx	r1, r2, #4, #1
	csd.write_block_partial				= ((raw_data[2] >> 5) & 0b1);
  4091da:	f3c7 1740 	ubfx	r7, r7, #5, #1
	csd.file_format						= (raw_data[1] & 0b11);
  4091de:	f002 0203 	and.w	r2, r2, #3
	return csd;
  4091e2:	f880 8012 	strb.w	r8, [r0, #18]
  4091e6:	f880 c013 	strb.w	ip, [r0, #19]
  4091ea:	f880 e014 	strb.w	lr, [r0, #20]
  4091ee:	7545      	strb	r5, [r0, #21]
  4091f0:	7587      	strb	r7, [r0, #22]
  4091f2:	f880 9017 	strb.w	r9, [r0, #23]
  4091f6:	7606      	strb	r6, [r0, #24]
  4091f8:	7644      	strb	r4, [r0, #25]
  4091fa:	7681      	strb	r1, [r0, #26]
  4091fc:	76c2      	strb	r2, [r0, #27]
}
  4091fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409202:	bf00      	nop

00409204 <sd_protocol_send_cmd_9>:
{
  409204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409208:	4604      	mov	r4, r0
  40920a:	b08d      	sub	sp, #52	; 0x34
	if (hsmci_send_command(HSMCI, 9 | SD_PROTOCOL_RESPONSE_2, (uint32_t)(card->relative_card_address << 16), CHECK_CRC) == HSMCI_ERROR)
  40920c:	2300      	movs	r3, #0
  40920e:	f241 0189 	movw	r1, #4233	; 0x1089
  409212:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
  409214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409218:	4d6e      	ldr	r5, [pc, #440]	; (4093d4 <sd_protocol_send_cmd_9+0x1d0>)
  40921a:	0412      	lsls	r2, r2, #16
  40921c:	47a8      	blx	r5
  40921e:	2801      	cmp	r0, #1
  409220:	f000 80b9 	beq.w	409396 <sd_protocol_send_cmd_9+0x192>
	hsmci_read_136_bit_response_register_extended(HSMCI, csd_raw);
  409224:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409228:	4b6b      	ldr	r3, [pc, #428]	; (4093d8 <sd_protocol_send_cmd_9+0x1d4>)
  40922a:	a908      	add	r1, sp, #32
  40922c:	4798      	blx	r3
	if (card->card_type == SDHC)
  40922e:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
  409232:	2d01      	cmp	r5, #1
  409234:	f000 80b7 	beq.w	4093a6 <sd_protocol_send_cmd_9+0x1a2>
	else if (card->card_type == SDSC)
  409238:	b125      	cbz	r5, 409244 <sd_protocol_send_cmd_9+0x40>
	return 1;
  40923a:	2501      	movs	r5, #1
}
  40923c:	4628      	mov	r0, r5
  40923e:	b00d      	add	sp, #52	; 0x34
  409240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	csd.read_block_partial				= ((raw_data[9] >> 7) & 0b1);
  409244:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
	return 1;
  409248:	2501      	movs	r5, #1
	csd.vdd_write_current_min			= ((raw_data[6] >> 5) & 0b111);
  40924a:	f89d 7026 	ldrb.w	r7, [sp, #38]	; 0x26
	csd.c_size							= ((raw_data[7] >> 6) & 0b11) | (raw_data[8] << 2) | ((raw_data[9] & 0b11) << 10);
  40924e:	f89d c027 	ldrb.w	ip, [sp, #39]	; 0x27
  409252:	029e      	lsls	r6, r3, #10
  409254:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	csd.c_size_multipliation			= (((raw_data[6] & 0b11) << 1) | ((raw_data[5] >> 7) & 0b1));
  409258:	fa07 f005 	lsl.w	r0, r7, r5
	csd.c_size							= ((raw_data[7] >> 6) & 0b11) | (raw_data[8] << 2) | ((raw_data[9] & 0b11) << 10);
  40925c:	ea4f 129c 	mov.w	r2, ip, lsr #6
	csd.c_size_multipliation			= (((raw_data[6] & 0b11) << 1) | ((raw_data[5] >> 7) & 0b1));
  409260:	f89d 9025 	ldrb.w	r9, [sp, #37]	; 0x25
	csd.c_size							= ((raw_data[7] >> 6) & 0b11) | (raw_data[8] << 2) | ((raw_data[9] & 0b11) << 10);
  409264:	f406 6640 	and.w	r6, r6, #3072	; 0xc00
	csd.c_size_multipliation			= (((raw_data[6] & 0b11) << 1) | ((raw_data[5] >> 7) & 0b1));
  409268:	f000 0006 	and.w	r0, r0, #6
	csd.c_size							= ((raw_data[7] >> 6) & 0b11) | (raw_data[8] << 2) | ((raw_data[9] & 0b11) << 10);
  40926c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  409270:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
  409274:	f89d 802b 	ldrb.w	r8, [sp, #43]	; 0x2b
	csd.c_size_multipliation			= (((raw_data[6] & 0b11) << 1) | ((raw_data[5] >> 7) & 0b1));
  409278:	ea40 10d9 	orr.w	r0, r0, r9, lsr #7
	csd.read_block_length				= (raw_data[10] & 0b1111);
  40927c:	f001 0a0f 	and.w	sl, r1, #15
	csd.c_size							= ((raw_data[7] >> 6) & 0b11) | (raw_data[8] << 2) | ((raw_data[9] & 0b11) << 10);
  409280:	4332      	orrs	r2, r6
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  409282:	0909      	lsrs	r1, r1, #4
								(1 << (card->card_specific_data_1_0.c_size_multipliation + 2)) *
  409284:	f100 0e02 	add.w	lr, r0, #2
		card->card_size =	((card->card_specific_data_1_0.c_size + 1) *
  409288:	eb02 0b05 	add.w	fp, r2, r5
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  40928c:	84a2      	strh	r2, [r4, #36]	; 0x24
	csd.ccc								= (((raw_data[10] >> 4) & 0b1111) | (raw_data[11] << 4));
  40928e:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  409292:	fa09 f805 	lsl.w	r8, r9, r5
		card->card_size =	((card->card_specific_data_1_0.c_size + 1) *
  409296:	fa0b fe0e 	lsl.w	lr, fp, lr
	csd.erase_block_enable				= ((raw_data[5] >> 6) & 0b1);
  40929a:	f3c9 1980 	ubfx	r9, r9, #6, #1
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  40929e:	83a1      	strh	r1, [r4, #28]
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  4092a0:	f008 087e 	and.w	r8, r8, #126	; 0x7e
  4092a4:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
								(1 << (card->card_specific_data_1_0.c_size_multipliation + 2)) *
  4092a8:	fa0e fb0a 	lsl.w	fp, lr, sl
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092ac:	f884 902b 	strb.w	r9, [r4, #43]	; 0x2b
	csd.sector_size						= (((raw_data[4] >> 7) & 0b1) | ((raw_data[5] & 0b111111) << 1));
  4092b0:	ea48 18d1 	orr.w	r8, r8, r1, lsr #7
	csd.write_protection_group_size		= (raw_data[4] & 0b1111111);
  4092b4:	f001 097f 	and.w	r9, r1, #127	; 0x7f
								(1 << card->card_specific_data_1_0.read_block_length)) / 1000;
  4092b8:	4a48      	ldr	r2, [pc, #288]	; (4093dc <sd_protocol_send_cmd_9+0x1d8>)
	csd.csd_structure					= ((raw_data[15] >> 6) & 0b11);
  4092ba:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092be:	f884 a01e 	strb.w	sl, [r4, #30]
	csd.csd_structure					= ((raw_data[15] >> 6) & 0b11);
  4092c2:	0989      	lsrs	r1, r1, #6
								(1 << card->card_specific_data_1_0.read_block_length)) / 1000;
  4092c4:	fb82 a20b 	smull	sl, r2, r2, fp
	csd.read_block_partial				= ((raw_data[9] >> 7) & 0b1);
  4092c8:	ea4f 1ad3 	mov.w	sl, r3, lsr #7
	csd.write_protection_group_enable	= ((raw_data[3] >> 7) & 0b1);
  4092cc:	f89d 6023 	ldrb.w	r6, [sp, #35]	; 0x23
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092d0:	7621      	strb	r1, [r4, #24]
	csd.vdd_write_current_max			= ((raw_data[6] >> 2) & 0b111);
  4092d2:	f3c7 0182 	ubfx	r1, r7, #2, #3
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092d6:	f884 a01f 	strb.w	sl, [r4, #31]
	csd.write_block_misaligned			= ((raw_data[9] >> 6) & 0b1);
  4092da:	f3c3 1a80 	ubfx	sl, r3, #6, #1
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092de:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  4092e2:	00b0      	lsls	r0, r6, #2
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092e4:	f884 a020 	strb.w	sl, [r4, #32]
	csd.read_block_misaligned			= ((raw_data[9] >> 5) & 0b1);
  4092e8:	f3c3 1a40 	ubfx	sl, r3, #5, #1
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092ec:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
	csd.dsr_implemented					= ((raw_data[9] >> 4) & 0b1);
  4092f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
	csd.taac							= raw_data[14];
  4092f4:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  4092f8:	f000 000c 	and.w	r0, r0, #12
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  4092fc:	f884 a021 	strb.w	sl, [r4, #33]	; 0x21
	csd.vdd_read_current_min			= ((raw_data[7] >> 3) & 0b111);
  409300:	f3cc 0ac2 	ubfx	sl, ip, #3, #3
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409304:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	csd.vdd_read_current_max			= (raw_data[7] & 0b111);
  409308:	f00c 0c07 	and.w	ip, ip, #7
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  40930c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
								(1 << card->card_specific_data_1_0.read_block_length)) / 1000;
  409310:	ea4f 7beb 	mov.w	fp, fp, asr #31
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409314:	7661      	strb	r1, [r4, #25]
	csd.nsac							= raw_data[13];
  409316:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
	csd.write_block_length				= (((raw_data[2] >> 6) & 0b11) | ((raw_data[3] & 0b11) << 2));
  40931a:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  40931e:	f884 a026 	strb.w	sl, [r4, #38]	; 0x26
	csd.write_block_partial				= ((raw_data[2] >> 5) & 0b1);
  409322:	f3c3 1a40 	ubfx	sl, r3, #5, #1
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409326:	f884 c027 	strb.w	ip, [r4, #39]	; 0x27
	csd.vdd_write_current_min			= ((raw_data[6] >> 5) & 0b111);
  40932a:	ea4f 1c57 	mov.w	ip, r7, lsr #5
	csd.file_format_group				= ((raw_data[1] >> 7) & 0b1);
  40932e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
	csd.write_protection_group_enable	= ((raw_data[3] >> 7) & 0b1);
  409332:	09f7      	lsrs	r7, r6, #7
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409334:	76a1      	strb	r1, [r4, #26]
								(1 << card->card_specific_data_1_0.read_block_length)) / 1000;
  409336:	ebcb 12a2 	rsb	r2, fp, r2, asr #6
	csd.transfer_speed					= raw_data[12];
  40933a:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
	csd.write_speed_factor				= ((raw_data[3] >> 2) & 0b111);
  40933e:	f3c6 0682 	ubfx	r6, r6, #2, #3
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409342:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	csd.file_format_group				= ((raw_data[1] >> 7) & 0b1);
  409346:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  40934a:	76e1      	strb	r1, [r4, #27]
	csd.temporarily_write_protection	= ((raw_data[1] >> 4) & 0b1);
  40934c:	f3c3 1100 	ubfx	r1, r3, #4, #1
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409350:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
	csd.copy_flag						= ((raw_data[1] >> 6) & 0b1);
  409354:	f3c3 1880 	ubfx	r8, r3, #6, #1
		card->number_of_blocks = (card->card_specific_data_1_0.c_size + 1) *
  409358:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
	csd.permanent_write_protection		= ((raw_data[1] >> 5) & 0b1);
  40935c:	f3c3 1e40 	ubfx	lr, r3, #5, #1
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409360:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	csd.file_format						= (raw_data[1] & 0b11);
  409364:	f003 0303 	and.w	r3, r3, #3
}
  409368:	4628      	mov	r0, r5
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  40936a:	f884 902d 	strb.w	r9, [r4, #45]	; 0x2d
		card->card_size =	((card->card_specific_data_1_0.c_size + 1) *
  40936e:	63e2      	str	r2, [r4, #60]	; 0x3c
		card->card_specific_data_1_0 = sd_protocol_csd_decode_version_1_0(csd_raw);
  409370:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
  409374:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
  409378:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  40937c:	f884 c032 	strb.w	ip, [r4, #50]	; 0x32
  409380:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  409384:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
  409388:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  40938c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
  409390:	b00d      	add	sp, #52	; 0x34
  409392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
  409396:	2500      	movs	r5, #0
		board_serial_print("[  FAIL ]\tCMD9\n");
  409398:	4811      	ldr	r0, [pc, #68]	; (4093e0 <sd_protocol_send_cmd_9+0x1dc>)
  40939a:	4b12      	ldr	r3, [pc, #72]	; (4093e4 <sd_protocol_send_cmd_9+0x1e0>)
  40939c:	4798      	blx	r3
}
  40939e:	4628      	mov	r0, r5
  4093a0:	b00d      	add	sp, #52	; 0x34
  4093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		card->card_specific_data_2_0 = sd_protocol_csd_decode_version_2_0(csd_raw);
  4093a6:	466e      	mov	r6, sp
  4093a8:	a908      	add	r1, sp, #32
  4093aa:	4a0f      	ldr	r2, [pc, #60]	; (4093e8 <sd_protocol_send_cmd_9+0x1e4>)
  4093ac:	4668      	mov	r0, sp
  4093ae:	4790      	blx	r2
  4093b0:	f104 0718 	add.w	r7, r4, #24
		card->number_of_blocks = card->card_specific_data_2_0.c_size * 1000;
  4093b4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		card->card_specific_data_2_0 = sd_protocol_csd_decode_version_2_0(csd_raw);
  4093b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4093ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  4093bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  4093c0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		card->card_size = (uint32_t)(card->card_specific_data_2_0.c_size*512);
  4093c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4093c6:	025a      	lsls	r2, r3, #9
		card->number_of_blocks = card->card_specific_data_2_0.c_size * 1000;
  4093c8:	fb0e f303 	mul.w	r3, lr, r3
		card->card_size = (uint32_t)(card->card_specific_data_2_0.c_size*512);
  4093cc:	63e2      	str	r2, [r4, #60]	; 0x3c
		card->number_of_blocks = card->card_specific_data_2_0.c_size * 1000;
  4093ce:	64a3      	str	r3, [r4, #72]	; 0x48
  4093d0:	e734      	b.n	40923c <sd_protocol_send_cmd_9+0x38>
  4093d2:	bf00      	nop
  4093d4:	00402e31 	.word	0x00402e31
  4093d8:	00402ddd 	.word	0x00402ddd
  4093dc:	10624dd3 	.word	0x10624dd3
  4093e0:	0040b834 	.word	0x0040b834
  4093e4:	0040052d 	.word	0x0040052d
  4093e8:	00409135 	.word	0x00409135

004093ec <sd_protocol_initialize>:

//--------------------------------------------------------------------------------------------------//


uint8_t sd_protocol_initialize(sd_card* card)
{
  4093ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HSMCI->HSMCI_CR = (1 << HSMCI_CR_SWRST_Pos);
	
	for (volatile uint32_t i = 0; i < 5000000; i++)
  4093f0:	2300      	movs	r3, #0
{
  4093f2:	b086      	sub	sp, #24
	HSMCI->HSMCI_CR = (1 << HSMCI_CR_SWRST_Pos);
  4093f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4093f8:	2480      	movs	r4, #128	; 0x80
	for (volatile uint32_t i = 0; i < 5000000; i++)
  4093fa:	4a80      	ldr	r2, [pc, #512]	; (4095fc <sd_protocol_initialize+0x210>)
{
  4093fc:	4605      	mov	r5, r0
	HSMCI->HSMCI_CR = (1 << HSMCI_CR_SWRST_Pos);
  4093fe:	600c      	str	r4, [r1, #0]
	for (volatile uint32_t i = 0; i < 5000000; i++)
  409400:	9305      	str	r3, [sp, #20]
  409402:	9b05      	ldr	r3, [sp, #20]
  409404:	4293      	cmp	r3, r2
  409406:	d806      	bhi.n	409416 <sd_protocol_initialize+0x2a>
	{
		asm volatile ("nop");	
  409408:	bf00      	nop
	for (volatile uint32_t i = 0; i < 5000000; i++)
  40940a:	9b05      	ldr	r3, [sp, #20]
  40940c:	3301      	adds	r3, #1
  40940e:	9305      	str	r3, [sp, #20]
  409410:	9b05      	ldr	r3, [sp, #20]
  409412:	4293      	cmp	r3, r2
  409414:	d9f8      	bls.n	409408 <sd_protocol_initialize+0x1c>
	}
		
	// Since the local variable does not get initialized we have
	// to manually set the relative_card_address to zero.
	// Otherwise we will get an error on CMD55.
	card->relative_card_address = 0;
  409416:	2400      	movs	r4, #0
	card->slot = HSMCI_SLOT_A;
	card->card_initialized = 0;
	
	// disable write protection before writing to the HSMCI registers
	hsmci_write_protection_disable(HSMCI);
  409418:	4b79      	ldr	r3, [pc, #484]	; (409600 <sd_protocol_initialize+0x214>)
  40941a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	
	// write control register
	hsmci_set_bus_width(HSMCI, HSMCI_SD_BUS_WIDTH_1_BIT, card->slot);
  40941e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 409668 <sd_protocol_initialize+0x27c>
	card->relative_card_address = 0;
  409422:	876c      	strh	r4, [r5, #58]	; 0x3a
	card->slot = HSMCI_SLOT_A;
  409424:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	card->card_initialized = 0;
  409428:	702c      	strb	r4, [r5, #0]
	hsmci_write_protection_disable(HSMCI);
  40942a:	4798      	blx	r3
	hsmci_set_bus_width(HSMCI, HSMCI_SD_BUS_WIDTH_1_BIT, card->slot);
  40942c:	4621      	mov	r1, r4
  40942e:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
  409432:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409436:	47c0      	blx	r8
	
	// set the data and completion timeout to 2.000.000 cycles
	hsmci_set_data_timeout(HSMCI, HSMCI_TIMEOUT_MULTIPLIER_1048576, 3);
  409438:	2203      	movs	r2, #3
  40943a:	2107      	movs	r1, #7
  40943c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409440:	4b70      	ldr	r3, [pc, #448]	; (409604 <sd_protocol_initialize+0x218>)
  409442:	4798      	blx	r3
	hsmci_set_completion_timeout(HSMCI, HSMCI_TIMEOUT_MULTIPLIER_1048576, 3);
  409444:	2203      	movs	r2, #3
  409446:	2107      	movs	r1, #7
  409448:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40944c:	4b6e      	ldr	r3, [pc, #440]	; (409608 <sd_protocol_initialize+0x21c>)
  40944e:	4798      	blx	r3
	
	// wire configuration register
	hsmci_write_configuration_register(HSMCI, 0, 0, 1, 1);
  409450:	2301      	movs	r3, #1
  409452:	4622      	mov	r2, r4
  409454:	4621      	mov	r1, r4
  409456:	9300      	str	r3, [sp, #0]
  409458:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40945c:	4e6b      	ldr	r6, [pc, #428]	; (40960c <sd_protocol_initialize+0x220>)
  40945e:	47b0      	blx	r6
	
	//  write mode register
	hsmci_write_mode_register(HSMCI, 0, HSMCI_MR_PADDING_00, 0, 0, 0, 0xff, 0xff);
  409460:	20ff      	movs	r0, #255	; 0xff
  409462:	4623      	mov	r3, r4
  409464:	4622      	mov	r2, r4
  409466:	4621      	mov	r1, r4
  409468:	9003      	str	r0, [sp, #12]
  40946a:	9002      	str	r0, [sp, #8]
  40946c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409470:	4e67      	ldr	r6, [pc, #412]	; (409610 <sd_protocol_initialize+0x224>)
  409472:	9401      	str	r4, [sp, #4]
  409474:	9400      	str	r4, [sp, #0]
  409476:	47b0      	blx	r6
	
	// select bus speed
	hsmci_set_bus_speed(HSMCI, 400000, 150000000);
  409478:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 40966c <sd_protocol_initialize+0x280>
  40947c:	4a65      	ldr	r2, [pc, #404]	; (409614 <sd_protocol_initialize+0x228>)
  40947e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409482:	4965      	ldr	r1, [pc, #404]	; (409618 <sd_protocol_initialize+0x22c>)
  409484:	47c8      	blx	r9
	
	// enable the interface
	hsmci_enable(HSMCI);
  409486:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40948a:	4b64      	ldr	r3, [pc, #400]	; (40961c <sd_protocol_initialize+0x230>)
  40948c:	4798      	blx	r3
	if (hsmci_send_command(HSMCI, HSMCI_CMDR_RSPTYP_NORESP | HSMCI_CMDR_SPCMD_INIT | HSMCI_CMDR_OPDCMD_OPENDRAIN, 0, CHECK_CRC) == HSMCI_OK)
  40948e:	4e64      	ldr	r6, [pc, #400]	; (409620 <sd_protocol_initialize+0x234>)
  409490:	4623      	mov	r3, r4
  409492:	4622      	mov	r2, r4
  409494:	f44f 6110 	mov.w	r1, #2304	; 0x900
  409498:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40949c:	47b0      	blx	r6
  40949e:	4607      	mov	r7, r0
  4094a0:	bb28      	cbnz	r0, 4094ee <sd_protocol_initialize+0x102>
	if (hsmci_send_command(HSMCI, HSMCI_CMDR_OPDCMD_OPENDRAIN, 0, CHECK_CRC) == HSMCI_OK)
  4094a2:	4603      	mov	r3, r0
  4094a4:	4602      	mov	r2, r0
  4094a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4094aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4094ae:	47b0      	blx	r6
  4094b0:	4604      	mov	r4, r0
  4094b2:	bb18      	cbnz	r0, 4094fc <sd_protocol_initialize+0x110>
	if (hsmci_send_command(HSMCI, 8 | SD_PROTOCOL_RESPONSE_7 | HSMCI_CMDR_OPDCMD_OPENDRAIN, SD_PROTOCOL_VOLTAGE_ARGUMENT, CHECK_CRC) == HSMCI_ERROR)
  4094b4:	4603      	mov	r3, r0
  4094b6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
  4094ba:	f641 0148 	movw	r1, #6216	; 0x1848
  4094be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4094c2:	47b0      	blx	r6
  4094c4:	2801      	cmp	r0, #1
  4094c6:	d020      	beq.n	40950a <sd_protocol_initialize+0x11e>
	uint32_t tmp = hsmci_read_48_bit_response_register(HSMCI);
  4094c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4094cc:	4f55      	ldr	r7, [pc, #340]	; (409624 <sd_protocol_initialize+0x238>)
  4094ce:	47b8      	blx	r7
	if ((tmp & SD_PROTOCOL_VOLTAGE_ARGUMENT) == SD_PROTOCOL_VOLTAGE_ARGUMENT)
  4094d0:	f400 73d5 	and.w	r3, r0, #426	; 0x1aa
	uint32_t tmp = hsmci_read_48_bit_response_register(HSMCI);
  4094d4:	4682      	mov	sl, r0
	if ((tmp & SD_PROTOCOL_VOLTAGE_ARGUMENT) == SD_PROTOCOL_VOLTAGE_ARGUMENT)
  4094d6:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  4094da:	d01b      	beq.n	409514 <sd_protocol_initialize+0x128>
		board_serial_print("[  FAIL ]\tCMD8 with ");
  4094dc:	4852      	ldr	r0, [pc, #328]	; (409628 <sd_protocol_initialize+0x23c>)
  4094de:	4b53      	ldr	r3, [pc, #332]	; (40962c <sd_protocol_initialize+0x240>)
  4094e0:	4798      	blx	r3
		board_serial_print_register("response: ", tmp);
  4094e2:	4853      	ldr	r0, [pc, #332]	; (409630 <sd_protocol_initialize+0x244>)
  4094e4:	4651      	mov	r1, sl
  4094e6:	4b53      	ldr	r3, [pc, #332]	; (409634 <sd_protocol_initialize+0x248>)
  4094e8:	4798      	blx	r3
	}
	
	// send command 8 to verify operating conditions
	if (sd_protocol_send_cmd_8() == 0)
	{
		return 0;
  4094ea:	4620      	mov	r0, r4
  4094ec:	e003      	b.n	4094f6 <sd_protocol_initialize+0x10a>
		board_serial_print("[  FAIL ]\tBoot trigger failed\n");
  4094ee:	4852      	ldr	r0, [pc, #328]	; (409638 <sd_protocol_initialize+0x24c>)
  4094f0:	4b4e      	ldr	r3, [pc, #312]	; (40962c <sd_protocol_initialize+0x240>)
  4094f2:	4798      	blx	r3
		return 0;
  4094f4:	4620      	mov	r0, r4
	hsmci_set_bus_speed(HSMCI, card->bus_speed, 150000000);
	
	card->card_initialized = 1;
	
	return 1;
}
  4094f6:	b006      	add	sp, #24
  4094f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		board_serial_print("[  FAIL ]\tSending go to IDLE command CMD0\n");
  4094fc:	484f      	ldr	r0, [pc, #316]	; (40963c <sd_protocol_initialize+0x250>)
  4094fe:	4b4b      	ldr	r3, [pc, #300]	; (40962c <sd_protocol_initialize+0x240>)
  409500:	4798      	blx	r3
		return 0;
  409502:	4638      	mov	r0, r7
}
  409504:	b006      	add	sp, #24
  409506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		board_serial_print("[  FAIL ]\tCMD8\n");
  40950a:	484d      	ldr	r0, [pc, #308]	; (409640 <sd_protocol_initialize+0x254>)
  40950c:	4b47      	ldr	r3, [pc, #284]	; (40962c <sd_protocol_initialize+0x240>)
  40950e:	4798      	blx	r3
		return 0;
  409510:	4620      	mov	r0, r4
  409512:	e7f0      	b.n	4094f6 <sd_protocol_initialize+0x10a>
	if ((tmp & SD_PROTOCOL_VOLTAGE_ARGUMENT) == SD_PROTOCOL_VOLTAGE_ARGUMENT)
  409514:	f240 34e9 	movw	r4, #1001	; 0x3e9
		hsmci_send_command(HSMCI, 41 | SD_PROTOCOL_RESPONSE_3 | HSMCI_CMDR_OPDCMD_OPENDRAIN, (1 << 30) | (0b111111 << 15), DONT_CHECK_CRC);
  409518:	f8df a154 	ldr.w	sl, [pc, #340]	; 409670 <sd_protocol_initialize+0x284>
  40951c:	e001      	b.n	409522 <sd_protocol_initialize+0x136>
		if (retry_count++ >= 1000)
  40951e:	3c01      	subs	r4, #1
  409520:	d01d      	beq.n	40955e <sd_protocol_initialize+0x172>
	if(hsmci_send_command(HSMCI, 55 | SD_PROTOCOL_RESPONSE_1, (uint32_t)card->relative_card_address << 16, CHECK_CRC) == HSMCI_ERROR)
  409522:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
  409524:	2300      	movs	r3, #0
  409526:	f241 0177 	movw	r1, #4215	; 0x1077
  40952a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40952e:	0412      	lsls	r2, r2, #16
  409530:	47b0      	blx	r6
		hsmci_send_command(HSMCI, 41 | SD_PROTOCOL_RESPONSE_3 | HSMCI_CMDR_OPDCMD_OPENDRAIN, (1 << 30) | (0b111111 << 15), DONT_CHECK_CRC);
  409532:	2301      	movs	r3, #1
  409534:	4652      	mov	r2, sl
  409536:	f641 0169 	movw	r1, #6249	; 0x1869
  40953a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40953e:	47b0      	blx	r6
		tmp = hsmci_read_48_bit_response_register(HSMCI);
  409540:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409544:	47b8      	blx	r7
		if (tmp & (1 << 31))
  409546:	2800      	cmp	r0, #0
  409548:	dae9      	bge.n	40951e <sd_protocol_initialize+0x132>
			if (tmp & (1 << 30))
  40954a:	f3c0 7380 	ubfx	r3, r0, #30, #1
	if (sd_protocol_send_cmd_2(card) == 0)
  40954e:	4a3d      	ldr	r2, [pc, #244]	; (409644 <sd_protocol_initialize+0x258>)
  409550:	4628      	mov	r0, r5
  409552:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  409556:	4790      	blx	r2
  409558:	b938      	cbnz	r0, 40956a <sd_protocol_initialize+0x17e>
		return 0;
  40955a:	2000      	movs	r0, #0
  40955c:	e7cb      	b.n	4094f6 <sd_protocol_initialize+0x10a>
			board_serial_print_register("[  FAIL ]\tACMD41 response: ", tmp);
  40955e:	4601      	mov	r1, r0
  409560:	4b34      	ldr	r3, [pc, #208]	; (409634 <sd_protocol_initialize+0x248>)
  409562:	4839      	ldr	r0, [pc, #228]	; (409648 <sd_protocol_initialize+0x25c>)
  409564:	4798      	blx	r3
		return 0;
  409566:	4620      	mov	r0, r4
  409568:	e7c5      	b.n	4094f6 <sd_protocol_initialize+0x10a>
	if (hsmci_send_command(HSMCI, 3 | SD_PROTOCOL_RESPONSE_6 | HSMCI_CMDR_OPDCMD_OPENDRAIN, 0, CHECK_CRC) == HSMCI_ERROR)
  40956a:	2300      	movs	r3, #0
  40956c:	f641 0143 	movw	r1, #6211	; 0x1843
  409570:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409574:	461a      	mov	r2, r3
  409576:	47b0      	blx	r6
  409578:	2801      	cmp	r0, #1
  40957a:	d02e      	beq.n	4095da <sd_protocol_initialize+0x1ee>
	card->relative_card_address = ((hsmci_read_48_bit_response_register(HSMCI) >> 16) & 0xffff);
  40957c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409580:	47b8      	blx	r7
	if (sd_protocol_send_cmd_9(card) == 0)
  409582:	4b32      	ldr	r3, [pc, #200]	; (40964c <sd_protocol_initialize+0x260>)
	card->relative_card_address = ((hsmci_read_48_bit_response_register(HSMCI) >> 16) & 0xffff);
  409584:	0c02      	lsrs	r2, r0, #16
	if (sd_protocol_send_cmd_9(card) == 0)
  409586:	4628      	mov	r0, r5
	card->relative_card_address = ((hsmci_read_48_bit_response_register(HSMCI) >> 16) & 0xffff);
  409588:	876a      	strh	r2, [r5, #58]	; 0x3a
	if (sd_protocol_send_cmd_9(card) == 0)
  40958a:	4798      	blx	r3
  40958c:	2800      	cmp	r0, #0
  40958e:	d0e4      	beq.n	40955a <sd_protocol_initialize+0x16e>
	if (sd_protocol_send_cmd_7(card) == 0)
  409590:	4628      	mov	r0, r5
  409592:	4b2f      	ldr	r3, [pc, #188]	; (409650 <sd_protocol_initialize+0x264>)
  409594:	4798      	blx	r3
  409596:	2800      	cmp	r0, #0
  409598:	d0df      	beq.n	40955a <sd_protocol_initialize+0x16e>
	if (sd_protocol_send_acmd_51(card) == 0)
  40959a:	4628      	mov	r0, r5
  40959c:	4b2d      	ldr	r3, [pc, #180]	; (409654 <sd_protocol_initialize+0x268>)
  40959e:	4798      	blx	r3
  4095a0:	2800      	cmp	r0, #0
  4095a2:	d0da      	beq.n	40955a <sd_protocol_initialize+0x16e>
	if (card->four_bit_bus_width_support)
  4095a4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
  4095a8:	b9db      	cbnz	r3, 4095e2 <sd_protocol_initialize+0x1f6>
	if (card->version_1_10_and_later)
  4095aa:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  4095ae:	b15b      	cbz	r3, 4095c8 <sd_protocol_initialize+0x1dc>
		if (sd_protocol_send_cmd_6(card) == 0)
  4095b0:	4628      	mov	r0, r5
  4095b2:	4b29      	ldr	r3, [pc, #164]	; (409658 <sd_protocol_initialize+0x26c>)
  4095b4:	4798      	blx	r3
  4095b6:	2800      	cmp	r0, #0
  4095b8:	d0cf      	beq.n	40955a <sd_protocol_initialize+0x16e>
		if (card->high_speed_support)
  4095ba:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
  4095be:	b11b      	cbz	r3, 4095c8 <sd_protocol_initialize+0x1dc>
			hsmci_high_speed_enable(HSMCI);
  4095c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4095c4:	4b25      	ldr	r3, [pc, #148]	; (40965c <sd_protocol_initialize+0x270>)
  4095c6:	4798      	blx	r3
	card->card_initialized = 1;
  4095c8:	2401      	movs	r4, #1
	hsmci_set_bus_speed(HSMCI, card->bus_speed, 150000000);
  4095ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4095ce:	4a11      	ldr	r2, [pc, #68]	; (409614 <sd_protocol_initialize+0x228>)
  4095d0:	6c69      	ldr	r1, [r5, #68]	; 0x44
  4095d2:	47c8      	blx	r9
	card->card_initialized = 1;
  4095d4:	702c      	strb	r4, [r5, #0]
	return 1;
  4095d6:	4620      	mov	r0, r4
  4095d8:	e78d      	b.n	4094f6 <sd_protocol_initialize+0x10a>
		board_serial_print("[  FAIL ]\tCMD3\n");
  4095da:	4821      	ldr	r0, [pc, #132]	; (409660 <sd_protocol_initialize+0x274>)
  4095dc:	4b13      	ldr	r3, [pc, #76]	; (40962c <sd_protocol_initialize+0x240>)
  4095de:	4798      	blx	r3
  4095e0:	e7bb      	b.n	40955a <sd_protocol_initialize+0x16e>
		if (sd_protocol_send_acmd_6(card) == 0)
  4095e2:	4628      	mov	r0, r5
  4095e4:	4b1f      	ldr	r3, [pc, #124]	; (409664 <sd_protocol_initialize+0x278>)
  4095e6:	4798      	blx	r3
  4095e8:	2800      	cmp	r0, #0
  4095ea:	d0b6      	beq.n	40955a <sd_protocol_initialize+0x16e>
		hsmci_set_bus_width(HSMCI, HSMCI_SD_BUS_WIDTH_4_BIT, card->slot);
  4095ec:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
  4095f0:	2102      	movs	r1, #2
  4095f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4095f6:	47c0      	blx	r8
  4095f8:	e7d7      	b.n	4095aa <sd_protocol_initialize+0x1be>
  4095fa:	bf00      	nop
  4095fc:	004c4b3f 	.word	0x004c4b3f
  409600:	00402c81 	.word	0x00402c81
  409604:	00402ccd 	.word	0x00402ccd
  409608:	00402cf5 	.word	0x00402cf5
  40960c:	00403105 	.word	0x00403105
  409610:	0040307d 	.word	0x0040307d
  409614:	08f0d180 	.word	0x08f0d180
  409618:	00061a80 	.word	0x00061a80
  40961c:	00402ca9 	.word	0x00402ca9
  409620:	00402e31 	.word	0x00402e31
  409624:	00402dd9 	.word	0x00402dd9
  409628:	0040b71c 	.word	0x0040b71c
  40962c:	0040052d 	.word	0x0040052d
  409630:	0040b734 	.word	0x0040b734
  409634:	00400c51 	.word	0x00400c51
  409638:	0040b6c0 	.word	0x0040b6c0
  40963c:	0040b6e0 	.word	0x0040b6e0
  409640:	0040b70c 	.word	0x0040b70c
  409644:	00408dd1 	.word	0x00408dd1
  409648:	0040b750 	.word	0x0040b750
  40964c:	00409205 	.word	0x00409205
  409650:	00408e95 	.word	0x00408e95
  409654:	00408f79 	.word	0x00408f79
  409658:	00409009 	.word	0x00409009
  40965c:	004030dd 	.word	0x004030dd
  409660:	0040b76c 	.word	0x0040b76c
  409664:	00408ec9 	.word	0x00408ec9
  409668:	00402d1d 	.word	0x00402d1d
  40966c:	0040302d 	.word	0x0040302d
  409670:	401f8000 	.word	0x401f8000

00409674 <sd_protocol_read>:

//--------------------------------------------------------------------------------------------------//


uint8_t sd_protocol_read(sd_card* card, uint8_t *data, uint32_t sector, uint32_t count)
{
  409674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// First check if the section is supported on the card
	if (sector + count >= card->number_of_blocks)
  409678:	6c84      	ldr	r4, [r0, #72]	; 0x48
  40967a:	18d5      	adds	r5, r2, r3
{
  40967c:	b089      	sub	sp, #36	; 0x24
	if (sector + count >= card->number_of_blocks)
  40967e:	42a5      	cmp	r5, r4
  409680:	d222      	bcs.n	4096c8 <sd_protocol_read+0x54>
	}
	
	uint32_t command = 0;
	uint32_t argument = 0;
	
	for (uint8_t i = 0; i < count; i++)
  409682:	2b00      	cmp	r3, #0
  409684:	d055      	beq.n	409732 <sd_protocol_read+0xbe>
  409686:	f04f 0900 	mov.w	r9, #0
  40968a:	460c      	mov	r4, r1
  40968c:	4605      	mov	r5, r0
  40968e:	f8df a138 	ldr.w	sl, [pc, #312]	; 4097c8 <sd_protocol_read+0x154>
  409692:	9306      	str	r3, [sp, #24]
  409694:	9207      	str	r2, [sp, #28]
  409696:	f8cd 9010 	str.w	r9, [sp, #16]
  40969a:	f8cd 9014 	str.w	r9, [sp, #20]
  40969e:	4627      	mov	r7, r4
  4096a0:	4e3c      	ldr	r6, [pc, #240]	; (409794 <sd_protocol_read+0x120>)
  4096a2:	e005      	b.n	4096b0 <sd_protocol_read+0x3c>
		status = hsmci_read_48_bit_response_register(HSMCI);
  4096a4:	4b3c      	ldr	r3, [pc, #240]	; (409798 <sd_protocol_read+0x124>)
  4096a6:	4798      	blx	r3
		if (timeout_count -- <= 1)
  4096a8:	3e01      	subs	r6, #1
  4096aa:	d00d      	beq.n	4096c8 <sd_protocol_read+0x54>
	} while (!(status & (1 << 8)));
  4096ac:	05c3      	lsls	r3, r0, #23
  4096ae:	d40f      	bmi.n	4096d0 <sd_protocol_read+0x5c>
		if (hsmci_send_command(HSMCI, 13 | SD_PROTOCOL_RESPONSE_1, (uint32_t)(card->relative_card_address << 16), CHECK_CRC) == HSMCI_ERROR)
  4096b0:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
  4096b2:	2300      	movs	r3, #0
  4096b4:	f241 014d 	movw	r1, #4173	; 0x104d
  4096b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4096bc:	0412      	lsls	r2, r2, #16
  4096be:	47d0      	blx	sl
  4096c0:	2801      	cmp	r0, #1
		status = hsmci_read_48_bit_response_register(HSMCI);
  4096c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (hsmci_send_command(HSMCI, 13 | SD_PROTOCOL_RESPONSE_1, (uint32_t)(card->relative_card_address << 16), CHECK_CRC) == HSMCI_ERROR)
  4096c6:	d1ed      	bne.n	4096a4 <sd_protocol_read+0x30>
		return 0;
  4096c8:	2000      	movs	r0, #0
			board_serial_print("ERROR\n");
		}
	}
	
	return 1;
}
  4096ca:	b009      	add	sp, #36	; 0x24
  4096cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (card->card_type == SDSC)
  4096d0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
  4096d4:	2b00      	cmp	r3, #0
  4096d6:	d130      	bne.n	40973a <sd_protocol_read+0xc6>
			argument = (sector + i) * 512;
  4096d8:	9b07      	ldr	r3, [sp, #28]
  4096da:	4499      	add	r9, r3
  4096dc:	ea4f 2349 	mov.w	r3, r9, lsl #9
  4096e0:	9305      	str	r3, [sp, #20]
		hsmci_send_addressed_data_transfer_command(HSMCI, command, argument, 512, 1, 0, CHECK_CRC);
  4096e2:	2200      	movs	r2, #0
  4096e4:	2101      	movs	r1, #1
  4096e6:	f44f 7300 	mov.w	r3, #512	; 0x200
  4096ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4096ee:	9202      	str	r2, [sp, #8]
  4096f0:	f504 7400 	add.w	r4, r4, #512	; 0x200
  4096f4:	9201      	str	r2, [sp, #4]
  4096f6:	9100      	str	r1, [sp, #0]
  4096f8:	9a05      	ldr	r2, [sp, #20]
  4096fa:	4928      	ldr	r1, [pc, #160]	; (40979c <sd_protocol_read+0x128>)
  4096fc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4097cc <sd_protocol_read+0x158>
  409700:	4e27      	ldr	r6, [pc, #156]	; (4097a0 <sd_protocol_read+0x12c>)
  409702:	47c8      	blx	r9
			data_reg = hsmci_read_data_register(HSMCI);
  409704:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409708:	47b0      	blx	r6
			*((uint32_t *)(data)) = data_reg;
  40970a:	f847 0b04 	str.w	r0, [r7], #4
		for (uint8_t i = 0; i < 128; i++)
  40970e:	42a7      	cmp	r7, r4
  409710:	d1f8      	bne.n	409704 <sd_protocol_read+0x90>
		uint32_t status = hsmci_read_48_bit_response_register(HSMCI);
  409712:	4b21      	ldr	r3, [pc, #132]	; (409798 <sd_protocol_read+0x124>)
  409714:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409718:	4798      	blx	r3
		if (status & (0b1111111111111 << 19))
  40971a:	4b22      	ldr	r3, [pc, #136]	; (4097a4 <sd_protocol_read+0x130>)
		uint32_t status = hsmci_read_48_bit_response_register(HSMCI);
  40971c:	4680      	mov	r8, r0
		if (status & (0b1111111111111 << 19))
  40971e:	4003      	ands	r3, r0
  409720:	b98b      	cbnz	r3, 409746 <sd_protocol_read+0xd2>
	for (uint8_t i = 0; i < count; i++)
  409722:	9e04      	ldr	r6, [sp, #16]
  409724:	9a06      	ldr	r2, [sp, #24]
  409726:	3601      	adds	r6, #1
  409728:	b2f3      	uxtb	r3, r6
  40972a:	429a      	cmp	r2, r3
  40972c:	9304      	str	r3, [sp, #16]
  40972e:	4699      	mov	r9, r3
  409730:	d8b5      	bhi.n	40969e <sd_protocol_read+0x2a>
	return 1;
  409732:	2001      	movs	r0, #1
}
  409734:	b009      	add	sp, #36	; 0x24
  409736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (card->card_type == SDHC)
  40973a:	2b01      	cmp	r3, #1
  40973c:	d1d1      	bne.n	4096e2 <sd_protocol_read+0x6e>
			argument = sector + i;
  40973e:	9b07      	ldr	r3, [sp, #28]
  409740:	444b      	add	r3, r9
  409742:	9305      	str	r3, [sp, #20]
  409744:	e7cd      	b.n	4096e2 <sd_protocol_read+0x6e>
	board_serial_print(description);
  409746:	4818      	ldr	r0, [pc, #96]	; (4097a8 <sd_protocol_read+0x134>)
	board_serial_print(" : 0b");
  409748:	f04f 0b1f 	mov.w	fp, #31
	board_serial_print(description);
  40974c:	4f17      	ldr	r7, [pc, #92]	; (4097ac <sd_protocol_read+0x138>)
	board_serial_print(" : 0b");
  40974e:	f04f 0900 	mov.w	r9, #0
			board_serial_print(" ");
  409752:	4e17      	ldr	r6, [pc, #92]	; (4097b0 <sd_protocol_read+0x13c>)
	board_serial_print(description);
  409754:	47b8      	blx	r7
	board_serial_print(" : 0b");
  409756:	4817      	ldr	r0, [pc, #92]	; (4097b4 <sd_protocol_read+0x140>)
  409758:	47b8      	blx	r7
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  40975a:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < number_of_bits; i++)
  40975c:	f109 0901 	add.w	r9, r9, #1
			board_serial_print("0");
  409760:	4815      	ldr	r0, [pc, #84]	; (4097b8 <sd_protocol_read+0x144>)
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  409762:	fa03 f30b 	lsl.w	r3, r3, fp
	for (uint8_t i = 0; i < number_of_bits; i++)
  409766:	fa5f f989 	uxtb.w	r9, r9
  40976a:	f10b 3bff 	add.w	fp, fp, #4294967295
		if ((data & (1 << (number_of_bits - 1 - i))) == 0)
  40976e:	ea13 0f08 	tst.w	r3, r8
			board_serial_print("1");
  409772:	bf18      	it	ne
  409774:	4811      	ldrne	r0, [pc, #68]	; (4097bc <sd_protocol_read+0x148>)
  409776:	47b8      	blx	r7
	for (uint8_t i = 0; i < number_of_bits; i++)
  409778:	f1b9 0f20 	cmp.w	r9, #32
			board_serial_print(" ");
  40977c:	4630      	mov	r0, r6
	for (uint8_t i = 0; i < number_of_bits; i++)
  40977e:	d004      	beq.n	40978a <sd_protocol_read+0x116>
		if ((i % 8 == 0) && (i != 0))
  409780:	f019 0f07 	tst.w	r9, #7
  409784:	d1e9      	bne.n	40975a <sd_protocol_read+0xe6>
			board_serial_print(" ");
  409786:	47b8      	blx	r7
  409788:	e7e7      	b.n	40975a <sd_protocol_read+0xe6>
	board_serial_print("\n");
  40978a:	480d      	ldr	r0, [pc, #52]	; (4097c0 <sd_protocol_read+0x14c>)
  40978c:	47b8      	blx	r7
			board_serial_print("ERROR\n");
  40978e:	480d      	ldr	r0, [pc, #52]	; (4097c4 <sd_protocol_read+0x150>)
  409790:	47b8      	blx	r7
  409792:	e7c6      	b.n	409722 <sd_protocol_read+0xae>
  409794:	00030d40 	.word	0x00030d40
  409798:	00402dd9 	.word	0x00402dd9
  40979c:	00051051 	.word	0x00051051
  4097a0:	00402d6d 	.word	0x00402d6d
  4097a4:	fff80000 	.word	0xfff80000
  4097a8:	0040bb08 	.word	0x0040bb08
  4097ac:	0040052d 	.word	0x0040052d
  4097b0:	0040b810 	.word	0x0040b810
  4097b4:	0040b79c 	.word	0x0040b79c
  4097b8:	0040b7a4 	.word	0x0040b7a4
  4097bc:	0040b7a8 	.word	0x0040b7a8
  4097c0:	0040b4cc 	.word	0x0040b4cc
  4097c4:	0040bb18 	.word	0x0040bb18
  4097c8:	00402e31 	.word	0x00402e31
  4097cc:	00402ecd 	.word	0x00402ecd

004097d0 <sd_protocol_write>:

//--------------------------------------------------------------------------------------------------//


uint8_t sd_protocol_write(sd_card* card, const uint8_t *data, uint32_t sector, uint32_t count)
{
  4097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// First check if the section is supported on the card
	if (sector + count >= card->number_of_blocks)
  4097d4:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4097d6:	18d5      	adds	r5, r2, r3
{
  4097d8:	b089      	sub	sp, #36	; 0x24
	if (sector + count >= card->number_of_blocks)
  4097da:	42a5      	cmp	r5, r4
  4097dc:	d221      	bcs.n	409822 <sd_protocol_write+0x52>
	}
	
	uint32_t command = 0;
	uint32_t argument = 0;
	
	for (uint8_t i = 0; i < count; i++)
  4097de:	2b00      	cmp	r3, #0
  4097e0:	d059      	beq.n	409896 <sd_protocol_write+0xc6>
  4097e2:	f04f 0b00 	mov.w	fp, #0
  4097e6:	4689      	mov	r9, r1
  4097e8:	4606      	mov	r6, r0
  4097ea:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 4098e4 <sd_protocol_write+0x114>
  4097ee:	46da      	mov	sl, fp
		status = hsmci_read_48_bit_response_register(HSMCI);
  4097f0:	4f32      	ldr	r7, [pc, #200]	; (4098bc <sd_protocol_write+0xec>)
  4097f2:	9306      	str	r3, [sp, #24]
  4097f4:	9207      	str	r2, [sp, #28]
	for (uint8_t i = 0; i < count; i++)
  4097f6:	f8cd b014 	str.w	fp, [sp, #20]
  4097fa:	464d      	mov	r5, r9
  4097fc:	4c30      	ldr	r4, [pc, #192]	; (4098c0 <sd_protocol_write+0xf0>)
  4097fe:	e004      	b.n	40980a <sd_protocol_write+0x3a>
		status = hsmci_read_48_bit_response_register(HSMCI);
  409800:	47b8      	blx	r7
		if (timeout_count -- <= 1)
  409802:	3c01      	subs	r4, #1
  409804:	d00d      	beq.n	409822 <sd_protocol_write+0x52>
	} while (!(status & (1 << 8)));
  409806:	05c2      	lsls	r2, r0, #23
  409808:	d40f      	bmi.n	40982a <sd_protocol_write+0x5a>
		if (hsmci_send_command(HSMCI, 13 | SD_PROTOCOL_RESPONSE_1, (uint32_t)(card->relative_card_address << 16), CHECK_CRC) == HSMCI_ERROR)
  40980a:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
  40980c:	2300      	movs	r3, #0
  40980e:	f241 014d 	movw	r1, #4173	; 0x104d
  409812:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409816:	0412      	lsls	r2, r2, #16
  409818:	47c0      	blx	r8
  40981a:	2801      	cmp	r0, #1
		status = hsmci_read_48_bit_response_register(HSMCI);
  40981c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (hsmci_send_command(HSMCI, 13 | SD_PROTOCOL_RESPONSE_1, (uint32_t)(card->relative_card_address << 16), CHECK_CRC) == HSMCI_ERROR)
  409820:	d1ee      	bne.n	409800 <sd_protocol_write+0x30>
		return 0;
  409822:	2000      	movs	r0, #0
		
		
	}
	
	return 1;
}
  409824:	b009      	add	sp, #36	; 0x24
  409826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (card->card_type == SDSC)
  40982a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
  40982e:	2b00      	cmp	r3, #0
  409830:	d135      	bne.n	40989e <sd_protocol_write+0xce>
			argument = (sector + i) * 512;
  409832:	9b07      	ldr	r3, [sp, #28]
  409834:	449b      	add	fp, r3
  409836:	ea4f 234b 	mov.w	r3, fp, lsl #9
  40983a:	9305      	str	r3, [sp, #20]
		if (hsmci_send_addressed_data_transfer_command(HSMCI, command, argument, 512, 1, 0, CHECK_CRC) == HSMCI_ERROR)
  40983c:	2000      	movs	r0, #0
  40983e:	2401      	movs	r4, #1
  409840:	f44f 7300 	mov.w	r3, #512	; 0x200
  409844:	9a05      	ldr	r2, [sp, #20]
  409846:	9002      	str	r0, [sp, #8]
  409848:	9001      	str	r0, [sp, #4]
  40984a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40984e:	9400      	str	r4, [sp, #0]
  409850:	491c      	ldr	r1, [pc, #112]	; (4098c4 <sd_protocol_write+0xf4>)
  409852:	4c1d      	ldr	r4, [pc, #116]	; (4098c8 <sd_protocol_write+0xf8>)
  409854:	47a0      	blx	r4
  409856:	2801      	cmp	r0, #1
  409858:	d027      	beq.n	4098aa <sd_protocol_write+0xda>
		status = hsmci_read_48_bit_response_register(HSMCI);
  40985a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40985e:	47b8      	blx	r7
		if (status & (0b1111111111111 << 19))
  409860:	4b1a      	ldr	r3, [pc, #104]	; (4098cc <sd_protocol_write+0xfc>)
  409862:	4003      	ands	r3, r0
  409864:	bb2b      	cbnz	r3, 4098b2 <sd_protocol_write+0xe2>
  409866:	f509 7900 	add.w	r9, r9, #512	; 0x200
  40986a:	4c19      	ldr	r4, [pc, #100]	; (4098d0 <sd_protocol_write+0x100>)
			hsmci_write_data_register(HSMCI, *((uint32_t *)data));
  40986c:	f855 1b04 	ldr.w	r1, [r5], #4
  409870:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409874:	47a0      	blx	r4
		for (uint8_t i = 0; i < 128; i++)
  409876:	454d      	cmp	r5, r9
  409878:	d1f8      	bne.n	40986c <sd_protocol_write+0x9c>
  40987a:	4c16      	ldr	r4, [pc, #88]	; (4098d4 <sd_protocol_write+0x104>)
		while (!(hsmci_read_status_register(HSMCI) & (1 << HSMCI_SR_NOTBUSY_Pos)))
  40987c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  409880:	47a0      	blx	r4
  409882:	0683      	lsls	r3, r0, #26
  409884:	d5fa      	bpl.n	40987c <sd_protocol_write+0xac>
	for (uint8_t i = 0; i < count; i++)
  409886:	f10a 0a01 	add.w	sl, sl, #1
  40988a:	9b06      	ldr	r3, [sp, #24]
  40988c:	fa5f fa8a 	uxtb.w	sl, sl
  409890:	4553      	cmp	r3, sl
  409892:	46d3      	mov	fp, sl
  409894:	d8b1      	bhi.n	4097fa <sd_protocol_write+0x2a>
	return 1;
  409896:	2001      	movs	r0, #1
}
  409898:	b009      	add	sp, #36	; 0x24
  40989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (card->card_type == SDHC)
  40989e:	2b01      	cmp	r3, #1
  4098a0:	d1cc      	bne.n	40983c <sd_protocol_write+0x6c>
			argument = sector + i;
  4098a2:	9b07      	ldr	r3, [sp, #28]
  4098a4:	445b      	add	r3, fp
  4098a6:	9305      	str	r3, [sp, #20]
  4098a8:	e7c8      	b.n	40983c <sd_protocol_write+0x6c>
			board_serial_print("WARNING\n");
  4098aa:	480b      	ldr	r0, [pc, #44]	; (4098d8 <sd_protocol_write+0x108>)
  4098ac:	4b0b      	ldr	r3, [pc, #44]	; (4098dc <sd_protocol_write+0x10c>)
  4098ae:	4798      	blx	r3
  4098b0:	e7d3      	b.n	40985a <sd_protocol_write+0x8a>
			board_serial_print("ERROR\n");
  4098b2:	480b      	ldr	r0, [pc, #44]	; (4098e0 <sd_protocol_write+0x110>)
  4098b4:	4b09      	ldr	r3, [pc, #36]	; (4098dc <sd_protocol_write+0x10c>)
  4098b6:	4798      	blx	r3
  4098b8:	e7fe      	b.n	4098b8 <sd_protocol_write+0xe8>
  4098ba:	bf00      	nop
  4098bc:	00402dd9 	.word	0x00402dd9
  4098c0:	00030d40 	.word	0x00030d40
  4098c4:	00011058 	.word	0x00011058
  4098c8:	00402ecd 	.word	0x00402ecd
  4098cc:	fff80000 	.word	0xfff80000
  4098d0:	00402d41 	.word	0x00402d41
  4098d4:	00402e2d 	.word	0x00402e2d
  4098d8:	0040bb20 	.word	0x0040bb20
  4098dc:	0040052d 	.word	0x0040052d
  4098e0:	0040bb18 	.word	0x0040bb18
  4098e4:	00402e31 	.word	0x00402e31

004098e8 <Dummy_Handler>:

//--------------------------------------------------------------------------------------------------//


void Dummy_Handler(void)
{
  4098e8:	e7fe      	b.n	4098e8 <Dummy_Handler>
  4098ea:	bf00      	nop

004098ec <Reset_Handler>:
        if (pSrc != pDest) {
  4098ec:	4912      	ldr	r1, [pc, #72]	; (409938 <Reset_Handler+0x4c>)
  4098ee:	4813      	ldr	r0, [pc, #76]	; (40993c <Reset_Handler+0x50>)
  4098f0:	4281      	cmp	r1, r0
{
  4098f2:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
  4098f4:	d009      	beq.n	40990a <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
  4098f6:	4b12      	ldr	r3, [pc, #72]	; (409940 <Reset_Handler+0x54>)
  4098f8:	4298      	cmp	r0, r3
  4098fa:	d206      	bcs.n	40990a <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
  4098fc:	43c2      	mvns	r2, r0
  4098fe:	4c11      	ldr	r4, [pc, #68]	; (409944 <Reset_Handler+0x58>)
  409900:	441a      	add	r2, r3
  409902:	f022 0203 	bic.w	r2, r2, #3
  409906:	3204      	adds	r2, #4
  409908:	47a0      	blx	r4
        for (pDest = &_szero; pDest < &_ezero;) {
  40990a:	480f      	ldr	r0, [pc, #60]	; (409948 <Reset_Handler+0x5c>)
  40990c:	4b0f      	ldr	r3, [pc, #60]	; (40994c <Reset_Handler+0x60>)
  40990e:	4298      	cmp	r0, r3
  409910:	d207      	bcs.n	409922 <Reset_Handler+0x36>
                *pDest++ = 0;
  409912:	43c2      	mvns	r2, r0
  409914:	2100      	movs	r1, #0
  409916:	4c0e      	ldr	r4, [pc, #56]	; (409950 <Reset_Handler+0x64>)
  409918:	441a      	add	r2, r3
  40991a:	f022 0203 	bic.w	r2, r2, #3
  40991e:	3204      	adds	r2, #4
  409920:	47a0      	blx	r4
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  409922:	4b0c      	ldr	r3, [pc, #48]	; (409954 <Reset_Handler+0x68>)
  409924:	490c      	ldr	r1, [pc, #48]	; (409958 <Reset_Handler+0x6c>)
  409926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
        __libc_init_array();
  40992a:	4a0c      	ldr	r2, [pc, #48]	; (40995c <Reset_Handler+0x70>)
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40992c:	608b      	str	r3, [r1, #8]
        __libc_init_array();
  40992e:	4790      	blx	r2
        main();
  409930:	4b0b      	ldr	r3, [pc, #44]	; (409960 <Reset_Handler+0x74>)
  409932:	4798      	blx	r3
  409934:	e7fe      	b.n	409934 <Reset_Handler+0x48>
  409936:	bf00      	nop
  409938:	0040bd18 	.word	0x0040bd18
  40993c:	20400000 	.word	0x20400000
  409940:	2040051c 	.word	0x2040051c
  409944:	0040a421 	.word	0x0040a421
  409948:	20400520 	.word	0x20400520
  40994c:	20402884 	.word	0x20402884
  409950:	0040a555 	.word	0x0040a555
  409954:	00400000 	.word	0x00400000
  409958:	e000ed00 	.word	0xe000ed00
  40995c:	0040a3d1 	.word	0x0040a3d1
  409960:	0040998d 	.word	0x0040998d

00409964 <runtime_stats>:

//--------------------------------------------------------------------------------------------------//


void runtime_stats(void* arg)
{
  409964:	4d03      	ldr	r5, [pc, #12]	; (409974 <runtime_stats+0x10>)
  409966:	4c04      	ldr	r4, [pc, #16]	; (409978 <runtime_stats+0x14>)
  409968:	b508      	push	{r3, lr}
	while (1)
	{
		syscall_sleep(1000);
  40996a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40996e:	47a8      	blx	r5
		print_runtime_statistics();
  409970:	47a0      	blx	r4
  409972:	e7fa      	b.n	40996a <runtime_stats+0x6>
  409974:	00408935 	.word	0x00408935
  409978:	00408751 	.word	0x00408751

0040997c <welcome_thread>:


void welcome_thread(void* arg)
{
	// Print a happy message to the screen
	board_serial_print("Kernel successfully started\n\n");
  40997c:	4801      	ldr	r0, [pc, #4]	; (409984 <welcome_thread+0x8>)
  40997e:	4b02      	ldr	r3, [pc, #8]	; (409988 <welcome_thread+0xc>)
  409980:	4718      	bx	r3
  409982:	bf00      	nop
  409984:	0040bb38 	.word	0x0040bb38
  409988:	0040052d 	.word	0x0040052d

0040998c <main>:
{
	int j;	
};

int main(void)
{
  40998c:	b530      	push	{r4, r5, lr}
	kernel_startup();
	void* tmp = 0;
	int te = ((struct hei*)tmp)->j;
	
	// Add some threads for test & debug purposes
	thread_new("blink", blink_thread, NULL, THREAD_PRIORITY_NORMAL, 100);
  40998e:	2564      	movs	r5, #100	; 0x64
{
  409990:	b083      	sub	sp, #12
	kernel_startup();
  409992:	4b0c      	ldr	r3, [pc, #48]	; (4099c4 <main+0x38>)
  409994:	4798      	blx	r3
	thread_new("blink", blink_thread, NULL, THREAD_PRIORITY_NORMAL, 100);
  409996:	4c0c      	ldr	r4, [pc, #48]	; (4099c8 <main+0x3c>)
  409998:	2302      	movs	r3, #2
  40999a:	2200      	movs	r2, #0
  40999c:	490b      	ldr	r1, [pc, #44]	; (4099cc <main+0x40>)
  40999e:	9500      	str	r5, [sp, #0]
  4099a0:	480b      	ldr	r0, [pc, #44]	; (4099d0 <main+0x44>)
  4099a2:	47a0      	blx	r4
	thread_new("runtime", runtime_stats, NULL, THREAD_PRIORITY_NORMAL, 100);
  4099a4:	2302      	movs	r3, #2
  4099a6:	2200      	movs	r2, #0
  4099a8:	490a      	ldr	r1, [pc, #40]	; (4099d4 <main+0x48>)
  4099aa:	9500      	str	r5, [sp, #0]
  4099ac:	480a      	ldr	r0, [pc, #40]	; (4099d8 <main+0x4c>)
  4099ae:	47a0      	blx	r4
	thread_new("welcome", welcome_thread, NULL, THREAD_PRIORITY_REAL_TIME, 50);
  4099b0:	2300      	movs	r3, #0
  4099b2:	2232      	movs	r2, #50	; 0x32
  4099b4:	4909      	ldr	r1, [pc, #36]	; (4099dc <main+0x50>)
  4099b6:	480a      	ldr	r0, [pc, #40]	; (4099e0 <main+0x54>)
  4099b8:	9200      	str	r2, [sp, #0]
  4099ba:	461a      	mov	r2, r3
  4099bc:	47a0      	blx	r4

	
	// Start the kernel
	kernel_launch();
  4099be:	4b09      	ldr	r3, [pc, #36]	; (4099e4 <main+0x58>)
  4099c0:	4798      	blx	r3
  4099c2:	e7fe      	b.n	4099c2 <main+0x36>
  4099c4:	00407e4d 	.word	0x00407e4d
  4099c8:	00408985 	.word	0x00408985
  4099cc:	00400241 	.word	0x00400241
  4099d0:	0040bb58 	.word	0x0040bb58
  4099d4:	00409965 	.word	0x00409965
  4099d8:	0040bb60 	.word	0x0040bb60
  4099dc:	0040997d 	.word	0x0040997d
  4099e0:	0040bb68 	.word	0x0040bb68
  4099e4:	004082e1 	.word	0x004082e1

004099e8 <usb_host_root_hub_handler>:

//--------------------------------------------------------------------------------------------------//


void usb_host_root_hub_handler(uint32_t status)
{
  4099e8:	b570      	push	{r4, r5, r6, lr}
  4099ea:	4604      	mov	r4, r0
	board_serial_print("Handler: Root hub\n\n");
  4099ec:	4d26      	ldr	r5, [pc, #152]	; (409a88 <usb_host_root_hub_handler+0xa0>)
  4099ee:	4827      	ldr	r0, [pc, #156]	; (409a8c <usb_host_root_hub_handler+0xa4>)
  4099f0:	47a8      	blx	r5
	
	// Interrupt mask register
	uint32_t mask = usbhs_host_get_interrupt_mask();
  4099f2:	4b27      	ldr	r3, [pc, #156]	; (409a90 <usb_host_root_hub_handler+0xa8>)
  4099f4:	4798      	blx	r3
	
	// Check if a bus reset has been sent
	if (status & USBHS_HSTISR_RSTI_Msk)
  4099f6:	0762      	lsls	r2, r4, #29
  4099f8:	d40d      	bmi.n	409a16 <usb_host_root_hub_handler+0x2e>
		
		return;
	}
	
	// A disconnection has occurred
	else if (status & mask & USBHS_HSTISR_DDISCI_Msk)
  4099fa:	ea00 0604 	and.w	r6, r0, r4
  4099fe:	07b3      	lsls	r3, r6, #30
  409a00:	d435      	bmi.n	409a6e <usb_host_root_hub_handler+0x86>
		
		return;
	}
	
	// A connection has occurred
	else if (status & mask & USBHS_HSTISR_DCONNI_Msk)
  409a02:	07f1      	lsls	r1, r6, #31
  409a04:	d40e      	bmi.n	409a24 <usb_host_root_hub_handler+0x3c>
		usbhs_host_send_reset();
		
		return;
	}
	
	if ((status & USBHS_HSTISR_HWUPI_Msk) && (mask & USBHS_HSTISR_DCONNI_Msk))
  409a06:	0662      	lsls	r2, r4, #25
  409a08:	d501      	bpl.n	409a0e <usb_host_root_hub_handler+0x26>
  409a0a:	07c3      	lsls	r3, r0, #31
  409a0c:	d41c      	bmi.n	409a48 <usb_host_root_hub_handler+0x60>
		// VBUS
		usbhs_global_send_vbus_request();
	}
	
	// Resume
	if (status & mask & (USBHS_HSTISR_HWUPI_Msk | USBHS_HSTISR_RSMEDI_Msk | USBHS_HSTISR_RXRSMI_Msk))
  409a0e:	f016 0f58 	tst.w	r6, #88	; 0x58
  409a12:	d127      	bne.n	409a64 <usb_host_root_hub_handler+0x7c>
  409a14:	bd70      	pop	{r4, r5, r6, pc}
		board_serial_print("Root hub: reset\n");
  409a16:	481f      	ldr	r0, [pc, #124]	; (409a94 <usb_host_root_hub_handler+0xac>)
  409a18:	47a8      	blx	r5
		usbhs_host_interrupt_clear(USBHS_HSTISR_RSTI_Msk);
  409a1a:	2004      	movs	r0, #4
  409a1c:	4b1e      	ldr	r3, [pc, #120]	; (409a98 <usb_host_root_hub_handler+0xb0>)
		
		// Send SOF request
		//usbhs_host_SOF_enable();
	}

}
  409a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usbhs_host_interrupt_clear(USBHS_HSTISR_RSTI_Msk);
  409a22:	4718      	bx	r3
		board_serial_print("Root hub: connection\n");
  409a24:	481d      	ldr	r0, [pc, #116]	; (409a9c <usb_host_root_hub_handler+0xb4>)
  409a26:	47a8      	blx	r5
		usbhs_host_interrupt_clear(USBHS_HSTISR_DCONNI_Msk | USBHS_HSTISR_DDISCI_Msk);
  409a28:	2003      	movs	r0, #3
  409a2a:	4b1b      	ldr	r3, [pc, #108]	; (409a98 <usb_host_root_hub_handler+0xb0>)
  409a2c:	4798      	blx	r3
		usbhs_host_interrupt_disable(USBHS_HSTISR_DCONNI_Msk);
  409a2e:	2001      	movs	r0, #1
  409a30:	4b1b      	ldr	r3, [pc, #108]	; (409aa0 <usb_host_root_hub_handler+0xb8>)
  409a32:	4798      	blx	r3
		usbhs_host_interrupt_enable(USBHS_HSTISR_DDISCI_Msk);
  409a34:	2002      	movs	r0, #2
  409a36:	4b1b      	ldr	r3, [pc, #108]	; (409aa4 <usb_host_root_hub_handler+0xbc>)
  409a38:	4798      	blx	r3
		systick_delay_milliseconds(100);
  409a3a:	4b1b      	ldr	r3, [pc, #108]	; (409aa8 <usb_host_root_hub_handler+0xc0>)
  409a3c:	2064      	movs	r0, #100	; 0x64
  409a3e:	4798      	blx	r3
		usbhs_host_send_reset();
  409a40:	4b1a      	ldr	r3, [pc, #104]	; (409aac <usb_host_root_hub_handler+0xc4>)
}
  409a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usbhs_host_send_reset();
  409a46:	4718      	bx	r3
		board_serial_print("Root hub: wakeup to power\n");
  409a48:	4819      	ldr	r0, [pc, #100]	; (409ab0 <usb_host_root_hub_handler+0xc8>)
  409a4a:	47a8      	blx	r5
		usbhs_global_unfreeze_clock();
  409a4c:	4b19      	ldr	r3, [pc, #100]	; (409ab4 <usb_host_root_hub_handler+0xcc>)
  409a4e:	4c1a      	ldr	r4, [pc, #104]	; (409ab8 <usb_host_root_hub_handler+0xd0>)
  409a50:	4798      	blx	r3
		while (!usbhs_global_clock_usable())
  409a52:	47a0      	blx	r4
  409a54:	2800      	cmp	r0, #0
  409a56:	d0fc      	beq.n	409a52 <usb_host_root_hub_handler+0x6a>
		usbhs_host_interrupt_clear(USBHS_HSTISR_HWUPI_Msk);
  409a58:	2040      	movs	r0, #64	; 0x40
  409a5a:	4b0f      	ldr	r3, [pc, #60]	; (409a98 <usb_host_root_hub_handler+0xb0>)
  409a5c:	4798      	blx	r3
		usbhs_global_send_vbus_request();
  409a5e:	4b17      	ldr	r3, [pc, #92]	; (409abc <usb_host_root_hub_handler+0xd4>)
  409a60:	4798      	blx	r3
  409a62:	e7d4      	b.n	409a0e <usb_host_root_hub_handler+0x26>
		board_serial_print("Root hub: resume\n");
  409a64:	462b      	mov	r3, r5
  409a66:	4816      	ldr	r0, [pc, #88]	; (409ac0 <usb_host_root_hub_handler+0xd8>)
}
  409a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		board_serial_print("Root hub: resume\n");
  409a6c:	4718      	bx	r3
		board_serial_print("Root hub: disconnect\n");
  409a6e:	4815      	ldr	r0, [pc, #84]	; (409ac4 <usb_host_root_hub_handler+0xdc>)
  409a70:	47a8      	blx	r5
		usbhs_host_interrupt_disable(USBHS_HSTISR_DDISCI_Msk);
  409a72:	2002      	movs	r0, #2
  409a74:	4b0a      	ldr	r3, [pc, #40]	; (409aa0 <usb_host_root_hub_handler+0xb8>)
  409a76:	4798      	blx	r3
		usbhs_host_interrupt_clear(USBHS_HSTISR_DDISCI_Msk | USBHS_HSTISR_DCONNI_Msk);
  409a78:	2003      	movs	r0, #3
  409a7a:	4b07      	ldr	r3, [pc, #28]	; (409a98 <usb_host_root_hub_handler+0xb0>)
  409a7c:	4798      	blx	r3
		usbhs_host_interrupt_enable(USBHS_HSTISR_DCONNI_Msk);
  409a7e:	2001      	movs	r0, #1
  409a80:	4b08      	ldr	r3, [pc, #32]	; (409aa4 <usb_host_root_hub_handler+0xbc>)
}
  409a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usbhs_host_interrupt_enable(USBHS_HSTISR_DCONNI_Msk);
  409a86:	4718      	bx	r3
  409a88:	0040052d 	.word	0x0040052d
  409a8c:	0040bb80 	.word	0x0040bb80
  409a90:	00403611 	.word	0x00403611
  409a94:	0040bb94 	.word	0x0040bb94
  409a98:	0040361d 	.word	0x0040361d
  409a9c:	0040bbc0 	.word	0x0040bbc0
  409aa0:	00403645 	.word	0x00403645
  409aa4:	0040366d 	.word	0x0040366d
  409aa8:	004032e1 	.word	0x004032e1
  409aac:	004035d5 	.word	0x004035d5
  409ab0:	0040bbd8 	.word	0x0040bbd8
  409ab4:	00403569 	.word	0x00403569
  409ab8:	004035c5 	.word	0x004035c5
  409abc:	00403599 	.word	0x00403599
  409ac0:	0040bbf4 	.word	0x0040bbf4
  409ac4:	0040bba8 	.word	0x0040bba8

00409ac8 <USBHS_Handler>:

//--------------------------------------------------------------------------------------------------//


void USBHS_Handler()
{
  409ac8:	b570      	push	{r4, r5, r6, lr}
	board_serial_print("\n--------------------------- IRQ ---------------------------\n");
  409aca:	4817      	ldr	r0, [pc, #92]	; (409b28 <USBHS_Handler+0x60>)
  409acc:	4d17      	ldr	r5, [pc, #92]	; (409b2c <USBHS_Handler+0x64>)
  409ace:	47a8      	blx	r5
	
	// Read the interrupt status register
	// This will NOT clear interrupt bits, and this must be done manually
	uint32_t status = usbhs_host_get_interrupt_status_register();
  409ad0:	4b17      	ldr	r3, [pc, #92]	; (409b30 <USBHS_Handler+0x68>)
  409ad2:	4798      	blx	r3
	
	board_serial_print_register("Host interrupt register", status);
  409ad4:	4b17      	ldr	r3, [pc, #92]	; (409b34 <USBHS_Handler+0x6c>)
  409ad6:	4601      	mov	r1, r0
	uint32_t status = usbhs_host_get_interrupt_status_register();
  409ad8:	4604      	mov	r4, r0
	board_serial_print_register("Host interrupt register", status);
  409ada:	4817      	ldr	r0, [pc, #92]	; (409b38 <USBHS_Handler+0x70>)
  409adc:	4798      	blx	r3
	
	// Clear all interrupt just for DEBUG purpose
	usbhs_host_interrupt_clear(0xffffffff);
  409ade:	f04f 30ff 	mov.w	r0, #4294967295
  409ae2:	4b16      	ldr	r3, [pc, #88]	; (409b3c <USBHS_Handler+0x74>)
  409ae4:	4798      	blx	r3

	
	// Start of frame interrupt detected
	// Something
	if (status & USBHS_HSTISR_HSOFI_Msk)
  409ae6:	f014 0620 	ands.w	r6, r4, #32
  409aea:	d116      	bne.n	409b1a <USBHS_Handler+0x52>
		usb_host_start_of_frame_handler(status);
	}
	
	// Pipe interrupt detected
	// Something
	if (status & (0b1111111111 << USBHS_HSTISR_PEP_0_Pos))
  409aec:	4b14      	ldr	r3, [pc, #80]	; (409b40 <USBHS_Handler+0x78>)
  409aee:	4023      	ands	r3, r4
  409af0:	b983      	cbnz	r3, 409b14 <USBHS_Handler+0x4c>
	//usb_host_dma_handler(status);
	
	// General interrupts
	// Reset, wakeup, connection, disconnection
	// Something
	if (status & (USBHS_HSTISR_RSTI_Msk | USBHS_HSTISR_HWUPI_Msk | USBHS_HSTISR_DCONNI_Msk | USBHS_HSTISR_DDISCI_Msk | USBHS_HSTISR_RSMEDI_Msk | USBHS_HSTISR_RXRSMI_Msk))
  409af2:	f014 0f5f 	tst.w	r4, #95	; 0x5f
  409af6:	d109      	bne.n	409b0c <USBHS_Handler+0x44>
	{
		usb_host_root_hub_handler(status);
	}

	board_serial_print("-----------------------------------------------------------\n\n\n");
  409af8:	4812      	ldr	r0, [pc, #72]	; (409b44 <USBHS_Handler+0x7c>)
  409afa:	47a8      	blx	r5
	
	if (status & USBHS_HSTISR_HSOFI_Msk)
  409afc:	b906      	cbnz	r6, 409b00 <USBHS_Handler+0x38>
  409afe:	bd70      	pop	{r4, r5, r6, pc}
	{
		systick_delay_milliseconds(800);
  409b00:	f44f 7048 	mov.w	r0, #800	; 0x320
  409b04:	4b10      	ldr	r3, [pc, #64]	; (409b48 <USBHS_Handler+0x80>)
	}
}
  409b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		systick_delay_milliseconds(800);
  409b0a:	4718      	bx	r3
		usb_host_root_hub_handler(status);
  409b0c:	4620      	mov	r0, r4
  409b0e:	4b0f      	ldr	r3, [pc, #60]	; (409b4c <USBHS_Handler+0x84>)
  409b10:	4798      	blx	r3
  409b12:	e7f1      	b.n	409af8 <USBHS_Handler+0x30>
	board_serial_print("Handler: Pipe\n");
  409b14:	480e      	ldr	r0, [pc, #56]	; (409b50 <USBHS_Handler+0x88>)
  409b16:	47a8      	blx	r5
  409b18:	e7eb      	b.n	409af2 <USBHS_Handler+0x2a>
	board_serial_print("Handler: SOF\n");
  409b1a:	480e      	ldr	r0, [pc, #56]	; (409b54 <USBHS_Handler+0x8c>)
  409b1c:	47a8      	blx	r5
	if (USBHS->USBHS_HSTFNUM & USBHS_HSTFNUM_MFNUM_Msk)
  409b1e:	4b0e      	ldr	r3, [pc, #56]	; (409b58 <USBHS_Handler+0x90>)
  409b20:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
  409b24:	e7e2      	b.n	409aec <USBHS_Handler+0x24>
  409b26:	bf00      	nop
  409b28:	0040bc58 	.word	0x0040bc58
  409b2c:	0040052d 	.word	0x0040052d
  409b30:	00403605 	.word	0x00403605
  409b34:	00400c51 	.word	0x00400c51
  409b38:	0040bc98 	.word	0x0040bc98
  409b3c:	0040361d 	.word	0x0040361d
  409b40:	0003ff00 	.word	0x0003ff00
  409b44:	0040bcb0 	.word	0x0040bcb0
  409b48:	004032e1 	.word	0x004032e1
  409b4c:	004099e9 	.word	0x004099e9
  409b50:	0040bc08 	.word	0x0040bc08
  409b54:	0040bc28 	.word	0x0040bc28
  409b58:	40038000 	.word	0x40038000

00409b5c <__aeabi_drsub>:
  409b5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  409b60:	e002      	b.n	409b68 <__adddf3>
  409b62:	bf00      	nop

00409b64 <__aeabi_dsub>:
  409b64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409b68 <__adddf3>:
  409b68:	b530      	push	{r4, r5, lr}
  409b6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  409b6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  409b72:	ea94 0f05 	teq	r4, r5
  409b76:	bf08      	it	eq
  409b78:	ea90 0f02 	teqeq	r0, r2
  409b7c:	bf1f      	itttt	ne
  409b7e:	ea54 0c00 	orrsne.w	ip, r4, r0
  409b82:	ea55 0c02 	orrsne.w	ip, r5, r2
  409b86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409b8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409b8e:	f000 80e2 	beq.w	409d56 <__adddf3+0x1ee>
  409b92:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409b96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409b9a:	bfb8      	it	lt
  409b9c:	426d      	neglt	r5, r5
  409b9e:	dd0c      	ble.n	409bba <__adddf3+0x52>
  409ba0:	442c      	add	r4, r5
  409ba2:	ea80 0202 	eor.w	r2, r0, r2
  409ba6:	ea81 0303 	eor.w	r3, r1, r3
  409baa:	ea82 0000 	eor.w	r0, r2, r0
  409bae:	ea83 0101 	eor.w	r1, r3, r1
  409bb2:	ea80 0202 	eor.w	r2, r0, r2
  409bb6:	ea81 0303 	eor.w	r3, r1, r3
  409bba:	2d36      	cmp	r5, #54	; 0x36
  409bbc:	bf88      	it	hi
  409bbe:	bd30      	pophi	{r4, r5, pc}
  409bc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409bc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409bc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409bcc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  409bd0:	d002      	beq.n	409bd8 <__adddf3+0x70>
  409bd2:	4240      	negs	r0, r0
  409bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409bd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409bdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409be0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  409be4:	d002      	beq.n	409bec <__adddf3+0x84>
  409be6:	4252      	negs	r2, r2
  409be8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409bec:	ea94 0f05 	teq	r4, r5
  409bf0:	f000 80a7 	beq.w	409d42 <__adddf3+0x1da>
  409bf4:	f1a4 0401 	sub.w	r4, r4, #1
  409bf8:	f1d5 0e20 	rsbs	lr, r5, #32
  409bfc:	db0d      	blt.n	409c1a <__adddf3+0xb2>
  409bfe:	fa02 fc0e 	lsl.w	ip, r2, lr
  409c02:	fa22 f205 	lsr.w	r2, r2, r5
  409c06:	1880      	adds	r0, r0, r2
  409c08:	f141 0100 	adc.w	r1, r1, #0
  409c0c:	fa03 f20e 	lsl.w	r2, r3, lr
  409c10:	1880      	adds	r0, r0, r2
  409c12:	fa43 f305 	asr.w	r3, r3, r5
  409c16:	4159      	adcs	r1, r3
  409c18:	e00e      	b.n	409c38 <__adddf3+0xd0>
  409c1a:	f1a5 0520 	sub.w	r5, r5, #32
  409c1e:	f10e 0e20 	add.w	lr, lr, #32
  409c22:	2a01      	cmp	r2, #1
  409c24:	fa03 fc0e 	lsl.w	ip, r3, lr
  409c28:	bf28      	it	cs
  409c2a:	f04c 0c02 	orrcs.w	ip, ip, #2
  409c2e:	fa43 f305 	asr.w	r3, r3, r5
  409c32:	18c0      	adds	r0, r0, r3
  409c34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409c38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409c3c:	d507      	bpl.n	409c4e <__adddf3+0xe6>
  409c3e:	f04f 0e00 	mov.w	lr, #0
  409c42:	f1dc 0c00 	rsbs	ip, ip, #0
  409c46:	eb7e 0000 	sbcs.w	r0, lr, r0
  409c4a:	eb6e 0101 	sbc.w	r1, lr, r1
  409c4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  409c52:	d31b      	bcc.n	409c8c <__adddf3+0x124>
  409c54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409c58:	d30c      	bcc.n	409c74 <__adddf3+0x10c>
  409c5a:	0849      	lsrs	r1, r1, #1
  409c5c:	ea5f 0030 	movs.w	r0, r0, rrx
  409c60:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409c64:	f104 0401 	add.w	r4, r4, #1
  409c68:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409c6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  409c70:	f080 809a 	bcs.w	409da8 <__adddf3+0x240>
  409c74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409c78:	bf08      	it	eq
  409c7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409c7e:	f150 0000 	adcs.w	r0, r0, #0
  409c82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409c86:	ea41 0105 	orr.w	r1, r1, r5
  409c8a:	bd30      	pop	{r4, r5, pc}
  409c8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  409c90:	4140      	adcs	r0, r0
  409c92:	eb41 0101 	adc.w	r1, r1, r1
  409c96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409c9a:	f1a4 0401 	sub.w	r4, r4, #1
  409c9e:	d1e9      	bne.n	409c74 <__adddf3+0x10c>
  409ca0:	f091 0f00 	teq	r1, #0
  409ca4:	bf04      	itt	eq
  409ca6:	4601      	moveq	r1, r0
  409ca8:	2000      	moveq	r0, #0
  409caa:	fab1 f381 	clz	r3, r1
  409cae:	bf08      	it	eq
  409cb0:	3320      	addeq	r3, #32
  409cb2:	f1a3 030b 	sub.w	r3, r3, #11
  409cb6:	f1b3 0220 	subs.w	r2, r3, #32
  409cba:	da0c      	bge.n	409cd6 <__adddf3+0x16e>
  409cbc:	320c      	adds	r2, #12
  409cbe:	dd08      	ble.n	409cd2 <__adddf3+0x16a>
  409cc0:	f102 0c14 	add.w	ip, r2, #20
  409cc4:	f1c2 020c 	rsb	r2, r2, #12
  409cc8:	fa01 f00c 	lsl.w	r0, r1, ip
  409ccc:	fa21 f102 	lsr.w	r1, r1, r2
  409cd0:	e00c      	b.n	409cec <__adddf3+0x184>
  409cd2:	f102 0214 	add.w	r2, r2, #20
  409cd6:	bfd8      	it	le
  409cd8:	f1c2 0c20 	rsble	ip, r2, #32
  409cdc:	fa01 f102 	lsl.w	r1, r1, r2
  409ce0:	fa20 fc0c 	lsr.w	ip, r0, ip
  409ce4:	bfdc      	itt	le
  409ce6:	ea41 010c 	orrle.w	r1, r1, ip
  409cea:	4090      	lslle	r0, r2
  409cec:	1ae4      	subs	r4, r4, r3
  409cee:	bfa2      	ittt	ge
  409cf0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  409cf4:	4329      	orrge	r1, r5
  409cf6:	bd30      	popge	{r4, r5, pc}
  409cf8:	ea6f 0404 	mvn.w	r4, r4
  409cfc:	3c1f      	subs	r4, #31
  409cfe:	da1c      	bge.n	409d3a <__adddf3+0x1d2>
  409d00:	340c      	adds	r4, #12
  409d02:	dc0e      	bgt.n	409d22 <__adddf3+0x1ba>
  409d04:	f104 0414 	add.w	r4, r4, #20
  409d08:	f1c4 0220 	rsb	r2, r4, #32
  409d0c:	fa20 f004 	lsr.w	r0, r0, r4
  409d10:	fa01 f302 	lsl.w	r3, r1, r2
  409d14:	ea40 0003 	orr.w	r0, r0, r3
  409d18:	fa21 f304 	lsr.w	r3, r1, r4
  409d1c:	ea45 0103 	orr.w	r1, r5, r3
  409d20:	bd30      	pop	{r4, r5, pc}
  409d22:	f1c4 040c 	rsb	r4, r4, #12
  409d26:	f1c4 0220 	rsb	r2, r4, #32
  409d2a:	fa20 f002 	lsr.w	r0, r0, r2
  409d2e:	fa01 f304 	lsl.w	r3, r1, r4
  409d32:	ea40 0003 	orr.w	r0, r0, r3
  409d36:	4629      	mov	r1, r5
  409d38:	bd30      	pop	{r4, r5, pc}
  409d3a:	fa21 f004 	lsr.w	r0, r1, r4
  409d3e:	4629      	mov	r1, r5
  409d40:	bd30      	pop	{r4, r5, pc}
  409d42:	f094 0f00 	teq	r4, #0
  409d46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409d4a:	bf06      	itte	eq
  409d4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  409d50:	3401      	addeq	r4, #1
  409d52:	3d01      	subne	r5, #1
  409d54:	e74e      	b.n	409bf4 <__adddf3+0x8c>
  409d56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409d5a:	bf18      	it	ne
  409d5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  409d60:	d029      	beq.n	409db6 <__adddf3+0x24e>
  409d62:	ea94 0f05 	teq	r4, r5
  409d66:	bf08      	it	eq
  409d68:	ea90 0f02 	teqeq	r0, r2
  409d6c:	d005      	beq.n	409d7a <__adddf3+0x212>
  409d6e:	ea54 0c00 	orrs.w	ip, r4, r0
  409d72:	bf04      	itt	eq
  409d74:	4619      	moveq	r1, r3
  409d76:	4610      	moveq	r0, r2
  409d78:	bd30      	pop	{r4, r5, pc}
  409d7a:	ea91 0f03 	teq	r1, r3
  409d7e:	bf1e      	ittt	ne
  409d80:	2100      	movne	r1, #0
  409d82:	2000      	movne	r0, #0
  409d84:	bd30      	popne	{r4, r5, pc}
  409d86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409d8a:	d105      	bne.n	409d98 <__adddf3+0x230>
  409d8c:	0040      	lsls	r0, r0, #1
  409d8e:	4149      	adcs	r1, r1
  409d90:	bf28      	it	cs
  409d92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409d96:	bd30      	pop	{r4, r5, pc}
  409d98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409d9c:	bf3c      	itt	cc
  409d9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  409da2:	bd30      	popcc	{r4, r5, pc}
  409da4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409da8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409dac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  409db0:	f04f 0000 	mov.w	r0, #0
  409db4:	bd30      	pop	{r4, r5, pc}
  409db6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409dba:	bf1a      	itte	ne
  409dbc:	4619      	movne	r1, r3
  409dbe:	4610      	movne	r0, r2
  409dc0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409dc4:	bf1c      	itt	ne
  409dc6:	460b      	movne	r3, r1
  409dc8:	4602      	movne	r2, r0
  409dca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409dce:	bf06      	itte	eq
  409dd0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409dd4:	ea91 0f03 	teqeq	r1, r3
  409dd8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409ddc:	bd30      	pop	{r4, r5, pc}
  409dde:	bf00      	nop

00409de0 <__aeabi_ui2d>:
  409de0:	f090 0f00 	teq	r0, #0
  409de4:	bf04      	itt	eq
  409de6:	2100      	moveq	r1, #0
  409de8:	4770      	bxeq	lr
  409dea:	b530      	push	{r4, r5, lr}
  409dec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409df0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409df4:	f04f 0500 	mov.w	r5, #0
  409df8:	f04f 0100 	mov.w	r1, #0
  409dfc:	e750      	b.n	409ca0 <__adddf3+0x138>
  409dfe:	bf00      	nop

00409e00 <__aeabi_i2d>:
  409e00:	f090 0f00 	teq	r0, #0
  409e04:	bf04      	itt	eq
  409e06:	2100      	moveq	r1, #0
  409e08:	4770      	bxeq	lr
  409e0a:	b530      	push	{r4, r5, lr}
  409e0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409e10:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409e14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409e18:	bf48      	it	mi
  409e1a:	4240      	negmi	r0, r0
  409e1c:	f04f 0100 	mov.w	r1, #0
  409e20:	e73e      	b.n	409ca0 <__adddf3+0x138>
  409e22:	bf00      	nop

00409e24 <__aeabi_f2d>:
  409e24:	0042      	lsls	r2, r0, #1
  409e26:	ea4f 01e2 	mov.w	r1, r2, asr #3
  409e2a:	ea4f 0131 	mov.w	r1, r1, rrx
  409e2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  409e32:	bf1f      	itttt	ne
  409e34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  409e38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409e3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  409e40:	4770      	bxne	lr
  409e42:	f092 0f00 	teq	r2, #0
  409e46:	bf14      	ite	ne
  409e48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409e4c:	4770      	bxeq	lr
  409e4e:	b530      	push	{r4, r5, lr}
  409e50:	f44f 7460 	mov.w	r4, #896	; 0x380
  409e54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409e5c:	e720      	b.n	409ca0 <__adddf3+0x138>
  409e5e:	bf00      	nop

00409e60 <__aeabi_ul2d>:
  409e60:	ea50 0201 	orrs.w	r2, r0, r1
  409e64:	bf08      	it	eq
  409e66:	4770      	bxeq	lr
  409e68:	b530      	push	{r4, r5, lr}
  409e6a:	f04f 0500 	mov.w	r5, #0
  409e6e:	e00a      	b.n	409e86 <__aeabi_l2d+0x16>

00409e70 <__aeabi_l2d>:
  409e70:	ea50 0201 	orrs.w	r2, r0, r1
  409e74:	bf08      	it	eq
  409e76:	4770      	bxeq	lr
  409e78:	b530      	push	{r4, r5, lr}
  409e7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  409e7e:	d502      	bpl.n	409e86 <__aeabi_l2d+0x16>
  409e80:	4240      	negs	r0, r0
  409e82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409e86:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409e8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409e8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  409e92:	f43f aedc 	beq.w	409c4e <__adddf3+0xe6>
  409e96:	f04f 0203 	mov.w	r2, #3
  409e9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409e9e:	bf18      	it	ne
  409ea0:	3203      	addne	r2, #3
  409ea2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409ea6:	bf18      	it	ne
  409ea8:	3203      	addne	r2, #3
  409eaa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  409eae:	f1c2 0320 	rsb	r3, r2, #32
  409eb2:	fa00 fc03 	lsl.w	ip, r0, r3
  409eb6:	fa20 f002 	lsr.w	r0, r0, r2
  409eba:	fa01 fe03 	lsl.w	lr, r1, r3
  409ebe:	ea40 000e 	orr.w	r0, r0, lr
  409ec2:	fa21 f102 	lsr.w	r1, r1, r2
  409ec6:	4414      	add	r4, r2
  409ec8:	e6c1      	b.n	409c4e <__adddf3+0xe6>
  409eca:	bf00      	nop

00409ecc <__aeabi_dmul>:
  409ecc:	b570      	push	{r4, r5, r6, lr}
  409ece:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409ed2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409ed6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409eda:	bf1d      	ittte	ne
  409edc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409ee0:	ea94 0f0c 	teqne	r4, ip
  409ee4:	ea95 0f0c 	teqne	r5, ip
  409ee8:	f000 f8de 	bleq	40a0a8 <__aeabi_dmul+0x1dc>
  409eec:	442c      	add	r4, r5
  409eee:	ea81 0603 	eor.w	r6, r1, r3
  409ef2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  409ef6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  409efa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  409efe:	bf18      	it	ne
  409f00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409f04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409f0c:	d038      	beq.n	409f80 <__aeabi_dmul+0xb4>
  409f0e:	fba0 ce02 	umull	ip, lr, r0, r2
  409f12:	f04f 0500 	mov.w	r5, #0
  409f16:	fbe1 e502 	umlal	lr, r5, r1, r2
  409f1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  409f1e:	fbe0 e503 	umlal	lr, r5, r0, r3
  409f22:	f04f 0600 	mov.w	r6, #0
  409f26:	fbe1 5603 	umlal	r5, r6, r1, r3
  409f2a:	f09c 0f00 	teq	ip, #0
  409f2e:	bf18      	it	ne
  409f30:	f04e 0e01 	orrne.w	lr, lr, #1
  409f34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  409f38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  409f3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  409f40:	d204      	bcs.n	409f4c <__aeabi_dmul+0x80>
  409f42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409f46:	416d      	adcs	r5, r5
  409f48:	eb46 0606 	adc.w	r6, r6, r6
  409f4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  409f50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409f54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409f58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409f5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  409f60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409f64:	bf88      	it	hi
  409f66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409f6a:	d81e      	bhi.n	409faa <__aeabi_dmul+0xde>
  409f6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  409f70:	bf08      	it	eq
  409f72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409f76:	f150 0000 	adcs.w	r0, r0, #0
  409f7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409f7e:	bd70      	pop	{r4, r5, r6, pc}
  409f80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409f84:	ea46 0101 	orr.w	r1, r6, r1
  409f88:	ea40 0002 	orr.w	r0, r0, r2
  409f8c:	ea81 0103 	eor.w	r1, r1, r3
  409f90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409f94:	bfc2      	ittt	gt
  409f96:	ebd4 050c 	rsbsgt	r5, r4, ip
  409f9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409f9e:	bd70      	popgt	{r4, r5, r6, pc}
  409fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409fa4:	f04f 0e00 	mov.w	lr, #0
  409fa8:	3c01      	subs	r4, #1
  409faa:	f300 80ab 	bgt.w	40a104 <__aeabi_dmul+0x238>
  409fae:	f114 0f36 	cmn.w	r4, #54	; 0x36
  409fb2:	bfde      	ittt	le
  409fb4:	2000      	movle	r0, #0
  409fb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409fba:	bd70      	pople	{r4, r5, r6, pc}
  409fbc:	f1c4 0400 	rsb	r4, r4, #0
  409fc0:	3c20      	subs	r4, #32
  409fc2:	da35      	bge.n	40a030 <__aeabi_dmul+0x164>
  409fc4:	340c      	adds	r4, #12
  409fc6:	dc1b      	bgt.n	40a000 <__aeabi_dmul+0x134>
  409fc8:	f104 0414 	add.w	r4, r4, #20
  409fcc:	f1c4 0520 	rsb	r5, r4, #32
  409fd0:	fa00 f305 	lsl.w	r3, r0, r5
  409fd4:	fa20 f004 	lsr.w	r0, r0, r4
  409fd8:	fa01 f205 	lsl.w	r2, r1, r5
  409fdc:	ea40 0002 	orr.w	r0, r0, r2
  409fe0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  409fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409fe8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  409fec:	fa21 f604 	lsr.w	r6, r1, r4
  409ff0:	eb42 0106 	adc.w	r1, r2, r6
  409ff4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409ff8:	bf08      	it	eq
  409ffa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409ffe:	bd70      	pop	{r4, r5, r6, pc}
  40a000:	f1c4 040c 	rsb	r4, r4, #12
  40a004:	f1c4 0520 	rsb	r5, r4, #32
  40a008:	fa00 f304 	lsl.w	r3, r0, r4
  40a00c:	fa20 f005 	lsr.w	r0, r0, r5
  40a010:	fa01 f204 	lsl.w	r2, r1, r4
  40a014:	ea40 0002 	orr.w	r0, r0, r2
  40a018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a01c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a020:	f141 0100 	adc.w	r1, r1, #0
  40a024:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a028:	bf08      	it	eq
  40a02a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a02e:	bd70      	pop	{r4, r5, r6, pc}
  40a030:	f1c4 0520 	rsb	r5, r4, #32
  40a034:	fa00 f205 	lsl.w	r2, r0, r5
  40a038:	ea4e 0e02 	orr.w	lr, lr, r2
  40a03c:	fa20 f304 	lsr.w	r3, r0, r4
  40a040:	fa01 f205 	lsl.w	r2, r1, r5
  40a044:	ea43 0302 	orr.w	r3, r3, r2
  40a048:	fa21 f004 	lsr.w	r0, r1, r4
  40a04c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a050:	fa21 f204 	lsr.w	r2, r1, r4
  40a054:	ea20 0002 	bic.w	r0, r0, r2
  40a058:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a05c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a060:	bf08      	it	eq
  40a062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a066:	bd70      	pop	{r4, r5, r6, pc}
  40a068:	f094 0f00 	teq	r4, #0
  40a06c:	d10f      	bne.n	40a08e <__aeabi_dmul+0x1c2>
  40a06e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a072:	0040      	lsls	r0, r0, #1
  40a074:	eb41 0101 	adc.w	r1, r1, r1
  40a078:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a07c:	bf08      	it	eq
  40a07e:	3c01      	subeq	r4, #1
  40a080:	d0f7      	beq.n	40a072 <__aeabi_dmul+0x1a6>
  40a082:	ea41 0106 	orr.w	r1, r1, r6
  40a086:	f095 0f00 	teq	r5, #0
  40a08a:	bf18      	it	ne
  40a08c:	4770      	bxne	lr
  40a08e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a092:	0052      	lsls	r2, r2, #1
  40a094:	eb43 0303 	adc.w	r3, r3, r3
  40a098:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a09c:	bf08      	it	eq
  40a09e:	3d01      	subeq	r5, #1
  40a0a0:	d0f7      	beq.n	40a092 <__aeabi_dmul+0x1c6>
  40a0a2:	ea43 0306 	orr.w	r3, r3, r6
  40a0a6:	4770      	bx	lr
  40a0a8:	ea94 0f0c 	teq	r4, ip
  40a0ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a0b0:	bf18      	it	ne
  40a0b2:	ea95 0f0c 	teqne	r5, ip
  40a0b6:	d00c      	beq.n	40a0d2 <__aeabi_dmul+0x206>
  40a0b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a0bc:	bf18      	it	ne
  40a0be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a0c2:	d1d1      	bne.n	40a068 <__aeabi_dmul+0x19c>
  40a0c4:	ea81 0103 	eor.w	r1, r1, r3
  40a0c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a0cc:	f04f 0000 	mov.w	r0, #0
  40a0d0:	bd70      	pop	{r4, r5, r6, pc}
  40a0d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a0d6:	bf06      	itte	eq
  40a0d8:	4610      	moveq	r0, r2
  40a0da:	4619      	moveq	r1, r3
  40a0dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a0e0:	d019      	beq.n	40a116 <__aeabi_dmul+0x24a>
  40a0e2:	ea94 0f0c 	teq	r4, ip
  40a0e6:	d102      	bne.n	40a0ee <__aeabi_dmul+0x222>
  40a0e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a0ec:	d113      	bne.n	40a116 <__aeabi_dmul+0x24a>
  40a0ee:	ea95 0f0c 	teq	r5, ip
  40a0f2:	d105      	bne.n	40a100 <__aeabi_dmul+0x234>
  40a0f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a0f8:	bf1c      	itt	ne
  40a0fa:	4610      	movne	r0, r2
  40a0fc:	4619      	movne	r1, r3
  40a0fe:	d10a      	bne.n	40a116 <__aeabi_dmul+0x24a>
  40a100:	ea81 0103 	eor.w	r1, r1, r3
  40a104:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a108:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a10c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a110:	f04f 0000 	mov.w	r0, #0
  40a114:	bd70      	pop	{r4, r5, r6, pc}
  40a116:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a11a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a11e:	bd70      	pop	{r4, r5, r6, pc}

0040a120 <__aeabi_ddiv>:
  40a120:	b570      	push	{r4, r5, r6, lr}
  40a122:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a126:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a12a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a12e:	bf1d      	ittte	ne
  40a130:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a134:	ea94 0f0c 	teqne	r4, ip
  40a138:	ea95 0f0c 	teqne	r5, ip
  40a13c:	f000 f8a7 	bleq	40a28e <__aeabi_ddiv+0x16e>
  40a140:	eba4 0405 	sub.w	r4, r4, r5
  40a144:	ea81 0e03 	eor.w	lr, r1, r3
  40a148:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a14c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a150:	f000 8088 	beq.w	40a264 <__aeabi_ddiv+0x144>
  40a154:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a158:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a15c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a160:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a164:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a168:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a16c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a170:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a174:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a178:	429d      	cmp	r5, r3
  40a17a:	bf08      	it	eq
  40a17c:	4296      	cmpeq	r6, r2
  40a17e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a182:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a186:	d202      	bcs.n	40a18e <__aeabi_ddiv+0x6e>
  40a188:	085b      	lsrs	r3, r3, #1
  40a18a:	ea4f 0232 	mov.w	r2, r2, rrx
  40a18e:	1ab6      	subs	r6, r6, r2
  40a190:	eb65 0503 	sbc.w	r5, r5, r3
  40a194:	085b      	lsrs	r3, r3, #1
  40a196:	ea4f 0232 	mov.w	r2, r2, rrx
  40a19a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a19e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a1a2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a1a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a1aa:	bf22      	ittt	cs
  40a1ac:	1ab6      	subcs	r6, r6, r2
  40a1ae:	4675      	movcs	r5, lr
  40a1b0:	ea40 000c 	orrcs.w	r0, r0, ip
  40a1b4:	085b      	lsrs	r3, r3, #1
  40a1b6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a1ba:	ebb6 0e02 	subs.w	lr, r6, r2
  40a1be:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a1c2:	bf22      	ittt	cs
  40a1c4:	1ab6      	subcs	r6, r6, r2
  40a1c6:	4675      	movcs	r5, lr
  40a1c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a1cc:	085b      	lsrs	r3, r3, #1
  40a1ce:	ea4f 0232 	mov.w	r2, r2, rrx
  40a1d2:	ebb6 0e02 	subs.w	lr, r6, r2
  40a1d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a1da:	bf22      	ittt	cs
  40a1dc:	1ab6      	subcs	r6, r6, r2
  40a1de:	4675      	movcs	r5, lr
  40a1e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a1e4:	085b      	lsrs	r3, r3, #1
  40a1e6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a1ea:	ebb6 0e02 	subs.w	lr, r6, r2
  40a1ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a1f2:	bf22      	ittt	cs
  40a1f4:	1ab6      	subcs	r6, r6, r2
  40a1f6:	4675      	movcs	r5, lr
  40a1f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a1fc:	ea55 0e06 	orrs.w	lr, r5, r6
  40a200:	d018      	beq.n	40a234 <__aeabi_ddiv+0x114>
  40a202:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a206:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a20a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a20e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a212:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a216:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a21a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a21e:	d1c0      	bne.n	40a1a2 <__aeabi_ddiv+0x82>
  40a220:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a224:	d10b      	bne.n	40a23e <__aeabi_ddiv+0x11e>
  40a226:	ea41 0100 	orr.w	r1, r1, r0
  40a22a:	f04f 0000 	mov.w	r0, #0
  40a22e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a232:	e7b6      	b.n	40a1a2 <__aeabi_ddiv+0x82>
  40a234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a238:	bf04      	itt	eq
  40a23a:	4301      	orreq	r1, r0
  40a23c:	2000      	moveq	r0, #0
  40a23e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a242:	bf88      	it	hi
  40a244:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a248:	f63f aeaf 	bhi.w	409faa <__aeabi_dmul+0xde>
  40a24c:	ebb5 0c03 	subs.w	ip, r5, r3
  40a250:	bf04      	itt	eq
  40a252:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a256:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a25a:	f150 0000 	adcs.w	r0, r0, #0
  40a25e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a262:	bd70      	pop	{r4, r5, r6, pc}
  40a264:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a268:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a26c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a270:	bfc2      	ittt	gt
  40a272:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a276:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a27a:	bd70      	popgt	{r4, r5, r6, pc}
  40a27c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a280:	f04f 0e00 	mov.w	lr, #0
  40a284:	3c01      	subs	r4, #1
  40a286:	e690      	b.n	409faa <__aeabi_dmul+0xde>
  40a288:	ea45 0e06 	orr.w	lr, r5, r6
  40a28c:	e68d      	b.n	409faa <__aeabi_dmul+0xde>
  40a28e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a292:	ea94 0f0c 	teq	r4, ip
  40a296:	bf08      	it	eq
  40a298:	ea95 0f0c 	teqeq	r5, ip
  40a29c:	f43f af3b 	beq.w	40a116 <__aeabi_dmul+0x24a>
  40a2a0:	ea94 0f0c 	teq	r4, ip
  40a2a4:	d10a      	bne.n	40a2bc <__aeabi_ddiv+0x19c>
  40a2a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a2aa:	f47f af34 	bne.w	40a116 <__aeabi_dmul+0x24a>
  40a2ae:	ea95 0f0c 	teq	r5, ip
  40a2b2:	f47f af25 	bne.w	40a100 <__aeabi_dmul+0x234>
  40a2b6:	4610      	mov	r0, r2
  40a2b8:	4619      	mov	r1, r3
  40a2ba:	e72c      	b.n	40a116 <__aeabi_dmul+0x24a>
  40a2bc:	ea95 0f0c 	teq	r5, ip
  40a2c0:	d106      	bne.n	40a2d0 <__aeabi_ddiv+0x1b0>
  40a2c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a2c6:	f43f aefd 	beq.w	40a0c4 <__aeabi_dmul+0x1f8>
  40a2ca:	4610      	mov	r0, r2
  40a2cc:	4619      	mov	r1, r3
  40a2ce:	e722      	b.n	40a116 <__aeabi_dmul+0x24a>
  40a2d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a2d4:	bf18      	it	ne
  40a2d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a2da:	f47f aec5 	bne.w	40a068 <__aeabi_dmul+0x19c>
  40a2de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a2e2:	f47f af0d 	bne.w	40a100 <__aeabi_dmul+0x234>
  40a2e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a2ea:	f47f aeeb 	bne.w	40a0c4 <__aeabi_dmul+0x1f8>
  40a2ee:	e712      	b.n	40a116 <__aeabi_dmul+0x24a>

0040a2f0 <__aeabi_d2f>:
  40a2f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a2f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40a2f8:	bf24      	itt	cs
  40a2fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40a2fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40a302:	d90d      	bls.n	40a320 <__aeabi_d2f+0x30>
  40a304:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40a308:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40a30c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40a310:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40a314:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40a318:	bf08      	it	eq
  40a31a:	f020 0001 	biceq.w	r0, r0, #1
  40a31e:	4770      	bx	lr
  40a320:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40a324:	d121      	bne.n	40a36a <__aeabi_d2f+0x7a>
  40a326:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40a32a:	bfbc      	itt	lt
  40a32c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40a330:	4770      	bxlt	lr
  40a332:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a336:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40a33a:	f1c2 0218 	rsb	r2, r2, #24
  40a33e:	f1c2 0c20 	rsb	ip, r2, #32
  40a342:	fa10 f30c 	lsls.w	r3, r0, ip
  40a346:	fa20 f002 	lsr.w	r0, r0, r2
  40a34a:	bf18      	it	ne
  40a34c:	f040 0001 	orrne.w	r0, r0, #1
  40a350:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a354:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40a358:	fa03 fc0c 	lsl.w	ip, r3, ip
  40a35c:	ea40 000c 	orr.w	r0, r0, ip
  40a360:	fa23 f302 	lsr.w	r3, r3, r2
  40a364:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40a368:	e7cc      	b.n	40a304 <__aeabi_d2f+0x14>
  40a36a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40a36e:	d107      	bne.n	40a380 <__aeabi_d2f+0x90>
  40a370:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40a374:	bf1e      	ittt	ne
  40a376:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40a37a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40a37e:	4770      	bxne	lr
  40a380:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40a384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40a388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40a38c:	4770      	bx	lr
  40a38e:	bf00      	nop

0040a390 <__aeabi_f2uiz>:
  40a390:	0042      	lsls	r2, r0, #1
  40a392:	d20e      	bcs.n	40a3b2 <__aeabi_f2uiz+0x22>
  40a394:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40a398:	d30b      	bcc.n	40a3b2 <__aeabi_f2uiz+0x22>
  40a39a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40a39e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40a3a2:	d409      	bmi.n	40a3b8 <__aeabi_f2uiz+0x28>
  40a3a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40a3a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a3ac:	fa23 f002 	lsr.w	r0, r3, r2
  40a3b0:	4770      	bx	lr
  40a3b2:	f04f 0000 	mov.w	r0, #0
  40a3b6:	4770      	bx	lr
  40a3b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40a3bc:	d101      	bne.n	40a3c2 <__aeabi_f2uiz+0x32>
  40a3be:	0242      	lsls	r2, r0, #9
  40a3c0:	d102      	bne.n	40a3c8 <__aeabi_f2uiz+0x38>
  40a3c2:	f04f 30ff 	mov.w	r0, #4294967295
  40a3c6:	4770      	bx	lr
  40a3c8:	f04f 0000 	mov.w	r0, #0
  40a3cc:	4770      	bx	lr
  40a3ce:	bf00      	nop

0040a3d0 <__libc_init_array>:
  40a3d0:	b570      	push	{r4, r5, r6, lr}
  40a3d2:	4e0f      	ldr	r6, [pc, #60]	; (40a410 <__libc_init_array+0x40>)
  40a3d4:	4d0f      	ldr	r5, [pc, #60]	; (40a414 <__libc_init_array+0x44>)
  40a3d6:	1b76      	subs	r6, r6, r5
  40a3d8:	10b6      	asrs	r6, r6, #2
  40a3da:	bf18      	it	ne
  40a3dc:	2400      	movne	r4, #0
  40a3de:	d005      	beq.n	40a3ec <__libc_init_array+0x1c>
  40a3e0:	3401      	adds	r4, #1
  40a3e2:	f855 3b04 	ldr.w	r3, [r5], #4
  40a3e6:	4798      	blx	r3
  40a3e8:	42a6      	cmp	r6, r4
  40a3ea:	d1f9      	bne.n	40a3e0 <__libc_init_array+0x10>
  40a3ec:	4e0a      	ldr	r6, [pc, #40]	; (40a418 <__libc_init_array+0x48>)
  40a3ee:	4d0b      	ldr	r5, [pc, #44]	; (40a41c <__libc_init_array+0x4c>)
  40a3f0:	1b76      	subs	r6, r6, r5
  40a3f2:	f001 fc7f 	bl	40bcf4 <_init>
  40a3f6:	10b6      	asrs	r6, r6, #2
  40a3f8:	bf18      	it	ne
  40a3fa:	2400      	movne	r4, #0
  40a3fc:	d006      	beq.n	40a40c <__libc_init_array+0x3c>
  40a3fe:	3401      	adds	r4, #1
  40a400:	f855 3b04 	ldr.w	r3, [r5], #4
  40a404:	4798      	blx	r3
  40a406:	42a6      	cmp	r6, r4
  40a408:	d1f9      	bne.n	40a3fe <__libc_init_array+0x2e>
  40a40a:	bd70      	pop	{r4, r5, r6, pc}
  40a40c:	bd70      	pop	{r4, r5, r6, pc}
  40a40e:	bf00      	nop
  40a410:	0040bd00 	.word	0x0040bd00
  40a414:	0040bd00 	.word	0x0040bd00
  40a418:	0040bd08 	.word	0x0040bd08
  40a41c:	0040bd00 	.word	0x0040bd00

0040a420 <memcpy>:
  40a420:	4684      	mov	ip, r0
  40a422:	ea41 0300 	orr.w	r3, r1, r0
  40a426:	f013 0303 	ands.w	r3, r3, #3
  40a42a:	d16d      	bne.n	40a508 <memcpy+0xe8>
  40a42c:	3a40      	subs	r2, #64	; 0x40
  40a42e:	d341      	bcc.n	40a4b4 <memcpy+0x94>
  40a430:	f851 3b04 	ldr.w	r3, [r1], #4
  40a434:	f840 3b04 	str.w	r3, [r0], #4
  40a438:	f851 3b04 	ldr.w	r3, [r1], #4
  40a43c:	f840 3b04 	str.w	r3, [r0], #4
  40a440:	f851 3b04 	ldr.w	r3, [r1], #4
  40a444:	f840 3b04 	str.w	r3, [r0], #4
  40a448:	f851 3b04 	ldr.w	r3, [r1], #4
  40a44c:	f840 3b04 	str.w	r3, [r0], #4
  40a450:	f851 3b04 	ldr.w	r3, [r1], #4
  40a454:	f840 3b04 	str.w	r3, [r0], #4
  40a458:	f851 3b04 	ldr.w	r3, [r1], #4
  40a45c:	f840 3b04 	str.w	r3, [r0], #4
  40a460:	f851 3b04 	ldr.w	r3, [r1], #4
  40a464:	f840 3b04 	str.w	r3, [r0], #4
  40a468:	f851 3b04 	ldr.w	r3, [r1], #4
  40a46c:	f840 3b04 	str.w	r3, [r0], #4
  40a470:	f851 3b04 	ldr.w	r3, [r1], #4
  40a474:	f840 3b04 	str.w	r3, [r0], #4
  40a478:	f851 3b04 	ldr.w	r3, [r1], #4
  40a47c:	f840 3b04 	str.w	r3, [r0], #4
  40a480:	f851 3b04 	ldr.w	r3, [r1], #4
  40a484:	f840 3b04 	str.w	r3, [r0], #4
  40a488:	f851 3b04 	ldr.w	r3, [r1], #4
  40a48c:	f840 3b04 	str.w	r3, [r0], #4
  40a490:	f851 3b04 	ldr.w	r3, [r1], #4
  40a494:	f840 3b04 	str.w	r3, [r0], #4
  40a498:	f851 3b04 	ldr.w	r3, [r1], #4
  40a49c:	f840 3b04 	str.w	r3, [r0], #4
  40a4a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4a4:	f840 3b04 	str.w	r3, [r0], #4
  40a4a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4ac:	f840 3b04 	str.w	r3, [r0], #4
  40a4b0:	3a40      	subs	r2, #64	; 0x40
  40a4b2:	d2bd      	bcs.n	40a430 <memcpy+0x10>
  40a4b4:	3230      	adds	r2, #48	; 0x30
  40a4b6:	d311      	bcc.n	40a4dc <memcpy+0xbc>
  40a4b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4bc:	f840 3b04 	str.w	r3, [r0], #4
  40a4c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4c4:	f840 3b04 	str.w	r3, [r0], #4
  40a4c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4cc:	f840 3b04 	str.w	r3, [r0], #4
  40a4d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4d4:	f840 3b04 	str.w	r3, [r0], #4
  40a4d8:	3a10      	subs	r2, #16
  40a4da:	d2ed      	bcs.n	40a4b8 <memcpy+0x98>
  40a4dc:	320c      	adds	r2, #12
  40a4de:	d305      	bcc.n	40a4ec <memcpy+0xcc>
  40a4e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a4e4:	f840 3b04 	str.w	r3, [r0], #4
  40a4e8:	3a04      	subs	r2, #4
  40a4ea:	d2f9      	bcs.n	40a4e0 <memcpy+0xc0>
  40a4ec:	3204      	adds	r2, #4
  40a4ee:	d008      	beq.n	40a502 <memcpy+0xe2>
  40a4f0:	07d2      	lsls	r2, r2, #31
  40a4f2:	bf1c      	itt	ne
  40a4f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a4f8:	f800 3b01 	strbne.w	r3, [r0], #1
  40a4fc:	d301      	bcc.n	40a502 <memcpy+0xe2>
  40a4fe:	880b      	ldrh	r3, [r1, #0]
  40a500:	8003      	strh	r3, [r0, #0]
  40a502:	4660      	mov	r0, ip
  40a504:	4770      	bx	lr
  40a506:	bf00      	nop
  40a508:	2a08      	cmp	r2, #8
  40a50a:	d313      	bcc.n	40a534 <memcpy+0x114>
  40a50c:	078b      	lsls	r3, r1, #30
  40a50e:	d08d      	beq.n	40a42c <memcpy+0xc>
  40a510:	f010 0303 	ands.w	r3, r0, #3
  40a514:	d08a      	beq.n	40a42c <memcpy+0xc>
  40a516:	f1c3 0304 	rsb	r3, r3, #4
  40a51a:	1ad2      	subs	r2, r2, r3
  40a51c:	07db      	lsls	r3, r3, #31
  40a51e:	bf1c      	itt	ne
  40a520:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a524:	f800 3b01 	strbne.w	r3, [r0], #1
  40a528:	d380      	bcc.n	40a42c <memcpy+0xc>
  40a52a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40a52e:	f820 3b02 	strh.w	r3, [r0], #2
  40a532:	e77b      	b.n	40a42c <memcpy+0xc>
  40a534:	3a04      	subs	r2, #4
  40a536:	d3d9      	bcc.n	40a4ec <memcpy+0xcc>
  40a538:	3a01      	subs	r2, #1
  40a53a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40a53e:	f800 3b01 	strb.w	r3, [r0], #1
  40a542:	d2f9      	bcs.n	40a538 <memcpy+0x118>
  40a544:	780b      	ldrb	r3, [r1, #0]
  40a546:	7003      	strb	r3, [r0, #0]
  40a548:	784b      	ldrb	r3, [r1, #1]
  40a54a:	7043      	strb	r3, [r0, #1]
  40a54c:	788b      	ldrb	r3, [r1, #2]
  40a54e:	7083      	strb	r3, [r0, #2]
  40a550:	4660      	mov	r0, ip
  40a552:	4770      	bx	lr

0040a554 <memset>:
  40a554:	b470      	push	{r4, r5, r6}
  40a556:	0786      	lsls	r6, r0, #30
  40a558:	d046      	beq.n	40a5e8 <memset+0x94>
  40a55a:	1e54      	subs	r4, r2, #1
  40a55c:	2a00      	cmp	r2, #0
  40a55e:	d041      	beq.n	40a5e4 <memset+0x90>
  40a560:	b2ca      	uxtb	r2, r1
  40a562:	4603      	mov	r3, r0
  40a564:	e002      	b.n	40a56c <memset+0x18>
  40a566:	f114 34ff 	adds.w	r4, r4, #4294967295
  40a56a:	d33b      	bcc.n	40a5e4 <memset+0x90>
  40a56c:	f803 2b01 	strb.w	r2, [r3], #1
  40a570:	079d      	lsls	r5, r3, #30
  40a572:	d1f8      	bne.n	40a566 <memset+0x12>
  40a574:	2c03      	cmp	r4, #3
  40a576:	d92e      	bls.n	40a5d6 <memset+0x82>
  40a578:	b2cd      	uxtb	r5, r1
  40a57a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40a57e:	2c0f      	cmp	r4, #15
  40a580:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40a584:	d919      	bls.n	40a5ba <memset+0x66>
  40a586:	f103 0210 	add.w	r2, r3, #16
  40a58a:	4626      	mov	r6, r4
  40a58c:	3e10      	subs	r6, #16
  40a58e:	2e0f      	cmp	r6, #15
  40a590:	f842 5c10 	str.w	r5, [r2, #-16]
  40a594:	f842 5c0c 	str.w	r5, [r2, #-12]
  40a598:	f842 5c08 	str.w	r5, [r2, #-8]
  40a59c:	f842 5c04 	str.w	r5, [r2, #-4]
  40a5a0:	f102 0210 	add.w	r2, r2, #16
  40a5a4:	d8f2      	bhi.n	40a58c <memset+0x38>
  40a5a6:	f1a4 0210 	sub.w	r2, r4, #16
  40a5aa:	f022 020f 	bic.w	r2, r2, #15
  40a5ae:	f004 040f 	and.w	r4, r4, #15
  40a5b2:	3210      	adds	r2, #16
  40a5b4:	2c03      	cmp	r4, #3
  40a5b6:	4413      	add	r3, r2
  40a5b8:	d90d      	bls.n	40a5d6 <memset+0x82>
  40a5ba:	461e      	mov	r6, r3
  40a5bc:	4622      	mov	r2, r4
  40a5be:	3a04      	subs	r2, #4
  40a5c0:	2a03      	cmp	r2, #3
  40a5c2:	f846 5b04 	str.w	r5, [r6], #4
  40a5c6:	d8fa      	bhi.n	40a5be <memset+0x6a>
  40a5c8:	1f22      	subs	r2, r4, #4
  40a5ca:	f022 0203 	bic.w	r2, r2, #3
  40a5ce:	3204      	adds	r2, #4
  40a5d0:	4413      	add	r3, r2
  40a5d2:	f004 0403 	and.w	r4, r4, #3
  40a5d6:	b12c      	cbz	r4, 40a5e4 <memset+0x90>
  40a5d8:	b2c9      	uxtb	r1, r1
  40a5da:	441c      	add	r4, r3
  40a5dc:	f803 1b01 	strb.w	r1, [r3], #1
  40a5e0:	429c      	cmp	r4, r3
  40a5e2:	d1fb      	bne.n	40a5dc <memset+0x88>
  40a5e4:	bc70      	pop	{r4, r5, r6}
  40a5e6:	4770      	bx	lr
  40a5e8:	4614      	mov	r4, r2
  40a5ea:	4603      	mov	r3, r0
  40a5ec:	e7c2      	b.n	40a574 <memset+0x20>
  40a5ee:	bf00      	nop

0040a5f0 <stpcpy>:
  40a5f0:	ea41 0300 	orr.w	r3, r1, r0
  40a5f4:	079b      	lsls	r3, r3, #30
  40a5f6:	d008      	beq.n	40a60a <stpcpy+0x1a>
  40a5f8:	4603      	mov	r3, r0
  40a5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
  40a5fe:	4618      	mov	r0, r3
  40a600:	f803 2b01 	strb.w	r2, [r3], #1
  40a604:	2a00      	cmp	r2, #0
  40a606:	d1f8      	bne.n	40a5fa <stpcpy+0xa>
  40a608:	4770      	bx	lr
  40a60a:	680b      	ldr	r3, [r1, #0]
  40a60c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40a610:	ea22 0203 	bic.w	r2, r2, r3
  40a614:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40a618:	d1ee      	bne.n	40a5f8 <stpcpy+0x8>
  40a61a:	b410      	push	{r4}
  40a61c:	1d0c      	adds	r4, r1, #4
  40a61e:	f840 3b04 	str.w	r3, [r0], #4
  40a622:	4621      	mov	r1, r4
  40a624:	f854 3b04 	ldr.w	r3, [r4], #4
  40a628:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40a62c:	ea22 0203 	bic.w	r2, r2, r3
  40a630:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40a634:	d0f3      	beq.n	40a61e <stpcpy+0x2e>
  40a636:	4603      	mov	r3, r0
  40a638:	f811 2b01 	ldrb.w	r2, [r1], #1
  40a63c:	4618      	mov	r0, r3
  40a63e:	f803 2b01 	strb.w	r2, [r3], #1
  40a642:	2a00      	cmp	r2, #0
  40a644:	d1f8      	bne.n	40a638 <stpcpy+0x48>
  40a646:	bc10      	pop	{r4}
  40a648:	4770      	bx	lr
  40a64a:	bf00      	nop

0040a64c <strcat>:
  40a64c:	0783      	lsls	r3, r0, #30
  40a64e:	b510      	push	{r4, lr}
  40a650:	4604      	mov	r4, r0
  40a652:	d110      	bne.n	40a676 <strcat+0x2a>
  40a654:	6802      	ldr	r2, [r0, #0]
  40a656:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40a65a:	ea23 0302 	bic.w	r3, r3, r2
  40a65e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40a662:	d108      	bne.n	40a676 <strcat+0x2a>
  40a664:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40a668:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40a66c:	ea23 0302 	bic.w	r3, r3, r2
  40a670:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40a674:	d0f6      	beq.n	40a664 <strcat+0x18>
  40a676:	7803      	ldrb	r3, [r0, #0]
  40a678:	b11b      	cbz	r3, 40a682 <strcat+0x36>
  40a67a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40a67e:	2b00      	cmp	r3, #0
  40a680:	d1fb      	bne.n	40a67a <strcat+0x2e>
  40a682:	f000 f97b 	bl	40a97c <strcpy>
  40a686:	4620      	mov	r0, r4
  40a688:	bd10      	pop	{r4, pc}
  40a68a:	bf00      	nop
	...
  40a6a0:	eba2 0003 	sub.w	r0, r2, r3
  40a6a4:	4770      	bx	lr
  40a6a6:	bf00      	nop

0040a6a8 <strcmp>:
  40a6a8:	7802      	ldrb	r2, [r0, #0]
  40a6aa:	780b      	ldrb	r3, [r1, #0]
  40a6ac:	2a01      	cmp	r2, #1
  40a6ae:	bf28      	it	cs
  40a6b0:	429a      	cmpcs	r2, r3
  40a6b2:	d1f5      	bne.n	40a6a0 <strcat+0x54>
  40a6b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40a6b8:	ea40 0401 	orr.w	r4, r0, r1
  40a6bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40a6c0:	f06f 0c00 	mvn.w	ip, #0
  40a6c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40a6c8:	b312      	cbz	r2, 40a710 <strcmp+0x68>
  40a6ca:	ea80 0401 	eor.w	r4, r0, r1
  40a6ce:	f014 0f07 	tst.w	r4, #7
  40a6d2:	d16a      	bne.n	40a7aa <strcmp+0x102>
  40a6d4:	f000 0407 	and.w	r4, r0, #7
  40a6d8:	f020 0007 	bic.w	r0, r0, #7
  40a6dc:	f004 0503 	and.w	r5, r4, #3
  40a6e0:	f021 0107 	bic.w	r1, r1, #7
  40a6e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40a6e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40a6ec:	f014 0f04 	tst.w	r4, #4
  40a6f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40a6f4:	fa0c f405 	lsl.w	r4, ip, r5
  40a6f8:	ea62 0204 	orn	r2, r2, r4
  40a6fc:	ea66 0604 	orn	r6, r6, r4
  40a700:	d00a      	beq.n	40a718 <strcmp+0x70>
  40a702:	ea63 0304 	orn	r3, r3, r4
  40a706:	4662      	mov	r2, ip
  40a708:	ea67 0704 	orn	r7, r7, r4
  40a70c:	4666      	mov	r6, ip
  40a70e:	e003      	b.n	40a718 <strcmp+0x70>
  40a710:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40a714:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40a718:	fa82 f54c 	uadd8	r5, r2, ip
  40a71c:	ea82 0406 	eor.w	r4, r2, r6
  40a720:	faa4 f48c 	sel	r4, r4, ip
  40a724:	bb6c      	cbnz	r4, 40a782 <strcmp+0xda>
  40a726:	fa83 f54c 	uadd8	r5, r3, ip
  40a72a:	ea83 0507 	eor.w	r5, r3, r7
  40a72e:	faa5 f58c 	sel	r5, r5, ip
  40a732:	b995      	cbnz	r5, 40a75a <strcmp+0xb2>
  40a734:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40a738:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40a73c:	fa82 f54c 	uadd8	r5, r2, ip
  40a740:	ea82 0406 	eor.w	r4, r2, r6
  40a744:	faa4 f48c 	sel	r4, r4, ip
  40a748:	fa83 f54c 	uadd8	r5, r3, ip
  40a74c:	ea83 0507 	eor.w	r5, r3, r7
  40a750:	faa5 f58c 	sel	r5, r5, ip
  40a754:	4325      	orrs	r5, r4
  40a756:	d0db      	beq.n	40a710 <strcmp+0x68>
  40a758:	b99c      	cbnz	r4, 40a782 <strcmp+0xda>
  40a75a:	ba2d      	rev	r5, r5
  40a75c:	fab5 f485 	clz	r4, r5
  40a760:	f024 0407 	bic.w	r4, r4, #7
  40a764:	fa27 f104 	lsr.w	r1, r7, r4
  40a768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40a76c:	fa23 f304 	lsr.w	r3, r3, r4
  40a770:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40a774:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a778:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40a77c:	eba0 0001 	sub.w	r0, r0, r1
  40a780:	4770      	bx	lr
  40a782:	ba24      	rev	r4, r4
  40a784:	fab4 f484 	clz	r4, r4
  40a788:	f024 0407 	bic.w	r4, r4, #7
  40a78c:	fa26 f104 	lsr.w	r1, r6, r4
  40a790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40a794:	fa22 f204 	lsr.w	r2, r2, r4
  40a798:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40a79c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a7a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40a7a4:	eba0 0001 	sub.w	r0, r0, r1
  40a7a8:	4770      	bx	lr
  40a7aa:	f014 0f03 	tst.w	r4, #3
  40a7ae:	d13c      	bne.n	40a82a <strcmp+0x182>
  40a7b0:	f010 0403 	ands.w	r4, r0, #3
  40a7b4:	d128      	bne.n	40a808 <strcmp+0x160>
  40a7b6:	f850 2b08 	ldr.w	r2, [r0], #8
  40a7ba:	f851 3b08 	ldr.w	r3, [r1], #8
  40a7be:	fa82 f54c 	uadd8	r5, r2, ip
  40a7c2:	ea82 0503 	eor.w	r5, r2, r3
  40a7c6:	faa5 f58c 	sel	r5, r5, ip
  40a7ca:	b95d      	cbnz	r5, 40a7e4 <strcmp+0x13c>
  40a7cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40a7d4:	fa82 f54c 	uadd8	r5, r2, ip
  40a7d8:	ea82 0503 	eor.w	r5, r2, r3
  40a7dc:	faa5 f58c 	sel	r5, r5, ip
  40a7e0:	2d00      	cmp	r5, #0
  40a7e2:	d0e8      	beq.n	40a7b6 <strcmp+0x10e>
  40a7e4:	ba2d      	rev	r5, r5
  40a7e6:	fab5 f485 	clz	r4, r5
  40a7ea:	f024 0407 	bic.w	r4, r4, #7
  40a7ee:	fa23 f104 	lsr.w	r1, r3, r4
  40a7f2:	fa22 f204 	lsr.w	r2, r2, r4
  40a7f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40a7fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a7fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40a802:	eba0 0001 	sub.w	r0, r0, r1
  40a806:	4770      	bx	lr
  40a808:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40a80c:	f020 0003 	bic.w	r0, r0, #3
  40a810:	f850 2b08 	ldr.w	r2, [r0], #8
  40a814:	f021 0103 	bic.w	r1, r1, #3
  40a818:	f851 3b08 	ldr.w	r3, [r1], #8
  40a81c:	fa0c f404 	lsl.w	r4, ip, r4
  40a820:	ea62 0204 	orn	r2, r2, r4
  40a824:	ea63 0304 	orn	r3, r3, r4
  40a828:	e7c9      	b.n	40a7be <strcmp+0x116>
  40a82a:	f010 0403 	ands.w	r4, r0, #3
  40a82e:	d01a      	beq.n	40a866 <strcmp+0x1be>
  40a830:	eba1 0104 	sub.w	r1, r1, r4
  40a834:	f020 0003 	bic.w	r0, r0, #3
  40a838:	07e4      	lsls	r4, r4, #31
  40a83a:	f850 2b04 	ldr.w	r2, [r0], #4
  40a83e:	d006      	beq.n	40a84e <strcmp+0x1a6>
  40a840:	d20f      	bcs.n	40a862 <strcmp+0x1ba>
  40a842:	788b      	ldrb	r3, [r1, #2]
  40a844:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40a848:	1ae4      	subs	r4, r4, r3
  40a84a:	d106      	bne.n	40a85a <strcmp+0x1b2>
  40a84c:	b12b      	cbz	r3, 40a85a <strcmp+0x1b2>
  40a84e:	78cb      	ldrb	r3, [r1, #3]
  40a850:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40a854:	1ae4      	subs	r4, r4, r3
  40a856:	d100      	bne.n	40a85a <strcmp+0x1b2>
  40a858:	b91b      	cbnz	r3, 40a862 <strcmp+0x1ba>
  40a85a:	4620      	mov	r0, r4
  40a85c:	f85d 4b10 	ldr.w	r4, [sp], #16
  40a860:	4770      	bx	lr
  40a862:	f101 0104 	add.w	r1, r1, #4
  40a866:	f850 2b04 	ldr.w	r2, [r0], #4
  40a86a:	07cc      	lsls	r4, r1, #31
  40a86c:	f021 0103 	bic.w	r1, r1, #3
  40a870:	f851 3b04 	ldr.w	r3, [r1], #4
  40a874:	d848      	bhi.n	40a908 <strcmp+0x260>
  40a876:	d224      	bcs.n	40a8c2 <strcmp+0x21a>
  40a878:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40a87c:	fa82 f54c 	uadd8	r5, r2, ip
  40a880:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40a884:	faa5 f58c 	sel	r5, r5, ip
  40a888:	d10a      	bne.n	40a8a0 <strcmp+0x1f8>
  40a88a:	b965      	cbnz	r5, 40a8a6 <strcmp+0x1fe>
  40a88c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a890:	ea84 0402 	eor.w	r4, r4, r2
  40a894:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40a898:	d10e      	bne.n	40a8b8 <strcmp+0x210>
  40a89a:	f850 2b04 	ldr.w	r2, [r0], #4
  40a89e:	e7eb      	b.n	40a878 <strcmp+0x1d0>
  40a8a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40a8a4:	e055      	b.n	40a952 <strcmp+0x2aa>
  40a8a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40a8aa:	d14d      	bne.n	40a948 <strcmp+0x2a0>
  40a8ac:	7808      	ldrb	r0, [r1, #0]
  40a8ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40a8b2:	f1c0 0000 	rsb	r0, r0, #0
  40a8b6:	4770      	bx	lr
  40a8b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40a8bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40a8c0:	e047      	b.n	40a952 <strcmp+0x2aa>
  40a8c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40a8c6:	fa82 f54c 	uadd8	r5, r2, ip
  40a8ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40a8ce:	faa5 f58c 	sel	r5, r5, ip
  40a8d2:	d10a      	bne.n	40a8ea <strcmp+0x242>
  40a8d4:	b965      	cbnz	r5, 40a8f0 <strcmp+0x248>
  40a8d6:	f851 3b04 	ldr.w	r3, [r1], #4
  40a8da:	ea84 0402 	eor.w	r4, r4, r2
  40a8de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40a8e2:	d10c      	bne.n	40a8fe <strcmp+0x256>
  40a8e4:	f850 2b04 	ldr.w	r2, [r0], #4
  40a8e8:	e7eb      	b.n	40a8c2 <strcmp+0x21a>
  40a8ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40a8ee:	e030      	b.n	40a952 <strcmp+0x2aa>
  40a8f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40a8f4:	d128      	bne.n	40a948 <strcmp+0x2a0>
  40a8f6:	880b      	ldrh	r3, [r1, #0]
  40a8f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40a8fc:	e029      	b.n	40a952 <strcmp+0x2aa>
  40a8fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40a902:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40a906:	e024      	b.n	40a952 <strcmp+0x2aa>
  40a908:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40a90c:	fa82 f54c 	uadd8	r5, r2, ip
  40a910:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40a914:	faa5 f58c 	sel	r5, r5, ip
  40a918:	d10a      	bne.n	40a930 <strcmp+0x288>
  40a91a:	b965      	cbnz	r5, 40a936 <strcmp+0x28e>
  40a91c:	f851 3b04 	ldr.w	r3, [r1], #4
  40a920:	ea84 0402 	eor.w	r4, r4, r2
  40a924:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40a928:	d109      	bne.n	40a93e <strcmp+0x296>
  40a92a:	f850 2b04 	ldr.w	r2, [r0], #4
  40a92e:	e7eb      	b.n	40a908 <strcmp+0x260>
  40a930:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40a934:	e00d      	b.n	40a952 <strcmp+0x2aa>
  40a936:	f015 0fff 	tst.w	r5, #255	; 0xff
  40a93a:	d105      	bne.n	40a948 <strcmp+0x2a0>
  40a93c:	680b      	ldr	r3, [r1, #0]
  40a93e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40a942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40a946:	e004      	b.n	40a952 <strcmp+0x2aa>
  40a948:	f04f 0000 	mov.w	r0, #0
  40a94c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40a950:	4770      	bx	lr
  40a952:	ba12      	rev	r2, r2
  40a954:	ba1b      	rev	r3, r3
  40a956:	fa82 f44c 	uadd8	r4, r2, ip
  40a95a:	ea82 0403 	eor.w	r4, r2, r3
  40a95e:	faa4 f58c 	sel	r5, r4, ip
  40a962:	fab5 f485 	clz	r4, r5
  40a966:	fa02 f204 	lsl.w	r2, r2, r4
  40a96a:	fa03 f304 	lsl.w	r3, r3, r4
  40a96e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40a972:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40a976:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40a97a:	4770      	bx	lr

0040a97c <strcpy>:
  40a97c:	ea80 0201 	eor.w	r2, r0, r1
  40a980:	4684      	mov	ip, r0
  40a982:	f012 0f03 	tst.w	r2, #3
  40a986:	d14f      	bne.n	40aa28 <strcpy+0xac>
  40a988:	f011 0f03 	tst.w	r1, #3
  40a98c:	d132      	bne.n	40a9f4 <strcpy+0x78>
  40a98e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40a992:	f011 0f04 	tst.w	r1, #4
  40a996:	f851 3b04 	ldr.w	r3, [r1], #4
  40a99a:	d00b      	beq.n	40a9b4 <strcpy+0x38>
  40a99c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40a9a0:	439a      	bics	r2, r3
  40a9a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40a9a6:	bf04      	itt	eq
  40a9a8:	f84c 3b04 	streq.w	r3, [ip], #4
  40a9ac:	f851 3b04 	ldreq.w	r3, [r1], #4
  40a9b0:	d116      	bne.n	40a9e0 <strcpy+0x64>
  40a9b2:	bf00      	nop
  40a9b4:	f851 4b04 	ldr.w	r4, [r1], #4
  40a9b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40a9bc:	439a      	bics	r2, r3
  40a9be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40a9c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40a9c6:	d10b      	bne.n	40a9e0 <strcpy+0x64>
  40a9c8:	f84c 3b04 	str.w	r3, [ip], #4
  40a9cc:	43a2      	bics	r2, r4
  40a9ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40a9d2:	bf04      	itt	eq
  40a9d4:	f851 3b04 	ldreq.w	r3, [r1], #4
  40a9d8:	f84c 4b04 	streq.w	r4, [ip], #4
  40a9dc:	d0ea      	beq.n	40a9b4 <strcpy+0x38>
  40a9de:	4623      	mov	r3, r4
  40a9e0:	f80c 3b01 	strb.w	r3, [ip], #1
  40a9e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  40a9e8:	ea4f 2333 	mov.w	r3, r3, ror #8
  40a9ec:	d1f8      	bne.n	40a9e0 <strcpy+0x64>
  40a9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  40a9f2:	4770      	bx	lr
  40a9f4:	f011 0f01 	tst.w	r1, #1
  40a9f8:	d006      	beq.n	40aa08 <strcpy+0x8c>
  40a9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
  40a9fe:	f80c 2b01 	strb.w	r2, [ip], #1
  40aa02:	2a00      	cmp	r2, #0
  40aa04:	bf08      	it	eq
  40aa06:	4770      	bxeq	lr
  40aa08:	f011 0f02 	tst.w	r1, #2
  40aa0c:	d0bf      	beq.n	40a98e <strcpy+0x12>
  40aa0e:	f831 2b02 	ldrh.w	r2, [r1], #2
  40aa12:	f012 0fff 	tst.w	r2, #255	; 0xff
  40aa16:	bf16      	itet	ne
  40aa18:	f82c 2b02 	strhne.w	r2, [ip], #2
  40aa1c:	f88c 2000 	strbeq.w	r2, [ip]
  40aa20:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40aa24:	d1b3      	bne.n	40a98e <strcpy+0x12>
  40aa26:	4770      	bx	lr
  40aa28:	f811 2b01 	ldrb.w	r2, [r1], #1
  40aa2c:	f80c 2b01 	strb.w	r2, [ip], #1
  40aa30:	2a00      	cmp	r2, #0
  40aa32:	d1f9      	bne.n	40aa28 <strcpy+0xac>
  40aa34:	4770      	bx	lr
  40aa36:	bf00      	nop
	...

0040aa40 <strlen>:
  40aa40:	f890 f000 	pld	[r0]
  40aa44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40aa48:	f020 0107 	bic.w	r1, r0, #7
  40aa4c:	f06f 0c00 	mvn.w	ip, #0
  40aa50:	f010 0407 	ands.w	r4, r0, #7
  40aa54:	f891 f020 	pld	[r1, #32]
  40aa58:	f040 8049 	bne.w	40aaee <strlen+0xae>
  40aa5c:	f04f 0400 	mov.w	r4, #0
  40aa60:	f06f 0007 	mvn.w	r0, #7
  40aa64:	e9d1 2300 	ldrd	r2, r3, [r1]
  40aa68:	f891 f040 	pld	[r1, #64]	; 0x40
  40aa6c:	f100 0008 	add.w	r0, r0, #8
  40aa70:	fa82 f24c 	uadd8	r2, r2, ip
  40aa74:	faa4 f28c 	sel	r2, r4, ip
  40aa78:	fa83 f34c 	uadd8	r3, r3, ip
  40aa7c:	faa2 f38c 	sel	r3, r2, ip
  40aa80:	bb4b      	cbnz	r3, 40aad6 <strlen+0x96>
  40aa82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40aa86:	fa82 f24c 	uadd8	r2, r2, ip
  40aa8a:	f100 0008 	add.w	r0, r0, #8
  40aa8e:	faa4 f28c 	sel	r2, r4, ip
  40aa92:	fa83 f34c 	uadd8	r3, r3, ip
  40aa96:	faa2 f38c 	sel	r3, r2, ip
  40aa9a:	b9e3      	cbnz	r3, 40aad6 <strlen+0x96>
  40aa9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40aaa0:	fa82 f24c 	uadd8	r2, r2, ip
  40aaa4:	f100 0008 	add.w	r0, r0, #8
  40aaa8:	faa4 f28c 	sel	r2, r4, ip
  40aaac:	fa83 f34c 	uadd8	r3, r3, ip
  40aab0:	faa2 f38c 	sel	r3, r2, ip
  40aab4:	b97b      	cbnz	r3, 40aad6 <strlen+0x96>
  40aab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40aaba:	f101 0120 	add.w	r1, r1, #32
  40aabe:	fa82 f24c 	uadd8	r2, r2, ip
  40aac2:	f100 0008 	add.w	r0, r0, #8
  40aac6:	faa4 f28c 	sel	r2, r4, ip
  40aaca:	fa83 f34c 	uadd8	r3, r3, ip
  40aace:	faa2 f38c 	sel	r3, r2, ip
  40aad2:	2b00      	cmp	r3, #0
  40aad4:	d0c6      	beq.n	40aa64 <strlen+0x24>
  40aad6:	2a00      	cmp	r2, #0
  40aad8:	bf04      	itt	eq
  40aada:	3004      	addeq	r0, #4
  40aadc:	461a      	moveq	r2, r3
  40aade:	ba12      	rev	r2, r2
  40aae0:	fab2 f282 	clz	r2, r2
  40aae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40aae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40aaec:	4770      	bx	lr
  40aaee:	e9d1 2300 	ldrd	r2, r3, [r1]
  40aaf2:	f004 0503 	and.w	r5, r4, #3
  40aaf6:	f1c4 0000 	rsb	r0, r4, #0
  40aafa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40aafe:	f014 0f04 	tst.w	r4, #4
  40ab02:	f891 f040 	pld	[r1, #64]	; 0x40
  40ab06:	fa0c f505 	lsl.w	r5, ip, r5
  40ab0a:	ea62 0205 	orn	r2, r2, r5
  40ab0e:	bf1c      	itt	ne
  40ab10:	ea63 0305 	ornne	r3, r3, r5
  40ab14:	4662      	movne	r2, ip
  40ab16:	f04f 0400 	mov.w	r4, #0
  40ab1a:	e7a9      	b.n	40aa70 <strlen+0x30>

0040ab1c <strncmp>:
  40ab1c:	2a00      	cmp	r2, #0
  40ab1e:	d041      	beq.n	40aba4 <strncmp+0x88>
  40ab20:	ea40 0301 	orr.w	r3, r0, r1
  40ab24:	f013 0303 	ands.w	r3, r3, #3
  40ab28:	b4f0      	push	{r4, r5, r6, r7}
  40ab2a:	d125      	bne.n	40ab78 <strncmp+0x5c>
  40ab2c:	2a03      	cmp	r2, #3
  40ab2e:	d923      	bls.n	40ab78 <strncmp+0x5c>
  40ab30:	6804      	ldr	r4, [r0, #0]
  40ab32:	680d      	ldr	r5, [r1, #0]
  40ab34:	42ac      	cmp	r4, r5
  40ab36:	d11f      	bne.n	40ab78 <strncmp+0x5c>
  40ab38:	3a04      	subs	r2, #4
  40ab3a:	d038      	beq.n	40abae <strncmp+0x92>
  40ab3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40ab40:	ea25 0404 	bic.w	r4, r5, r4
  40ab44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40ab48:	d12e      	bne.n	40aba8 <strncmp+0x8c>
  40ab4a:	3004      	adds	r0, #4
  40ab4c:	3104      	adds	r1, #4
  40ab4e:	e00f      	b.n	40ab70 <strncmp+0x54>
  40ab50:	f850 3b04 	ldr.w	r3, [r0], #4
  40ab54:	680e      	ldr	r6, [r1, #0]
  40ab56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  40ab5a:	42b3      	cmp	r3, r6
  40ab5c:	ea24 0403 	bic.w	r4, r4, r3
  40ab60:	f101 0104 	add.w	r1, r1, #4
  40ab64:	d126      	bne.n	40abb4 <strncmp+0x98>
  40ab66:	3a04      	subs	r2, #4
  40ab68:	d021      	beq.n	40abae <strncmp+0x92>
  40ab6a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40ab6e:	d11b      	bne.n	40aba8 <strncmp+0x8c>
  40ab70:	2a03      	cmp	r2, #3
  40ab72:	4607      	mov	r7, r0
  40ab74:	460d      	mov	r5, r1
  40ab76:	d8eb      	bhi.n	40ab50 <strncmp+0x34>
  40ab78:	7805      	ldrb	r5, [r0, #0]
  40ab7a:	780c      	ldrb	r4, [r1, #0]
  40ab7c:	42ac      	cmp	r4, r5
  40ab7e:	f102 33ff 	add.w	r3, r2, #4294967295
  40ab82:	d11a      	bne.n	40abba <strncmp+0x9e>
  40ab84:	b183      	cbz	r3, 40aba8 <strncmp+0x8c>
  40ab86:	b914      	cbnz	r4, 40ab8e <strncmp+0x72>
  40ab88:	e00e      	b.n	40aba8 <strncmp+0x8c>
  40ab8a:	b16b      	cbz	r3, 40aba8 <strncmp+0x8c>
  40ab8c:	b17a      	cbz	r2, 40abae <strncmp+0x92>
  40ab8e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40ab92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40ab96:	42a2      	cmp	r2, r4
  40ab98:	f103 33ff 	add.w	r3, r3, #4294967295
  40ab9c:	d0f5      	beq.n	40ab8a <strncmp+0x6e>
  40ab9e:	1b10      	subs	r0, r2, r4
  40aba0:	bcf0      	pop	{r4, r5, r6, r7}
  40aba2:	4770      	bx	lr
  40aba4:	4610      	mov	r0, r2
  40aba6:	4770      	bx	lr
  40aba8:	2000      	movs	r0, #0
  40abaa:	bcf0      	pop	{r4, r5, r6, r7}
  40abac:	4770      	bx	lr
  40abae:	4610      	mov	r0, r2
  40abb0:	bcf0      	pop	{r4, r5, r6, r7}
  40abb2:	4770      	bx	lr
  40abb4:	4629      	mov	r1, r5
  40abb6:	4638      	mov	r0, r7
  40abb8:	e7de      	b.n	40ab78 <strncmp+0x5c>
  40abba:	462a      	mov	r2, r5
  40abbc:	e7ef      	b.n	40ab9e <strncmp+0x82>
  40abbe:	bf00      	nop

0040abc0 <strncpy>:
  40abc0:	ea40 0301 	orr.w	r3, r0, r1
  40abc4:	f013 0f03 	tst.w	r3, #3
  40abc8:	b470      	push	{r4, r5, r6}
  40abca:	4603      	mov	r3, r0
  40abcc:	d024      	beq.n	40ac18 <strncpy+0x58>
  40abce:	b1a2      	cbz	r2, 40abfa <strncpy+0x3a>
  40abd0:	780c      	ldrb	r4, [r1, #0]
  40abd2:	701c      	strb	r4, [r3, #0]
  40abd4:	3a01      	subs	r2, #1
  40abd6:	3301      	adds	r3, #1
  40abd8:	3101      	adds	r1, #1
  40abda:	b13c      	cbz	r4, 40abec <strncpy+0x2c>
  40abdc:	b16a      	cbz	r2, 40abfa <strncpy+0x3a>
  40abde:	f811 4b01 	ldrb.w	r4, [r1], #1
  40abe2:	f803 4b01 	strb.w	r4, [r3], #1
  40abe6:	3a01      	subs	r2, #1
  40abe8:	2c00      	cmp	r4, #0
  40abea:	d1f7      	bne.n	40abdc <strncpy+0x1c>
  40abec:	b12a      	cbz	r2, 40abfa <strncpy+0x3a>
  40abee:	441a      	add	r2, r3
  40abf0:	2100      	movs	r1, #0
  40abf2:	f803 1b01 	strb.w	r1, [r3], #1
  40abf6:	429a      	cmp	r2, r3
  40abf8:	d1fb      	bne.n	40abf2 <strncpy+0x32>
  40abfa:	bc70      	pop	{r4, r5, r6}
  40abfc:	4770      	bx	lr
  40abfe:	460e      	mov	r6, r1
  40ac00:	f851 5b04 	ldr.w	r5, [r1], #4
  40ac04:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  40ac08:	ea24 0405 	bic.w	r4, r4, r5
  40ac0c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40ac10:	d105      	bne.n	40ac1e <strncpy+0x5e>
  40ac12:	f843 5b04 	str.w	r5, [r3], #4
  40ac16:	3a04      	subs	r2, #4
  40ac18:	2a03      	cmp	r2, #3
  40ac1a:	d8f0      	bhi.n	40abfe <strncpy+0x3e>
  40ac1c:	e7d7      	b.n	40abce <strncpy+0xe>
  40ac1e:	4631      	mov	r1, r6
  40ac20:	e7d6      	b.n	40abd0 <strncpy+0x10>
  40ac22:	bf00      	nop

0040ac24 <register_fini>:
  40ac24:	4b02      	ldr	r3, [pc, #8]	; (40ac30 <register_fini+0xc>)
  40ac26:	b113      	cbz	r3, 40ac2e <register_fini+0xa>
  40ac28:	4802      	ldr	r0, [pc, #8]	; (40ac34 <register_fini+0x10>)
  40ac2a:	f000 b805 	b.w	40ac38 <atexit>
  40ac2e:	4770      	bx	lr
  40ac30:	00000000 	.word	0x00000000
  40ac34:	0040ac45 	.word	0x0040ac45

0040ac38 <atexit>:
  40ac38:	2300      	movs	r3, #0
  40ac3a:	4601      	mov	r1, r0
  40ac3c:	461a      	mov	r2, r3
  40ac3e:	4618      	mov	r0, r3
  40ac40:	f000 b81e 	b.w	40ac80 <__register_exitproc>

0040ac44 <__libc_fini_array>:
  40ac44:	b538      	push	{r3, r4, r5, lr}
  40ac46:	4c0a      	ldr	r4, [pc, #40]	; (40ac70 <__libc_fini_array+0x2c>)
  40ac48:	4d0a      	ldr	r5, [pc, #40]	; (40ac74 <__libc_fini_array+0x30>)
  40ac4a:	1b64      	subs	r4, r4, r5
  40ac4c:	10a4      	asrs	r4, r4, #2
  40ac4e:	d00a      	beq.n	40ac66 <__libc_fini_array+0x22>
  40ac50:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40ac54:	3b01      	subs	r3, #1
  40ac56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40ac5a:	3c01      	subs	r4, #1
  40ac5c:	f855 3904 	ldr.w	r3, [r5], #-4
  40ac60:	4798      	blx	r3
  40ac62:	2c00      	cmp	r4, #0
  40ac64:	d1f9      	bne.n	40ac5a <__libc_fini_array+0x16>
  40ac66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ac6a:	f001 b84d 	b.w	40bd08 <_fini>
  40ac6e:	bf00      	nop
  40ac70:	0040bd18 	.word	0x0040bd18
  40ac74:	0040bd14 	.word	0x0040bd14

0040ac78 <__retarget_lock_acquire_recursive>:
  40ac78:	4770      	bx	lr
  40ac7a:	bf00      	nop

0040ac7c <__retarget_lock_release_recursive>:
  40ac7c:	4770      	bx	lr
  40ac7e:	bf00      	nop

0040ac80 <__register_exitproc>:
  40ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ac84:	4d2c      	ldr	r5, [pc, #176]	; (40ad38 <__register_exitproc+0xb8>)
  40ac86:	4606      	mov	r6, r0
  40ac88:	6828      	ldr	r0, [r5, #0]
  40ac8a:	4698      	mov	r8, r3
  40ac8c:	460f      	mov	r7, r1
  40ac8e:	4691      	mov	r9, r2
  40ac90:	f7ff fff2 	bl	40ac78 <__retarget_lock_acquire_recursive>
  40ac94:	4b29      	ldr	r3, [pc, #164]	; (40ad3c <__register_exitproc+0xbc>)
  40ac96:	681c      	ldr	r4, [r3, #0]
  40ac98:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40ac9c:	2b00      	cmp	r3, #0
  40ac9e:	d03e      	beq.n	40ad1e <__register_exitproc+0x9e>
  40aca0:	685a      	ldr	r2, [r3, #4]
  40aca2:	2a1f      	cmp	r2, #31
  40aca4:	dc1c      	bgt.n	40ace0 <__register_exitproc+0x60>
  40aca6:	f102 0e01 	add.w	lr, r2, #1
  40acaa:	b176      	cbz	r6, 40acca <__register_exitproc+0x4a>
  40acac:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40acb0:	2401      	movs	r4, #1
  40acb2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40acb6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40acba:	4094      	lsls	r4, r2
  40acbc:	4320      	orrs	r0, r4
  40acbe:	2e02      	cmp	r6, #2
  40acc0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40acc4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40acc8:	d023      	beq.n	40ad12 <__register_exitproc+0x92>
  40acca:	3202      	adds	r2, #2
  40accc:	f8c3 e004 	str.w	lr, [r3, #4]
  40acd0:	6828      	ldr	r0, [r5, #0]
  40acd2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40acd6:	f7ff ffd1 	bl	40ac7c <__retarget_lock_release_recursive>
  40acda:	2000      	movs	r0, #0
  40acdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ace0:	4b17      	ldr	r3, [pc, #92]	; (40ad40 <__register_exitproc+0xc0>)
  40ace2:	b30b      	cbz	r3, 40ad28 <__register_exitproc+0xa8>
  40ace4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40ace8:	f3af 8000 	nop.w
  40acec:	4603      	mov	r3, r0
  40acee:	b1d8      	cbz	r0, 40ad28 <__register_exitproc+0xa8>
  40acf0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40acf4:	6002      	str	r2, [r0, #0]
  40acf6:	2100      	movs	r1, #0
  40acf8:	6041      	str	r1, [r0, #4]
  40acfa:	460a      	mov	r2, r1
  40acfc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40ad00:	f04f 0e01 	mov.w	lr, #1
  40ad04:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40ad08:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40ad0c:	2e00      	cmp	r6, #0
  40ad0e:	d0dc      	beq.n	40acca <__register_exitproc+0x4a>
  40ad10:	e7cc      	b.n	40acac <__register_exitproc+0x2c>
  40ad12:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40ad16:	430c      	orrs	r4, r1
  40ad18:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40ad1c:	e7d5      	b.n	40acca <__register_exitproc+0x4a>
  40ad1e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40ad22:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40ad26:	e7bb      	b.n	40aca0 <__register_exitproc+0x20>
  40ad28:	6828      	ldr	r0, [r5, #0]
  40ad2a:	f7ff ffa7 	bl	40ac7c <__retarget_lock_release_recursive>
  40ad2e:	f04f 30ff 	mov.w	r0, #4294967295
  40ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ad36:	bf00      	nop
  40ad38:	20400518 	.word	0x20400518
  40ad3c:	0040bcf0 	.word	0x0040bcf0
  40ad40:	00000000 	.word	0x00000000

0040ad44 <s_value>:
  40ad44:	3b9aca00 05f5e100 00989680 000f4240     ...;........@B..
  40ad54:	000186a0 00002710 000003e8 00000064     .....'......d...
  40ad64:	0000000a 00000001 00007830 00006425     ........0x..%d..
  40ad74:	203a7325 00000000                       %s: ....

0040ad7c <s_value>:
  40ad7c:	3b9aca00 05f5e100 00989680 000f4240     ...;........@B..
  40ad8c:	000186a0 00002710 000003e8 00000064     .....'......d...
  40ad9c:	0000000a 00000001 252e6425 00000064     ........%d.%d...
  40adac:	656c6966 00000000 4d096425 00000942     file....%d.MB...
  40adbc:	6b096425 00000942 252e6425 64252e64     %d.kB...%d.%d.%d
  40adcc:	3a642509 00096425 5249443c 0000003e     .%d:%d..<DIR>...
  40addc:	00000909 0000002f 00002e2e 00000009     ..../...........
  40adec:	74726f43 003a7865 00003e20 4f525245     Cortex:. >..ERRO
  40adfc:	524f524f 524f524f 524f524f 000a524f     OROROROROROROR..
  40ae0c:	0000736c 63756f74 00000068 00006d72     ls..touch...rm..
  40ae1c:	00006463 00746163 006e7572 00786568     cd..cat.run.hex.
  40ae2c:	6f727245 636f2072 65727563 00000a64     Error occured...
  40ae3c:	64726143 6e6f6320 7463656e 000a6465     Card connected..
  40ae4c:	6e756f4d 72652074 0a726f72 00000000     Mount error.....
  40ae5c:	64726143 73696420 6e6e6f63 65746365     Card disconnecte
  40ae6c:	00000a64 63656843 6166206b 72756c69     d...Check failur
  40ae7c:	69460a65 093a656c 4c0a7325 3a656e69     e.File:.%s.Line:
  40ae8c:	0a642509 00000000 6e616843 206c656e     .%d.....Channel 
  40ae9c:	0a642523 00000000 63206f4e 6e6e6168     #%d.....No chann
  40aeac:	61206c65 6c696176 656c6261 00000000     el available....
  40aebc:	442f2e2e 65766972 532f7372 6372756f     ../Drivers/Sourc
  40aecc:	6d642f65 00632e61 20414d44 6f727245     e/dma.c.DMA Erro
  40aedc:	6e6f2072 61686320 6c656e6e 0a642520     r on channel %d.
  40aeec:	00000000 74617453 63207375 3a65646f     ....Status code:
  40aefc:	00000020 442f2e2e 65766972 532f7372      ...../Drivers/S
  40af0c:	6372756f 73682f65 2e69636d 00000063     ource/hsmci.c...
  40af1c:	4620205b 204c4941 4d43205d 20642544     [  FAIL ] CMD%d 
  40af2c:	00000000 74617473 203a7375 00000000     ....status: ....
  40af3c:	5241575b 474e494e 5243205d 72652043     [WARNING] CRC er
  40af4c:	0a726f72 00000000                       ror.....

0040af54 <LfnOfs>:
  40af54:	07050301 12100e09 1c181614 0000001e     ................

0040af64 <ExCvt>:
  40af64:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
  40af74:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
  40af84:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
  40af94:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40afa4:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  40afb4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40afc4:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  40afd4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0040afe4 <badchr.7295>:
  40afe4:	3b2c2e2b 2f5d5b3d 3a2a225c 7c3f3e3c     +.,;=[]/\"*:<>?|
  40aff4:	0000007f                                ....

0040aff8 <defopt.7334>:
  40aff8:	00000007 00000000 00000000 00000000     ................
  40b008:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40b018:	00005d5b 4e204f4e 20454d41 46202020     []..NO NAME    F
  40b028:	32335441 00202020 4e204f4e 20454d41     AT32   .NO NAME 
  40b038:	46202020 20205441 00202020 4d90feeb        FAT     ....M
  40b048:	534f4453 00302e35                       SDOS5.0.

0040b050 <uc437>:
  40b050:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40b060:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40b070:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40b080:	00d600ff 00a200dc 00a500a3 019220a7     ............. ..
  40b090:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40b0a0:	231000bf 00bd00ac 00a100bc 00bb00ab     ...#............
  40b0b0:	25922591 25022593 25612524 25562562     .%.%.%.%$%a%b%V%
  40b0c0:	25632555 25572551 255c255d 2510255b     U%c%Q%W%]%\%[%.%
  40b0d0:	25342514 251c252c 253c2500 255f255e     .%4%,%.%.%<%^%_%
  40b0e0:	2554255a 25662569 25502560 2567256c     Z%T%i%f%`%P%l%g%
  40b0f0:	25642568 25592565 25522558 256b2553     h%d%e%Y%X%R%S%k%
  40b100:	2518256a 2588250c 258c2584 25802590     j%.%.%.%.%.%.%.%
  40b110:	00df03b1 03c00393 03c303a3 03c400b5     ................
  40b120:	039803a6 03b403a9 03c6221e 222903b5     ........."....)"
  40b130:	00b12261 22642265 23212320 224800f7     a"..e"d" #!#..H"
  40b140:	221900b0 221a00b7 00b2207f 00a025a0     ..."...". ...%..

0040b150 <cvt2.4405>:
  40b150:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
  40b160:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
  40b170:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
  40b180:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
  40b190:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
  40b1a0:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
  40b1b0:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
  40b1c0:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
  40b1d0:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
  40b1e0:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
  40b1f0:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
  40b200:	2d000164 ff410826 0000031a              d..-&.A.....

0040b20c <cvt1.4404>:
  40b20c:	031a0061 031700e0 030700f8 000100ff     a...............
  40b21c:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
  40b22c:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
  40b23c:	01840182 01860184 01870187 018a0189     ................
  40b24c:	018b018b 018e018d 0190018f 01910191     ................
  40b25c:	01940193 019601f6 01980197 023d0198     ..............=.
  40b26c:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
  40b27c:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
  40b28c:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
  40b29c:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
  40b2ac:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
  40b2bc:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
  40b2cc:	01ca01cb 011001cd 000101dd 01de018e     ................
  40b2dc:	01f30112 01f10003 01f401f4 012801f8     ..............(.
  40b2ec:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
  40b2fc:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
  40b30c:	01810040 02550186 018a0189 018f0258     @.....U.....X...
  40b31c:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
  40b32c:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
  40b33c:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
  40b34c:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
  40b35c:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
  40b36c:	01a90282 02850284 02870286 024401ae     ..............D.
  40b37c:	01b201b1 028d0245 028f028e 02910290     ....E...........
  40b38c:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
  40b39c:	03880386 038a0389 031103b1 000203c2     ................
  40b3ac:	03a303a3 030803c4 000303cc 038e038c     ................
  40b3bc:	03d8038f 03f20118 03f9000a 03f403f3     ................
  40b3cc:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
  40b3dc:	04500320 04600710 048a0122 04c10136      .P...`."...6...
  40b3ec:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
  40b3fc:	00000000 676f7250 6d6d6172 20676e69     ....Programming 
  40b40c:	72617473 0a646574 00000000 676f7250     started.....Prog
  40b41c:	6d6d6172 20676e69 63637573 0a737365     ramming success.
  40b42c:	00000000 6f6d654d 6d207972 67616e61     ....Memory manag
  40b43c:	61662065 20746c75 646e6168 2072656c     e fault handler 
  40b44c:	67697274 65726567 000a0a64 52414d4d     triggered...MMAR
  40b45c:	494c4156 64250944 0000000a 50534c4d     VALID.%d....MLSP
  40b46c:	09525245 000a6425 4b54534d 09525245     ERR.%d..MSTKERR.
  40b47c:	000a6425 534e554d 52454b54 64250952     %d..MUNSTKERR.%d
  40b48c:	0000000a 43434144 4c4f4956 0a642509     ....DACCVIOL.%d.
  40b49c:	00000000 43434149 4c4f4956 0a642509     ....IACCVIOL.%d.
  40b4ac:	00000000 20737542 6c756166 61682074     ....Bus fault ha
  40b4bc:	656c646e 72742072 65676769 0a646572     ndler triggered.
  40b4cc:	0000000a 52414642 494c4156 64250944     ....BFARVALID.%d
  40b4dc:	0000000a 4550534c 25095252 00000a64     ....LSPERR.%d...
  40b4ec:	454b5453 25095252 00000a64 54534e55     STKERR.%d...UNST
  40b4fc:	5252454b 0a642509 00000000 52504d49     KERR.%d.....IMPR
  40b50c:	53494345 09525245 000a6425 43455250     ECISERR.%d..PREC
  40b51c:	52455349 64250952 0000000a 53554249     ISERR.%d....IBUS
  40b52c:	09525245 000a6425 67617355 61662065     ERR.%d..Usage fa
  40b53c:	20746c75 646e6168 2072656c 67697274     ult handler trig
  40b54c:	65726567 000a0a64 42564944 52455a59     gered...DIVBYZER
  40b55c:	2509094f 00000a64 4c414e55 454e4749     O..%d...UNALIGNE
  40b56c:	25090944 00000a64 50434f4e 25090909     D..%d...NOCP...%
  40b57c:	00000a64 50564e49 09090943 000a6425     d...INVPC...%d..
  40b58c:	53564e49 45544154 64250909 0000000a     INVSTATE..%d....
  40b59c:	45444e55 454e4946 09525453 000a6425     UNDEFINESTR.%d..
  40b5ac:	75420a0a 00203a73 6f6d654d 203a7972     ..Bus: .Memory: 
  40b5bc:	00000000 67617355 00203a65 4b2f2e2e     ....Usage: .../K
  40b5cc:	656e7265 6f532f6c 65637275 73696c2f     ernel/Source/lis
  40b5dc:	00632e74 4b2f2e2e 656e7265 6f532f6c     t.c.../Kernel/So
  40b5ec:	65637275 6863732f 6c756465 632e7265     urce/scheduler.c
  40b5fc:	00000000 6e726157 3a676e69 61745320     ....Warning: Sta
  40b60c:	6f206b63 66726576 20776f6c 00206e6f     ck overflow on .
  40b61c:	72687420 0a646165 00000000 746e7552      thread.....Runt
  40b62c:	73656d69 61745309 43096b63 000a5550     imes.Stack.CPU..
  40b63c:	00090909 43203a20 00005550 4d415244     .... : CPU..DRAM
  40b64c:	6e614220 0030206b 4d415244 6e614220      Bank 0.DRAM Ban
  40b65c:	0031206b 4d415253 00000000 09096425     k 1.SRAM....%d..
  40b66c:	00000000 25203a20 00000073 4b2f2e2e     .... : %s...../K
  40b67c:	656e7265 6f532f6c 65637275 7268742f     ernel/Source/thr
  40b68c:	2e646165 00000063 656c6449 00000000     ead.c...Idle....
  40b69c:	4d2f2e2e 726f6d65 6f532f79 65637275     ../Memory/Source
  40b6ac:	6e79642f 63696d61 6d656d5f 2e79726f     /dynamic_memory.
  40b6bc:	00000063 4620205b 204c4941 6f42095d     c...[  FAIL ].Bo
  40b6cc:	7420746f 67676972 66207265 656c6961     ot trigger faile
  40b6dc:	00000a64 4620205b 204c4941 6553095d     d...[  FAIL ].Se
  40b6ec:	6e69646e 6f672067 206f7420 454c4449     nding go to IDLE
  40b6fc:	6d6f6320 646e616d 444d4320 00000a30      command CMD0...
  40b70c:	4620205b 204c4941 4d43095d 000a3844     [  FAIL ].CMD8..
  40b71c:	4620205b 204c4941 4d43095d 77203844     [  FAIL ].CMD8 w
  40b72c:	20687469 00000000 70736572 65736e6f     ith ....response
  40b73c:	0000203a 4620205b 204c4941 4d43095d     : ..[  FAIL ].CM
  40b74c:	000a3244 4620205b 204c4941 4341095d     D2..[  FAIL ].AC
  40b75c:	3134444d 73657220 736e6f70 00203a65     MD41 response: .
  40b76c:	4620205b 204c4941 4d43095d 000a3344     [  FAIL ].CMD3..
  40b77c:	4620205b 204c4941 4d43095d 000a3744     [  FAIL ].CMD7..
  40b78c:	444d4341 74732036 73757461 00203a20     ACMD6 status : .
  40b79c:	30203a20 00000062 00000030 00000031      : 0b...0...1...
  40b7ac:	4620205b 204c4941 4d43095d 20313544     [  FAIL ].CMD51 
  40b7bc:	6f727265 00000a72 5241575b 474e494e     error...[WARNING
  40b7cc:	6948095d 73206867 64656570 72726520     ].High speed err
  40b7dc:	000a726f 4620205b 204c4941 6143095d     or..[  FAIL ].Ca
  40b7ec:	69206472 75622073 64207973 6e697275     rd is busy durin
  40b7fc:	4d432067 000a3644 70736552 65736e6f     g CMD6..Response
  40b80c:	3a315220 00000020 70707553 3a74726f      R1: ...Support:
  40b81c:	00000020 74617453 203a7375 00000000      ...Status: ....
  40b82c:	79737542 0000203a 4620205b 204c4941     Busy: ..[  FAIL 
  40b83c:	4d43095d 000a3944 20445343 75727473     ].CMD9..CSD stru
  40b84c:	72757463 00000065 43414154 00000000     cture...TAAC....
  40b85c:	4341534e 00000000 6e617254 72656673     NSAC....Transfer
  40b86c:	65707320 00006465 00434343 64616552      speed..CCC.Read
  40b87c:	6f6c6220 6c206b63 74676e65 00000068      block length...
  40b88c:	64616552 6f6c6220 70206b63 69747261     Read block parti
  40b89c:	00006c61 74697257 6c622065 206b636f     al..Write block 
  40b8ac:	6173696d 6e67696c 00006465 64616552     misaligned..Read
  40b8bc:	6f6c6220 6d206b63 6c617369 656e6769      block misaligne
  40b8cc:	00000064 20525344 6c706d69 6e656d65     d...DSR implemen
  40b8dc:	00646574 64726143 7a697320 00000065     ted.Card size...
  40b8ec:	20444456 64616572 72756320 746e6572     VDD read current
  40b8fc:	6e696d20 00000000 20444456 64616572      min....VDD read
  40b90c:	72756320 746e6572 78616d20 00000000      current max....
  40b91c:	20444456 74697277 75632065 6e657272     VDD write curren
  40b92c:	696d2074 0000006e 20444456 74697277     t min...VDD writ
  40b93c:	75632065 6e657272 616d2074 00000078     e current max...
  40b94c:	64726143 7a697320 756d2065 7069746c     Card size multip
  40b95c:	6163696c 6e6f6974 00000000 73617245     lication....Eras
  40b96c:	6c622065 206b636f 62616e65 0000656c     e block enable..
  40b97c:	74636553 7320726f 00657a69 74697257     Sector size.Writ
  40b98c:	72702065 6365746f 6e6f6974 6f726720     e protection gro
  40b99c:	73207075 00657a69 74697257 72702065     up size.Write pr
  40b9ac:	6365746f 6e6f6974 6f726720 65207075     otection group e
  40b9bc:	6c62616e 00000065 74697257 70732065     nable...Write sp
  40b9cc:	20646565 74636166 0000726f 74697257     eed factor..Writ
  40b9dc:	6c622065 206b636f 676e656c 00006874     e block length..
  40b9ec:	74697257 6c622065 206b636f 74726170     Write block part
  40b9fc:	006c6169 656c6946 726f6620 2074616d     ial.File format 
  40ba0c:	756f7267 00000070 79706f43 616c6620     group...Copy fla
  40ba1c:	00000067 6d726550 6e656e61 72772074     g...Permanent wr
  40ba2c:	20657469 746f7270 69746365 00006e6f     ite protection..
  40ba3c:	706d6554 7261726f 20796c69 74697277     Temporarily writ
  40ba4c:	72702065 6365746f 6e6f6974 00000000     e protection....
  40ba5c:	656c6946 726f6620 0074616d 64726143     File format.Card
  40ba6c:	70797420 00203a65 43484453 0000000a      type: .SDHC....
  40ba7c:	43534453 0000000a 64726143 6d616e20     SDSC....Card nam
  40ba8c:	25203a65 00000a73 64726143 7a697320     e: %s...Card siz
  40ba9c:	25203a65 79624d64 000a6574 6e697355     e: %dMbyte..Usin
  40baac:	2d342067 20746962 0a737562 00000000     g 4-bit bus.....
  40babc:	6e697355 2d312067 20746962 0a737562     Using 1-bit bus.
  40bacc:	00000000 6e697355 69682067 73206867     ....Using high s
  40badc:	64656570 00000020 6e697355 65642067     peed ...Using de
  40baec:	6c756166 70732074 20646565 00000000     fault speed ....
  40bafc:	64252040 0a7a484d 00000000 74617453     @ %dMHz.....Stat
  40bb0c:	72207375 203a6765 00000000 4f525245     us reg: ....ERRO
  40bb1c:	00000a52 4e524157 0a474e49 00000000     R...WARNING.....
  40bb2c:	00000a78 61746164 0000203a 6e72654b     x...data: ..Kern
  40bb3c:	73206c65 65636375 75667373 20796c6c     el successfully 
  40bb4c:	72617473 0a646574 0000000a 6e696c62     started.....blin
  40bb5c:	0000006b 746e7572 00656d69 636c6577     k...runtime.welc
  40bb6c:	00656d6f 636f6c43 7375206b 656c6261     ome.Clock usable
  40bb7c:	0000000a 646e6148 3a72656c 6f6f5220     ....Handler: Roo
  40bb8c:	75682074 000a0a62 746f6f52 62756820     t hub...Root hub
  40bb9c:	6572203a 0a746573 00000000 746f6f52     : reset.....Root
  40bbac:	62756820 6964203a 6e6f6373 7463656e      hub: disconnect
  40bbbc:	0000000a 746f6f52 62756820 6f63203a     ....Root hub: co
  40bbcc:	63656e6e 6e6f6974 0000000a 746f6f52     nnection....Root
  40bbdc:	62756820 6177203a 7075656b 206f7420      hub: wakeup to 
  40bbec:	65776f70 00000a72 746f6f52 62756820     power...Root hub
  40bbfc:	6572203a 656d7573 0000000a 646e6148     : resume....Hand
  40bc0c:	3a72656c 70695020 00000a65 646e6148     ler: Pipe...Hand
  40bc1c:	3a72656c 414d4420 0000000a 646e6148     ler: DMA....Hand
  40bc2c:	3a72656c 464f5320 0000000a 65706950     ler: SOF....Pipe
  40bc3c:	72657a20 6f63206f 6769666e 20657275      zero configure 
  40bc4c:	63637573 0a737365 00000000 2d2d2d0a     success......---
  40bc5c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40bc6c:	2d2d2d2d 2d2d2d2d 51524920 2d2d2d20     -------- IRQ ---
  40bc7c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40bc8c:	2d2d2d2d 2d2d2d2d 0000000a 74736f48     --------....Host
  40bc9c:	746e6920 75727265 72207470 73696765      interrupt regis
  40bcac:	00726574 2d2d2d2d 2d2d2d2d 2d2d2d2d     ter.------------
  40bcbc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40bccc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40bcdc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0a2d2d2d     ---------------.
  40bcec:	00000a0a                                ....

0040bcf0 <_global_impure_ptr>:
  40bcf0:	204000f0                                ..@ 

0040bcf4 <_init>:
  40bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bcf6:	bf00      	nop
  40bcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bcfa:	bc08      	pop	{r3}
  40bcfc:	469e      	mov	lr, r3
  40bcfe:	4770      	bx	lr

0040bd00 <__init_array_start>:
  40bd00:	0040ac25 	.word	0x0040ac25

0040bd04 <__frame_dummy_init_array_entry>:
  40bd04:	0040018d                                ..@.

0040bd08 <_fini>:
  40bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bd0a:	bf00      	nop
  40bd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40bd0e:	bc08      	pop	{r3}
  40bd10:	469e      	mov	lr, r3
  40bd12:	4770      	bx	lr

0040bd14 <__fini_array_start>:
  40bd14:	00400169 	.word	0x00400169
